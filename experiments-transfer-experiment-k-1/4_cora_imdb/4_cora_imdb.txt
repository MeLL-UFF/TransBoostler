Starting experiment 4_cora_imdb 

Loading pre-trained trees.
Starting experiments for fasttext using euclidean 

Run: 1

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.3797781467437744
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5194065415903802;  // std dev = 10.509, 493.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048754;  // std dev = 1.46e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.46171744590736513;  // std dev = 10.227, 480.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.34993331036622716;  // std dev = 10.591, 497.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936058;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.27639108414789254;  // std dev = 10.509, 493.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783533;  // std dev = 3.65e-07, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22857427443679812;  // std dev = 10.204, 479.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926144;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1443019228242638;  // std dev = 10.631, 499.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.50e-07, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.09803864533476207;  // std dev = 10.788, 507.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109183;  // std dev = 1.76e-07, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08025748938637786;  // std dev = 10.691, 502.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333761;  // std dev = 0.000, 453.000 (wgt'ed) examples reached here.  /* #neg=453 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.056838047601875746;  // std dev = 10.750, 505.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0684269778442035;  // std dev = 0.000, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06427060431310429;  // std dev = 10.424, 489.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202544;  // std dev = 2.34e-07, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
Inference time using transfer learning 1.1644725799560547
Parameter learned model CLL:-0.299006 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.509, 167, 326], 'false,true': [0.0, 0, 0], 'false,false': [1.46e-07, 483, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.227, 154, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 463, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.591, 171, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 502, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.509, 167, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.65e-07, 514, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.204, 153, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 497, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.631, 173, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.5e-07, 508, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.788, 181, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.76e-07, 461, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.691, 176, 326], 'false,true': [0.0, 453, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.75, 179, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 475, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.424, 163, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.34e-07, 465, 0]}]
{'': [0.22399598434883772, 4.413308917764597e-17], 'true': [nan, 0.22399598434883772], 'true,false': [nan, 0.22399598434883772], 'true,false,false': [nan, 0.22399598434883772], 'false': [nan, 4.413308917764597e-17]}
{'': [0.2178993055555627, -1.3620014643349651e-16], 'true': [nan, 0.2178993055555627], 'true,false': [nan, 0.2178993055555627], 'true,false,false': [0.2178993055555627, nan], 'false': [nan, -1.3620014643349651e-16]}
{'': [0.22568408438558848, -7.077118882072711e-18], 'true': [nan, 0.22568408438558848], 'true,false': [nan, 0.22568408438558848], 'true,false,false': [nan, 0.22568408438558848], 'false': [nan, -7.077118882072711e-18]}
{'': [0.22399598434882667, 2.5919603687746847e-16], 'true': [nan, 0.22399598434882667], 'true,false': [0.22399598434882667, nan], 'false': [nan, 2.5919603687746847e-16]}
{'': [0.21738921988659535, -2.859326904467204e-17], 'true': [nan, 0.21738921988659535], 'true,false': [nan, 0.21738921988659535], 'true,false,false': [nan, 0.21738921988659535], 'false': [nan, -2.859326904467204e-17]}
{'': [0.22649708234103472, 4.4583759256600775e-17], 'true': [nan, 0.22649708234103472], 'true,false': [0.22649708234103472, nan], 'false': [nan, 4.4583759256600775e-17]}
{'': [0.22955156409867614, 6.743220106183163e-17], 'true': [nan, 0.22955156409867614], 'true,false': [0.22955156409867614, nan], 'false': [nan, 6.743220106183163e-17]}
{'': [0.2276789257313372, -5.391811598621069e-17], 'true': [nan, 0.2276789257313372], 'true,false': [nan, 0.2276789257313372], 'true,false,false': [nan, 0.2276789257313372], 'false': [-5.391811598621069e-17, nan]}
{'': [0.22881678266836447, -1.2154020480106978e-16], 'true': [nan, 0.22881678266836447], 'true,false': [0.22881678266836447, nan], 'false': [nan, -1.2154020480106978e-16]}
{'': [0.22222222222222465, 1.1794627401394135e-16], 'true': [nan, 0.22222222222222465], 'true,false': [nan, 0.22222222222222465], 'true,false,false': [nan, 0.22222222222222465], 'false': [nan, 1.1794627401394135e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5770223140716553
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048827;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else return -0.1418510649004873;  // std dev = 2.60e-07, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839136;  // std dev = 2.98e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.1254446385283923;  // std dev = 0.000, 444.000 (wgt'ed) examples reached here.  /* #neg=444 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360649;  // std dev = 2.11e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.11231637819360593;  // std dev = 0.000, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.10159632948783556;  // std dev = 3.10e-07, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926079;  // std dev = 6.66e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.09269127618926137;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5.96e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 446.000 (wgt'ed) examples reached here.  /* #neg=446 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109155;  // std dev = 7.74e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.07877675473109205;  // std dev = 1.30e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333692;  // std dev = 5.37e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.07324622576333696;  // std dev = 1.43e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420262;  // std dev = 3.65e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.06842697784420357;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.0641918400820254;  // std dev = 2.43e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
Inference time using transfer learning 1.0221312046051025
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.5770223140716553 

Total Inference Time : 1.4756855964660645 

Total revision time: 8.461177587509155
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.473037004470825 

Total Inference Time : 1.4756855964660645 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1318962574005127
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.51802673550684;  // std dev = 10.498, 491.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004875;  // std dev = 1.84e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.466329786279362;  // std dev = 10.126, 474.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.38120887889150756;  // std dev = 10.056, 471.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936059;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2933727890872569;  // std dev = 10.079, 472.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783565;  // std dev = 2.89e-07, 447.000 (wgt'ed) examples reached here.  /* #neg=447 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19643158120721965;  // std dev = 10.477, 490.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926144;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.11774004006819702;  // std dev = 10.926, 513.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.40e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11536688436050974;  // std dev = 10.518, 492.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109214;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07251202695462895;  // std dev = 10.738, 503.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333695;  // std dev = 1.43e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06263171404122116;  // std dev = 10.620, 497.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420351;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.027229684273972758;  // std dev = 10.926, 513.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820254;  // std dev = 2.43e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
Inference time using transfer learning 1.1689543724060059
Parameter learned model CLL:-0.300352 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.498, 167, 324], 'false,true': [0.0, 0, 0], 'false,false': [1.84e-07, 477, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.126, 150, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 478, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.056, 147, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 476, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.079, 148, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [2.89e-07, 447, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.477, 166, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 496, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.926, 189, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.4e-07, 478, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.518, 168, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 512, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.738, 179, 324], 'false,true': [1.43e-07, 492, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.62, 173, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 476, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.926, 189, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 485, 0]}]
{'': [0.22443908893691605, 7.075635209351103e-17], 'true': [nan, 0.22443908893691605], 'true,false': [nan, 0.22443908893691605], 'true,false,false': [nan, 0.22443908893691605], 'false': [nan, 7.075635209351103e-17]}
{'': [0.21631148854349416, -1.3564231095838734e-16], 'true': [nan, 0.21631148854349416], 'true,false': [nan, 0.21631148854349416], 'true,false,false': [0.21631148854349416, nan], 'false': [nan, -1.3564231095838734e-16]}
{'': [0.21469430808552728, -5.597763149370537e-18], 'true': [nan, 0.21469430808552728], 'true,false': [nan, 0.21469430808552728], 'true,false,false': [nan, 0.21469430808552728], 'false': [nan, -5.597763149370537e-18]}
{'': [0.2152398735995408, 1.867757750599816e-16], 'true': [nan, 0.2152398735995408], 'true,false': [0.2152398735995408, nan], 'false': [nan, 1.867757750599816e-16]}
{'': [0.22400666389004423, -2.865091676452017e-17], 'true': [nan, 0.22400666389004423], 'true,false': [nan, 0.22400666389004423], 'true,false,false': [nan, 0.22400666389004423], 'false': [nan, -2.865091676452017e-17]}
{'': [0.2326869806094173, 4.08785046723907e-17], 'true': [nan, 0.2326869806094173], 'true,false': [0.2326869806094173, nan], 'false': [nan, 4.08785046723907e-17]}
{'': [0.2248661511005375, -4.7704895589362195e-17], 'true': [nan, 0.2248661511005375], 'true,false': [0.2248661511005375, nan], 'false': [nan, -4.7704895589362195e-17]}
{'': [0.22922504733033394, 4.1520535880290405e-17], 'true': [nan, 0.22922504733033394], 'true,false': [nan, 0.22922504733033394], 'true,false,false': [nan, 0.22922504733033394], 'false': [4.1520535880290405e-17, nan]}
{'': [0.226922905643116, -1.2781559191062726e-16], 'true': [nan, 0.226922905643116], 'true,false': [0.226922905643116, nan], 'false': [nan, -1.2781559191062726e-16]}
{'': [0.2326869806094191, 1.2132334083532637e-16], 'true': [nan, 0.2326869806094191], 'true,false': [nan, 0.2326869806094191], 'true,false,false': [nan, 0.2326869806094191], 'false': [nan, 1.2132334083532637e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5940725803375244
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.141851064900488;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.1418510649004874;  // std dev = 2.19e-07, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839147;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.12544463852839233;  // std dev = 0.000, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360629;  // std dev = 8.69e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.112316378193606;  // std dev = 0.000, 450.000 (wgt'ed) examples reached here.  /* #neg=450 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else return -0.10159632948783545;  // std dev = 3.35e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926071;  // std dev = 8.16e-08, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.09269127618926144;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839678;  // std dev = 6.50e-08, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.08518475138839678;  // std dev = 1.38e-07, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109154;  // std dev = 8.16e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.07877675473109211;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333685;  // std dev = 7.96e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.07324622576333714;  // std dev = 7.88e-08, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6.58e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.06842697784420351;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.0641918400820254;  // std dev = 2.41e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
Inference time using transfer learning 1.0369012355804443
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.5940725803375244 

Total Inference Time : 1.7012085914611816 

Total revision time: 8.445496082305908
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.457355499267578 

Total Inference Time : 1.7012085914611816 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6772196292877197
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5226440491060231;  // std dev = 8.273, 307.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 1.26e-07, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4486660313254273;  // std dev = 8.246, 306.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839197;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.31053568029406114;  // std dev = 8.869, 332.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360692;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.272285684785212;  // std dev = 8.503, 316.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878366;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20065778409917548;  // std dev = 8.576, 319.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926042;  // std dev = 1.70e-07, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.18235339933164807;  // std dev = 8.192, 304.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.01e-07, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1281056415656105;  // std dev = 8.300, 308.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109143;  // std dev = 4.21e-08, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09213852365116403;  // std dev = 8.352, 310.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333696;  // std dev = 9.88e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07178647100760499;  // std dev = 8.326, 309.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420299;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.035833199445121866;  // std dev = 8.552, 318.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202598;  // std dev = 1.08e-07, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
Inference time using transfer learning 1.2202277183532715
Parameter learned model CLL:-0.312002 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.273, 103, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.26e-07, 307, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.246, 102, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 289, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.869, 128, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 259, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.503, 112, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 277, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.576, 115, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.7e-07, 317, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.192, 100, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.01e-07, 288, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.3, 104, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [4.21e-08, 287, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.352, 106, 204], 'false,true': [9.88e-08, 296, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.326, 105, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 296, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.552, 114, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.08e-07, 294, 0]}]
{'': [0.22294135746798838, 5.207560766971418e-17], 'true': [nan, 0.22294135746798838], 'true,false': [nan, 0.22294135746798838], 'true,false,false': [nan, 0.22294135746798838], 'false': [nan, 5.207560766971418e-17]}
{'': [0.2222222222222262, -7.990532495572061e-17], 'true': [nan, 0.2222222222222262], 'true,false': [nan, 0.2222222222222262], 'true,false,false': [0.2222222222222262, nan], 'false': [nan, -7.990532495572061e-17]}
{'': [0.23689940484830593, -8.744613784692352e-17], 'true': [nan, 0.23689940484830593], 'true,false': [nan, 0.23689940484830593], 'true,false,false': [nan, 0.23689940484830593], 'false': [nan, -8.744613784692352e-17]}
{'': [0.22880948565935094, -5.931877532293256e-17], 'true': [nan, 0.22880948565935094], 'true,false': [0.22880948565935094, nan], 'false': [nan, -5.931877532293256e-17]}
{'': [0.2305401873016178, 9.105930170427152e-17], 'true': [nan, 0.2305401873016178], 'true,false': [nan, 0.2305401873016178], 'true,false,false': [nan, 0.2305401873016178], 'false': [nan, 9.105930170427152e-17]}
{'': [0.2207409972299185, 3.5465457731081387e-17], 'true': [nan, 0.2207409972299185], 'true,false': [0.2207409972299185, nan], 'false': [nan, 3.5465457731081387e-17]}
{'': [0.22364648338674423, 6.189396652962545e-18], 'true': [nan, 0.22364648338674423], 'true,false': [0.22364648338674423, nan], 'false': [nan, 6.189396652962545e-18]}
{'': [0.22501560874089474, 3.300663046182898e-17], 'true': [nan, 0.22501560874089474], 'true,false': [nan, 0.22501560874089474], 'true,false,false': [nan, 0.22501560874089474], 'false': [3.300663046182898e-17, nan]}
{'': [0.22433782637383357, -5.326069915431494e-17], 'true': [nan, 0.22433782637383357], 'true,false': [0.22433782637383357, nan], 'false': [nan, -5.326069915431494e-17]}
{'': [0.22997508009967974, 4.002844918716551e-17], 'true': [nan, 0.22997508009967974], 'true,false': [nan, 0.22997508009967974], 'true,false,false': [nan, 0.22997508009967974], 'false': [nan, 4.002844918716551e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.0939793586730957
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048785;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.14185106490048788;  // std dev = 7.88e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1279662962399464;  // std dev = 0.218, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.12544463852839202;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11206521104123843;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.11231637819360693;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10386892828007503;  // std dev = 0.272, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.1015963294878366;  // std dev = 0.000, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09230991052629293;  // std dev = 7.88e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.09269127618926042;  // std dev = 1.59e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08486099468019875;  // std dev = 6.66e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 1.01e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07849867960412678;  // std dev = 5.77e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07877675473109141;  // std dev = 3.94e-08, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07711659388346831;  // std dev = 0.467, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.07324622576333693;  // std dev = 1.02e-07, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06795485408527396;  // std dev = 2.47e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06842697784420286;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06377512150157094;  // std dev = 2.11e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06419184008202612;  // std dev = 7.60e-08, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
Inference time using transfer learning 1.006164312362671
Refined model CLL: -0.064523


******************************************
Best model found
******************************************
Results 

CLL : -0.089204 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 2.0939793586730957 

Total Inference Time : 1.505120038986206 

Total revision time: 7.1283862590789795
Best scored revision CLL: -0.064523


Results 

CLL : -0.089204 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 7.140245676040649 

Total Inference Time : 1.505120038986206 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.2536118030548096
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5189332488249981;  // std dev = 10.692, 510.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048757;  // std dev = 1.26e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.41848036296462204;  // std dev = 11.078, 530.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839235;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.37855144297572446;  // std dev = 10.460, 499.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936058;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2705377387528031;  // std dev = 10.832, 517.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783542;  // std dev = 3.42e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20754141542709365;  // std dev = 10.792, 515.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926157;  // std dev = 0.000, 525.000 (wgt'ed) examples reached here.  /* #neg=525 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.17013973701323504;  // std dev = 10.567, 504.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.41e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.12902608914847072;  // std dev = 10.546, 503.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109211;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09719829886553953;  // std dev = 10.546, 503.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333696;  // std dev = 1.41e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.05671978167192269;  // std dev = 10.812, 516.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07361377856366678;  // std dev = 10.327, 493.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202537;  // std dev = 2.46e-07, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
Inference time using transfer learning 0.9604237079620361
Parameter learned model CLL:-0.306477 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.692, 173, 337], 'false,true': [0.0, 0, 0], 'false,false': [1.26e-07, 485, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [11.078, 193, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 501, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.46, 162, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 503, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.832, 180, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.42e-07, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.792, 178, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 525, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.567, 167, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.41e-07, 484, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.546, 166, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 508, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.546, 166, 337], 'false,true': [1.41e-07, 490, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.812, 179, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 489, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.327, 156, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.46e-07, 497, 0]}]
{'': [0.22414840445982576, 3.296332279299434e-17], 'true': [nan, 0.22414840445982576], 'true,false': [nan, 0.22414840445982576], 'true,false,false': [nan, 0.22414840445982576], 'false': [nan, 3.296332279299434e-17]}
{'': [0.2315450338198642, -1.400520861403391e-16], 'true': [nan, 0.2315450338198642], 'true,false': [nan, 0.2315450338198642], 'true,false,false': [0.2315450338198642, nan], 'false': [nan, -1.400520861403391e-16]}
{'': [0.21925213151755116, -8.82881132902709e-18], 'true': [nan, 0.21925213151755116], 'true,false': [nan, 0.21925213151755116], 'true,false,false': [nan, 0.21925213151755116], 'false': [nan, -8.82881132902709e-18]}
{'': [0.22694536625151285, 2.38291771139058e-16], 'true': [nan, 0.22694536625151285], 'true,false': [0.22694536625151285, nan], 'false': [nan, 2.38291771139058e-16]}
{'': [0.22617023282118742, -4.7369515717340015e-17], 'true': [nan, 0.22617023282118742], 'true,false': [nan, 0.22617023282118742], 'true,false,false': [nan, 0.22617023282118742], 'false': [nan, -4.7369515717340015e-17]}
{'': [0.22155690980095877, 4.128928603977855e-17], 'true': [nan, 0.22155690980095877], 'true,false': [0.22155690980095877, nan], 'false': [nan, 4.128928603977855e-17]}
{'': [0.2211067590480966, -4.4583759256600775e-17], 'true': [nan, 0.2211067590480966], 'true,false': [0.2211067590480966, nan], 'false': [nan, -4.4583759256600775e-17]}
{'': [0.22110675904809568, 4.0783702945413916e-17], 'true': [nan, 0.22110675904809568], 'true,false': [nan, 0.22110675904809568], 'true,false,false': [nan, 0.22110675904809568], 'false': [4.0783702945413916e-17, nan]}
{'': [0.22656015263506052, -1.207849998160702e-16], 'true': [nan, 0.22656015263506052], 'true,false': [0.22656015263506052, nan], 'false': [nan, -1.207849998160702e-16]}
{'': [0.21630206254705853, 1.2152139343985618e-16], 'true': [nan, 0.21630206254705853], 'true,false': [nan, 0.21630206254705853], 'true,false,false': [nan, 0.21630206254705853], 'false': [nan, 1.2152139343985618e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.663038969039917
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.1418510649004879;  // std dev = 0.000, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839147;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.1254446385283923;  // std dev = 0.000, 525.000 (wgt'ed) examples reached here.  /* #neg=525 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360647;  // std dev = 3.65e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.11231637819360582;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1015963294878365;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.10159632948783558;  // std dev = 3.07e-07, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926071;  // std dev = 7.88e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.09269127618926162;  // std dev = 0.000, 540.000 (wgt'ed) examples reached here.  /* #neg=540 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.32e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 536.000 (wgt'ed) examples reached here.  /* #neg=536 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109148;  // std dev = 7.88e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.078776754731092;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333684;  // std dev = 7.60e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.0732462257633369;  // std dev = 1.55e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 7.22e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else return -0.06842697784420357;  // std dev = 0.000, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.06419184008202536;  // std dev = 2.44e-07, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
Inference time using transfer learning 0.8498640060424805
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.663038969039917 

Total Inference Time : 1.4918568134307861 

Total revision time: 8.418580055236816
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.430439472198486 

Total Inference Time : 1.4918568134307861 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.382270097732544
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5000536970042698;  // std dev = 10.985, 525.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048777;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4693959255019939;  // std dev = 10.327, 493.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.30587454664553;  // std dev = 11.473, 553.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360585;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2826094123571691;  // std dev = 10.792, 515.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783559;  // std dev = 3.00e-07, 456.000 (wgt'ed) examples reached here.  /* #neg=456 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22230533734536617;  // std dev = 10.671, 509.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926143;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.16314323452793034;  // std dev = 10.732, 512.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10612050827193914;  // std dev = 10.985, 525.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109176;  // std dev = 0.000, 452.000 (wgt'ed) examples reached here.  /* #neg=452 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08602283789158552;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333722;  // std dev = 0.000, 444.000 (wgt'ed) examples reached here.  /* #neg=444 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06999756970498772;  // std dev = 10.812, 516.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420355;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.063371916178062;  // std dev = 10.651, 508.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202537;  // std dev = 2.43e-07, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
Inference time using transfer learning 0.948948860168457
Parameter learned model CLL:-0.301418 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.985, 188, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 504, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.327, 156, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 482, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.473, 216, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 488, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.792, 178, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3e-07, 456, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.671, 172, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 494, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.732, 175, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.985, 188, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 452, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.89, 183, 337], 'false,true': [0.0, 444, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.812, 179, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 505, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.651, 171, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 506, 0]}]
{'': [0.22986303854875542, -4.5818728000403283e-17], 'true': [nan, 0.22986303854875542], 'true,false': [nan, 0.22986303854875542], 'true,false,false': [nan, 0.22986303854875542], 'false': [nan, -4.5818728000403283e-17]}
{'': [0.21630206254705586, -1.216177919091458e-16], 'true': [nan, 0.21630206254705586], 'true,false': [nan, 0.21630206254705586], 'true,false,false': [0.21630206254705586, nan], 'false': [nan, -1.216177919091458e-16]}
{'': [0.2380309278013393, -1.0920226471722851e-17], 'true': [nan, 0.2380309278013393], 'true,false': [nan, 0.2380309278013393], 'true,false,false': [nan, 0.2380309278013393], 'false': [nan, -1.0920226471722851e-17]}
{'': [0.22617023282119011, 1.9672372892480843e-16], 'true': [nan, 0.22617023282119011], 'true,false': [0.22617023282119011, nan], 'false': [nan, 1.9672372892480843e-16]}
{'': [0.22372925841724964, -2.5171048331582497e-17], 'true': [nan, 0.22372925841724964], 'true,false': [nan, 0.22372925841724964], 'true,false,false': [nan, 0.22372925841724964], 'false': [nan, -2.5171048331582497e-17]}
{'': [0.22497177124023318, 4.1520535880290405e-17], 'true': [nan, 0.22497177124023318], 'true,false': [0.22497177124023318, nan], 'false': [nan, 4.1520535880290405e-17]}
{'': [0.22986303854875123, -4.9124912594033475e-18], 'true': [nan, 0.22986303854875123], 'true,false': [0.22986303854875123, nan], 'false': [nan, -4.9124912594033475e-18]}
{'': [0.22807322485207257, 0.0], 'true': [nan, 0.22807322485207257], 'true,false': [nan, 0.22807322485207257], 'true,false,false': [nan, 0.22807322485207257], 'false': [0.0, nan]}
{'': [0.2265601526350594, -1.2487260950239386e-16], 'true': [nan, 0.2265601526350594], 'true,false': [0.2265601526350594, nan], 'false': [nan, -1.2487260950239386e-16]}
{'': [0.22330507161014274, 1.167270057511034e-16], 'true': [nan, 0.22330507161014274], 'true,false': [nan, 0.22330507161014274], 'true,false,false': [nan, 0.22330507161014274], 'false': [nan, 1.167270057511034e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.7357704639434814
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.14185106490048782;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839133;  // std dev = 4.21e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.12544463852839222;  // std dev = 0.000, 435.000 (wgt'ed) examples reached here.  /* #neg=435 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360628;  // std dev = 8.69e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.1123163781936058;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.10159632948783542;  // std dev = 3.42e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926079;  // std dev = 6.99e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.09269127618926137;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.32e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.08518475138839678;  // std dev = 1.46e-07, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109154;  // std dev = 8.16e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.0787767547310922;  // std dev = 0.000, 526.000 (wgt'ed) examples reached here.  /* #neg=526 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333677;  // std dev = 1.01e-07, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.07324622576333692;  // std dev = 1.53e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 7.07e-08, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   else return -0.06842697784420355;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.06419184008202536;  // std dev = 2.44e-07, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
Inference time using transfer learning 0.8833372592926025
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.7357704639434814 

Total Inference Time : 1.6787357330322266 

Total revision time: 8.921051263809204
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.932910680770874 

Total Inference Time : 1.6787357330322266 

Run: 2

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.304999828338623
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5127674089950903;  // std dev = 10.611, 498.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004876;  // std dev = 1.03e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.42922296262150056;  // std dev = 10.750, 505.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.36083049958749897;  // std dev = 10.550, 495.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936058;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2724947901536627;  // std dev = 10.671, 501.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878357;  // std dev = 2.73e-07, 436.000 (wgt'ed) examples reached here.  /* #neg=436 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22124208668213005;  // std dev = 10.446, 490.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0926912761892613;  // std dev = 0.000, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.13882533709136166;  // std dev = 10.864, 511.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.13698772255618472;  // std dev = 10.360, 486.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109218;  // std dev = 0.000, 521.000 (wgt'ed) examples reached here.  /* #neg=521 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08043649004964493;  // std dev = 10.711, 503.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333706;  // std dev = 1.12e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0848667730896986;  // std dev = 10.338, 485.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420358;  // std dev = 0.000, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05624645111848353;  // std dev = 10.467, 491.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202536;  // std dev = 2.44e-07, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
Inference time using transfer learning 1.1301355361938477
Parameter learned model CLL:-0.301045 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.611, 172, 326], 'false,true': [0.0, 0, 0], 'false,false': [1.03e-07, 488, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.75, 179, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 465, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.55, 169, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 503, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.671, 175, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [2.73e-07, 436, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.446, 164, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 468, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.864, 185, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.36, 160, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 521, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.711, 177, 326], 'false,true': [1.12e-07, 473, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.338, 159, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 520, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.467, 165, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.44e-07, 514, 0]}]
{'': [0.22609312753020383, 2.1840452943445702e-17], 'true': [nan, 0.22609312753020383], 'true,false': [nan, 0.22609312753020383], 'true,false,false': [nan, 0.22609312753020383], 'false': [nan, 2.1840452943445702e-17]}
{'': [0.22881678266837313, -1.3752440046969682e-16], 'true': [nan, 0.22881678266837313], 'true,false': [nan, 0.22881678266837313], 'true,false,false': [0.22881678266837313, nan], 'false': [nan, -1.3752440046969682e-16]}
{'': [0.22485052545658477, -8.82881132902709e-18], 'true': [nan, 0.22485052545658477], 'true,false': [nan, 0.22485052545658477], 'true,false,false': [nan, 0.22485052545658477], 'false': [nan, -8.82881132902709e-18]}
{'': [0.22728993111581217, 1.7111694324497827e-16], 'true': [nan, 0.22728993111581217], 'true,false': [0.22728993111581217, nan], 'false': [nan, 1.7111694324497827e-16]}
{'': [0.22267388588088244, -7.591268544445516e-18], 'true': [nan, 0.22267388588088244], 'true,false': [nan, 0.22267388588088244], 'true,false,false': [nan, 0.22267388588088244], 'false': [nan, -7.591268544445516e-18]}
{'': [0.230965720872702, 4.1520535880290405e-17], 'true': [nan, 0.230965720872702], 'true,false': [0.230965720872702, nan], 'false': [nan, 4.1520535880290405e-17]}
{'': [0.22083354502192867, -5.2847468350679236e-17], 'true': [nan, 0.22083354502192867], 'true,false': [0.22083354502192867, nan], 'false': [nan, -5.2847468350679236e-17]}
{'': [0.2280630333308288, 2.6288579018608357e-17], 'true': [nan, 0.2280630333308288], 'true,false': [nan, 0.2280630333308288], 'true,false,false': [nan, 0.2280630333308288], 'false': [2.6288579018608357e-17, nan]}
{'': [0.22035923052396555, -1.2468658584251758e-16], 'true': [nan, 0.22035923052396555], 'true,false': [0.22035923052396555, nan], 'false': [nan, -1.2468658584251758e-16]}
{'': [0.22312003019731944, 1.1577422980526925e-16], 'true': [nan, 0.22312003019731944], 'true,false': [nan, 0.22312003019731944], 'true,false,false': [nan, 0.22312003019731944], 'false': [nan, 1.1577422980526925e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.4825286865234375
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048804;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.14185106490048752;  // std dev = 1.69e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839138;  // std dev = 2.98e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.12544463852839235;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360632;  // std dev = 8.43e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.1123163781936058;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.10159632948783555;  // std dev = 3.11e-07, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926076;  // std dev = 7.30e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.09269127618926143;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839678;  // std dev = 6.66e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.08518475138839678;  // std dev = 1.46e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109158;  // std dev = 6.91e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.07877675473109208;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333685;  // std dev = 8.30e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.0732462257633369;  // std dev = 1.59e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6.05e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.06842697784420353;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.06419184008202534;  // std dev = 2.45e-07, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */
Inference time using transfer learning 1.0082454681396484
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.4825286865234375 

Total Inference Time : 1.6706717014312744 

Total revision time: 8.610926389694214
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.622994184494019 

Total Inference Time : 1.6706717014312744 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.202761650085449
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.538821204007071;  // std dev = 10.172, 476.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048763;  // std dev = 5.96e-08, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.43114043301239174;  // std dev = 10.620, 497.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.34566163860762406;  // std dev = 10.660, 499.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360589;  // std dev = 0.000, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.22213279581544185;  // std dev = 11.336, 537.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783552;  // std dev = 3.17e-07, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.209323007787293;  // std dev = 10.738, 503.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926132;  // std dev = 0.000, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.17042795467455926;  // std dev = 10.539, 493.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.38e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.14565699753403424;  // std dev = 10.262, 480.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109219;  // std dev = 0.000, 522.000 (wgt'ed) examples reached here.  /* #neg=522 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10958607886950021;  // std dev = 10.262, 480.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333688;  // std dev = 1.60e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06641325084588852;  // std dev = 10.518, 492.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420347;  // std dev = 0.000, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.022290536141706428;  // std dev = 10.944, 514.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820254;  // std dev = 2.44e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
Inference time using transfer learning 1.176344394683838
Parameter learned model CLL:-0.301893 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.172, 152, 324], 'false,true': [0.0, 0, 0], 'false,false': [5.96e-08, 491, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.62, 173, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 464, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.66, 175, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 477, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.336, 213, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.17e-07, 470, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.738, 179, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 471, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.539, 169, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.38e-07, 471, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.262, 156, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 522, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.262, 156, 324], 'false,true': [1.6e-07, 505, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.518, 168, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 455, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.944, 190, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.44e-07, 484, 0]}]
{'': [0.217357531247796, 7.235669406925663e-18], 'true': [nan, 0.217357531247796], 'true,false': [nan, 0.217357531247796], 'true,false,false': [nan, 0.217357531247796], 'false': [nan, 7.235669406925663e-18]}
{'': [0.22692290564310513, -1.3590661163514846e-16], 'true': [nan, 0.22692290564310513], 'true,false': [nan, 0.22692290564310513], 'true,false,false': [0.22692290564310513, nan], 'false': [nan, -1.3590661163514846e-16]}
{'': [0.22770992887578215, -1.1172055593712268e-17], 'true': [nan, 0.22770992887578215], 'true,false': [nan, 0.22770992887578215], 'true,false,false': [nan, 0.22770992887578215], 'false': [nan, -1.1172055593712268e-17]}
{'': [0.23931837333416575, 2.1354076899173222e-16], 'true': [nan, 0.23931837333416575], 'true,false': [0.23931837333416575, nan], 'false': [nan, 2.1354076899173222e-16]}
{'': [0.22922504733033322, -7.542916515500002e-18], 'true': [nan, 0.22922504733033322], 'true,false': [nan, 0.22922504733033322], 'true,false,false': [nan, 0.22922504733033322], 'false': [nan, -7.542916515500002e-18]}
{'': [0.22528790490806366, 4.054317627081251e-17], 'true': [nan, 0.22528790490806366], 'true,false': [0.22528790490806366, nan], 'false': [nan, 4.054317627081251e-17]}
{'': [0.21937499999999868, -5.3596973602593766e-17], 'true': [nan, 0.21937499999999868], 'true,false': [0.21937499999999868, nan], 'false': [nan, -5.3596973602593766e-17]}
{'': [0.21937500000000212, 5.1004305289710164e-17], 'true': [nan, 0.21937500000000212], 'true,false': [nan, 0.21937500000000212], 'true,false,false': [nan, 0.21937500000000212], 'false': [5.1004305289710164e-17, nan]}
{'': [0.22486615110053473, -1.2395457066144605e-16], 'true': [nan, 0.22486615110053473], 'true,false': [0.22486615110053473, nan], 'false': [nan, -1.2395457066144605e-16]}
{'': [0.23300882678011645, 1.2340908827444921e-16], 'true': [nan, 0.23300882678011645], 'true,false': [nan, 0.23300882678011645], 'true,false,false': [nan, 0.23300882678011645], 'false': [nan, 1.2340908827444921e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5705089569091797
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1418510649004881;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.14185106490048724;  // std dev = 2.98e-07, 428.000 (wgt'ed) examples reached here.  /* #neg=428 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1254446385283913;  // std dev = 5.16e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.12544463852839235;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360639;  // std dev = 6.66e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.11231637819360586;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1015963294878365;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.10159632948783552;  // std dev = 3.18e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926074;  // std dev = 7.74e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.09269127618926154;  // std dev = 0.000, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839678;  // std dev = 5.96e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.08518475138839678;  // std dev = 1.44e-07, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109158;  // std dev = 6.99e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.07877675473109207;  // std dev = 1.26e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0732462257633369;  // std dev = 6.75e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.07324622576333706;  // std dev = 1.12e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6.83e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.06842697784420344;  // std dev = 0.000, 442.000 (wgt'ed) examples reached here.  /* #neg=442 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.06419184008202546;  // std dev = 2.30e-07, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
Inference time using transfer learning 0.9972696304321289
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.5705089569091797 

Total Inference Time : 1.6634936332702637 

Total revision time: 8.297917366027832
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.309985160827637 

Total Inference Time : 1.6634936332702637 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6826210021972656
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4996583690617726;  // std dev = 8.552, 318.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 1.15e-07, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4704562317448053;  // std dev = 8.022, 298.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839197;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3608258115471606;  // std dev = 8.273, 307.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360678;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2607307695139929;  // std dev = 8.503, 316.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783662;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.168208850023683;  // std dev = 8.847, 331.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926044;  // std dev = 1.72e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15559826713066566;  // std dev = 8.503, 316.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.01e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08562029573190548;  // std dev = 8.869, 332.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109143;  // std dev = 2.11e-08, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08739409719267255;  // std dev = 8.599, 320.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333693;  // std dev = 1.04e-07, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.05222613202536537;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420305;  // std dev = 0.000, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05714431066391371;  // std dev = 8.552, 318.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202607;  // std dev = 8.94e-08, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
Inference time using transfer learning 1.2294034957885742
Parameter learned model CLL:-0.301444 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.552, 114, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.15e-07, 305, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.022, 94, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 286, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.273, 103, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 309, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.503, 112, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 292, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.847, 127, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.72e-07, 301, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.503, 112, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.01e-07, 287, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.869, 128, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [2.11e-08, 315, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.599, 116, 204], 'false,true': [1.04e-07, 286, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.76, 123, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 312, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.552, 114, 204], 'false,true': [0.0, 0, 0], 'false,false': [8.94e-08, 278, 0]}]
{'': [0.22997508009968412, 4.3680905886891404e-17], 'true': [nan, 0.22997508009968412], 'true,false': [nan, 0.22997508009968412], 'true,false,false': [nan, 0.22997508009968412], 'false': [nan, 4.3680905886891404e-17]}
{'': [0.2159362190892273, -8.074349270001139e-17], 'true': [nan, 0.2159362190892273], 'true,false': [nan, 0.2159362190892273], 'true,false,false': [0.2159362190892273, nan], 'false': [nan, -8.074349270001139e-17]}
{'': [0.22294135746798682, -5.605009444709528e-17], 'true': [nan, 0.22294135746798682], 'true,false': [nan, 0.22294135746798682], 'true,false,false': [nan, 0.22294135746798682], 'false': [nan, -5.605009444709528e-17]}
{'': [0.2288094856593531, -5.627157796045314e-17], 'true': [nan, 0.2288094856593531], 'true,false': [0.2288094856593531, nan], 'false': [nan, -5.627157796045314e-17]}
{'': [0.23647100701892002, 9.885042212609367e-17], 'true': [nan, 0.23647100701892002], 'true,false': [nan, 0.23647100701892002], 'true,false,false': [nan, 0.23647100701892002], 'false': [nan, 9.885042212609367e-17]}
{'': [0.22880948565935028, 3.558903075453463e-17], 'true': [nan, 0.22880948565935028], 'true,false': [0.22880948565935028, nan], 'false': [nan, 3.558903075453463e-17]}
{'': [0.23689940484830868, 1.4098070153970242e-18], 'true': [nan, 0.23689940484830868], 'true,false': [0.23689940484830868, nan], 'false': [nan, 1.4098070153970242e-18]}
{'': [0.23109374999999943, 3.8042607137505364e-17], 'true': [nan, 0.23109374999999943], 'true,false': [nan, 0.23109374999999943], 'true,false,false': [nan, 0.23109374999999943], 'false': [3.8042607137505364e-17, nan]}
{'': [0.23466038212271767, -6.618637262188433e-17], 'true': [nan, 0.23466038212271767], 'true,false': [0.23466038212271767, nan], 'false': [nan, -6.618637262188433e-17]}
{'': [0.22997508009968096, 2.8753977616191105e-17], 'true': [nan, 0.22997508009968096], 'true,false': [nan, 0.22997508009968096], 'true,false,false': [nan, 0.22997508009968096], 'false': [nan, 2.8753977616191105e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.106027364730835
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048768;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.1418510649004878;  // std dev = 1.26e-07, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.12544463852839197;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1123163781936062;  // std dev = 8.43e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360657;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #neg=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.10159632948783665;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926101;  // std dev = 3.33e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.09269127618926046;  // std dev = 1.66e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.08518475138839678;  // std dev = 3.94e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.30506575340243464;  // std dev = 0.539, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839678;  // std dev = 1.01e-07, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.07877675473109158;  // std dev = 5.96e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else if ( female(B) )
%   | | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.15257761418049118;  // std dev = 0.573, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07877675473109143;  // std dev = 3.65e-08, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07270459602512895;  // std dev = 0.035, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | else return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07324622576333698;  // std dev = 9.66e-08, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06788194962456909;  // std dev = 0.032, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06842697784420289;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06377478565719441;  // std dev = 0.031, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06419184008202604;  // std dev = 1.00e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
Inference time using transfer learning 1.0612568855285645
Refined model CLL: -0.065085


******************************************
Best model found
******************************************
Results 

CLL : -0.102344 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 2.106027364730835 

Total Inference Time : 1.466379165649414 

Total revision time: 7.153619289398193
Best scored revision CLL: -0.065085


Results 

CLL : -0.102344 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 7.165687084197998 

Total Inference Time : 1.466379165649414 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.225599527359009
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.532148935099508;  // std dev = 10.482, 500.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048793;  // std dev = 0.000, 521.000 (wgt'ed) examples reached here.  /* #neg=521 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.45981014760831207;  // std dev = 10.394, 496.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 530.000 (wgt'ed) examples reached here.  /* #neg=530 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.35638615868754253;  // std dev = 10.630, 507.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360582;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2796833891778845;  // std dev = 10.567, 504.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783533;  // std dev = 3.67e-07, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21021393104786018;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926148;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.13112493526861202;  // std dev = 11.004, 526.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.41e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.14132903194571914;  // std dev = 10.327, 493.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109218;  // std dev = 0.000, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0735238837705202;  // std dev = 10.851, 518.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333698;  // std dev = 1.35e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.05194240292866163;  // std dev = 10.910, 521.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420355;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06397041339004812;  // std dev = 10.525, 502.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202539;  // std dev = 2.43e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
Inference time using transfer learning 1.0317330360412598
Parameter learned model CLL:-0.303432 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.482, 163, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 521, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.394, 159, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 530, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.63, 170, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 500, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.567, 167, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.67e-07, 516, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.588, 168, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 506, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.004, 189, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.41e-07, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.327, 156, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 519, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.851, 181, 337], 'false,true': [1.35e-07, 486, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.91, 184, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 506, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.525, 165, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 499, 0]}]
{'': [0.2197240000000026, -1.1251396487563966e-16], 'true': [nan, 0.2197240000000026], 'true,false': [nan, 0.2197240000000026], 'true,false,false': [nan, 0.2197240000000026], 'false': [nan, -1.1251396487563966e-16]}
{'': [0.2178029071279916, -1.6422921722757031e-16], 'true': [nan, 0.2178029071279916], 'true,false': [nan, 0.2178029071279916], 'true,false,false': [0.2178029071279916, nan], 'false': [nan, -1.6422921722757031e-16]}
{'': [0.22287579410928907, -8.881784197001253e-18], 'true': [nan, 0.22287579410928907], 'true,false': [nan, 0.22287579410928907], 'true,false,false': [nan, 0.22287579410928907], 'false': [nan, -8.881784197001253e-18]}
{'': [0.22155690980095238, 2.616339530899594e-16], 'true': [nan, 0.22155690980095238], 'true,false': [0.22155690980095238, nan], 'false': [nan, 2.616339530899594e-16]}
{'': [0.22200176453288947, -3.51058663913093e-17], 'true': [nan, 0.22200176453288947], 'true,false': [nan, 0.22200176453288947], 'true,false,false': [nan, 0.22200176453288947], 'false': [nan, -3.51058663913093e-17]}
{'': [0.2302078966010766, 4.1546807574330185e-17], 'true': [nan, 0.2302078966010766], 'true,false': [0.2302078966010766, nan], 'false': [nan, 4.1546807574330185e-17]}
{'': [0.21630206254705978, -5.133979304625001e-17], 'true': [nan, 0.21630206254705978], 'true,false': [0.21630206254705978, nan], 'false': [nan, -5.133979304625001e-17]}
{'': [0.2273259194108616, 3.746431605730981e-17], 'true': [nan, 0.2273259194108616], 'true,false': [nan, 0.2273259194108616], 'true,false,false': [nan, 0.2273259194108616], 'false': [3.746431605730981e-17, nan]}
{'': [0.2284400661653918, -1.24625825689148e-16], 'true': [nan, 0.2284400661653918], 'true,false': [0.2284400661653918, nan], 'false': [nan, -1.24625825689148e-16]}
{'': [0.22065125950381756, 1.1836445873759183e-16], 'true': [nan, 0.22065125950381756], 'true,false': [nan, 0.22065125950381756], 'true,false,false': [nan, 0.22065125950381756], 'false': [nan, 1.1836445873759183e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.6757075786590576
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004883;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.1418510649004875;  // std dev = 1.79e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839152;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.12544463852839235;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360633;  // std dev = 7.60e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.11231637819360585;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.10159632948783542;  // std dev = 3.44e-07, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926074;  // std dev = 7.45e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.09269127618926139;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 6.14e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.08518475138839678;  // std dev = 1.50e-07, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109148;  // std dev = 8.30e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.07877675473109197;  // std dev = 1.50e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333674;  // std dev = 1.01e-07, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   else return -0.07324622576333702;  // std dev = 1.23e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420264;  // std dev = 7.15e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else return -0.06842697784420353;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.06419184008202537;  // std dev = 2.45e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
Inference time using transfer learning 0.8706598281860352
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.6757075786590576 

Total Inference Time : 1.53542160987854 

Total revision time: 8.43806266784668
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.450130462646484 

Total Inference Time : 1.53542160987854 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.345856189727783
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4892350774216053;  // std dev = 11.150, 534.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048732;  // std dev = 2.49e-07, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.45895586798924126;  // std dev = 10.525, 502.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.34654036494429613;  // std dev = 10.929, 522.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360592;  // std dev = 0.000, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.28318788535707023;  // std dev = 10.712, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878357;  // std dev = 2.76e-07, 437.000 (wgt'ed) examples reached here.  /* #neg=437 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1793672074873449;  // std dev = 11.256, 540.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926143;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.13823729739321033;  // std dev = 11.203, 537.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.44e-07, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10021129138193079;  // std dev = 11.256, 540.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109196;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10432266086966382;  // std dev = 10.812, 516.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333682;  // std dev = 1.78e-07, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11753517597947574;  // std dev = 10.188, 487.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06974759891817857;  // std dev = 10.503, 501.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202539;  // std dev = 2.45e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
Inference time using transfer learning 1.0215857028961182
Parameter learned model CLL:-0.304132 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.15, 197, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.49e-07, 464, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.525, 165, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.929, 185, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 474, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.712, 174, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [2.76e-07, 437, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.256, 203, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.203, 200, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 507, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.256, 203, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.812, 179, 337], 'false,true': [1.78e-07, 517, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.188, 150, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 485, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.503, 164, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.45e-07, 491, 0]}]
{'': [0.2328164232911134, 1.339924340064844e-16], 'true': [nan, 0.2328164232911134], 'true,false': [nan, 0.2328164232911134], 'true,false,false': [nan, 0.2328164232911134], 'false': [nan, 1.339924340064844e-16]}
{'': [0.2206512595038169, -1.3860689917291483e-16], 'true': [nan, 0.2206512595038169], 'true,false': [nan, 0.2206512595038169], 'true,false,false': [0.2206512595038169, nan], 'false': [nan, -1.3860689917291483e-16]}
{'': [0.2288024250965243, -5.6213824031653495e-18], 'true': [nan, 0.2288024250965243], 'true,false': [nan, 0.2288024250965243], 'true,false,false': [nan, 0.2288024250965243], 'false': [nan, -5.6213824031653495e-18]}
{'': [0.22456255912009634, 1.747902610851505e-16], 'true': [nan, 0.22456255912009634], 'true,false': [0.22456255912009634, nan], 'false': [nan, 1.747902610851505e-16]}
{'': [0.2346056241426614, -2.5222105224750006e-17], 'true': [nan, 0.2346056241426614], 'true,false': [nan, 0.2346056241426614], 'true,false,false': [nan, 0.2346056241426614], 'false': [nan, -2.5222105224750006e-17]}
{'': [0.2337283133762631, 4.1168033260262216e-17], 'true': [nan, 0.2337283133762631], 'true,false': [0.2337283133762631, nan], 'false': [nan, 4.1168033260262216e-17]}
{'': [0.2346056241426628, -2.5851346935138782e-17], 'true': [nan, 0.2346056241426628], 'true,false': [0.2346056241426628, nan], 'false': [nan, -2.5851346935138782e-17]}
{'': [0.22656015263505805, 6.098710618830648e-17], 'true': [nan, 0.22656015263505805], 'true,false': [nan, 0.22656015263505805], 'true,false,false': [nan, 0.22656015263505805], 'false': [6.098710618830648e-17, nan]}
{'': [0.2131391539366427, -1.2178116476300687e-16], 'true': [nan, 0.2131391539366427], 'true,false': [0.2131391539366427, nan], 'false': [nan, -1.2178116476300687e-16]}
{'': [0.22019035780733906, 1.2210192124187057e-16], 'true': [nan, 0.22019035780733906], 'true,false': [nan, 0.22019035780733906], 'true,false,false': [nan, 0.22019035780733906], 'false': [nan, 1.2210192124187057e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.563642740249634
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048827;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.1418510649004879;  // std dev = 0.000, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839144;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.1254446385283923;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360639;  // std dev = 6.32e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.11231637819360586;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else return -0.10159632948783526;  // std dev = 3.83e-07, 532.000 (wgt'ed) examples reached here.  /* #neg=532 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0926912761892607;  // std dev = 8.02e-08, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   else return -0.09269127618926148;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 7.15e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109154;  // std dev = 8.02e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.07877675473109201;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333685;  // std dev = 7.30e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.0732462257633371;  // std dev = 9.88e-08, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.83e-08, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.06842697784420355;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else return -0.06419184008202544;  // std dev = 2.32e-07, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
Inference time using transfer learning 0.8790261745452881
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.563642740249634 

Total Inference Time : 1.6695287227630615 

Total revision time: 8.587145805358887
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.599213600158691 

Total Inference Time : 1.6695287227630615 

Run: 3

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.2786097526550293
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5154069996156371;  // std dev = 10.570, 496.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048774;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4540124853883684;  // std dev = 10.360, 486.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3617837851226987;  // std dev = 10.446, 490.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360582;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2886526379859662;  // std dev = 10.316, 484.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783545;  // std dev = 3.36e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19691462489664888;  // std dev = 10.651, 500.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926136;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1850252239952186;  // std dev = 10.066, 473.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0864403129605737;  // std dev = 10.883, 512.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109201;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06640053603409911;  // std dev = 10.864, 511.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333692;  // std dev = 1.53e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07486013561174903;  // std dev = 10.488, 492.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420348;  // std dev = 0.000, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0609131780921564;  // std dev = 10.424, 489.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820254;  // std dev = 2.44e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
Inference time using transfer learning 1.1277155876159668
Parameter learned model CLL:-0.300539 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.57, 170, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 501, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.36, 160, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 470, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.446, 164, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 500, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.316, 158, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.36e-07, 486, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.651, 174, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.066, 147, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.883, 186, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.864, 185, 326], 'false,true': [1.53e-07, 498, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.488, 166, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 462, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.424, 163, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.44e-07, 484, 0]}]
{'': [0.2252699011446437, -3.191060190539372e-17], 'true': [nan, 0.2252699011446437], 'true,false': [nan, 0.2252699011446437], 'true,false,false': [nan, 0.2252699011446437], 'false': [nan, -3.191060190539372e-17]}
{'': [0.22083354502193198, -1.209434443846979e-16], 'true': [nan, 0.22083354502193198], 'true,false': [nan, 0.22083354502193198], 'true,false,false': [0.22083354502193198, nan], 'false': [nan, -1.209434443846979e-16]}
{'': [0.22267388588088938, -8.881784197001253e-18], 'true': [nan, 0.22267388588088938], 'true,false': [nan, 0.22267388588088938], 'true,false,false': [nan, 0.22267388588088938], 'false': [nan, -8.881784197001253e-18]}
{'': [0.21987910661839188, 2.3209600679406563e-16], 'true': [nan, 0.21987910661839188], 'true,false': [0.21987910661839188, nan], 'false': [nan, 2.3209600679406563e-16]}
{'': [0.226896, -1.4802973661668754e-17], 'true': [nan, 0.226896], 'true,false': [nan, 0.226896], 'true,false,false': [nan, 0.226896], 'false': [nan, -1.4802973661668754e-17]}
{'': [0.21419663968461797, 4.143631572637501e-17], 'true': [nan, 0.21419663968461797], 'true,false': [0.21419663968461797, nan], 'false': [nan, 4.143631572637501e-17]}
{'': [0.23130798339843628, -3.172065784643304e-17], 'true': [nan, 0.23130798339843628], 'true,false': [0.23130798339843628, nan], 'false': [nan, -3.172065784643304e-17]}
{'': [0.23096572087269682, 4.726250626918337e-17], 'true': [nan, 0.23096572087269682], 'true,false': [nan, 0.23096572087269682], 'true,false,false': [nan, 0.23096572087269682], 'false': [4.726250626918337e-17, nan]}
{'': [0.2235607112168704, -1.2399893521787462e-16], 'true': [nan, 0.2235607112168704], 'true,false': [0.2235607112168704, nan], 'false': [nan, -1.2399893521787462e-16]}
{'': [0.22222222222222193, 1.2340908827444921e-16], 'true': [nan, 0.22222222222222193], 'true,false': [nan, 0.22222222222222193], 'true,false,false': [nan, 0.22222222222222193], 'false': [nan, 1.2340908827444921e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.6207783222198486
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048807;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.14185106490048785;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   else return -0.12544463852839227;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360626;  // std dev = 8.94e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.11231637819360595;  // std dev = 0.000, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.10159632948783547;  // std dev = 3.32e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926085;  // std dev = 6.14e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.09269127618926146;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5.96e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109153;  // std dev = 7.81e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.07877675473109216;  // std dev = 0.000, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.073246225763337;  // std dev = 3.65e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.07324622576333693;  // std dev = 1.46e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6.14e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.06842697784420351;  // std dev = 0.000, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.0641918400820254;  // std dev = 2.43e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
Inference time using transfer learning 1.0124163627624512
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.6207783222198486 

Total Inference Time : 1.6809666156768799 

Total revision time: 8.548020601272583
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.560322284698486 

Total Inference Time : 1.6809666156768799 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.3897624015808105
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5220833613290162;  // std dev = 10.435, 488.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048788;  // std dev = 0.000, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.3957312971922634;  // std dev = 11.188, 528.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.38509914055336497;  // std dev = 10.217, 478.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360582;  // std dev = 0.000, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.26719266035846084;  // std dev = 10.718, 502.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783551;  // std dev = 3.22e-07, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1851285652257043;  // std dev = 10.980, 516.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926137;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1477316150481064;  // std dev = 10.852, 509.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.38e-07, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.14648022914417105;  // std dev = 10.306, 482.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109208;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11295964822110817;  // std dev = 10.262, 480.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333685;  // std dev = 1.71e-07, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0557954677940342;  // std dev = 10.718, 502.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420354;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07619236233670876;  // std dev = 10.194, 477.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202543;  // std dev = 2.35e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
Inference time using transfer learning 1.1345534324645996
Parameter learned model CLL:-0.306727 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.435, 164, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 515, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [11.188, 204, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 507, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.217, 154, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 499, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.718, 178, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.22e-07, 474, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.98, 192, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.852, 185, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.38e-07, 474, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.306, 158, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 503, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.262, 156, 324], 'false,true': [1.71e-07, 513, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.718, 178, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 496, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.194, 153, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.35e-07, 467, 0]}]
{'': [0.22312550389680472, -8.968015111535245e-17], 'true': [nan, 0.22312550389680472], 'true,false': [nan, 0.22312550389680472], 'true,false,false': [nan, 0.22312550389680472], 'false': [nan, -8.968015111535245e-17]}
{'': [0.2370867768595093, -1.2438001538206881e-16], 'true': [nan, 0.2370867768595093], 'true,false': [nan, 0.2370867768595093], 'true,false,false': [0.2370867768595093, nan], 'false': [nan, -1.2438001538206881e-16]}
{'': [0.21837852978764744, -8.89958336372871e-18], 'true': [nan, 0.21837852978764744], 'true,false': [nan, 0.21837852978764744], 'true,false,false': [nan, 0.21837852978764744], 'false': [nan, -8.89958336372871e-18]}
{'': [0.22885351026174663, 2.1923391372344864e-16], 'true': [nan, 0.22885351026174663], 'true,false': [0.22885351026174663, nan], 'false': [nan, 2.1923391372344864e-16]}
{'': [0.2336398053001628, -1.6618723029732074e-17], 'true': [nan, 0.2336398053001628], 'true,false': [nan, 0.2336398053001628], 'true,false,false': [nan, 0.2336398053001628], 'false': [nan, -1.6618723029732074e-17]}
{'': [0.23135621678162077, 4.028657388935167e-17], 'true': [nan, 0.23135621678162077], 'true,false': [0.23135621678162077, nan], 'false': [nan, 4.028657388935167e-17]}
{'': [0.22034744580844046, -4.149541324642732e-17], 'true': [nan, 0.22034744580844046], 'true,false': [0.22034744580844046, nan], 'false': [nan, -4.149541324642732e-17]}
{'': [0.2193750000000008, 5.713428430819519e-17], 'true': [nan, 0.2193750000000008], 'true,false': [nan, 0.2193750000000008], 'true,false,false': [nan, 0.2193750000000008], 'false': [5.713428430819519e-17, nan]}
{'': [0.2288535102617413, -1.2087105510031945e-16], 'true': [nan, 0.2288535102617413], 'true,false': [0.2288535102617413, nan], 'false': [nan, -1.2087105510031945e-16]}
{'': [0.2178711285154866, 1.183920912769439e-16], 'true': [nan, 0.2178711285154866], 'true,false': [nan, 0.2178711285154866], 'true,false,false': [nan, 0.2178711285154866], 'false': [nan, 1.183920912769439e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.6449790000915527
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.14185106490048732;  // std dev = 2.53e-07, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839138;  // std dev = 2.98e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.1254446385283923;  // std dev = 0.000, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360626;  // std dev = 8.94e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.11231637819360593;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.10159632948783559;  // std dev = 3.02e-07, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0926912761892607;  // std dev = 8.02e-08, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.0926912761892614;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 5.77e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.08518475138839678;  // std dev = 1.40e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109154;  // std dev = 7.74e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.07877675473109155;  // std dev = 9.66e-08, 423.000 (wgt'ed) examples reached here.  /* #neg=423 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333684;  // std dev = 8.36e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.07324622576333721;  // std dev = 4.71e-08, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6.32e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.06842697784420351;  // std dev = 0.000, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.06419184008202546;  // std dev = 2.30e-07, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
Inference time using transfer learning 1.0173544883728027
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.6449790000915527 

Total Inference Time : 1.4117846488952637 

Total revision time: 8.500797271728516
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.513098955154419 

Total Inference Time : 1.4117846488952637 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7933847904205322
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.51834310985679;  // std dev = 8.326, 309.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048766;  // std dev = 1.84e-07, 329.000 (wgt'ed) examples reached here.  /* #neg=329 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4303507314074157;  // std dev = 8.479, 315.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283921;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.33834106727740576;  // std dev = 8.599, 320.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360682;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.26701073744612297;  // std dev = 8.552, 318.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783662;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21712903339159245;  // std dev = 8.378, 311.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926046;  // std dev = 1.58e-07, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15073895424724268;  // std dev = 8.528, 317.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.01e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07670214259428237;  // std dev = 8.952, 336.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109143;  // std dev = 5.16e-08, 338.000 (wgt'ed) examples reached here.  /* #neg=338 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10857316072344352;  // std dev = 8.352, 310.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333706;  // std dev = 8.30e-08, 329.000 (wgt'ed) examples reached here.  /* #neg=329 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0653104693120187;  // std dev = 8.552, 318.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420299;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03562952293109549;  // std dev = 8.715, 325.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202584;  // std dev = 1.40e-07, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
Inference time using transfer learning 1.1485998630523682
Parameter learned model CLL:-0.303038 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.326, 105, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.84e-07, 329, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.479, 111, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 305, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.599, 116, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 304, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.552, 114, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 290, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.378, 107, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.58e-07, 284, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.528, 113, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.01e-07, 293, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.952, 132, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.16e-08, 338, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.352, 106, 204], 'false,true': [8.3e-08, 329, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.552, 114, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 296, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.715, 121, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.4e-07, 324, 0]}]
{'': [0.22433782637383812, 1.0258595729059197e-16], 'true': [nan, 0.22433782637383812], 'true,false': [nan, 0.22433782637383812], 'true,false,false': [nan, 0.22433782637383812], 'false': [nan, 1.0258595729059197e-16]}
{'': [0.2282086167800427, -1.077462345209988e-16], 'true': [nan, 0.2282086167800427], 'true,false': [nan, 0.2282086167800427], 'true,false,false': [0.2282086167800427, nan], 'false': [nan, -1.077462345209988e-16]}
{'': [0.23109375000000396, -6.573688961596321e-17], 'true': [nan, 0.23109375000000396], 'true,false': [nan, 0.23109375000000396], 'true,false,false': [nan, 0.23109375000000396], 'false': [nan, -6.573688961596321e-17]}
{'': [0.22997508009968132, -5.5128315705525014e-17], 'true': [nan, 0.22997508009968132], 'true,false': [0.22997508009968132, nan], 'false': [nan, -5.5128315705525014e-17]}
{'': [0.22568004880015813, 8.756688644930812e-17], 'true': [nan, 0.22568004880015813], 'true,false': [nan, 0.22568004880015813], 'true,false,false': [nan, 0.22568004880015813], 'false': [nan, 8.756688644930812e-17]}
{'': [0.22939824259371563, 3.486024514181379e-17], 'true': [nan, 0.22939824259371563], 'true,false': [0.22939824259371563, nan], 'false': [nan, 3.486024514181379e-17]}
{'': [0.2385204081632654, 7.883240411539573e-18], 'true': [nan, 0.2385204081632654], 'true,false': [0.2385204081632654, nan], 'false': [nan, 7.883240411539573e-18]}
{'': [0.2250156087408952, 2.092213602637073e-17], 'true': [nan, 0.2250156087408952], 'true,false': [nan, 0.2250156087408952], 'true,false,false': [nan, 0.2250156087408952], 'false': [2.092213602637073e-17, nan]}
{'': [0.2299750800996803, -5.326069915431494e-17], 'true': [nan, 0.2299750800996803], 'true,false': [0.2299750800996803, nan], 'false': [nan, -5.326069915431494e-17]}
{'': [0.23369467455621354, 6.030841121420603e-17], 'true': [nan, 0.23369467455621354], 'true,false': [nan, 0.23369467455621354], 'true,false,false': [nan, 0.23369467455621354], 'false': [nan, 6.030841121420603e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.0558998584747314
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048785;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.1418510649004877;  // std dev = 1.63e-07, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12675889233568477;  // std dev = 0.154, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.125444638528392;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11348979480070952;  // std dev = 0.143, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.11231637819360676;  // std dev = 0.000, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10136949350992439;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.10159632948783662;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0925013159168275;  // std dev = 7.88e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.09269127618926046;  // std dev = 1.60e-07, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08502351023420668;  // std dev = 7.81e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 9.54e-08, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0786382822234703;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07877675473109143;  // std dev = 4.47e-08, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07720285813627467;  // std dev = 0.430, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.07324622576333695;  // std dev = 1.01e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.0722418037622765;  // std dev = 0.416, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.06842697784420292;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06362098145522048;  // std dev = 2.98e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.06419184008202602;  // std dev = 1.01e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
Inference time using transfer learning 1.0394585132598877
Refined model CLL: -0.064223


******************************************
Best model found
******************************************
Results 

CLL : -0.083385 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 2.0558998584747314 

Total Inference Time : 1.613326072692871 

Total revision time: 7.302519083023071
Best scored revision CLL: -0.064223


Results 

CLL : -0.083385 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 7.314820766448975 

Total Inference Time : 1.613326072692871 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.3544750213623047
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5049819485352085;  // std dev = 10.910, 521.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048766;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.43307225840467;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3784177273076064;  // std dev = 10.460, 499.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360583;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2980161131833853;  // std dev = 10.394, 496.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783537;  // std dev = 3.55e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19432236038405834;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926132;  // std dev = 0.000, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15471749026663104;  // std dev = 10.753, 513.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.44e-07, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11870007959764893;  // std dev = 10.712, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109214;  // std dev = 1.05e-07, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08682772047057202;  // std dev = 10.753, 513.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333693;  // std dev = 1.50e-07, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.027117841730246183;  // std dev = 11.341, 545.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420355;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0566009662652109;  // std dev = 10.792, 515.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202536;  // std dev = 2.46e-07, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
Inference time using transfer learning 0.9674556255340576
Parameter learned model CLL:-0.29654 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.91, 184, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 494, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.89, 183, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 469, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.46, 162, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 494, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.394, 159, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.55e-07, 505, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.89, 183, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 471, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.753, 176, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 474, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.712, 174, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.05e-07, 513, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.753, 176, 337], 'false,true': [1.5e-07, 496, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.341, 208, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 503, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.792, 178, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.46e-07, 515, 0]}]
{'': [0.22844006616539395, -3.595864047368928e-18], 'true': [nan, 0.22844006616539395], 'true,false': [nan, 0.22844006616539395], 'true,false,false': [nan, 0.22844006616539395], 'false': [nan, -3.595864047368928e-18]}
{'': [0.22807322485206613, -1.3635148447421966e-16], 'true': [nan, 0.22807322485206613], 'true,false': [nan, 0.22807322485206613], 'true,false,false': [0.22807322485206613, nan], 'false': [nan, -1.3635148447421966e-16]}
{'': [0.21925213151753958, -1.0787592142106784e-17], 'true': [nan, 0.21925213151753958], 'true,false': [nan, 0.21925213151753958], 'true,false,false': [nan, 0.21925213151753958], 'false': [nan, -1.0787592142106784e-17]}
{'': [0.2178029071279879, 2.497452190047877e-16], 'true': [nan, 0.2178029071279879], 'true,false': [0.2178029071279879, nan], 'false': [nan, 2.497452190047877e-16]}
{'': [0.22807322485207188, -7.542916515500002e-18], 'true': [nan, 0.22807322485207188], 'true,false': [nan, 0.22807322485207188], 'true,false,false': [nan, 0.22807322485207188], 'false': [nan, -7.542916515500002e-18]}
{'': [0.22537608912904125, 4.403416215812857e-17], 'true': [nan, 0.22537608912904125], 'true,false': [0.22537608912904125, nan], 'false': [nan, 4.403416215812857e-17]}
{'': [0.22456255912009912, 2.1641774359164844e-17], 'true': [nan, 0.22456255912009912], 'true,false': [0.22456255912009912, nan], 'false': [nan, 2.1641774359164844e-17]}
{'': [0.22537608912904114, 4.566239859345402e-17], 'true': [nan, 0.22537608912904114], 'true,false': [nan, 0.22537608912904114], 'true,false,false': [nan, 0.22537608912904114], 'false': [4.566239859345402e-17, nan]}
{'': [0.2359936032320501, -1.2007183407476843e-16], 'true': [nan, 0.2359936032320501], 'true,false': [0.2359936032320501, nan], 'false': [nan, -1.2007183407476843e-16]}
{'': [0.22617023282118898, 1.1727404376623014e-16], 'true': [nan, 0.22617023282118898], 'true,false': [nan, 0.22617023282118898], 'true,false,false': [nan, 0.22617023282118898], 'false': [nan, 1.1727404376623014e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.7462403774261475
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004883;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else return -0.14185106490048802;  // std dev = 0.000, 529.000 (wgt'ed) examples reached here.  /* #neg=529 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839133;  // std dev = 4.21e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.1254446385283923;  // std dev = 0.000, 526.000 (wgt'ed) examples reached here.  /* #neg=526 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360653;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else return -0.11231637819360589;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.10159632948783538;  // std dev = 3.51e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926079;  // std dev = 6.83e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.09269127618926146;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 5.77e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109157;  // std dev = 7.60e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.07877675473109215;  // std dev = 0.000, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333689;  // std dev = 6.50e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.07324622576333688;  // std dev = 1.60e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.41e-08, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.06842697784420353;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   else return -0.06419184008202537;  // std dev = 2.43e-07, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
Inference time using transfer learning 0.8385579586029053
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.7462403774261475 

Total Inference Time : 1.647881031036377 

Total revision time: 8.935904502868652
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.948206186294556 

Total Inference Time : 1.647881031036377 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.224308729171753
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.49761762580159524;  // std dev = 11.023, 527.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004879;  // std dev = 0.000, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.42814042158705695;  // std dev = 10.985, 525.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.37427838648401646;  // std dev = 10.567, 504.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360585;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.25950180876587486;  // std dev = 11.060, 529.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783538;  // std dev = 3.53e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21040658954971575;  // std dev = 10.851, 518.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926144;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1682975401206153;  // std dev = 10.692, 510.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.44e-07, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1275768571635614;  // std dev = 10.671, 509.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109175;  // std dev = 0.000, 449.000 (wgt'ed) examples reached here.  /* #neg=449 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08325938079081482;  // std dev = 10.871, 519.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333692;  // std dev = 1.52e-07, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0809326061845088;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420355;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03725342417963054;  // std dev = 10.967, 524.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820254;  // std dev = 2.44e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
Inference time using transfer learning 0.9996790885925293
Parameter learned model CLL:-0.301179 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.023, 190, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 519, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.985, 188, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 489, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.567, 167, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.06, 192, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.53e-07, 502, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.851, 181, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 498, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.692, 173, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 508, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.671, 172, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 449, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.871, 182, 337], 'false,true': [1.52e-07, 497, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.588, 168, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 505, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.967, 187, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.44e-07, 484, 0]}]
{'': [0.2305484843138481, -1.0267958609250002e-16], 'true': [nan, 0.2305484843138481], 'true,false': [nan, 0.2305484843138481], 'true,false,false': [nan, 0.2305484843138481], 'false': [nan, -1.0267958609250002e-16]}
{'': [0.22986303854875523, -1.2350947349613194e-16], 'true': [nan, 0.22986303854875523], 'true,false': [nan, 0.22986303854875523], 'true,false,false': [0.22986303854875523, nan], 'false': [nan, -1.2350947349613194e-16]}
{'': [0.22155690980095552, -9.063045098980869e-18], 'true': [nan, 0.22155690980095552], 'true,false': [nan, 0.22155690980095552], 'true,false,false': [nan, 0.22155690980095552], 'false': [nan, -9.063045098980869e-18]}
{'': [0.23121701251782212, 2.4769916087254486e-16], 'true': [nan, 0.23121701251782212], 'true,false': [0.23121701251782212, nan], 'false': [nan, 2.4769916087254486e-16]}
{'': [0.2273259194108612, -2.853585284177109e-17], 'true': [nan, 0.2273259194108612], 'true,false': [nan, 0.2273259194108612], 'true,false,false': [nan, 0.2273259194108612], 'false': [nan, -2.853585284177109e-17]}
{'': [0.22414840445982287, 4.108699382471052e-17], 'true': [nan, 0.22414840445982287], 'true,false': [0.22414840445982287, nan], 'false': [nan, 4.108699382471052e-17]}
{'': [0.22372925841725097, 0.0], 'true': [nan, 0.22372925841725097], 'true,false': [0.22372925841725097, nan], 'false': [nan, 0.0]}
{'': [0.22770185735871326, 4.6464062197592067e-17], 'true': [nan, 0.22770185735871326], 'true,false': [nan, 0.22770185735871326], 'true,false,false': [nan, 0.22770185735871326], 'false': [4.6464062197592067e-17, nan]}
{'': [0.22200176453288697, -1.1959630205863073e-16], 'true': [nan, 0.22200176453288697], 'true,false': [0.22200176453288697, nan], 'false': [nan, -1.1959630205863073e-16]}
{'': [0.22951386865567389, 1.2340908827444921e-16], 'true': [nan, 0.22951386865567389], 'true,false': [nan, 0.22951386865567389], 'true,false,false': [nan, 0.22951386865567389], 'false': [nan, 1.2340908827444921e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.7133169174194336
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048832;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   else return -0.14185106490048754;  // std dev = 1.46e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283912;  // std dev = 6.99e-08, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.12544463852839235;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360633;  // std dev = 7.60e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.11231637819360576;  // std dev = 0.000, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   else return -0.10159632948783547;  // std dev = 3.33e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926071;  // std dev = 7.60e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.0926912761892613;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 6.32e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.08518475138839678;  // std dev = 1.53e-07, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109154;  // std dev = 7.67e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.07877675473109198;  // std dev = 1.48e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333689;  // std dev = 6.66e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.07324622576333692;  // std dev = 1.55e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420264;  // std dev = 7.15e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.06842697784420351;  // std dev = 0.000, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   else return -0.06419184008202532;  // std dev = 2.46e-07, 534.000 (wgt'ed) examples reached here.  /* #neg=534 */
Inference time using transfer learning 0.8648643493652344
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.7133169174194336 

Total Inference Time : 1.5092413425445557 

Total revision time: 8.460429906845093
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.472731590270996 

Total Inference Time : 1.5092413425445557 

Run: 4

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.2504611015319824
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5127674089950903;  // std dev = 10.611, 498.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048793;  // std dev = 0.000, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.42922296262150056;  // std dev = 10.750, 505.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839224;  // std dev = 0.000, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.37859318871948267;  // std dev = 10.272, 482.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360585;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2593423494929281;  // std dev = 10.807, 508.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783541;  // std dev = 3.48e-07, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22146420191519064;  // std dev = 10.424, 489.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926146;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.17043436512403412;  // std dev = 10.360, 486.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.44e-07, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10784785760781472;  // std dev = 10.671, 501.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109211;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07607866391472912;  // std dev = 10.750, 505.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333698;  // std dev = 1.35e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06268711994626598;  // std dev = 10.671, 501.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420355;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07183879520641288;  // std dev = 10.294, 483.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202544;  // std dev = 2.31e-07, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
Inference time using transfer learning 1.1593759059906006
Parameter learned model CLL:-0.30052 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.611, 172, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 520, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.75, 179, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 455, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.272, 156, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 489, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.807, 182, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.48e-07, 497, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.424, 163, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 500, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.36, 160, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 507, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.671, 175, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 508, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.75, 179, 326], 'false,true': [1.35e-07, 486, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.671, 175, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 503, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.294, 157, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.31e-07, 463, 0]}]
{'': [0.22609312753020383, -1.0589819619501494e-16], 'true': [nan, 0.22609312753020383], 'true,false': [nan, 0.22609312753020383], 'true,false,false': [nan, 0.22609312753020383], 'false': [nan, -1.0589819619501494e-16]}
{'': [0.22881678266837313, -1.171224289714451e-16], 'true': [nan, 0.22881678266837313], 'true,false': [nan, 0.22881678266837313], 'true,false,false': [0.22881678266837313, nan], 'false': [nan, -1.171224289714451e-16]}
{'': [0.2189011897178066, -1.0897894720246936e-17], 'true': [nan, 0.2189011897178066], 'true,false': [nan, 0.2189011897178066], 'true,false,false': [nan, 0.2189011897178066], 'false': [nan, -1.0897894720246936e-17]}
{'': [0.22991195982391516, 2.4304278687971235e-16], 'true': [nan, 0.22991195982391516], 'true,false': [0.22991195982391516, nan], 'false': [nan, 2.4304278687971235e-16]}
{'': [0.22222222222222046, -2.842170943040401e-17], 'true': [nan, 0.22222222222222046], 'true,false': [nan, 0.22222222222222046], 'true,false,false': [nan, 0.22222222222222046], 'false': [nan, -2.842170943040401e-17]}
{'': [0.2208335450219278, 4.1168033260262216e-17], 'true': [nan, 0.2208335450219278], 'true,false': [0.2208335450219278, nan], 'false': [nan, 4.1168033260262216e-17]}
{'': [0.22728993111581047, -4.545795061457334e-17], 'true': [nan, 0.22728993111581047], 'true,false': [0.22728993111581047, nan], 'false': [nan, -4.545795061457334e-17]}
{'': [0.2288167826683647, 3.746431605730981e-17], 'true': [nan, 0.2288167826683647], 'true,false': [nan, 0.2288167826683647], 'true,false,false': [nan, 0.2288167826683647], 'false': [3.746431605730981e-17, nan]}
{'': [0.22728993111581422, -1.2536912087218467e-16], 'true': [nan, 0.22728993111581422], 'true,false': [0.22728993111581422, nan], 'false': [nan, -1.2536912087218467e-16]}
{'': [0.21939311326294786, 1.1509871529591257e-16], 'true': [nan, 0.21939311326294786], 'true,false': [nan, 0.21939311326294786], 'true,false,false': [nan, 0.21939311326294786], 'false': [nan, 1.1509871529591257e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.4869394302368164
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1418510649004881;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.14185106490048774;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839133;  // std dev = 4.21e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.12544463852839224;  // std dev = 0.000, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360654;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else return -0.11231637819360585;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.10159632948783533;  // std dev = 3.67e-07, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926071;  // std dev = 7.74e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.09269127618926139;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 6.14e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.08518475138839678;  // std dev = 1.52e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0787767547310915;  // std dev = 8.02e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.07877675473109202;  // std dev = 1.37e-07, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333695;  // std dev = 5.48e-08, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.07324622576333724;  // std dev = 0.000, 442.000 (wgt'ed) examples reached here.  /* #neg=442 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 5.58e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.06842697784420355;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.06419184008202546;  // std dev = 2.26e-07, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
Inference time using transfer learning 1.0056781768798828
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.4869394302368164 

Total Inference Time : 1.6400258541107178 

Total revision time: 8.219433069229126
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.23168420791626 

Total Inference Time : 1.6400258541107178 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.206127405166626
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.533148935099508;  // std dev = 10.262, 480.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048746;  // std dev = 1.93e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.45379989923346986;  // std dev = 10.284, 481.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 445.000 (wgt'ed) examples reached here.  /* #neg=445 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.33434346623460154;  // std dev = 10.776, 505.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360589;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.27464348176859066;  // std dev = 10.539, 493.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878355;  // std dev = 3.25e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21477417968243592;  // std dev = 10.435, 488.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926154;  // std dev = 0.000, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.16812998850428126;  // std dev = 10.328, 483.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.41e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11127924381221627;  // std dev = 10.559, 494.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109168;  // std dev = 5.96e-08, 439.000 (wgt'ed) examples reached here.  /* #neg=439 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08651127193806693;  // std dev = 10.518, 492.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333689;  // std dev = 1.60e-07, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.04979698685915109;  // std dev = 10.757, 504.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420348;  // std dev = 0.000, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06302098177205849;  // std dev = 10.371, 485.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202541;  // std dev = 2.40e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
Inference time using transfer learning 1.1281137466430664
Parameter learned model CLL:-0.305997 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.262, 156, 324], 'false,true': [0.0, 0, 0], 'false,false': [1.93e-07, 475, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.284, 157, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 445, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.776, 181, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.539, 169, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.25e-07, 478, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.435, 164, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 518, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.328, 159, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.41e-07, 486, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.559, 170, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.96e-08, 439, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.518, 168, 324], 'false,true': [1.6e-07, 503, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.757, 180, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 458, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.371, 161, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.4e-07, 476, 0]}]
{'': [0.21937500000000282, 7.853367079453738e-17], 'true': [nan, 0.21937500000000282], 'true,false': [nan, 0.21937500000000282], 'true,false,false': [nan, 0.21937500000000282], 'false': [nan, 7.853367079453738e-17]}
{'': [0.21986419491616702, -1.3372573959529975e-16], 'true': [nan, 0.21986419491616702], 'true,false': [nan, 0.21986419491616702], 'true,false,false': [0.21986419491616702, nan], 'false': [nan, -1.3372573959529975e-16]}
{'': [0.22995392608567486, -5.551115123125783e-18], 'true': [nan, 0.22995392608567486], 'true,false': [nan, 0.22995392608567486], 'true,false,false': [nan, 0.22995392608567486], 'false': [nan, -5.551115123125783e-18]}
{'': [0.22528790490806605, 2.211155480006588e-16], 'true': [nan, 0.22528790490806605], 'true,false': [0.22528790490806605, nan], 'false': [nan, 2.211155480006588e-16]}
{'': [0.22312550389680566, -4.115112369266989e-17], 'true': [nan, 0.22312550389680566], 'true,false': [nan, 0.22312550389680566], 'true,false,false': [nan, 0.22312550389680566], 'false': [nan, -4.115112369266989e-17]}
{'': [0.22082481385749272, 4.11193712824132e-17], 'true': [nan, 0.22082481385749272], 'true,false': [0.22082481385749272, nan], 'false': [nan, 4.11193712824132e-17]}
{'': [0.22570440426822475, 8.092741865149204e-18], 'true': [nan, 0.22570440426822475], 'true,false': [0.22570440426822475, nan], 'false': [nan, 8.092741865149204e-18]}
{'': [0.22486615110053498, 5.120710570835712e-17], 'true': [nan, 0.22486615110053498], 'true,false': [nan, 0.22486615110053498], 'true,false,false': [nan, 0.22486615110053498], 'false': [5.120710570835712e-17, nan]}
{'': [0.22959183673469488, -1.2411226825503933e-16], 'true': [nan, 0.22959183673469488], 'true,false': [0.22959183673469488, nan], 'false': [nan, -1.2411226825503933e-16]}
{'': [0.2217621426293963, 1.2128486823636163e-16], 'true': [nan, 0.2217621426293963], 'true,false': [nan, 0.2217621426293963], 'true,false,false': [nan, 0.2217621426293963], 'false': [nan, 1.2128486823636163e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.6403391361236572
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.14185106490048768;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1254446385283914;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.12544463852839233;  // std dev = 0.000, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360633;  // std dev = 7.88e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.11231637819360596;  // std dev = 0.000, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.10159632948783544;  // std dev = 3.37e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926079;  // std dev = 6.50e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.09269127618926137;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 6.14e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.08518475138839678;  // std dev = 1.37e-07, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109154;  // std dev = 7.60e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.07877675473109202;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333682;  // std dev = 9.06e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.07324622576333713;  // std dev = 8.69e-08, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420264;  // std dev = 7.07e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.06842697784420358;  // std dev = 0.000, 521.000 (wgt'ed) examples reached here.  /* #neg=521 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.06419184008202543;  // std dev = 2.37e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
Inference time using transfer learning 1.0395421981811523
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.6403391361236572 

Total Inference Time : 1.4508190155029297 

Total revision time: 8.38510274887085
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.397353887557983 

Total Inference Time : 1.4508190155029297 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7635681629180908
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5119950889456623;  // std dev = 8.403, 312.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048788;  // std dev = 7.88e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4253187422046187;  // std dev = 8.552, 318.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839202;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3289884374795389;  // std dev = 8.737, 326.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360694;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2800266640520118;  // std dev = 8.454, 314.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783663;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2025783010627979;  // std dev = 8.576, 319.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926043;  // std dev = 1.48e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15630353664714441;  // std dev = 8.528, 317.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.01e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.09190336146998303;  // std dev = 8.826, 330.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109143;  // std dev = 4.94e-08, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09238983908617432;  // std dev = 8.552, 318.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333706;  // std dev = 8.30e-08, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06562530752751386;  // std dev = 8.599, 320.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420292;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03409035902426893;  // std dev = 8.782, 328.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202612;  // std dev = 7.45e-08, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
Inference time using transfer learning 1.212080955505371
Parameter learned model CLL:-0.300108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.403, 108, 204], 'false,true': [0.0, 0, 0], 'false,false': [7.88e-08, 296, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.552, 114, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 302, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.737, 122, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 276, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.454, 110, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 304, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.576, 115, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.48e-07, 292, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.528, 113, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.01e-07, 293, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.826, 126, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [4.94e-08, 282, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.552, 114, 204], 'false,true': [8.3e-08, 326, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.599, 116, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 284, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.782, 124, 204], 'false,true': [0.0, 0, 0], 'false,false': [7.45e-08, 269, 0]}]
{'': [0.22633136094675016, 2.100421938480026e-17], 'true': [nan, 0.22633136094675016], 'true,false': [nan, 0.22633136094675016], 'true,false,false': [nan, 0.22633136094675016], 'false': [nan, 2.100421938480026e-17]}
{'': [0.2299750800996812, -8.528865619636965e-17], 'true': [nan, 0.2299750800996812], 'true,false': [nan, 0.2299750800996812], 'true,false,false': [0.2299750800996812, nan], 'false': [nan, -8.528865619636965e-17]}
{'': [0.2341826941172013, -1.1102230246251565e-16], 'true': [nan, 0.2341826941172013], 'true,false': [nan, 0.2341826941172013], 'true,false,false': [nan, 0.2341826941172013], 'false': [nan, -1.1102230246251565e-16]}
{'': [0.2275954399772843, -5.40503314620142e-17], 'true': [nan, 0.2275954399772843], 'true,false': [0.2275954399772843, nan], 'false': [nan, -5.40503314620142e-17]}
{'': [0.23054018730161932, 7.452181946114065e-17], 'true': [nan, 0.23054018730161932], 'true,false': [nan, 0.23054018730161932], 'true,false,false': [nan, 0.23054018730161932], 'false': [nan, 7.452181946114065e-17]}
{'': [0.22939824259371625, 3.486024514181379e-17], 'true': [nan, 0.22939824259371625], 'true,false': [0.22939824259371625, nan], 'false': [nan, 3.486024514181379e-17]}
{'': [0.23603305785124007, 8.661314376508314e-18], 'true': [nan, 0.23603305785124007], 'true,false': [0.23603305785124007, nan], 'false': [nan, 8.661314376508314e-18]}
{'': [0.2299750800996798, 2.111467102047844e-17], 'true': [nan, 0.2299750800996798], 'true,false': [nan, 0.2299750800996798], 'true,false,false': [nan, 0.2299750800996798], 'false': [2.111467102047844e-17, nan]}
{'': [0.23109375000000068, -4.378344322465406e-17], 'true': [nan, 0.23109375000000068], 'true,false': [0.23109375000000068, nan], 'false': [nan, -4.378344322465406e-17]}
{'': [0.23512790005948914, 2.063611569935235e-17], 'true': [nan, 0.23512790005948914], 'true,false': [nan, 0.23512790005948914], 'true,false,false': [nan, 0.23512790005948914], 'false': [nan, 2.063611569935235e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.2910242080688477
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048763;  // std dev = 8.69e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.14185106490048788;  // std dev = 6.66e-08, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1268674087050946;  // std dev = 0.154, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.12544463852839202;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11217460422602715;  // std dev = 6.99e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360679;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10147946683697262;  // std dev = 3.94e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.1015963294878366;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09604806167885928;  // std dev = 0.382, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return -0.09269127618926042;  // std dev = 1.70e-07, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08483310386928271;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 1.05e-07, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07847471749371396;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07877675473109143;  // std dev = 3.33e-08, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07298414604808202;  // std dev = 2.58e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07324622576333688;  // std dev = 1.10e-07, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06819752550212693;  // std dev = 5.16e-08, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | else return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06842697784420304;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.06398935551598754;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( female(B) )
%   | | | then return -0.06398935551598743;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.25809816923369383;  // std dev = 0.672, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.064191840082026;  // std dev = 1.06e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
Inference time using transfer learning 1.0227932929992676
Refined model CLL: -0.064433


******************************************
Best model found
******************************************
Results 

CLL : -0.088446 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 2.2910242080688477 

Total Inference Time : 1.4649922847747803 

Total revision time: 7.379349231719971
Best scored revision CLL: -0.064433


Results 

CLL : -0.088446 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 7.3916003704071045 

Total Inference Time : 1.4649922847747803 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.364666700363159
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5112497102933063;  // std dev = 10.812, 516.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4473214144038743;  // std dev = 10.651, 508.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839238;  // std dev = 0.000, 538.000 (wgt'ed) examples reached here.  /* #neg=538 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.36084858302359185;  // std dev = 10.671, 509.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936058;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.24427894501933314;  // std dev = 11.221, 538.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783531;  // std dev = 3.70e-07, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22088448886335138;  // std dev = 10.671, 509.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926137;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1738342575462563;  // std dev = 10.546, 503.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.49e-07, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.13718509632290923;  // std dev = 10.438, 498.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109215;  // std dev = 1.05e-07, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05890300887356293;  // std dev = 11.132, 533.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333689;  // std dev = 1.60e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.05664974070612519;  // std dev = 10.948, 523.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0684269778442035;  // std dev = 0.000, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.053004079474600306;  // std dev = 10.792, 515.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202543;  // std dev = 2.35e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
Inference time using transfer learning 1.0113565921783447
Parameter learned model CLL:-0.298183 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.812, 179, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 496, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.651, 171, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 538, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.671, 172, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 503, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.221, 201, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.7e-07, 519, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.671, 172, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.546, 166, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.49e-07, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.438, 161, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.05e-07, 514, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.132, 196, 337], 'false,true': [1.6e-07, 504, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.948, 186, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 474, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.792, 178, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.35e-07, 467, 0]}]
{'': [0.22656015263506063, -1.4325458382260084e-17], 'true': [nan, 0.22656015263506063], 'true,false': [nan, 0.22656015263506063], 'true,false,false': [nan, 0.22656015263506063], 'false': [nan, -1.4325458382260084e-17]}
{'': [0.22330507161014707, -1.9150315368998983e-16], 'true': [nan, 0.22330507161014707], 'true,false': [nan, 0.22330507161014707], 'true,false,false': [0.22330507161014707, nan], 'false': [nan, -1.9150315368998983e-16]}
{'': [0.22372925841724786, -8.82881132902709e-18], 'true': [nan, 0.22372925841724786], 'true,false': [nan, 0.22372925841724786], 'true,false,false': [nan, 0.22372925841724786], 'false': [nan, -8.82881132902709e-18]}
{'': [0.23402454360774025, 2.6354427097075005e-16], 'true': [nan, 0.23402454360774025], 'true,false': [0.23402454360774025, nan], 'false': [nan, 2.6354427097075005e-16]}
{'': [0.2237292584172489, -1.6618723029732074e-17], 'true': [nan, 0.2237292584172489], 'true,false': [nan, 0.2237292584172489], 'true,false,false': [nan, 0.2237292584172489], 'false': [nan, -1.6618723029732074e-17]}
{'': [0.22110675904809887, 4.503947361562501e-17], 'true': [nan, 0.22110675904809887], 'true,false': [0.22110675904809887, nan], 'false': [nan, 4.503947361562501e-17]}
{'': [0.21877469718230078, 2.1599669739789038e-17], 'true': [nan, 0.21877469718230078], 'true,false': [0.21877469718230078, nan], 'false': [nan, 2.1599669739789038e-17]}
{'': [0.23250460243092935, 5.1105504308142124e-17], 'true': [nan, 0.23250460243092935], 'true,false': [nan, 0.23250460243092935], 'true,false,false': [nan, 0.23250460243092935], 'false': [5.1105504308142124e-17, nan]}
{'': [0.22916034497256255, -1.2179661873524923e-16], 'true': [nan, 0.22916034497256255], 'true,false': [0.22916034497256255, nan], 'false': [nan, -1.2179661873524923e-16]}
{'': [0.226170232821189, 1.183920912769439e-16], 'true': [nan, 0.226170232821189], 'true,false': [nan, 0.226170232821189], 'true,false,false': [nan, 0.226170232821189], 'false': [nan, 1.183920912769439e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.686737298965454
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.1418510649004876;  // std dev = 9.42e-08, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839138;  // std dev = 2.11e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.12544463852839235;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360649;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   else return -0.11231637819360575;  // std dev = 0.000, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.10159632948783529;  // std dev = 3.76e-07, 526.000 (wgt'ed) examples reached here.  /* #neg=526 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926072;  // std dev = 7.74e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.09269127618926133;  // std dev = 0.000, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 5.58e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0787767547310915;  // std dev = 8.16e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.07877675473109184;  // std dev = 1.74e-07, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333688;  // std dev = 6.58e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.07324622576333757;  // std dev = 0.000, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.75e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.06842697784420355;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.06419184008202544;  // std dev = 2.31e-07, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
Inference time using transfer learning 0.8619325160980225
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.686737298965454 

Total Inference Time : 1.6514737606048584 

Total revision time: 8.7406325340271
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.752883672714233 

Total Inference Time : 1.6514737606048584 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.2441751956939697
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5334996365023136;  // std dev = 10.460, 499.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048766;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.45012319857706834;  // std dev = 10.546, 503.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839235;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3798211509014625;  // std dev = 10.281, 491.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360585;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.25303196229059993;  // std dev = 10.929, 522.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783559;  // std dev = 3.02e-07, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19885344355734624;  // std dev = 10.812, 516.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926142;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1634944597613443;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.49e-07, 528.000 (wgt'ed) examples reached here.  /* #neg=528 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10348971427034762;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109187;  // std dev = 0.000, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09067097979336478;  // std dev = 10.692, 510.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.073246225763337;  // std dev = 1.30e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06860436117658543;  // std dev = 10.692, 510.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420354;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.056056709834555976;  // std dev = 10.630, 507.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202536;  // std dev = 2.45e-07, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
Inference time using transfer learning 0.9859452247619629
Parameter learned model CLL:-0.305658 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.46, 162, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.546, 166, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 501, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.281, 154, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 489, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.929, 185, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.02e-07, 458, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.812, 179, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.588, 168, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.49e-07, 528, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.89, 183, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 467, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.692, 173, 337], 'false,true': [1.3e-07, 482, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.692, 173, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 498, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.63, 170, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.45e-07, 510, 0]}]
{'': [0.21925213151754677, 0.0], 'true': [nan, 0.21925213151754677], 'true,false': [nan, 0.21925213151754677], 'true,false,false': [nan, 0.21925213151754677], 'false': [nan, 0.0]}
{'': [0.22110675904810426, -1.400520861403391e-16], 'true': [nan, 0.22110675904810426], 'true,false': [nan, 0.22110675904810426], 'true,false,false': [0.22110675904810426, nan], 'false': [nan, -1.400520861403391e-16]}
{'': [0.21527204549507806, -1.0897894720246936e-17], 'true': [nan, 0.21527204549507806], 'true,false': [nan, 0.21527204549507806], 'true,false,false': [nan, 0.21527204549507806], 'false': [nan, -1.0897894720246936e-17]}
{'': [0.22880242509651608, 1.9974318172295393e-16], 'true': [nan, 0.22880242509651608], 'true,false': [0.22880242509651608, nan], 'false': [nan, 1.9974318172295393e-16]}
{'': [0.22656015263505797, -2.1751308237554086e-17], 'true': [nan, 0.22656015263505797], 'true,false': [nan, 0.22656015263505797], 'true,false,false': [nan, 0.22656015263505797], 'false': [nan, -2.1751308237554086e-17]}
{'': [0.2220017645328887, 4.2053902447922596e-17], 'true': [nan, 0.2220017645328887], 'true,false': [0.2220017645328887, nan], 'false': [nan, 4.2053902447922596e-17]}
{'': [0.2280732248520697, -1.5215047874948613e-17], 'true': [nan, 0.2280732248520697], 'true,false': [0.2280732248520697, nan], 'false': [nan, -1.5215047874948613e-17]}
{'': [0.22414840445982287, 3.501118251929954e-17], 'true': [nan, 0.22414840445982287], 'true,false': [nan, 0.22414840445982287], 'true,false,false': [nan, 0.22414840445982287], 'false': [3.501118251929954e-17, nan]}
{'': [0.22414840445982334, -1.2038562917622179e-16], 'true': [nan, 0.22414840445982334], 'true,false': [0.22414840445982334, nan], 'false': [nan, -1.2038562917622179e-16]}
{'': [0.2228757941092947, 1.1755302613678128e-16], 'true': [nan, 0.2228757941092947], 'true,false': [nan, 0.2228757941092947], 'true,false,false': [nan, 0.2228757941092947], 'false': [nan, 1.1755302613678128e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.456268548965454
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048796;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.1418510649004879;  // std dev = 0.000, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283916;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   else return -0.12544463852839227;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360635;  // std dev = 7.30e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.11231637819360589;  // std dev = 0.000, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.10159632948783541;  // std dev = 3.48e-07, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926071;  // std dev = 7.88e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.09269127618926148;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.66e-08, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.08518475138839678;  // std dev = 1.46e-07, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109154;  // std dev = 8.16e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.07877675473109216;  // std dev = 0.000, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333688;  // std dev = 6.99e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.07324622576333696;  // std dev = 1.41e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420264;  // std dev = 6.99e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.06842697784420357;  // std dev = 0.000, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.06419184008202537;  // std dev = 2.43e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
Inference time using transfer learning 0.860706090927124
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.456268548965454 

Total Inference Time : 1.5736033916473389 

Total revision time: 8.267399549484253
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.279650688171387 

Total Inference Time : 1.5736033916473389 

Run: 5

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.119917154312134
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5088475378939191;  // std dev = 10.671, 501.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048732;  // std dev = 2.49e-07, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.43896066536241657;  // std dev = 10.611, 498.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.33403642838338066;  // std dev = 10.938, 515.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360588;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2787163286737783;  // std dev = 10.651, 500.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783542;  // std dev = 3.42e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23035729779314473;  // std dev = 10.360, 486.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926137;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15820603355047366;  // std dev = 10.591, 497.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.44e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1280939844514248;  // std dev = 10.446, 490.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109201;  // std dev = 1.43e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09239349074351606;  // std dev = 10.509, 493.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.073246225763337;  // std dev = 1.28e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.059333438507356354;  // std dev = 10.671, 501.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420351;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02985581774273784;  // std dev = 10.901, 513.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202546;  // std dev = 2.28e-07, 454.000 (wgt'ed) examples reached here.  /* #neg=454 */
Inference time using transfer learning 1.1405811309814453
Parameter learned model CLL:-0.296025 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.671, 175, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.49e-07, 464, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.611, 172, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 485, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.938, 189, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 486, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.651, 174, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.42e-07, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.36, 160, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 483, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.591, 171, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 471, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.446, 164, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.509, 167, 326], 'false,true': [1.28e-07, 481, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.671, 175, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 482, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.901, 187, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.28e-07, 454, 0]}]
{'': [0.22728993111581497, 1.339924340064844e-16], 'true': [nan, 0.22728993111581497], 'true,false': [nan, 0.22728993111581497], 'true,false,false': [nan, 0.22728993111581497], 'false': [nan, 1.339924340064844e-16]}
{'': [0.22609312753020017, -1.3734717830414308e-16], 'true': [nan, 0.22609312753020017], 'true,false': [nan, 0.22609312753020017], 'true,false,false': [0.22609312753020017, nan], 'false': [nan, -1.3734717830414308e-16]}
{'': [0.2323084173814754, -5.482582837655094e-18], 'true': [nan, 0.2323084173814754], 'true,false': [nan, 0.2323084173814754], 'true,false,false': [nan, 0.2323084173814754], 'false': [nan, -5.482582837655094e-18]}
{'': [0.22689599999999963, 2.38291771139058e-16], 'true': [nan, 0.22689599999999963], 'true,false': [0.22689599999999963, nan], 'false': [nan, 2.38291771139058e-16]}
{'': [0.2208335450219292, -1.654990844161724e-17], 'true': [nan, 0.2208335450219292], 'true,false': [nan, 0.2208335450219292], 'true,false,false': [nan, 0.2208335450219292], 'false': [nan, -1.654990844161724e-17]}
{'': [0.225684084385587, 4.4314634528562514e-17], 'true': [nan, 0.225684084385587], 'true,false': [0.225684084385587, nan], 'false': [nan, 4.4314634528562514e-17]}
{'': [0.22267388588088427, 4.1690007455312e-17], 'true': [nan, 0.22267388588088427], 'true,false': [0.22267388588088427, nan], 'false': [nan, 4.1690007455312e-17]}
{'': [0.22399598434883405, 3.416070845000482e-17], 'true': [nan, 0.22399598434883405], 'true,false': [nan, 0.22399598434883405], 'true,false,false': [nan, 0.22399598434883405], 'false': [3.416070845000482e-17, nan]}
{'': [0.22728993111581286, -1.2069644500074315e-16], 'true': [nan, 0.22728993111581286], 'true,false': [0.22728993111581286, nan], 'false': [nan, -1.2069644500074315e-16]}
{'': [0.2316458245462022, 1.149349827255118e-16], 'true': [nan, 0.2316458245462022], 'true,false': [nan, 0.2316458245462022], 'true,false,false': [nan, 0.2316458245462022], 'false': [nan, 1.149349827255118e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.8115196228027344
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048788;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.14185106490048746;  // std dev = 1.88e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283913;  // std dev = 5.58e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.12544463852839233;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360621;  // std dev = 9.31e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.11231637819360574;  // std dev = 0.000, 530.000 (wgt'ed) examples reached here.  /* #neg=530 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.10159632948783552;  // std dev = 3.18e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926076;  // std dev = 7.45e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.09269127618926153;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839678;  // std dev = 6.83e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.08518475138839678;  // std dev = 1.44e-07, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109158;  // std dev = 7.60e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.07877675473109175;  // std dev = 1.90e-07, 449.000 (wgt'ed) examples reached here.  /* #neg=449 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333731;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.07324622576333693;  // std dev = 1.49e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6.50e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.06842697784420355;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.06419184008202539;  // std dev = 2.45e-07, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
Inference time using transfer learning 1.0426287651062012
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.8115196228027344 

Total Inference Time : 1.4736747741699219 

Total revision time: 8.328203201293945
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.34025526046753 

Total Inference Time : 1.4736747741699219 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.181698799133301
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5074475322938967;  // std dev = 10.660, 499.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048754;  // std dev = 1.46e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.42999723416198654;  // std dev = 10.718, 502.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3796034250619945;  // std dev = 10.239, 479.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360586;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2851113253381508;  // std dev = 10.392, 486.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878356;  // std dev = 2.98e-07, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22854470679878913;  // std dev = 10.194, 477.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926128;  // std dev = 0.000, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15086113244502794;  // std dev = 10.518, 492.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.38e-07, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.12003069002971248;  // std dev = 10.414, 487.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109184;  // std dev = 0.000, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07058568957380251;  // std dev = 10.718, 502.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333713;  // std dev = 8.16e-08, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08583821046808196;  // std dev = 10.217, 478.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0684269778442035;  // std dev = 0.000, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06670093566726583;  // std dev = 10.194, 477.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202541;  // std dev = 2.38e-07, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
Inference time using transfer learning 1.1202795505523682
Parameter learned model CLL:-0.311243 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.66, 175, 324], 'false,true': [0.0, 0, 0], 'false,false': [1.46e-07, 483, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.718, 178, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.239, 155, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 483, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.392, 162, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [2.98e-07, 455, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.194, 153, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 463, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.518, 168, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.38e-07, 464, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.414, 163, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 463, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.718, 178, 324], 'false,true': [8.16e-08, 459, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.217, 154, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 472, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.194, 153, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.38e-07, 474, 0]}]
{'': [0.2277099288757903, 4.413308917764597e-17], 'true': [nan, 0.2277099288757903], 'true,false': [nan, 0.2277099288757903], 'true,false,false': [nan, 0.2277099288757903], 'false': [nan, 4.413308917764597e-17]}
{'': [0.22885351026174391, -1.3860689917291483e-16], 'true': [nan, 0.22885351026174391], 'true,false': [nan, 0.22885351026174391], 'true,false,false': [0.22885351026174391, nan], 'false': [nan, -1.3860689917291483e-16]}
{'': [0.21887979916405395, -1.1033272294411493e-17], 'true': [nan, 0.21887979916405395], 'true,false': [nan, 0.21887979916405395], 'true,false,false': [nan, 0.21887979916405395], 'false': [nan, -1.1033272294411493e-17]}
{'': [0.22222222222222393, 1.952040482857418e-16], 'true': [nan, 0.22222222222222393], 'true,false': [0.22222222222222393, nan], 'false': [nan, 1.952040482857418e-16]}
{'': [0.217871128515486, -9.591559607992714e-19], 'true': [nan, 0.217871128515486], 'true,false': [nan, 0.217871128515486], 'true,false,false': [nan, 0.217871128515486], 'false': [nan, -9.591559607992714e-19]}
{'': [0.22486615110053657, 4.1154819016277357e-17], 'true': [nan, 0.22486615110053657], 'true,false': [0.22486615110053657, nan], 'false': [nan, 4.1154819016277357e-17]}
{'': [0.2226766567300134, -1.1509871529591256e-17], 'true': [nan, 0.2226766567300134], 'true,false': [0.2226766567300134, nan], 'false': [nan, -1.1509871529591256e-17]}
{'': [0.22885351026174308, 1.4512719276145838e-17], 'true': [nan, 0.22885351026174308], 'true,false': [nan, 0.22885351026174308], 'true,false,false': [nan, 0.22885351026174308], 'false': [1.4512719276145838e-17, nan]}
{'': [0.21837852978764327, -1.2137183913275016e-16], 'true': [nan, 0.21837852978764327], 'true,false': [0.21837852978764327, nan], 'false': [nan, -1.2137183913275016e-16]}
{'': [0.2178711285154846, 1.1992282460086078e-16], 'true': [nan, 0.2178711285154846], 'true,false': [nan, 0.2178711285154846], 'true,false,false': [nan, 0.2178711285154846], 'false': [nan, 1.1992282460086078e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.6100194454193115
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048835;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   else return -0.14185106490048757;  // std dev = 1.26e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839147;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.1254446385283923;  // std dev = 0.000, 452.000 (wgt'ed) examples reached here.  /* #neg=452 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360639;  // std dev = 6.32e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.11231637819360592;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.10159632948783551;  // std dev = 3.22e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926074;  // std dev = 7.45e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.09269127618926105;  // std dev = 1.17e-07, 425.000 (wgt'ed) examples reached here.  /* #neg=425 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839678;  // std dev = 6.32e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.08518475138839678;  // std dev = 1.46e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109155;  // std dev = 7.30e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.07877675473109197;  // std dev = 1.50e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333688;  // std dev = 6.75e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.07324622576333692;  // std dev = 1.53e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420267;  // std dev = 5.77e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.06842697784420351;  // std dev = 0.000, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.0641918400820254;  // std dev = 2.45e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
Inference time using transfer learning 1.0043504238128662
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.6100194454193115 

Total Inference Time : 1.6075258255004883 

Total revision time: 8.31319284439087
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.325244903564453 

Total Inference Time : 1.6075258255004883 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.8260376453399658
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5292015666784559;  // std dev = 8.192, 304.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048782;  // std dev = 1.07e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.44973185490909656;  // std dev = 8.219, 305.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839202;  // std dev = 0.000, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.34621988668396336;  // std dev = 8.429, 313.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360697;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.22008055577825358;  // std dev = 8.993, 338.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783662;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19492820699722876;  // std dev = 8.669, 323.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926043;  // std dev = 1.49e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14072189136912855;  // std dev = 8.737, 326.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.03e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.12740907398050486;  // std dev = 8.479, 315.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109141;  // std dev = 3.65e-08, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1083083732175379;  // std dev = 8.326, 309.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333692;  // std dev = 1.05e-07, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06707385317928949;  // std dev = 8.503, 316.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420294;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.029093986095343707;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202611;  // std dev = 7.88e-08, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
Inference time using transfer learning 1.2021820545196533
Parameter learned model CLL:-0.303761 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.192, 100, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.07e-07, 303, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.219, 101, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 313, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.429, 109, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 283, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.993, 134, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 302, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.669, 119, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.49e-07, 293, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.737, 122, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.03e-07, 292, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.479, 111, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.65e-08, 303, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.326, 105, 204], 'false,true': [1.05e-07, 283, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.503, 112, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 287, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.76, 123, 204], 'false,true': [0.0, 0, 0], 'false,false': [7.88e-08, 271, 0]}]
{'': [0.22074099722992158, 3.8106664871622534e-17], 'true': [nan, 0.22074099722992158], 'true,false': [nan, 0.22074099722992158], 'true,false,false': [nan, 0.22074099722992158], 'false': [nan, 3.8106664871622534e-17]}
{'': [0.22148884708411976, -8.796655274985266e-17], 'true': [nan, 0.22148884708411976], 'true,false': [nan, 0.22148884708411976], 'true,false,false': [0.22148884708411976, nan], 'false': [nan, -8.796655274985266e-17]}
{'': [0.22696975573906128, -1.1612226688658882e-16], 'true': [nan, 0.22696975573906128], 'true,false': [nan, 0.22696975573906128], 'true,false,false': [nan, 0.22696975573906128], 'false': [nan, -1.1612226688658882e-16]}
{'': [0.23927733622772349, -5.440828067699443e-17], 'true': [nan, 0.23927733622772349], 'true,false': [0.23927733622772349, nan], 'false': [nan, -5.440828067699443e-17]}
{'': [0.23268698060941803, 7.578314161263868e-17], 'true': [nan, 0.23268698060941803], 'true,false': [nan, 0.23268698060941803], 'true,false,false': [nan, 0.23268698060941803], 'false': [nan, 7.578314161263868e-17]}
{'': [0.23418269411720274, 3.650048300137501e-17], 'true': [nan, 0.23418269411720274], 'true,false': [0.23418269411720274, nan], 'false': [nan, 3.650048300137501e-17]}
{'': [0.2282086167800464, 4.3969228698026e-18], 'true': [nan, 0.2282086167800464], 'true,false': [0.2282086167800464, nan], 'false': [nan, 4.3969228698026e-18]}
{'': [0.22433782637383334, 3.923049556979352e-17], 'true': [nan, 0.22433782637383334], 'true,false': [nan, 0.22433782637383334], 'true,false,false': [nan, 0.22433782637383334], 'false': [3.923049556979352e-17, nan]}
{'': [0.22880948565934947, -4.564680031559877e-17], 'true': [nan, 0.22880948565934947], 'true,false': [0.22880948565934947, nan], 'false': [nan, -4.564680031559877e-17]}
{'': [0.23466038212271687, 2.2941877999634232e-17], 'true': [nan, 0.23466038212271687], 'true,false': [nan, 0.23466038212271687], 'true,false,false': [nan, 0.23466038212271687], 'false': [nan, 2.2941877999634232e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 1.963958978652954
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048763;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else return -0.1418510649004879;  // std dev = 5.16e-08, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12673698810556344;  // std dev = 0.154, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else return -0.125444638528392;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11218759366125358;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360696;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10149017487424496;  // std dev = 6.14e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.10159632948783662;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09260238668357519;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.09269127618926043;  // std dev = 1.37e-07, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.0851093065063609;  // std dev = 3.80e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.08518475138839678;  // std dev = 1.07e-07, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07871196770567689;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.07877675473109141;  // std dev = 4.21e-08, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07319002036788644;  // std dev = 1.83e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07324622576333698;  // std dev = 9.77e-08, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.06837777798115913;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else return -0.15919915022133188;  // std dev = 0.222, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420308;  // std dev = 0.000, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06361459906220689;  // std dev = 0.016, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.0641918400820259;  // std dev = 1.30e-07, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
Inference time using transfer learning 0.9582400321960449
Refined model CLL: -0.064916


******************************************
Best model found
******************************************
Results 

CLL : -0.097595 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 1.963958978652954 

Total Inference Time : 1.452986717224121 

Total revision time: 7.058303594589233
Best scored revision CLL: -0.064916


Results 

CLL : -0.097595 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 7.070355653762817 

Total Inference Time : 1.452986717224121 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.333604335784912
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5254756677727753;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.43715827851937283;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839235;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3410399576436473;  // std dev = 10.967, 524.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360576;  // std dev = 0.000, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.286289842576287;  // std dev = 10.630, 507.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783542;  // std dev = 3.40e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1979107434673007;  // std dev = 10.929, 522.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926144;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14739080499140908;  // std dev = 10.948, 523.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.44e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11807266686500412;  // std dev = 10.832, 517.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109208;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09520520918096093;  // std dev = 10.732, 512.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333706;  // std dev = 1.12e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07065582081093323;  // std dev = 10.753, 513.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420351;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06403517290804123;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202541;  // std dev = 2.40e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
Inference time using transfer learning 0.9458756446838379
Parameter learned model CLL:-0.300955 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.588, 168, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 497, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.773, 177, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 505, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.967, 187, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 517, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.63, 170, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.4e-07, 491, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.929, 185, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 498, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.948, 186, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 504, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.832, 180, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 501, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.732, 175, 337], 'false,true': [1.12e-07, 472, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.753, 176, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.588, 168, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.4e-07, 476, 0]}]
{'': [0.22200176453289158, -1.429663452233602e-17], 'true': [nan, 0.22200176453289158], 'true,false': [nan, 0.22200176453289158], 'true,false,false': [nan, 0.22200176453289158], 'false': [nan, -1.429663452233602e-17]}
{'': [0.22577556056866588, -1.3894276268576217e-16], 'true': [nan, 0.22577556056866588], 'true,false': [nan, 0.22577556056866588], 'true,false,false': [0.22577556056866588, nan], 'false': [nan, -1.3894276268576217e-16]}
{'': [0.2295138686556747, -5.153839959575195e-18], 'true': [nan, 0.2295138686556747], 'true,false': [nan, 0.2295138686556747], 'true,false,false': [nan, 0.2295138686556747], 'false': [nan, -5.153839959575195e-18]}
{'': [0.22287579410930114, 2.3515925572508406e-16], 'true': [nan, 0.22287579410930114], 'true,false': [0.22287579410930114, nan], 'false': [nan, 2.3515925572508406e-16]}
{'': [0.2288024250965211, -2.853585284177109e-17], 'true': [nan, 0.2288024250965211], 'true,false': [nan, 0.2288024250965211], 'true,false,false': [nan, 0.2288024250965211], 'false': [nan, -2.853585284177109e-17]}
{'': [0.229160344972561, 4.1413081077287586e-17], 'true': [nan, 0.229160344972561], 'true,false': [0.229160344972561, nan], 'false': [nan, 4.1413081077287586e-17]}
{'': [0.22694536625151196, -3.988825238174215e-17], 'true': [nan, 0.22694536625151196], 'true,false': [0.22694536625151196, nan], 'false': [nan, -3.988825238174215e-17]}
{'': [0.22497177124023496, 2.6344275160596936e-17], 'true': [nan, 0.22497177124023496], 'true,false': [nan, 0.22497177124023496], 'true,false,false': [nan, 0.22497177124023496], 'false': [2.6344275160596936e-17, nan]}
{'': [0.22537608912903595, -1.211993468549129e-16], 'true': [nan, 0.22537608912903595], 'true,false': [0.22537608912903595, nan], 'false': [nan, -1.211993468549129e-16]}
{'': [0.2220017645328883, 1.2128486823636163e-16], 'true': [nan, 0.2220017645328883], 'true,false': [nan, 0.2220017645328883], 'true,false,false': [nan, 0.2220017645328883], 'false': [nan, 1.2128486823636163e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.6453750133514404
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.14185106490048718;  // std dev = 2.89e-07, 453.000 (wgt'ed) examples reached here.  /* #neg=453 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839147;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.12544463852839233;  // std dev = 0.000, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360644;  // std dev = 4.21e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.11231637819360586;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783641;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.10159632948783542;  // std dev = 3.40e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0926912761892607;  // std dev = 7.74e-08, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else return -0.09269127618926153;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 6.14e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109153;  // std dev = 8.16e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.07877675473109197;  // std dev = 1.52e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333681;  // std dev = 8.56e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.07324622576333685;  // std dev = 1.70e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.58e-08, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.06842697784420355;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.0641918400820254;  // std dev = 2.45e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
Inference time using transfer learning 0.8480079174041748
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.6453750133514404 

Total Inference Time : 1.5176482200622559 

Total revision time: 8.516960382461548
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.529012441635132 

Total Inference Time : 1.5176482200622559 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.170875310897827
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5074745613037469;  // std dev = 10.871, 519.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048724;  // std dev = 2.73e-07, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.44796016590135557;  // std dev = 10.651, 508.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839235;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.38999961366793157;  // std dev = 10.212, 488.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360588;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.25485398135611165;  // std dev = 10.967, 524.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783547;  // std dev = 3.33e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21577053689591516;  // std dev = 10.609, 506.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926137;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1541884964950584;  // std dev = 10.732, 512.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.50e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11962318034241208;  // std dev = 10.671, 509.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109201;  // std dev = 1.43e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11579066434456838;  // std dev = 10.258, 490.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333681;  // std dev = 1.83e-07, 521.000 (wgt'ed) examples reached here.  /* #neg=521 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0739529387952391;  // std dev = 10.482, 500.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420351;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0457290715732996;  // std dev = 10.651, 508.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202543;  // std dev = 2.37e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
Inference time using transfer learning 0.9920570850372314
Parameter learned model CLL:-0.309795 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.871, 182, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.73e-07, 457, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.651, 171, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 504, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.212, 151, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 484, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.967, 187, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.33e-07, 484, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.609, 169, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 482, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.732, 175, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.5e-07, 502, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.671, 172, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.258, 153, 337], 'false,true': [1.83e-07, 521, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.482, 163, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 482, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.651, 171, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.37e-07, 472, 0]}]
{'': [0.2277018573587145, 1.6325380143284578e-16], 'true': [nan, 0.2277018573587145], 'true,false': [nan, 0.2277018573587145], 'true,false,false': [nan, 0.2277018573587145], 'false': [nan, 1.6325380143284578e-16]}
{'': [0.22330507161013938, -1.3745618400120986e-16], 'true': [nan, 0.22330507161013938], 'true,false': [nan, 0.22330507161013938], 'true,false,false': [0.22330507161013938, nan], 'false': [nan, -1.3745618400120986e-16]}
{'': [0.21368163800052892, -5.50523813863714e-18], 'true': [nan, 0.21368163800052892], 'true,false': [nan, 0.21368163800052892], 'true,false,false': [nan, 0.21368163800052892], 'false': [nan, -5.50523813863714e-18]}
{'': [0.22951386865567394, 2.2938492244321414e-16], 'true': [nan, 0.22951386865567394], 'true,false': [0.22951386865567394, nan], 'false': [nan, 2.2938492244321414e-16]}
{'': [0.22244137543158116, -1.842693816805239e-17], 'true': [nan, 0.22244137543158116], 'true,false': [nan, 0.22244137543158116], 'true,false,false': [nan, 0.22244137543158116], 'false': [nan, -1.842693816805239e-17]}
{'': [0.2249717712402348, 4.5116632873213536e-17], 'true': [nan, 0.2249717712402348], 'true,false': [0.2249717712402348, nan], 'false': [nan, 4.5116632873213536e-17]}
{'': [0.22372925841724978, 4.1690007455312e-17], 'true': [nan, 0.22372925841724978], 'true,false': [0.22372925841724978, nan], 'false': [nan, 4.1690007455312e-17]}
{'': [0.21474802165764362, 6.392838913388617e-17], 'true': [nan, 0.21474802165764362], 'true,false': [nan, 0.21474802165764362], 'true,false,false': [nan, 0.21474802165764362], 'false': [6.392838913388617e-17, nan]}
{'': [0.2197240000000005, -1.2069644500074315e-16], 'true': [nan, 0.2197240000000005], 'true,false': [0.2197240000000005, nan], 'false': [nan, -1.2069644500074315e-16]}
{'': [0.223305071610143, 1.1949010519270753e-16], 'true': [nan, 0.223305071610143], 'true,false': [nan, 0.223305071610143], 'true,false,false': [nan, 0.223305071610143], 'false': [nan, 1.1949010519270753e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.7400763034820557
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048843;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   else return -0.1418510649004878;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839144;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.12544463852839227;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360632;  // std dev = 4.21e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.11231637819360596;  // std dev = 0.000, 456.000 (wgt'ed) examples reached here.  /* #neg=456 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.10159632948783535;  // std dev = 3.61e-07, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926074;  // std dev = 7.30e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.09269127618926136;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.50e-08, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 529.000 (wgt'ed) examples reached here.  /* #neg=529 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109153;  // std dev = 8.16e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.07877675473109198;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333681;  // std dev = 8.30e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.07324622576333707;  // std dev = 1.05e-07, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.50e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.0684269778442036;  // std dev = 0.000, 532.000 (wgt'ed) examples reached here.  /* #neg=532 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.06419184008202536;  // std dev = 2.43e-07, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
Inference time using transfer learning 0.8759784698486328
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.7400763034820557 

Total Inference Time : 1.5954678058624268 

Total revision time: 8.522324323654175
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.534376382827759 

Total Inference Time : 1.5954678058624268 

Starting experiments for fasttext using softcosine 

Run: 1

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.203641414642334
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4998812185640749;  // std dev = 10.807, 508.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048793;  // std dev = 0.000, 521.000 (wgt'ed) examples reached here.  /* #neg=521 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.44179058676707733;  // std dev = 10.591, 497.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.38147791466445474;  // std dev = 10.227, 480.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360582;  // std dev = 0.000, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.272939452613068;  // std dev = 10.591, 497.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783535;  // std dev = 3.61e-07, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1912733148239082;  // std dev = 10.826, 509.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926133;  // std dev = 0.000, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.18374388724292684;  // std dev = 10.204, 479.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.40e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.09529224221936443;  // std dev = 10.864, 511.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109207;  // std dev = 0.000, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08579144206292602;  // std dev = 10.651, 500.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333689;  // std dev = 1.60e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07951810509549445;  // std dev = 10.424, 489.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420351;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05632013763442384;  // std dev = 10.488, 492.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202541;  // std dev = 2.38e-07, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
Inference time using transfer learning 1.1249828338623047
Parameter learned model CLL:-0.300197 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.807, 182, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 521, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.591, 171, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 497, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.227, 154, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 499, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.591, 171, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.61e-07, 510, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.826, 183, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 475, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.204, 153, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.4e-07, 477, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.864, 185, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 499, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.651, 174, 326], 'false,true': [1.6e-07, 504, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.424, 163, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.488, 166, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.38e-07, 474, 0]}]
{'': [0.22991195982392232, -1.1251396487563966e-16], 'true': [nan, 0.22991195982392232], 'true,false': [nan, 0.22991195982392232], 'true,false,false': [nan, 0.22991195982392232], 'false': [nan, -1.1251396487563966e-16]}
{'': [0.2256840843856004, -1.2509555207044018e-16], 'true': [nan, 0.2256840843856004], 'true,false': [nan, 0.2256840843856004], 'true,false,false': [0.2256840843856004, nan], 'false': [nan, -1.2509555207044018e-16]}
{'': [0.21789930555556117, -8.89958336372871e-18], 'true': [nan, 0.21789930555556117], 'true,false': [nan, 0.21789930555556117], 'true,false,false': [nan, 0.21789930555556117], 'false': [nan, -8.89958336372871e-18]}
{'': [0.22568408438559187, 2.5600436803121254e-16], 'true': [nan, 0.22568408438559187], 'true,false': [0.22568408438559187, nan], 'false': [nan, 2.5600436803121254e-16]}
{'': [0.23026775410007116, -1.1219095827791055e-17], 'true': [nan, 0.23026775410007116], 'true,false': [nan, 0.23026775410007116], 'true,false,false': [nan, 0.23026775410007116], 'false': [nan, -1.1219095827791055e-17]}
{'': [0.2173892198865929, 4.0964203843611645e-17], 'true': [nan, 0.2173892198865929], 'true,false': [0.2173892198865929, nan], 'false': [nan, 4.0964203843611645e-17]}
{'': [0.2309657208726997, -3.8268208464033453e-17], 'true': [nan, 0.2309657208726997], 'true,false': [0.2309657208726997, nan], 'false': [nan, -3.8268208464033453e-17]}
{'': [0.22689600000000026, 5.1105504308142124e-17], 'true': [nan, 0.22689600000000026], 'true,false': [nan, 0.22689600000000026], 'true,false,false': [nan, 0.22689600000000026], 'false': [5.1105504308142124e-17, nan]}
{'': [0.22222222222222135, -1.211993468549129e-16], 'true': [nan, 0.22222222222222135], 'true,false': [0.22222222222222135, nan], 'false': [nan, -1.211993468549129e-16]}
{'': [0.22356071121686671, 1.1992282460086078e-16], 'true': [nan, 0.22356071121686671], 'true,false': [nan, 0.22356071121686671], 'true,false,false': [nan, 0.22356071121686671], 'false': [nan, 1.1992282460086078e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.4292328357696533
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1418510649004881;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.14185106490048746;  // std dev = 1.88e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839136;  // std dev = 3.65e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.12544463852839233;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360625;  // std dev = 9.42e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.11231637819360593;  // std dev = 0.000, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.10159632948783552;  // std dev = 3.20e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926074;  // std dev = 7.74e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.09269127618926143;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5.58e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.08518475138839678;  // std dev = 1.40e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109154;  // std dev = 8.16e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.078776754731092;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333678;  // std dev = 9.88e-08, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else return -0.07324622576333677;  // std dev = 1.91e-07, 529.000 (wgt'ed) examples reached here.  /* #neg=529 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6.23e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.06842697784420355;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.06419184008202539;  // std dev = 2.45e-07, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
Inference time using transfer learning 1.0250153541564941
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.4292328357696533 

Total Inference Time : 1.6299912929534912 

Total revision time: 8.23005223274231
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.26461672782898 

Total Inference Time : 1.6299912929534912 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1627566814422607
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.51802673550684;  // std dev = 10.498, 491.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048735;  // std dev = 2.38e-07, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.42436964089773554;  // std dev = 10.776, 505.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 450.000 (wgt'ed) examples reached here.  /* #neg=450 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3959498894984262;  // std dev = 9.961, 467.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360601;  // std dev = 0.000, 445.000 (wgt'ed) examples reached here.  /* #neg=445 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.25754160330420117;  // std dev = 10.738, 503.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878355;  // std dev = 3.24e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18366410786616993;  // std dev = 10.907, 512.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926144;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15702329643196503;  // std dev = 10.620, 497.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.44e-07, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11520775317467286;  // std dev = 10.660, 499.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109198;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08151987310892847;  // std dev = 10.738, 503.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333711;  // std dev = 8.94e-08, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06934866326425446;  // std dev = 10.620, 497.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0842197442032913;  // std dev = 10.126, 474.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820254;  // std dev = 2.44e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
Inference time using transfer learning 1.1524231433868408
Parameter learned model CLL:-0.305617 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.498, 167, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.38e-07, 466, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.776, 181, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 450, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [9.961, 143, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 445, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.738, 179, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.24e-07, 476, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.907, 188, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 498, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.62, 173, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 509, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.66, 175, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 486, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.738, 179, 324], 'false,true': [8.94e-08, 462, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.62, 173, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 483, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.126, 150, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.44e-07, 484, 0]}]
{'': [0.22443908893691605, 1.2198158553821462e-16], 'true': [nan, 0.22443908893691605], 'true,false': [nan, 0.22443908893691605], 'true,false,false': [nan, 0.22443908893691605], 'false': [nan, 1.2198158553821462e-16]}
{'': [0.22995392608566992, -1.342136278657967e-16], 'true': [nan, 0.22995392608566992], 'true,false': [nan, 0.22995392608566992], 'true,false,false': [0.22995392608566992, nan], 'false': [nan, -1.342136278657967e-16]}
{'': [0.21244537780447748, -1.1975439366743262e-17], 'true': [nan, 0.21244537780447748], 'true,false': [nan, 0.21244537780447748], 'true,false,false': [nan, 0.21244537780447748], 'false': [nan, -1.1975439366743262e-17]}
{'': [0.22922504733032753, 2.2017868387524114e-16], 'true': [nan, 0.22922504733032753], 'true,false': [0.22922504733032753, nan], 'false': [nan, 2.2017868387524114e-16]}
{'': [0.23236083984374697, -2.853585284177109e-17], 'true': [nan, 0.23236083984374697], 'true,false': [nan, 0.23236083984374697], 'true,false,false': [nan, 0.23236083984374697], 'false': [nan, -2.853585284177109e-17]}
{'': [0.2269229056431126, 4.1006272815231713e-17], 'true': [nan, 0.2269229056431126], 'true,false': [0.2269229056431126, nan], 'false': [nan, 4.1006272815231713e-17]}
{'': [0.22770992887578725, -2.924044180082717e-17], 'true': [nan, 0.22770992887578725], 'true,false': [0.22770992887578725, nan], 'false': [nan, -2.924044180082717e-17]}
{'': [0.22922504733033397, 1.7302177007145296e-17], 'true': [nan, 0.22922504733033397], 'true,false': [nan, 0.22922504733033397], 'true,false,false': [nan, 0.22922504733033397], 'false': [1.7302177007145296e-17, nan]}
{'': [0.22692290564311401, -1.2136599523852644e-16], 'true': [nan, 0.22692290564311401], 'true,false': [0.22692290564311401, nan], 'false': [nan, -1.2136599523852644e-16]}
{'': [0.21631148854350205, 1.2340908827444921e-16], 'true': [nan, 0.21631148854350205], 'true,false': [nan, 0.21631148854350205], 'true,false,false': [nan, 0.21631148854350205], 'false': [nan, 1.2340908827444921e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5411434173583984
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048804;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.1418510649004874;  // std dev = 2.15e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839147;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.1254446385283923;  // std dev = 0.000, 441.000 (wgt'ed) examples reached here.  /* #neg=441 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360636;  // std dev = 6.99e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.11231637819360575;  // std dev = 0.000, 527.000 (wgt'ed) examples reached here.  /* #neg=527 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.10159632948783545;  // std dev = 3.36e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926075;  // std dev = 7.30e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.09269127618926135;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839678;  // std dev = 6.50e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.08518475138839678;  // std dev = 1.48e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109155;  // std dev = 7.74e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.0787767547310918;  // std dev = 1.80e-07, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333682;  // std dev = 8.82e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.07324622576333747;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 5.87e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.06842697784420357;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.0641918400820254;  // std dev = 2.43e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
Inference time using transfer learning 1.0046777725219727
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.5411434173583984 

Total Inference Time : 1.5154080390930176 

Total revision time: 8.091915845870972
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.126480340957642 

Total Inference Time : 1.5154080390930176 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.81001615524292
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.527001394115902;  // std dev = 8.219, 305.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 1.26e-07, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.3742788834595535;  // std dev = 9.112, 344.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839205;  // std dev = 0.000, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.39068633415077064;  // std dev = 8.080, 300.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360696;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.25985936042843244;  // std dev = 8.623, 321.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878366;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21557316984428204;  // std dev = 8.403, 312.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926044;  // std dev = 1.33e-07, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15168261575720968;  // std dev = 8.528, 317.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 9.88e-08, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10184363800376342;  // std dev = 8.669, 323.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109143;  // std dev = 4.94e-08, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08050622314183406;  // std dev = 8.623, 321.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333692;  // std dev = 1.05e-07, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.03598599251577676;  // std dev = 8.911, 334.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420297;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06819409468666927;  // std dev = 8.429, 313.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202594;  // std dev = 1.18e-07, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
Inference time using transfer learning 1.1208510398864746
Parameter learned model CLL:-0.302647 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.219, 101, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.26e-07, 308, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [9.112, 140, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 318, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.08, 96, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 285, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.623, 117, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 274, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.403, 108, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.33e-07, 277, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.528, 113, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [9.88e-08, 278, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.669, 119, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [4.94e-08, 280, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.623, 117, 204], 'false,true': [1.05e-07, 282, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.911, 130, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 295, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.429, 109, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.18e-07, 302, 0]}]
{'': [0.22148884708412184, 5.190653102143589e-17], 'true': [nan, 0.22148884708412184], 'true,false': [nan, 0.22148884708412184], 'true,false,false': [nan, 0.22148884708412184], 'false': [nan, 5.190653102143589e-17]}
{'': [0.2413466738777726, -9.216945864812621e-17], 'true': [nan, 0.2413466738777726], 'true,false': [nan, 0.2413466738777726], 'true,false,false': [0.2413466738777726, nan], 'false': [nan, -9.216945864812621e-17]}
{'': [0.21760000000000218, -1.1530737378563028e-16], 'true': [nan, 0.21760000000000218], 'true,false': [nan, 0.21760000000000218], 'true,false,false': [nan, 0.21760000000000218], 'false': [nan, -1.1530737378563028e-16]}
{'': [0.23163595073805862, -6.320977804435197e-17], 'true': [nan, 0.23163595073805862], 'true,false': [0.23163595073805862, nan], 'false': [nan, -6.320977804435197e-17]}
{'': [0.22633136094674447, 6.412840575452168e-17], 'true': [nan, 0.22633136094674447], 'true,false': [nan, 0.22633136094674447], 'true,false,false': [nan, 0.22633136094674447], 'false': [nan, 6.412840575452168e-17]}
{'': [0.22939824259371563, 3.5143750419789125e-17], 'true': [nan, 0.22939824259371563], 'true,false': [0.22939824259371563, nan], 'false': [nan, 3.5143750419789125e-17]}
{'': [0.23268698060941834, 8.723180907769087e-18], 'true': [nan, 0.23268698060941834], 'true,false': [0.23268698060941834, nan], 'false': [nan, 8.723180907769087e-18]}
{'': [0.23163595073805582, 3.936961080231052e-17], 'true': [nan, 0.23163595073805582], 'true,false': [nan, 0.23163595073805582], 'true,false,false': [nan, 0.23163595073805582], 'false': [3.936961080231052e-17, nan]}
{'': [0.2377281365412874, -5.3441243897210927e-17], 'true': [nan, 0.2377281365412874], 'true,false': [0.2377281365412874, nan], 'false': [nan, -5.3441243897210927e-17]}
{'': [0.226969755739061, 4.6320563279062825e-17], 'true': [nan, 0.226969755739061], 'true,false': [nan, 0.226969755739061], 'true,false,false': [nan, 0.226969755739061], 'false': [nan, 4.6320563279062825e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.1783459186553955
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048782;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.14185106490048793;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839105;  // std dev = 8.02e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.125444638528392;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11316972575182152;  // std dev = 0.115, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   else return -0.11231637819360689;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1033585494432923;  // std dev = 0.150, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.10159632948783663;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09247154221583659;  // std dev = 3.33e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.09269127618926043;  // std dev = 1.41e-07, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08499823358660112;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 1.03e-07, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07861657166197132;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07877675473109141;  // std dev = 3.94e-08, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07310724972535358;  // std dev = 4.71e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07324622576333692;  // std dev = 1.04e-07, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06830531576388842;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06842697784420293;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0640844866869557;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06419184008202594;  // std dev = 1.20e-07, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
Inference time using transfer learning 1.0073492527008057
Refined model CLL: -0.064222


******************************************
Best model found
******************************************
Results 

CLL : -0.080816 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.1783459186553955 

Total Inference Time : 1.5292809009552002 

Total revision time: 7.387907028198242
Best scored revision CLL: -0.064222


Results 

CLL : -0.080816 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.422471523284912 

Total Inference Time : 1.5292809009552002 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.258448839187622
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5189332488249981;  // std dev = 10.692, 510.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4434156200863384;  // std dev = 10.692, 510.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3338193431721692;  // std dev = 11.078, 530.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360586;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.31820475296710565;  // std dev = 10.141, 485.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783545;  // std dev = 3.36e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20064289366936133;  // std dev = 10.792, 515.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0926912761892615;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15316618382687738;  // std dev = 10.753, 513.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.44e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10989083949061822;  // std dev = 10.832, 517.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109208;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05965764117027027;  // std dev = 11.186, 536.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333709;  // std dev = 9.88e-08, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.078443379961938;  // std dev = 10.671, 509.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0684269778442036;  // std dev = 0.000, 533.000 (wgt'ed) examples reached here.  /* #neg=533 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.045509586105476896;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202537;  // std dev = 2.43e-07, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
Inference time using transfer learning 0.979095458984375
Parameter learned model CLL:-0.297825 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.692, 173, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 495, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.692, 173, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 484, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.078, 193, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 484, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.141, 148, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.36e-07, 486, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.792, 178, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 510, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.753, 176, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 505, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.832, 180, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 503, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.186, 199, 337], 'false,true': [9.88e-08, 468, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.671, 172, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 533, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.89, 183, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 503, 0]}]
{'': [0.22414840445982576, -7.177199351112123e-18], 'true': [nan, 0.22414840445982576], 'true,false': [nan, 0.22414840445982576], 'true,false,false': [nan, 0.22414840445982576], 'false': [nan, -7.177199351112123e-18]}
{'': [0.2241484044598224, -1.3579587408638277e-16], 'true': [nan, 0.2241484044598224], 'true,false': [nan, 0.2241484044598224], 'true,false,false': [0.2241484044598224, nan], 'false': [nan, -1.3579587408638277e-16]}
{'': [0.2315450338198616, -1.101047627727428e-17], 'true': [nan, 0.2315450338198616], 'true,false': [nan, 0.2315450338198616], 'true,false,false': [nan, 0.2315450338198616], 'false': [nan, -1.101047627727428e-17]}
{'': [0.2120352853650808, 2.3209600679406563e-16], 'true': [nan, 0.2120352853650808], 'true,false': [0.2120352853650808, nan], 'false': [nan, 2.3209600679406563e-16]}
{'': [0.2261702328211885, -3.657205257588751e-17], 'true': [nan, 0.2261702328211885], 'true,false': [nan, 0.2261702328211885], 'true,false,false': [nan, 0.2261702328211885], 'false': [nan, -3.657205257588751e-17]}
{'': [0.22537608912903578, 4.133107497614444e-17], 'true': [nan, 0.22537608912903578], 'true,false': [0.22537608912903578, nan], 'false': [nan, 4.133107497614444e-17]}
{'': [0.22694536625151235, -4.0612532113524614e-17], 'true': [nan, 0.22694536625151235], 'true,false': [0.22694536625151235, nan], 'false': [nan, -4.0612532113524614e-17]}
{'': [0.23342824125640382, 2.0875988497225166e-17], 'true': [nan, 0.23342824125640382], 'true,false': [nan, 0.23342824125640382], 'true,false,false': [nan, 0.23342824125640382], 'false': [2.0875988497225166e-17, nan]}
{'': [0.22372925841725116, -1.2331182562440763e-16], 'true': [nan, 0.22372925841725116], 'true,false': [0.22372925841725116, nan], 'false': [nan, -1.2331182562440763e-16]}
{'': [0.2280732248520702, 1.174231906760603e-16], 'true': [nan, 0.2280732248520702], 'true,false': [nan, 0.2280732248520702], 'true,false,false': [nan, 0.2280732248520702], 'false': [nan, 1.174231906760603e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.6735169887542725
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048827;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.1418510649004876;  // std dev = 9.42e-08, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283914;  // std dev = 2.11e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.12544463852839235;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360647;  // std dev = 2.98e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.11231637819360597;  // std dev = 0.000, 453.000 (wgt'ed) examples reached here.  /* #neg=453 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1015963294878365;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.1015963294878352;  // std dev = 3.99e-07, 549.000 (wgt'ed) examples reached here.  /* #neg=549 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926075;  // std dev = 7.15e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.09269127618926139;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 5.96e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.08518475138839678;  // std dev = 1.52e-07, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109154;  // std dev = 8.16e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.07877675473109208;  // std dev = 1.26e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333681;  // std dev = 8.82e-08, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.07324622576333684;  // std dev = 1.75e-07, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 5.87e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.0684269778442035;  // std dev = 0.000, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.06419184008202533;  // std dev = 2.46e-07, 525.000 (wgt'ed) examples reached here.  /* #neg=525 */
Inference time using transfer learning 0.8419084548950195
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.6735169887542725 

Total Inference Time : 1.5344290733337402 

Total revision time: 8.485933303833008
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.520497798919678 

Total Inference Time : 1.5344290733337402 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.435269594192505
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5254756677727753;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048793;  // std dev = 0.000, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4664756047665651;  // std dev = 10.304, 492.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.33728741388936984;  // std dev = 10.929, 522.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360588;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.29091463467013967;  // std dev = 10.460, 499.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783553;  // std dev = 3.13e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21216760331690707;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926162;  // std dev = 0.000, 538.000 (wgt'ed) examples reached here.  /* #neg=538 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.135050243227455;  // std dev = 10.967, 524.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.38e-07, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11389663746659145;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109198;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07697599762764643;  // std dev = 10.910, 521.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.0732462257633369;  // std dev = 1.58e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06448553334868347;  // std dev = 10.812, 516.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420347;  // std dev = 0.000, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.029322475414955994;  // std dev = 11.114, 532.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202532;  // std dev = 2.45e-07, 542.000 (wgt'ed) examples reached here.  /* #neg=542 */
Inference time using transfer learning 0.9916565418243408
Parameter learned model CLL:-0.298959 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.588, 168, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 520, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.304, 155, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.929, 185, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.46, 162, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.13e-07, 467, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.588, 168, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 538, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.967, 187, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.38e-07, 469, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.773, 177, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 485, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.91, 184, 337], 'false,true': [1.58e-07, 502, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.812, 179, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 460, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.114, 195, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.45e-07, 542, 0]}]
{'': [0.22200176453289158, -1.0589819619501494e-16], 'true': [nan, 0.22200176453289158], 'true,false': [nan, 0.22200176453289158], 'true,false,false': [nan, 0.22200176453289158], 'false': [nan, -1.0589819619501494e-16]}
{'': [0.21579003899794766, -1.2187063555136854e-16], 'true': [nan, 0.21579003899794766], 'true,false': [nan, 0.21579003899794766], 'true,false,false': [0.21579003899794766, nan], 'false': [nan, -1.2187063555136854e-16]}
{'': [0.22880242509651152, -1.1102230246251566e-17], 'true': [nan, 0.22880242509651152], 'true,false': [nan, 0.22880242509651152], 'true,false,false': [nan, 0.22880242509651152], 'false': [nan, -1.1102230246251566e-17]}
{'': [0.2192521315175363, 2.0920690828054342e-16], 'true': [nan, 0.2192521315175363], 'true,false': [0.2192521315175363, nan], 'false': [nan, 2.0920690828054342e-16]}
{'': [0.2220017645328912, -5.447934544629021e-17], 'true': [nan, 0.2220017645328912], 'true,false': [nan, 0.2220017645328912], 'true,false,false': [nan, 0.2220017645328912], 'false': [nan, -5.447934544629021e-17]}
{'': [0.22951386865567572, 4.071606828049615e-17], 'true': [nan, 0.22951386865567572], 'true,false': [0.22951386865567572, nan], 'false': [nan, 4.071606828049615e-17]}
{'': [0.2257755605686681, -2.9300731371550524e-17], 'true': [nan, 0.2257755605686681], 'true,false': [0.2257755605686681, nan], 'false': [nan, -2.9300731371550524e-17]}
{'': [0.22844006616538967, 4.9539832174508976e-17], 'true': [nan, 0.22844006616538967], 'true,false': [nan, 0.22844006616538967], 'true,false,false': [nan, 0.22844006616538967], 'false': [4.9539832174508976e-17, nan]}
{'': [0.2265601526350573, -1.2936511765197475e-16], 'true': [nan, 0.2265601526350573], 'true,false': [0.2265601526350573, nan], 'false': [nan, -1.2936511765197475e-16]}
{'': [0.23218878964328227, 1.1061262606966505e-16], 'true': [nan, 0.23218878964328227], 'true,false': [nan, 0.23218878964328227], 'true,false,false': [nan, 0.23218878964328227], 'false': [nan, 1.1061262606966505e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.7686455249786377
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.1418510649004873;  // std dev = 2.60e-07, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283914;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.12544463852839235;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1123163781936064;  // std dev = 5.96e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.11231637819360582;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.10159632948783548;  // std dev = 3.26e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926076;  // std dev = 6.99e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.0926912761892615;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.83e-08, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 449.000 (wgt'ed) examples reached here.  /* #neg=449 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0787767547310915;  // std dev = 8.16e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.07877675473109214;  // std dev = 1.07e-07, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333681;  // std dev = 9.25e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.07324622576333699;  // std dev = 1.33e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420267;  // std dev = 6.05e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.06842697784420354;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.06419184008202533;  // std dev = 2.46e-07, 528.000 (wgt'ed) examples reached here.  /* #neg=528 */
Inference time using transfer learning 0.8614487648010254
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.7686455249786377 

Total Inference Time : 1.534651756286621 

Total revision time: 8.82757019996643
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.8621346950531 

Total Inference Time : 1.534651756286621 

Run: 2

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.2439584732055664
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5444647245731923;  // std dev = 10.112, 475.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4289551757134352;  // std dev = 10.671, 501.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3863092907874284;  // std dev = 10.042, 472.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360586;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2709251832166956;  // std dev = 10.488, 492.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783558;  // std dev = 3.05e-07, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21026830588011156;  // std dev = 10.403, 488.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926151;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15237238348054932;  // std dev = 10.488, 492.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.41e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11849280070597927;  // std dev = 10.424, 489.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109207;  // std dev = 0.000, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09208291900787545;  // std dev = 10.381, 487.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333706;  // std dev = 1.07e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0550011727674446;  // std dev = 10.611, 498.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420354;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05803535431656676;  // std dev = 10.360, 486.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202539;  // std dev = 2.43e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
Inference time using transfer learning 1.1767804622650146
Parameter learned model CLL:-0.304374 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.112, 149, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 496, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.671, 175, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 461, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.042, 146, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 483, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.488, 166, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.05e-07, 460, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.403, 162, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 511, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.488, 166, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.41e-07, 479, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.424, 163, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 499, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.381, 161, 326], 'false,true': [1.07e-07, 471, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.611, 172, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 494, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.36, 160, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 499, 0]}]
{'': [0.21528642659280056, -1.4325458382260084e-17], 'true': [nan, 0.21528642659280056], 'true,false': [nan, 0.21528642659280056], 'true,false,false': [nan, 0.21528642659280056], 'false': [nan, -1.4325458382260084e-17]}
{'': [0.22728993111581916, -1.367910364397156e-16], 'true': [nan, 0.22728993111581916], 'true,false': [nan, 0.22728993111581916], 'true,false,false': [0.22728993111581916, nan], 'false': [nan, -1.367910364397156e-16]}
{'': [0.21364191324332024, -1.1033272294411493e-17], 'true': [nan, 0.21364191324332024], 'true,false': [nan, 0.21364191324332024], 'true,false,false': [nan, 0.21364191324332024], 'false': [nan, -1.1033272294411493e-17]}
{'': [0.2235607112168665, 2.0273637840981118e-16], 'true': [nan, 0.2235607112168665], 'true,false': [0.2235607112168665, nan], 'false': [nan, 2.0273637840981118e-16]}
{'': [0.2217649825315785, -3.823860123953572e-17], 'true': [nan, 0.2217649825315785], 'true,false': [nan, 0.2217649825315785], 'true,false,false': [nan, 0.2217649825315785], 'false': [nan, -3.823860123953572e-17]}
{'': [0.22356071121686874, 4.1720280674849306e-17], 'true': [nan, 0.22356071121686874], 'true,false': [0.22356071121686874, nan], 'false': [nan, 4.1720280674849306e-17]}
{'': [0.22222222222222107, -3.9158166800406325e-17], 'true': [nan, 0.22222222222222107], 'true,false': [0.22222222222222107, nan], 'false': [nan, -3.9158166800406325e-17]}
{'': [0.22130210946624623, 2.4514478675375007e-17], 'true': [nan, 0.22130210946624623], 'true,false': [nan, 0.22130210946624623], 'true,false,false': [nan, 0.22130210946624623], 'false': [2.4514478675375007e-17, nan]}
{'': [0.2260931275301987, -1.2585524165791249e-16], 'true': [nan, 0.2260931275301987], 'true,false': [0.2260931275301987, nan], 'false': [nan, -1.2585524165791249e-16]}
{'': [0.2208335450219305, 1.1836445873759183e-16], 'true': [nan, 0.2208335450219305], 'true,false': [nan, 0.2208335450219305], 'true,false,false': [nan, 0.2208335450219305], 'false': [nan, 1.1836445873759183e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.401231050491333
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048807;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.1418510649004874;  // std dev = 2.11e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839144;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.1254446385283923;  // std dev = 0.000, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360651;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.11231637819360576;  // std dev = 0.000, 521.000 (wgt'ed) examples reached here.  /* #neg=521 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.10159632948783535;  // std dev = 3.61e-07, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926074;  // std dev = 7.30e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.0926912761892613;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5.96e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.08518475138839678;  // std dev = 1.46e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109148;  // std dev = 8.02e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.07877675473109205;  // std dev = 1.32e-07, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0732462257633368;  // std dev = 9.42e-08, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.0732462257633376;  // std dev = 0.000, 454.000 (wgt'ed) examples reached here.  /* #neg=454 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 5.58e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.06842697784420347;  // std dev = 0.000, 450.000 (wgt'ed) examples reached here.  /* #neg=450 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.06419184008202539;  // std dev = 2.45e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
Inference time using transfer learning 1.0328738689422607
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.401231050491333 

Total Inference Time : 1.4722089767456055 

Total revision time: 8.040043830871582
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.059954643249512 

Total Inference Time : 1.4722089767456055 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.3183748722076416
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5074475322938967;  // std dev = 10.660, 499.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048718;  // std dev = 2.92e-07, 452.000 (wgt'ed) examples reached here.  /* #neg=452 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.41739140746875936;  // std dev = 10.907, 512.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.38364273907544605;  // std dev = 10.217, 478.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360574;  // std dev = 2.98e-08, 533.000 (wgt'ed) examples reached here.  /* #neg=533 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2520429920934752;  // std dev = 10.926, 513.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783552;  // std dev = 3.20e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20629093514219282;  // std dev = 10.699, 501.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926122;  // std dev = 5.96e-08, 453.000 (wgt'ed) examples reached here.  /* #neg=453 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1804945073817961;  // std dev = 10.306, 482.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.12311672511649566;  // std dev = 10.498, 491.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109197;  // std dev = 1.49e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08602811624141815;  // std dev = 10.600, 496.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333735;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.03730061696229095;  // std dev = 11.016, 518.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420346;  // std dev = 0.000, 447.000 (wgt'ed) examples reached here.  /* #neg=447 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03935579079547414;  // std dev = 10.852, 509.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202543;  // std dev = 2.35e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
Inference time using transfer learning 1.1554534435272217
Parameter learned model CLL:-0.297792 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.66, 175, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.92e-07, 452, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.907, 188, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 469, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.217, 154, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.98e-08, 533, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.926, 189, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.2e-07, 472, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.699, 177, 324], 'false,true': [0.0, 0, 0], 'false,false': [5.96e-08, 453, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.306, 158, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 460, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.498, 167, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.49e-07, 484, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.6, 172, 324], 'false,true': [0.0, 492, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.016, 194, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 447, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.852, 185, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.35e-07, 467, 0]}]
{'': [0.2277099288757903, 1.8863966436108854e-16], 'true': [nan, 0.2277099288757903], 'true,false': [nan, 0.2277099288757903], 'true,false,false': [nan, 0.2277099288757903], 'false': [nan, 1.8863966436108854e-16]}
{'': [0.23236083984375183, -1.3445771385652217e-16], 'true': [nan, 0.23236083984375183], 'true,false': [nan, 0.23236083984375183], 'true,false,false': [0.23236083984375183, nan], 'false': [nan, -1.3445771385652217e-16]}
{'': [0.2183785297876497, 1.6663760219514545e-18], 'true': [nan, 0.2183785297876497], 'true,false': [nan, 0.2183785297876497], 'true,false,false': [nan, 0.2183785297876497], 'false': [nan, 1.6663760219514545e-18]}
{'': [0.23268698060941465, 2.1639940310490338e-16], 'true': [nan, 0.23268698060941465], 'true,false': [0.23268698060941465, nan], 'false': [nan, 2.1639940310490338e-16]}
{'': [0.22847717738176254, 7.842635052539737e-18], 'true': [nan, 0.22847717738176254], 'true,false': [nan, 0.22847717738176254], 'true,false,false': [nan, 0.22847717738176254], 'false': [nan, 7.842635052539737e-18]}
{'': [0.22034744580844157, 4.4408920985006264e-17], 'true': [nan, 0.22034744580844157], 'true,false': [0.22034744580844157, nan], 'false': [nan, 4.4408920985006264e-17]}
{'': [0.22443908893691222, 4.5876984488642834e-17], 'true': [nan, 0.22443908893691222], 'true,false': [0.22443908893691222, nan], 'false': [nan, 4.5876984488642834e-17]}
{'': [0.22652185223725232, -1.624716621402668e-17], 'true': [nan, 0.22652185223725232], 'true,false': [nan, 0.22652185223725232], 'true,false,false': [nan, 0.22652185223725232], 'false': [-1.624716621402668e-17, nan]}
{'': [0.2342541107019859, -1.2517950881679617e-16], 'true': [nan, 0.2342541107019859], 'true,false': [0.2342541107019859, nan], 'false': [nan, -1.2517950881679617e-16]}
{'': [0.2313562167816232, 1.183920912769439e-16], 'true': [nan, 0.2313562167816232], 'true,false': [nan, 0.2313562167816232], 'true,false,false': [nan, 0.2313562167816232], 'false': [nan, 1.183920912769439e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.6097137928009033
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1418510649004883;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.14185106490048754;  // std dev = 1.40e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839127;  // std dev = 5.16e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.12544463852839233;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360647;  // std dev = 3.65e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.11231637819360596;  // std dev = 0.000, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.10159632948783541;  // std dev = 3.48e-07, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926078;  // std dev = 6.99e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.09269127618926122;  // std dev = 5.58e-08, 453.000 (wgt'ed) examples reached here.  /* #neg=453 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839678;  // std dev = 6.32e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.08518475138839678;  // std dev = 1.33e-07, 413.000 (wgt'ed) examples reached here.  /* #neg=413 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109155;  // std dev = 7.30e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.07877675473109183;  // std dev = 1.75e-07, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333685;  // std dev = 8.16e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.07324622576333695;  // std dev = 1.46e-07, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6.50e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.06842697784420354;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.0641918400820254;  // std dev = 2.43e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
Inference time using transfer learning 1.049807071685791
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.6097137928009033 

Total Inference Time : 1.4839086532592773 

Total revision time: 8.297123670578003
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.317034482955933 

Total Inference Time : 1.4839086532592773 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7692968845367432
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5204865974371707;  // std dev = 8.300, 308.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048766;  // std dev = 1.84e-07, 329.000 (wgt'ed) examples reached here.  /* #neg=329 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4299859830089909;  // std dev = 8.479, 315.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283921;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3737353252777101;  // std dev = 8.164, 303.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360696;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.28124886201959454;  // std dev = 8.273, 307.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783663;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16666481101458056;  // std dev = 8.826, 330.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0926912761892604;  // std dev = 1.72e-07, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14248317263535645;  // std dev = 8.623, 321.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 9.88e-08, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1358752443444344;  // std dev = 8.273, 307.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109143;  // std dev = 3.65e-08, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05965657884383048;  // std dev = 8.782, 328.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333689;  // std dev = 1.07e-07, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08757651691840015;  // std dev = 8.273, 307.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420276;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02004373620557741;  // std dev = 8.826, 330.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202593;  // std dev = 1.24e-07, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
Inference time using transfer learning 1.1701996326446533
Parameter learned model CLL:-0.30454 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.3, 104, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.84e-07, 329, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.479, 111, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 309, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.164, 99, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 274, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.273, 103, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 304, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.826, 126, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.72e-07, 320, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.623, 117, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [9.88e-08, 276, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.273, 103, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.65e-08, 294, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.782, 124, 204], 'false,true': [1.07e-07, 277, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.273, 103, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 256, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.826, 126, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.24e-07, 307, 0]}]
{'': [0.22364648338674775, 1.0258595729059197e-16], 'true': [nan, 0.22364648338674775], 'true,false': [nan, 0.22364648338674775], 'true,false,false': [nan, 0.22364648338674775], 'false': [nan, 1.0258595729059197e-16]}
{'': [0.22820861678004403, -1.092258250763908e-16], 'true': [nan, 0.22820861678004403], 'true,false': [nan, 0.22820861678004403], 'true,false,false': [0.22820861678004403, nan], 'false': [nan, -1.092258250763908e-16]}
{'': [0.21997843348691315, -1.0048733945512366e-16], 'true': [nan, 0.21997843348691315], 'true,false': [nan, 0.21997843348691315], 'true,false,false': [nan, 0.21997843348691315], 'false': [nan, -1.0048733945512366e-16]}
{'': [0.22294135746798113, -5.258951169277057e-17], 'true': [nan, 0.22294135746798113], 'true,false': [0.22294135746798113, nan], 'false': [nan, -5.258951169277057e-17]}
{'': [0.2360330578512397, 9.298117831235686e-17], 'true': [nan, 0.2360330578512397], 'true,false': [nan, 0.2360330578512397], 'true,false,false': [nan, 0.2360330578512397], 'false': [nan, 9.298117831235686e-17]}
{'': [0.23163595073805454, 3.539841527790354e-17], 'true': [nan, 0.23163595073805454], 'true,false': [0.23163595073805454, nan], 'false': [nan, 3.539841527790354e-17]}
{'': [0.22294135746798344, 4.5315225494904345e-18], 'true': [nan, 0.22294135746798344], 'true,false': [0.22294135746798344, nan], 'false': [nan, 4.5315225494904345e-18]}
{'': [0.23512790005948714, 4.168346374043909e-17], 'true': [nan, 0.23512790005948714], 'true,false': [nan, 0.23512790005948714], 'true,false,false': [nan, 0.23512790005948714], 'false': [4.168346374043909e-17, nan]}
{'': [0.22294135746798316, -1.3877787807814457e-17], 'true': [nan, 0.22294135746798316], 'true,false': [0.22294135746798316, nan], 'false': [nan, -1.3877787807814457e-17]}
{'': [0.2360330578512398, 4.990579068347609e-17], 'true': [nan, 0.2360330578512398], 'true,false': [nan, 0.2360330578512398], 'true,false,false': [nan, 0.2360330578512398], 'false': [nan, 4.990579068347609e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.4113340377807617
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.1418510649004878;  // std dev = 1.26e-07, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839136;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.125444638528392;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360618;  // std dev = 9.06e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360697;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.10159632948783663;  // std dev = 0.000, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926083;  // std dev = 7.45e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.09269127618926044;  // std dev = 1.28e-07, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( director(B) )
%   | | then return -0.7448277574305102;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.0851847513883968;  // std dev = 6.58e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.08518475138839678;  // std dev = 1.03e-07, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109158;  // std dev = 5.96e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07877675473109141;  // std dev = 4.47e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333714;  // std dev = 3.80e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07324622576333699;  // std dev = 9.42e-08, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.06842697784420264;  // std dev = 5.58e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | | else if ( female(B) )
%   | | | then return -0.06842697784420275;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.13539251740327674;  // std dev = 0.568, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06842697784420301;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06401423940723593;  // std dev = 0.009, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.064191840082026;  // std dev = 1.06e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
Inference time using transfer learning 1.1043410301208496
Refined model CLL: -0.064861


******************************************
Best model found
******************************************
Results 

CLL : -0.09522 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 2.4113340377807617 

Total Inference Time : 1.4496190547943115 

Total revision time: 7.522342920303345
Best scored revision CLL: -0.064861


Results 

CLL : -0.09522 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 7.542253732681274 

Total Inference Time : 1.4496190547943115 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.2988522052764893
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5254756677727753;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004873;  // std dev = 2.53e-07, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4514963744573635;  // std dev = 10.546, 503.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.354369906941139;  // std dev = 10.712, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360586;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.27845191265104363;  // std dev = 10.651, 508.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783535;  // std dev = 3.58e-07, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21210296995249414;  // std dev = 10.630, 507.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926148;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.16185274344618286;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.50e-07, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.12284221708107862;  // std dev = 10.567, 504.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109207;  // std dev = 1.26e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10475494175907202;  // std dev = 10.371, 495.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333693;  // std dev = 1.49e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.04171901458471967;  // std dev = 10.967, 524.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420358;  // std dev = 0.000, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04555218254101209;  // std dev = 10.753, 513.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202537;  // std dev = 2.45e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
Inference time using transfer learning 0.9697926044464111
Parameter learned model CLL:-0.303209 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.588, 168, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.53e-07, 462, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.546, 166, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.712, 174, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 491, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.651, 171, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.58e-07, 507, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.63, 170, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 507, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.588, 168, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.5e-07, 508, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.567, 167, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.26e-07, 500, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.371, 158, 337], 'false,true': [1.49e-07, 495, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.967, 187, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 523, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.753, 176, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.45e-07, 502, 0]}]
{'': [0.22200176453289158, 1.3841741605716237e-16], 'true': [nan, 0.22200176453289158], 'true,false': [nan, 0.22200176453289158], 'true,false,false': [nan, 0.22200176453289158], 'false': [nan, 1.3841741605716237e-16]}
{'': [0.22110675904809404, -1.3692750637043598e-16], 'true': [nan, 0.22110675904809404], 'true,false': [nan, 0.22110675904809404], 'true,false,false': [0.22110675904809404, nan], 'false': [nan, -1.3692750637043598e-16]}
{'': [0.22456255912010542, -3.6178347034628316e-18], 'true': [nan, 0.22456255912010542], 'true,false': [nan, 0.22456255912010542], 'true,false,false': [nan, 0.22456255912010542], 'false': [nan, -3.6178347034628316e-18]}
{'': [0.2233050716101379, 2.5226369316926634e-16], 'true': [nan, 0.2233050716101379], 'true,false': [0.2233050716101379, nan], 'false': [nan, 2.5226369316926634e-16]}
{'': [0.2228757941092916, -3.328479284872264e-17], 'true': [nan, 0.2228757941092916], 'true,false': [nan, 0.2228757941092916], 'true,false,false': [nan, 0.2228757941092916], 'false': [nan, -3.328479284872264e-17]}
{'': [0.22200176453288675, 4.4583759256600775e-17], 'true': [nan, 0.22200176453288675], 'true,false': [0.22200176453288675, nan], 'false': [nan, 4.4583759256600775e-17]}
{'': [0.22155690980096, 3.1974423109204506e-17], 'true': [nan, 0.22155690980096], 'true,false': [0.22155690980096, nan], 'false': [nan, 3.1974423109204506e-17]}
{'': [0.21730843791449894, 4.485749594445077e-17], 'true': [nan, 0.21730843791449894], 'true,false': [nan, 0.21730843791449894], 'true,false,false': [nan, 0.21730843791449894], 'false': [4.485749594445077e-17, nan]}
{'': [0.22951386865567042, -1.1887665273233034e-16], 'true': [nan, 0.22951386865567042], 'true,false': [0.22951386865567042, nan], 'false': [nan, -1.1887665273233034e-16]}
{'': [0.2253760891290377, 1.19426381134977e-16], 'true': [nan, 0.2253760891290377], 'true,false': [nan, 0.2253760891290377], 'true,false,false': [nan, 0.2253760891290377], 'false': [nan, 1.19426381134977e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.6782867908477783
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.14185106490048757;  // std dev = 1.19e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839163;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   else return -0.12544463852839233;  // std dev = 0.000, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1123163781936064;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.1123163781936058;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.10159632948783541;  // std dev = 3.45e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926072;  // std dev = 7.30e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.09269127618926153;  // std dev = 0.000, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.14e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109154;  // std dev = 7.60e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.07877675473109222;  // std dev = 0.000, 527.000 (wgt'ed) examples reached here.  /* #neg=527 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0732462257633369;  // std dev = 5.58e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.07324622576333717;  // std dev = 5.96e-08, 453.000 (wgt'ed) examples reached here.  /* #neg=453 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 5.96e-08, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   else return -0.06842697784420351;  // std dev = 0.000, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.06419184008202537;  // std dev = 2.43e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
Inference time using transfer learning 0.8328201770782471
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.6782867908477783 

Total Inference Time : 1.5652801990509033 

Total revision time: 8.741809606552124
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.761720418930054 

Total Inference Time : 1.5652801990509033 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.402557373046875
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4988333457458958;  // std dev = 11.004, 526.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048754;  // std dev = 1.46e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4481137783018245;  // std dev = 10.671, 509.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839235;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.39462279835148795;  // std dev = 10.165, 486.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936059;  // std dev = 0.000, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.28934850820502866;  // std dev = 10.438, 498.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878354;  // std dev = 3.50e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21752067662267544;  // std dev = 10.460, 499.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0926912761892614;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14353461379578572;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.41e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.12886025132342452;  // std dev = 10.438, 498.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109175;  // std dev = 0.000, 449.000 (wgt'ed) examples reached here.  /* #neg=449 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06483198048333937;  // std dev = 10.948, 523.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333678;  // std dev = 1.88e-07, 527.000 (wgt'ed) examples reached here.  /* #neg=527 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06814689502168918;  // std dev = 10.651, 508.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.049238924396833285;  // std dev = 10.692, 510.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202533;  // std dev = 2.48e-07, 531.000 (wgt'ed) examples reached here.  /* #neg=531 */
Inference time using transfer learning 1.0402791500091553
Parameter learned model CLL:-0.306462 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.004, 189, 337], 'false,true': [0.0, 0, 0], 'false,false': [1.46e-07, 483, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.671, 172, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 495, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.165, 149, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 471, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.438, 161, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.5e-07, 499, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.46, 162, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.773, 177, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.41e-07, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.438, 161, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 449, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.948, 186, 337], 'false,true': [1.88e-07, 527, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.651, 171, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.692, 173, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.48e-07, 531, 0]}]
{'': [0.2302078966010811, 4.413308917764597e-17], 'true': [nan, 0.2302078966010811], 'true,false': [nan, 0.2302078966010811], 'true,false,false': [nan, 0.2302078966010811], 'false': [nan, 4.413308917764597e-17]}
{'': [0.2237292584172423, -1.3816108750890837e-16], 'true': [nan, 0.2237292584172423], 'true,false': [nan, 0.2237292584172423], 'true,false,false': [0.2237292584172423, nan], 'false': [nan, -1.3816108750890837e-16]}
{'': [0.21259039103117466, -1.3200103902125004e-17], 'true': [nan, 0.21259039103117466], 'true,false': [nan, 0.21259039103117466], 'true,false,false': [nan, 0.21259039103117466], 'false': [nan, -1.3200103902125004e-17]}
{'': [0.21877469718230627, 2.456285008389124e-16], 'true': [nan, 0.21877469718230627], 'true,false': [0.21877469718230627, nan], 'false': [nan, 2.456285008389124e-16]}
{'': [0.21925213151753906, -2.0061524880290305e-17], 'true': [nan, 0.21925213151753906], 'true,false': [nan, 0.21925213151753906], 'true,false,false': [nan, 0.21925213151753906], 'false': [nan, -2.0061524880290305e-17]}
{'': [0.22577556056866638, 4.0783702945413916e-17], 'true': [nan, 0.22577556056866638], 'true,false': [0.22577556056866638, nan], 'false': [nan, 4.0783702945413916e-17]}
{'': [0.21877469718230116, 0.0], 'true': [nan, 0.21877469718230116], 'true,false': [0.21877469718230116, nan], 'false': [nan, 0.0]}
{'': [0.22916034497256232, 6.741392179887098e-17], 'true': [nan, 0.22916034497256232], 'true,false': [nan, 0.22916034497256232], 'true,false,false': [nan, 0.22916034497256232], 'false': [6.741392179887098e-17, nan]}
{'': [0.22330507161014063, -1.2053849981644556e-16], 'true': [nan, 0.22330507161014063], 'true,false': [0.22330507161014063, nan], 'false': [nan, -1.2053849981644556e-16]}
{'': [0.2241484044598234, 1.154130149892818e-16], 'true': [nan, 0.2241484044598234], 'true,false': [nan, 0.2241484044598234], 'true,false,false': [nan, 0.2241484044598234], 'false': [nan, 1.154130149892818e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.529749870300293
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048838;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else return -0.1418510649004872;  // std dev = 2.98e-07, 434.000 (wgt'ed) examples reached here.  /* #neg=434 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839152;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.12544463852839233;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360625;  // std dev = 6.32e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.11231637819360592;  // std dev = 0.000, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.10159632948783545;  // std dev = 3.36e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926064;  // std dev = 8.02e-08, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.09269127618926155;  // std dev = 0.000, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.50e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109157;  // std dev = 7.30e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.07877675473109204;  // std dev = 1.37e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0732462257633368;  // std dev = 9.06e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.07324622576333678;  // std dev = 1.90e-07, 528.000 (wgt'ed) examples reached here.  /* #neg=528 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.83e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.06842697784420347;  // std dev = 0.000, 453.000 (wgt'ed) examples reached here.  /* #neg=453 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   else return -0.06419184008202537;  // std dev = 2.46e-07, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
Inference time using transfer learning 0.8743851184844971
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.529749870300293 

Total Inference Time : 1.5336999893188477 

Total revision time: 8.542115926742554
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.562026739120483 

Total Inference Time : 1.5336999893188477 

Run: 3

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1851725578308105
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5488269012012029;  // std dev = 10.042, 472.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048754;  // std dev = 1.40e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.417974376902341;  // std dev = 10.826, 509.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839238;  // std dev = 0.000, 546.000 (wgt'ed) examples reached here.  /* #neg=546 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.35428892214827296;  // std dev = 10.570, 496.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360583;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2841570734966153;  // std dev = 10.424, 489.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878355;  // std dev = 3.24e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2044704870497767;  // std dev = 10.591, 497.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926143;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.16423724558559147;  // std dev = 10.424, 489.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1502376042253101;  // std dev = 9.994, 470.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109198;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10309247285308414;  // std dev = 10.159, 477.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333693;  // std dev = 1.48e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.049393288464867555;  // std dev = 10.611, 498.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420358;  // std dev = 0.000, 525.000 (wgt'ed) examples reached here.  /* #neg=525 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06220345216793056;  // std dev = 10.227, 480.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202541;  // std dev = 2.39e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
Inference time using transfer learning 1.115901231765747
Parameter learned model CLL:-0.307589 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.042, 146, 326], 'false,true': [0.0, 0, 0], 'false,false': [1.4e-07, 484, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.826, 183, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 546, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.57, 170, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.424, 163, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.24e-07, 476, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.591, 171, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 495, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.424, 163, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 491, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [9.994, 144, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 486, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.159, 151, 326], 'false,true': [1.48e-07, 494, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.611, 172, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 525, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.227, 154, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.39e-07, 475, 0]}]
{'': [0.21364191324332368, 4.0371746350005693e-17], 'true': [nan, 0.21364191324332368], 'true,false': [nan, 0.21364191324332368], 'true,false,false': [nan, 0.21364191324332368], 'false': [nan, 4.0371746350005693e-17]}
{'': [0.2302677541000747, -2.049642507000289e-16], 'true': [nan, 0.2302677541000747], 'true,false': [nan, 0.2302677541000747], 'true,false,false': [0.2302677541000747, nan], 'false': [nan, -2.049642507000289e-16]}
{'': [0.22526990114464635, -1.0831444142684454e-17], 'true': [nan, 0.22526990114464635], 'true,false': [nan, 0.22526990114464635], 'true,false,false': [nan, 0.22526990114464635], 'false': [nan, -1.0831444142684454e-17]}
{'': [0.2222222222222236, 2.2017868387524114e-16], 'true': [nan, 0.2222222222222236], 'true,false': [0.2222222222222236, nan], 'false': [nan, 2.2017868387524114e-16]}
{'': [0.22568408438558688, -2.5120197728892432e-17], 'true': [nan, 0.22568408438558688], 'true,false': [nan, 0.22568408438558688], 'true,false,false': [nan, 0.22568408438558688], 'false': [nan, -2.5120197728892432e-17]}
{'': [0.22222222222221982, 4.160509908982257e-17], 'true': [nan, 0.22222222222221982], 'true,false': [0.22222222222221982, nan], 'false': [nan, 4.160509908982257e-17]}
{'': [0.21251244907197692, -2.924044180082717e-17], 'true': [nan, 0.21251244907197692], 'true,false': [0.21251244907197692, nan], 'false': [nan, -2.924044180082717e-17]}
{'': [0.21635044324020167, 4.404933458026937e-17], 'true': [nan, 0.21635044324020167], 'true,false': [nan, 0.21635044324020167], 'true,false,false': [nan, 0.21635044324020167], 'false': [4.404933458026937e-17, nan]}
{'': [0.22609312753020114, -1.1842378929335003e-16], 'true': [nan, 0.22609312753020114], 'true,false': [0.22609312753020114, nan], 'false': [nan, -1.1842378929335003e-16]}
{'': [0.21789930555555523, 1.2060528014875384e-16], 'true': [nan, 0.21789930555555523], 'true,false': [nan, 0.21789930555555523], 'true,false,false': [nan, 0.21789930555555523], 'false': [nan, 1.2060528014875384e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.3920345306396484
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.1418510649004875;  // std dev = 1.74e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283915;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.12544463852839233;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360638;  // std dev = 6.99e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.11231637819360589;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.10159632948783552;  // std dev = 3.20e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926076;  // std dev = 7.30e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.09269127618926133;  // std dev = 0.000, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839678;  // std dev = 6.50e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109154;  // std dev = 7.45e-08, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.078776754731092;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333684;  // std dev = 7.74e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.07324622576333696;  // std dev = 1.43e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420264;  // std dev = 6.66e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.0684269778442035;  // std dev = 0.000, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.06419184008202537;  // std dev = 2.45e-07, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
Inference time using transfer learning 1.0055909156799316
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.3920345306396484 

Total Inference Time : 1.4782743453979492 

Total revision time: 8.017561435699463
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.037597417831421 

Total Inference Time : 1.4782743453979492 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.2080166339874268
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4984651406331048;  // std dev = 10.795, 506.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.41400016077708274;  // std dev = 10.980, 516.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.33507361550458603;  // std dev = 10.998, 517.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360592;  // std dev = 0.000, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.3125306601592162;  // std dev = 10.217, 478.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783541;  // std dev = 3.45e-07, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2102989126583824;  // std dev = 10.640, 498.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926128;  // std dev = 0.000, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1768288231917896;  // std dev = 10.349, 484.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.44e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11517844133516629;  // std dev = 10.620, 497.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109179;  // std dev = 0.000, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10697895524391476;  // std dev = 10.306, 482.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333682;  // std dev = 1.78e-07, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0502811141144145;  // std dev = 10.776, 505.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.052474342972425626;  // std dev = 10.559, 494.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820255;  // std dev = 2.20e-07, 439.000 (wgt'ed) examples reached here.  /* #neg=439 */
Inference time using transfer learning 1.1890265941619873
Parameter learned model CLL:-0.303449 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.795, 182, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 507, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.98, 192, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 482, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.998, 193, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 468, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.217, 154, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.45e-07, 496, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.64, 174, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 463, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.349, 160, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 504, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.62, 173, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 455, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.306, 158, 324], 'false,true': [1.78e-07, 518, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.776, 181, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 485, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.559, 170, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.2e-07, 439, 0]}]
{'': [0.2303113624646561, -5.605859848205919e-17], 'true': [nan, 0.2303113624646561], 'true,false': [nan, 0.2303113624646561], 'true,false,false': [nan, 0.2303113624646561], 'false': [nan, -5.605859848205919e-17]}
{'': [0.2336398053001717, -1.216177919091458e-16], 'true': [nan, 0.2336398053001717], 'true,false': [nan, 0.2336398053001717], 'true,false,false': [0.2336398053001717, nan], 'false': [nan, -1.216177919091458e-16]}
{'': [0.23394902147113644, -1.3284719952779651e-17], 'true': [nan, 0.23394902147113644], 'true,false': [nan, 0.23394902147113644], 'true,false,false': [nan, 0.23394902147113644], 'false': [nan, -1.3284719952779651e-17]}
{'': [0.21837852978764927, 2.399514279028564e-16], 'true': [nan, 0.21837852978764927], 'true,false': [0.21837852978764927, nan], 'false': [nan, 2.399514279028564e-16]}
{'': [0.2273189142110573, -9.591559607992714e-19], 'true': [nan, 0.2273189142110573], 'true,false': [nan, 0.2273189142110573], 'true,false,false': [nan, 0.2273189142110573], 'false': [nan, -9.591559607992714e-19]}
{'': [0.22129635953828142, 4.1413081077287586e-17], 'true': [nan, 0.22129635953828142], 'true,false': [0.22129635953828142, nan], 'false': [nan, 4.1413081077287586e-17]}
{'': [0.2269229056431106, -5.856121448572254e-18], 'true': [nan, 0.2269229056431106], 'true,false': [0.2269229056431106, nan], 'false': [nan, -5.856121448572254e-18]}
{'': [0.22034744580843924, 6.086937046207422e-17], 'true': [nan, 0.22034744580843924], 'true,false': [nan, 0.22034744580843924], 'true,false,false': [nan, 0.22034744580843924], 'false': [6.086937046207422e-17, nan]}
{'': [0.22995392608567536, -1.2178116476300687e-16], 'true': [nan, 0.22995392608567536], 'true,false': [0.22995392608567536, nan], 'false': [nan, -1.2178116476300687e-16]}
{'': [0.22570440426822255, 1.1026360791265792e-16], 'true': [nan, 0.22570440426822255], 'true,false': [nan, 0.22570440426822255], 'true,false,false': [nan, 0.22570440426822255], 'false': [nan, 1.1026360791265792e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.6967015266418457
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.141851064900488;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.14185106490048735;  // std dev = 2.42e-07, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839152;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.1254446385283923;  // std dev = 0.000, 456.000 (wgt'ed) examples reached here.  /* #neg=456 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1123163781936065;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   else return -0.11231637819360583;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.10159632948783544;  // std dev = 3.38e-07, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926071;  // std dev = 7.74e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.09269127618926129;  // std dev = 0.000, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 5.77e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.08518475138839678;  // std dev = 1.48e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109153;  // std dev = 8.30e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.07877675473109222;  // std dev = 7.88e-08, 527.000 (wgt'ed) examples reached here.  /* #neg=527 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333688;  // std dev = 7.30e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.07324622576333696;  // std dev = 1.43e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6.58e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.06842697784420361;  // std dev = 0.000, 537.000 (wgt'ed) examples reached here.  /* #neg=537 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.0641918400820254;  // std dev = 2.43e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
Inference time using transfer learning 1.0040807723999023
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.6967015266418457 

Total Inference Time : 1.5736169815063477 

Total revision time: 8.45944356918335
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.479479551315308 

Total Inference Time : 1.5736169815063477 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6900827884674072
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4956489350995084;  // std dev = 8.599, 320.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048782;  // std dev = 1.07e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.44251490245062963;  // std dev = 8.378, 311.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839202;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3425425710962443;  // std dev = 8.576, 319.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360688;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2746016171336875;  // std dev = 8.479, 315.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783663;  // std dev = 0.000, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1847227975802166;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926043;  // std dev = 1.40e-07, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1585209257352715;  // std dev = 8.528, 317.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.03e-07, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10307429229180225;  // std dev = 8.715, 325.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109141;  // std dev = 3.94e-08, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1121012255331045;  // std dev = 8.300, 308.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333699;  // std dev = 9.42e-08, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.04605842799801223;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420289;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09101144414813515;  // std dev = 8.080, 300.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202584;  // std dev = 1.40e-07, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
Inference time using transfer learning 1.2326807975769043
Parameter learned model CLL:-0.309742 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.599, 116, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.07e-07, 303, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.378, 107, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 308, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.576, 115, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 295, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.479, 111, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 306, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.76, 123, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.4e-07, 283, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.528, 113, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.03e-07, 294, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.715, 121, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.94e-08, 307, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.3, 104, 204], 'false,true': [9.42e-08, 306, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.76, 123, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 277, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.08, 96, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.4e-07, 324, 0]}]
{'': [0.23109375000000448, 3.8106664871622534e-17], 'true': [nan, 0.23109375000000448], 'true,false': [nan, 0.23109375000000448], 'true,false,false': [nan, 0.23109375000000448], 'false': [nan, 3.8106664871622534e-17]}
{'': [0.22568004880015977, -8.651088503572649e-17], 'true': [nan, 0.22568004880015977], 'true,false': [nan, 0.22568004880015977], 'true,false,false': [0.22568004880015977, nan], 'false': [nan, -8.651088503572649e-17]}
{'': [0.23054018730162024, -9.182861627408074e-17], 'true': [nan, 0.23054018730162024], 'true,false': [nan, 0.23054018730162024], 'true,false,false': [nan, 0.23054018730162024], 'false': [nan, -9.182861627408074e-17]}
{'': [0.2282086167800464, -5.224578939412501e-17], 'true': [nan, 0.2282086167800464], 'true,false': [0.2282086167800464, nan], 'false': [nan, -5.224578939412501e-17]}
{'': [0.23466038212271448, 6.904567220283659e-17], 'true': [nan, 0.23466038212271448], 'true,false': [nan, 0.23466038212271448], 'true,false,false': [nan, 0.23466038212271448], 'false': [nan, 6.904567220283659e-17]}
{'': [0.22939824259371383, 3.6252180395923476e-17], 'true': [nan, 0.22939824259371383], 'true,false': [0.22939824259371383, nan], 'false': [nan, 3.6252180395923476e-17]}
{'': [0.2336946745562126, 5.062906301222212e-18], 'true': [nan, 0.2336946745562126], 'true,false': [0.2336946745562126, nan], 'false': [nan, 5.062906301222212e-18]}
{'': [0.22364648338674226, 2.9025438552291676e-17], 'true': [nan, 0.22364648338674226], 'true,false': [nan, 0.22364648338674226], 'true,false,false': [nan, 0.22364648338674226], 'false': [2.9025438552291676e-17, nan]}
{'': [0.23466038212271617, -3.6072228236918445e-17], 'true': [nan, 0.23466038212271617], 'true,false': [0.23466038212271617, nan], 'false': [nan, -3.6072228236918445e-17]}
{'': [0.21759999999999882, 6.030841121420603e-17], 'true': [nan, 0.21759999999999882], 'true,false': [nan, 0.21759999999999882], 'true,false,false': [nan, 0.21759999999999882], 'false': [nan, 6.030841121420603e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.1559343338012695
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048788;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | else return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.14185106490048802;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.129455378595477;  // std dev = 0.265, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.12544463852839197;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11191712309250336;  // std dev = 5.96e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360683;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10361660586271018;  // std dev = 0.271, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.10159632948783663;  // std dev = 0.000, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09482139478890989;  // std dev = 0.256, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.09269127618926042;  // std dev = 1.59e-07, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08458182550127512;  // std dev = 5.05e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 1.07e-07, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08059905529415103;  // std dev = 0.308, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.07877675473109141;  // std dev = 4.47e-08, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07568626084498076;  // std dev = 0.294, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.07324622576333696;  // std dev = 9.88e-08, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07271321977922811;  // std dev = 0.397, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else return -0.06842697784420303;  // std dev = 0.000, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06325470346674582;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06419184008202593;  // std dev = 1.21e-07, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
Inference time using transfer learning 1.0201656818389893
Refined model CLL: -0.063818


******************************************
Best model found
******************************************
Results 

CLL : -0.076427 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.1559343338012695 

Total Inference Time : 1.4398999214172363 

Total revision time: 7.189215660095215
Best scored revision CLL: -0.063818


Results 

CLL : -0.076427 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.209251642227173 

Total Inference Time : 1.4398999214172363 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1895718574523926
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5631698556016;  // std dev = 9.970, 478.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004876;  // std dev = 9.42e-08, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4144804638038582;  // std dev = 11.023, 527.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839238;  // std dev = 0.000, 540.000 (wgt'ed) examples reached here.  /* #neg=540 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3453140348984533;  // std dev = 10.851, 518.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360582;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2714165738051346;  // std dev = 10.792, 515.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783537;  // std dev = 3.56e-07, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2577233695056372;  // std dev = 9.945, 477.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926158;  // std dev = 0.000, 528.000 (wgt'ed) examples reached here.  /* #neg=528 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1677849525995661;  // std dev = 10.371, 495.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.38e-07, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08960758479826897;  // std dev = 10.948, 523.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109205;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07633833567648658;  // std dev = 10.812, 516.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333698;  // std dev = 1.37e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.027640816885190315;  // std dev = 11.273, 541.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420351;  // std dev = 0.000, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.047404564345432484;  // std dev = 10.871, 519.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202541;  // std dev = 2.41e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
Inference time using transfer learning 0.9601914882659912
Parameter learned model CLL:-0.297709 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [9.97, 141, 337], 'false,true': [0.0, 0, 0], 'false,false': [9.42e-08, 489, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [11.023, 190, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 540, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.851, 181, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 497, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.792, 178, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.56e-07, 506, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [9.945, 140, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 528, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.371, 158, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.38e-07, 462, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.948, 186, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 498, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.812, 179, 337], 'false,true': [1.37e-07, 486, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.273, 204, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 479, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.871, 182, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.41e-07, 478, 0]}]
{'': [0.20796642215647754, 1.8163157867078227e-17], 'true': [nan, 0.20796642215647754], 'true,false': [nan, 0.20796642215647754], 'true,false,false': [nan, 0.20796642215647754], 'false': [nan, 1.8163157867078227e-17]}
{'': [0.23054848431385638, -1.9408343245299034e-16], 'true': [nan, 0.23054848431385638], 'true,false': [nan, 0.23054848431385638], 'true,false,false': [0.23054848431385638, nan], 'false': [nan, -1.9408343245299034e-16]}
{'': [0.22732591941086047, -8.935396576460012e-18], 'true': [nan, 0.22732591941086047], 'true,false': [nan, 0.22732591941086047], 'true,false,false': [nan, 0.22732591941086047], 'false': [nan, -8.935396576460012e-18]}
{'': [0.22617023282118975, 2.5100694469786146e-16], 'true': [nan, 0.22617023282118975], 'true,false': [0.22617023282118975, nan], 'false': [nan, 2.5100694469786146e-16]}
{'': [0.20735818291295227, -4.878252683959021e-17], 'true': [nan, 0.20735818291295227], 'true,false': [nan, 0.20735818291295227], 'true,false,false': [nan, 0.20735818291295227], 'false': [nan, -4.878252683959021e-17]}
{'': [0.21730843791450166, 4.133297840595821e-17], 'true': [nan, 0.21730843791450166], 'true,false': [0.21730843791450166, nan], 'false': [nan, 4.133297840595821e-17]}
{'': [0.22916034497256335, -3.8345052256129907e-17], 'true': [nan, 0.22916034497256335], 'true,false': [0.22916034497256335, nan], 'false': [nan, -3.8345052256129907e-17]}
{'': [0.22656015263505874, 3.8378079863585656e-17], 'true': [nan, 0.22656015263505874], 'true,false': [nan, 0.22656015263505874], 'true,false,false': [nan, 0.22656015263505874], 'false': [3.8378079863585656e-17, nan]}
{'': [0.23489054636276097, -1.2145237263122797e-16], 'true': [nan, 0.23489054636276097], 'true,false': [0.23489054636276097, nan], 'false': [nan, -1.2145237263122797e-16]}
{'': [0.22770185735871273, 1.2124192863061332e-16], 'true': [nan, 0.22770185735871273], 'true,false': [nan, 0.22770185735871273], 'true,false,false': [nan, 0.22770185735871273], 'false': [nan, 1.2124192863061332e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.757042646408081
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048807;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.14185106490048782;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839155;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   else return -0.1254446385283923;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1123163781936064;  // std dev = 5.58e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.11231637819360579;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   else return -0.10159632948783535;  // std dev = 3.61e-07, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926072;  // std dev = 7.45e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.09269127618926154;  // std dev = 0.000, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.32e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.08518475138839678;  // std dev = 1.46e-07, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109155;  // std dev = 8.02e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.07877675473109223;  // std dev = 0.000, 531.000 (wgt'ed) examples reached here.  /* #neg=531 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333677;  // std dev = 9.54e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else return -0.07324622576333689;  // std dev = 1.59e-07, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.99e-08, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   else return -0.06842697784420355;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.06419184008202534;  // std dev = 2.44e-07, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
Inference time using transfer learning 0.8398971557617188
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.757042646408081 

Total Inference Time : 1.5193510055541992 

Total revision time: 8.677506923675537
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.697542905807495 

Total Inference Time : 1.5193510055541992 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.3169784545898438
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5062258581764311;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048766;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.41943691749770373;  // std dev = 11.096, 531.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3638505070281623;  // std dev = 10.732, 512.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936059;  // std dev = 0.000, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2680503364245139;  // std dev = 10.967, 524.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783555;  // std dev = 3.13e-07, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20467343402621202;  // std dev = 10.948, 523.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0926912761892615;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1676427399659115;  // std dev = 10.732, 512.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.46e-07, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.09630696212149457;  // std dev = 11.186, 536.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109208;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07359970572018254;  // std dev = 11.168, 535.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.0732462257633369;  // std dev = 1.55e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08125170875732174;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420354;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06279660554872576;  // std dev = 10.753, 513.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202544;  // std dev = 2.32e-07, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
Inference time using transfer learning 1.0273525714874268
Parameter learned model CLL:-0.297767 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.89, 183, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [11.096, 194, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 476, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.732, 175, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 472, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.967, 187, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.13e-07, 466, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.948, 186, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 509, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.732, 175, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.46e-07, 510, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.186, 199, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 501, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.168, 198, 337], 'false,true': [1.55e-07, 501, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.773, 177, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 491, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.753, 176, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.32e-07, 464, 0]}]
{'': [0.22807322485207357, 0.0], 'true': [nan, 0.22807322485207357], 'true,false': [nan, 0.22807322485207357], 'true,false,false': [nan, 0.22807322485207357], 'false': [nan, 0.0]}
{'': [0.23186894641457437, -1.3621223663468308e-16], 'true': [nan, 0.23186894641457437], 'true,false': [nan, 0.23186894641457437], 'true,false,false': [0.23186894641457437, nan], 'false': [nan, -1.3621223663468308e-16]}
{'': [0.22497177124023765, -1.3172137580298468e-17], 'true': [nan, 0.22497177124023765], 'true,false': [nan, 0.22497177124023765], 'true,false,false': [nan, 0.22497177124023765], 'false': [nan, -1.3172137580298468e-17]}
{'': [0.22951386865566947, 2.0965585014380638e-16], 'true': [nan, 0.22951386865566947], 'true,false': [0.22951386865566947, nan], 'false': [nan, 2.0965585014380638e-16]}
{'': [0.22916034497256188, -3.664390336680281e-17], 'true': [nan, 0.22916034497256188], 'true,false': [nan, 0.22916034497256188], 'true,false,false': [nan, 0.22916034497256188], 'false': [nan, -3.664390336680281e-17]}
{'': [0.22497177124022946, 4.179663151530001e-17], 'true': [nan, 0.22497177124022946], 'true,false': [0.22497177124022946, nan], 'false': [nan, 4.179663151530001e-17]}
{'': [0.23342824125640552, -4.077465799022531e-17], 'true': [nan, 0.23342824125640552], 'true,false': [0.23342824125640552, nan], 'false': [nan, -4.077465799022531e-17]}
{'': [0.23312429033103116, 4.786590285809058e-17], 'true': [nan, 0.23312429033103116], 'true,false': [nan, 0.23312429033103116], 'true,false,false': [nan, 0.23312429033103116], 'false': [4.786590285809058e-17, nan]}
{'': [0.22577556056866768, -1.257197559453334e-16], 'true': [nan, 0.22577556056866768], 'true,false': [0.22577556056866768, nan], 'false': [nan, -1.257197559453334e-16]}
{'': [0.2253760891290392, 1.1580774653417581e-16], 'true': [nan, 0.2253760891290392], 'true,false': [nan, 0.2253760891290392], 'true,false,false': [nan, 0.2253760891290392], 'false': [nan, 1.1580774653417581e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.625701904296875
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.14185106490048774;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839122;  // std dev = 6.32e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.12544463852839227;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360654;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else return -0.11231637819360582;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.10159632948783537;  // std dev = 3.55e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926068;  // std dev = 7.88e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.09269127618926155;  // std dev = 0.000, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 6.14e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109154;  // std dev = 7.74e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.07877675473109208;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0732462257633368;  // std dev = 9.42e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.0732462257633368;  // std dev = 1.84e-07, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 5.87e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.06842697784420348;  // std dev = 0.000, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.06419184008202536;  // std dev = 2.45e-07, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
Inference time using transfer learning 0.8796935081481934
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.625701904296875 

Total Inference Time : 1.491664171218872 

Total revision time: 8.453229188919067
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.473265171051025 

Total Inference Time : 1.491664171218872 

Run: 4

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1999645233154297
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5303138835531163;  // std dev = 10.338, 485.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004872;  // std dev = 2.86e-07, 454.000 (wgt'ed) examples reached here.  /* #neg=454 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4300914019273452;  // std dev = 10.691, 502.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3747283990487507;  // std dev = 10.272, 482.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360592;  // std dev = 0.000, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.26099336144100516;  // std dev = 10.730, 504.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783542;  // std dev = 3.42e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1976178282652065;  // std dev = 10.730, 504.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926137;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1821483274906047;  // std dev = 10.204, 479.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.52e-07, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1283046703922895;  // std dev = 10.338, 485.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109211;  // std dev = 1.17e-07, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07393399099086258;  // std dev = 10.691, 502.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333713;  // std dev = 8.43e-08, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.081525788032608;  // std dev = 10.294, 483.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420351;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0592319901209135;  // std dev = 10.338, 485.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202539;  // std dev = 2.45e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
Inference time using transfer learning 1.1583945751190186
Parameter learned model CLL:-0.304663 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.338, 159, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.86e-07, 454, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.691, 176, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.272, 156, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 471, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.73, 178, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.42e-07, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.73, 178, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 483, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.204, 153, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.52e-07, 513, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.338, 159, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.17e-07, 507, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.691, 176, 326], 'false,true': [8.43e-08, 460, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.294, 157, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.338, 159, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.45e-07, 491, 0]}]
{'': [0.22035923052396916, 1.7998329209782273e-16], 'true': [nan, 0.22035923052396916], 'true,false': [nan, 0.22035923052396916], 'true,false,false': [nan, 0.22035923052396916], 'false': [nan, 1.7998329209782273e-16]}
{'': [0.22767892573133072, -1.3678312418379753e-16], 'true': [nan, 0.22767892573133072], 'true,false': [nan, 0.22767892573133072], 'true,false,false': [0.22767892573133072, nan], 'false': [nan, -1.3678312418379753e-16]}
{'': [0.21890118971780217, -5.657187386625002e-18], 'true': [nan, 0.21890118971780217], 'true,false': [nan, 0.21890118971780217], 'true,false,false': [nan, 0.21890118971780217], 'false': [nan, -5.657187386625002e-18]}
{'': [0.22844230284706687, 2.38291771139058e-16], 'true': [nan, 0.22844230284706687], 'true,false': [0.22844230284706687, nan], 'false': [nan, 2.38291771139058e-16]}
{'': [0.22844230284706407, -1.654990844161724e-17], 'true': [nan, 0.22844230284706407], 'true,false': [nan, 0.22844230284706407], 'true,false,false': [nan, 0.22844230284706407], 'false': [nan, -1.654990844161724e-17]}
{'': [0.21738921988659204, 4.5014890667062875e-17], 'true': [nan, 0.21738921988659204], 'true,false': [0.21738921988659204, nan], 'false': [nan, 4.5014890667062875e-17]}
{'': [0.22035923052396514, 2.7153383639747418e-17], 'true': [nan, 0.22035923052396514], 'true,false': [0.22035923052396514, nan], 'false': [nan, 2.7153383639747418e-17]}
{'': [0.2276789257313402, 1.544658121217609e-17], 'true': [nan, 0.2276789257313402], 'true,false': [nan, 0.2276789257313402], 'true,false,false': [nan, 0.2276789257313402], 'false': [1.544658121217609e-17, nan]}
{'': [0.21939311326294816, -1.2187063555136854e-16], 'true': [nan, 0.21939311326294816], 'true,false': [0.21939311326294816, nan], 'false': [nan, -1.2187063555136854e-16]}
{'': [0.2203592305239669, 1.2210192124187057e-16], 'true': [nan, 0.2203592305239669], 'true,false': [nan, 0.2203592305239669], 'true,false,false': [nan, 0.2203592305239669], 'false': [nan, 1.2210192124187057e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.620107889175415
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.14185106490048802;  // std dev = 0.000, 530.000 (wgt'ed) examples reached here.  /* #neg=530 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839122;  // std dev = 6.32e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.12544463852839227;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360654;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   else return -0.11231637819360583;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.10159632948783547;  // std dev = 3.31e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926071;  // std dev = 7.88e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.09269127618926153;  // std dev = 0.000, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839678;  // std dev = 6.32e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0787767547310915;  // std dev = 8.16e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.07877675473109208;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333695;  // std dev = 5.27e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.07324622576333698;  // std dev = 1.35e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6.32e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.06842697784420346;  // std dev = 0.000, 452.000 (wgt'ed) examples reached here.  /* #neg=452 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.0641918400820254;  // std dev = 2.41e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
Inference time using transfer learning 1.0339467525482178
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.620107889175415 

Total Inference Time : 1.4725611209869385 

Total revision time: 8.354248762130737
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.374286651611328 

Total Inference Time : 1.4725611209869385 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1054892539978027
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.533148935099508;  // std dev = 10.262, 480.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004872;  // std dev = 2.86e-07, 454.000 (wgt'ed) examples reached here.  /* #neg=454 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4455009669098969;  // std dev = 10.414, 487.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 450.000 (wgt'ed) examples reached here.  /* #neg=450 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3695228532601717;  // std dev = 10.262, 480.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936059;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2629850586363126;  // std dev = 10.620, 497.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783548;  // std dev = 3.29e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20161620019470644;  // std dev = 10.580, 495.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926123;  // std dev = 5.58e-08, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14480653989924983;  // std dev = 10.679, 500.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.50e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10868618004067185;  // std dev = 10.679, 500.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109197;  // std dev = 1.50e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10742050853785119;  // std dev = 10.284, 481.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333754;  // std dev = 0.000, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.05565035513540335;  // std dev = 10.679, 500.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0684269778442035;  // std dev = 0.000, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06788119180245608;  // std dev = 10.284, 481.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202544;  // std dev = 2.34e-07, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
Inference time using transfer learning 1.1276366710662842
Parameter learned model CLL:-0.307145 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.262, 156, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.86e-07, 454, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.414, 163, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 450, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.262, 156, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 478, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.62, 173, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.29e-07, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.58, 171, 324], 'false,true': [0.0, 0, 0], 'false,false': [5.58e-08, 455, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.679, 176, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.5e-07, 502, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.679, 176, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.5e-07, 483, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.284, 157, 324], 'false,true': [0.0, 462, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.679, 176, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 468, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.284, 157, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.34e-07, 466, 0]}]
{'': [0.21937500000000282, 1.7998329209782273e-16], 'true': [nan, 0.21937500000000282], 'true,false': [nan, 0.21937500000000282], 'true,false,false': [nan, 0.21937500000000282], 'false': [nan, 1.7998329209782273e-16]}
{'': [0.22267665673000814, -1.3223989804424086e-16], 'true': [nan, 0.22267665673000814], 'true,false': [nan, 0.22267665673000814], 'true,false,false': [0.22267665673000814, nan], 'false': [nan, -1.3223989804424086e-16]}
{'': [0.2193750000000016, -7.432455394980127e-18], 'true': [nan, 0.2193750000000016], 'true,false': [nan, 0.2193750000000016], 'true,false,false': [nan, 0.2193750000000016], 'false': [nan, -7.432455394980127e-18]}
{'': [0.2269229056431189, 2.2527602329192367e-16], 'true': [nan, 0.2269229056431189], 'true,false': [0.2269229056431189, nan], 'false': [nan, 2.2527602329192367e-16]}
{'': [0.22611570247933782, 6.832141690000964e-18], 'true': [nan, 0.22611570247933782], 'true,false': [nan, 0.22611570247933782], 'true,false,false': [nan, 0.22611570247933782], 'false': [nan, 6.832141690000964e-18]}
{'': [0.2280959999999998, 4.5116632873213536e-17], 'true': [nan, 0.2280959999999998], 'true,false': [0.2280959999999998, nan], 'false': [nan, 4.5116632873213536e-17]}
{'': [0.2280960000000009, 4.689140725124885e-17], 'true': [nan, 0.2280960000000009], 'true,false': [0.2280960000000009, nan], 'false': [nan, 4.689140725124885e-17]}
{'': [0.2198641949161686, -4.5177906629768273e-17], 'true': [nan, 0.2198641949161686], 'true,false': [nan, 0.2198641949161686], 'true,false,false': [nan, 0.2198641949161686], 'false': [-4.5177906629768273e-17, nan]}
{'': [0.22809600000000074, -1.2240920527918394e-16], 'true': [nan, 0.22809600000000074], 'true,false': [0.22809600000000074, nan], 'false': [nan, -1.2240920527918394e-16]}
{'': [0.21986419491616987, 1.1769317042163678e-16], 'true': [nan, 0.21986419491616987], 'true,false': [nan, 0.21986419491616987], 'true,false,false': [nan, 0.21986419491616987], 'false': [nan, 1.1769317042163678e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5088717937469482
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.14185106490048774;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1254446385283912;  // std dev = 7.30e-08, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.1254446385283923;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360643;  // std dev = 5.58e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.11231637819360592;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.10159632948783531;  // std dev = 3.71e-07, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926072;  // std dev = 8.94e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   else return -0.09269127618926144;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839682;  // std dev = 7.60e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109155;  // std dev = 8.43e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.07877675473109165;  // std dev = 6.66e-08, 436.000 (wgt'ed) examples reached here.  /* #neg=436 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333738;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.07324622576333692;  // std dev = 1.55e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6.91e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else return -0.06842697784420354;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.06419184008202537;  // std dev = 2.45e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
Inference time using transfer learning 1.0236072540283203
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.5088717937469482 

Total Inference Time : 1.5684020519256592 

Total revision time: 8.086212635040283
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.106250524520874 

Total Inference Time : 1.5684020519256592 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6122181415557861
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5016820581278996;  // std dev = 8.528, 317.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048804;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.411318630475035;  // std dev = 8.737, 326.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.125444638528392;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.36421910090515675;  // std dev = 8.378, 311.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360672;  // std dev = 0.000, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.26331166105518006;  // std dev = 8.623, 321.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783662;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23777297173096482;  // std dev = 8.164, 303.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926044;  // std dev = 1.28e-07, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.13700262905348004;  // std dev = 8.669, 323.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.10e-07, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.15347938161729277;  // std dev = 8.051, 299.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109143;  // std dev = 5.16e-08, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0787746684488397;  // std dev = 8.503, 316.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333696;  // std dev = 9.88e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.037827183318566535;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420305;  // std dev = 0.000, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.034457598096922795;  // std dev = 8.692, 324.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202594;  // std dev = 1.19e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
Inference time using transfer learning 1.1861748695373535
Parameter learned model CLL:-0.304867 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.528, 113, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 272, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.737, 122, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 290, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.378, 107, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 313, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.623, 117, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 292, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.164, 99, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.28e-07, 273, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.669, 119, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.1e-07, 325, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.051, 95, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.16e-08, 279, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.503, 112, 204], 'false,true': [9.88e-08, 296, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.76, 123, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 313, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.692, 120, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.19e-07, 303, 0]}]
{'': [0.22939824259372127, -4.89804275569922e-17], 'true': [nan, 0.22939824259372127], 'true,false': [nan, 0.22939824259372127], 'true,false,false': [nan, 0.22939824259372127], 'false': [nan, -4.89804275569922e-17]}
{'': [0.23418269411720335, -8.269247355828753e-17], 'true': [nan, 0.23418269411720335], 'true,false': [nan, 0.23418269411720335], 'true,false,false': [0.23418269411720335, nan], 'false': [nan, -8.269247355828753e-17]}
{'': [0.22568004880015857, -5.675261467732429e-17], 'true': [nan, 0.22568004880015857], 'true,false': [nan, 0.22568004880015857], 'true,false,false': [nan, 0.22568004880015857], 'false': [nan, -5.675261467732429e-17]}
{'': [0.2316359507380555, -5.627157796045314e-17], 'true': [nan, 0.2316359507380555], 'true,false': [0.2316359507380555, nan], 'false': [nan, -5.627157796045314e-17]}
{'': [0.2199784334869094, 6.018791488810372e-17], 'true': [nan, 0.2199784334869094], 'true,false': [nan, 0.2199784334869094], 'true,false,false': [nan, 0.2199784334869094], 'false': [nan, 6.018791488810372e-17]}
{'': [0.23268698060941645, 3.68935651260052e-17], 'true': [nan, 0.23268698060941645], 'true,false': [0.23268698060941645, nan], 'false': [nan, 3.68935651260052e-17]}
{'': [0.21677609870135764, 9.55030558817339e-18], 'true': [nan, 0.21677609870135764], 'true,false': [0.21677609870135764, nan], 'false': [nan, 9.55030558817339e-18]}
{'': [0.22880948565935014, 3.300663046182898e-17], 'true': [nan, 0.22880948565935014], 'true,false': [nan, 0.22880948565935014], 'true,false,false': [nan, 0.22880948565935014], 'false': [3.300663046182898e-17, nan]}
{'': [0.23466038212271753, -6.810313761278915e-17], 'true': [nan, 0.23466038212271753], 'true,false': [0.23466038212271753, nan], 'false': [nan, -6.810313761278915e-17]}
{'': [0.2331961591220846, 4.6900510611227736e-17], 'true': [nan, 0.2331961591220846], 'true,false': [nan, 0.2331961591220846], 'true,false,false': [nan, 0.2331961591220846], 'false': [nan, 4.6900510611227736e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.2262377738952637
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.1418510649004879;  // std dev = 4.21e-08, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1254446385283913;  // std dev = 0.000, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.12544463852839205;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1123163781936062;  // std dev = 8.94e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360694;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783638;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.10159632948783662;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926094;  // std dev = 5.37e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.09269127618926044;  // std dev = 1.28e-07, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839682;  // std dev = 5.77e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.08518475138839678;  // std dev = 1.05e-07, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0787767547310916;  // std dev = 5.77e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07877675473109141;  // std dev = 3.65e-08, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.07324622576333707;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333707;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.18477998045890986;  // std dev = 0.499, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07324622576333692;  // std dev = 1.05e-07, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06803168319237354;  // std dev = 0.017, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06842697784420296;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06389091339411335;  // std dev = 0.015, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06419184008202608;  // std dev = 8.69e-08, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
Inference time using transfer learning 1.0308964252471924
Refined model CLL: -0.064778


******************************************
Best model found
******************************************
Results 

CLL : -0.093774 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 2.2262377738952637 

Total Inference Time : 1.3392119407653809 

Total revision time: 7.0007545948028564
Best scored revision CLL: -0.064778


Results 

CLL : -0.093774 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 7.020792484283447 

Total Inference Time : 1.3392119407653809 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.2707672119140625
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5241568402378479;  // std dev = 10.609, 506.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.44123255325609034;  // std dev = 10.712, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 547.000 (wgt'ed) examples reached here.  /* #neg=547 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.34045870581012766;  // std dev = 10.967, 524.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360583;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.30327025996215484;  // std dev = 10.349, 494.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783529;  // std dev = 3.76e-07, 526.000 (wgt'ed) examples reached here.  /* #neg=526 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18704473260029045;  // std dev = 11.023, 527.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0926912761892615;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.16045041959434467;  // std dev = 10.712, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.48e-07, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.14449643486936894;  // std dev = 10.327, 493.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109207;  // std dev = 0.000, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07838694522188762;  // std dev = 10.812, 516.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.073246225763337;  // std dev = 1.32e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07357497910779917;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0684269778442036;  // std dev = 0.000, 528.000 (wgt'ed) examples reached here.  /* #neg=528 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05463855513428894;  // std dev = 10.609, 506.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202536;  // std dev = 2.44e-07, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
Inference time using transfer learning 0.9975075721740723
Parameter learned model CLL:-0.304548 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.609, 169, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 498, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.712, 174, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 547, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.967, 187, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.349, 157, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.76e-07, 526, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.023, 190, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 509, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.712, 174, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.48e-07, 523, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.327, 156, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 499, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.812, 179, 337], 'false,true': [1.32e-07, 483, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.588, 168, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 528, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.609, 169, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.44e-07, 515, 0]}]
{'': [0.22244137543158254, -2.140188963132832e-17], 'true': [nan, 0.22244137543158254], 'true,false': [nan, 0.22244137543158254], 'true,false,false': [nan, 0.22244137543158254], 'false': [nan, -2.140188963132832e-17]}
{'': [0.22456255912010933, -1.9159973222050234e-16], 'true': [nan, 0.22456255912010933], 'true,false': [nan, 0.22456255912010933], 'true,false,false': [0.22456255912010933, nan], 'false': [nan, -1.9159973222050234e-16]}
{'': [0.2295138686556745, -1.0809473667750003e-17], 'true': [nan, 0.2295138686556745], 'true,false': [nan, 0.2295138686556745], 'true,false,false': [nan, 0.2295138686556745], 'false': [nan, -1.0809473667750003e-17]}
{'': [0.2168081758429124, 2.684797884644865e-16], 'true': [nan, 0.2168081758429124], 'true,false': [0.2168081758429124, nan], 'false': [nan, 2.684797884644865e-16]}
{'': [0.2305484843138452, -3.664390336680281e-17], 'true': [nan, 0.2305484843138452], 'true,false': [nan, 0.2305484843138452], 'true,false,false': [nan, 0.2305484843138452], 'false': [nan, -3.664390336680281e-17]}
{'': [0.22456255912010087, 4.160682845631562e-17], 'true': [nan, 0.22456255912010087], 'true,false': [0.22456255912010087, nan], 'false': [nan, 4.160682845631562e-17]}
{'': [0.2163020625470591, -3.8268208464033453e-17], 'true': [nan, 0.2163020625470591], 'true,false': [0.2163020625470591, nan], 'false': [nan, -3.8268208464033453e-17]}
{'': [0.2265601526350571, 3.5858134956837354e-17], 'true': [nan, 0.2265601526350571], 'true,false': [nan, 0.2265601526350571], 'true,false,false': [nan, 0.2265601526350571], 'false': [3.5858134956837354e-17, nan]}
{'': [0.22200176453288695, -1.1775092685418326e-16], 'true': [nan, 0.22200176453288695], 'true,false': [0.22200176453288695, nan], 'false': [nan, -1.1775092685418326e-16]}
{'': [0.2224413754315793, 1.1554942547555028e-16], 'true': [nan, 0.2224413754315793], 'true,false': [nan, 0.2224413754315793], 'true,false,false': [nan, 0.2224413754315793], 'false': [nan, 1.1554942547555028e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.643557071685791
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048793;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   else return -0.14185106490048788;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839138;  // std dev = 2.98e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.1254446385283923;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360622;  // std dev = 1.00e-07, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.11231637819360585;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783641;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.10159632948783548;  // std dev = 3.28e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926068;  // std dev = 8.16e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else return -0.09269127618926133;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.83e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109154;  // std dev = 8.02e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.07877675473109222;  // std dev = 0.000, 528.000 (wgt'ed) examples reached here.  /* #neg=528 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333736;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.07324622576333685;  // std dev = 1.70e-07, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420264;  // std dev = 7.30e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   else return -0.06842697784420358;  // std dev = 0.000, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   else return -0.0641918400820254;  // std dev = 2.43e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
Inference time using transfer learning 0.8654394149780273
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.643557071685791 

Total Inference Time : 1.5508489608764648 

Total revision time: 8.5219144821167
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.54195237159729 

Total Inference Time : 1.5508489608764648 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.363013505935669
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4939979917032815;  // std dev = 11.078, 530.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048802;  // std dev = 0.000, 530.000 (wgt'ed) examples reached here.  /* #neg=530 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4214949789499844;  // std dev = 11.096, 531.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3545883303741084;  // std dev = 10.910, 521.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936059;  // std dev = 0.000, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.26173431844943945;  // std dev = 11.132, 533.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783547;  // std dev = 3.32e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21722626942897852;  // std dev = 10.851, 518.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0926912761892614;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.2047285581783272;  // std dev = 10.188, 487.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.44e-07, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.13563295863058966;  // std dev = 10.482, 500.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109204;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09680072314744478;  // std dev = 10.567, 504.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333686;  // std dev = 1.69e-07, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06412260612932184;  // std dev = 10.712, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0462031626605988;  // std dev = 10.753, 513.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202539;  // std dev = 2.43e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
Inference time using transfer learning 0.9491820335388184
Parameter learned model CLL:-0.305493 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.078, 193, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 530, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [11.096, 194, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 474, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.91, 184, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 471, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.132, 196, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.32e-07, 483, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.851, 181, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.188, 150, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 508, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.482, 163, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 494, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.567, 167, 337], 'false,true': [1.69e-07, 510, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.712, 174, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 489, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.753, 176, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 490, 0]}]
{'': [0.2315450338198673, -1.4411951715888824e-16], 'true': [nan, 0.2315450338198673], 'true,false': [nan, 0.2315450338198673], 'true,false,false': [nan, 0.2315450338198673], 'false': [nan, -1.4411951715888824e-16]}
{'': [0.2318689464145761, -1.2179661873524923e-16], 'true': [nan, 0.2318689464145761], 'true,false': [nan, 0.2318689464145761], 'true,false,false': [0.2318689464145761, nan], 'false': [nan, -1.2179661873524923e-16]}
{'': [0.22844006616539853, -1.3200103902125004e-17], 'true': [nan, 0.22844006616539853], 'true,false': [nan, 0.22844006616539853], 'true,false,false': [nan, 0.22844006616539853], 'false': [nan, -1.3200103902125004e-17]}
{'': [0.23250460243092844, 2.280209607511709e-16], 'true': [nan, 0.23250460243092844], 'true,false': [0.23250460243092844, nan], 'false': [nan, 2.280209607511709e-16]}
{'': [0.22732591941085853, -2.0061524880290305e-17], 'true': [nan, 0.22732591941085853], 'true,false': [nan, 0.22732591941085853], 'true,false,false': [nan, 0.22732591941085853], 'false': [nan, -2.0061524880290305e-17]}
{'': [0.21313915393664803, 4.108699382471052e-17], 'true': [nan, 0.21313915393664803], 'true,false': [0.21313915393664803, nan], 'false': [nan, 4.108699382471052e-17]}
{'': [0.21972400000000175, -3.595864047368928e-17], 'true': [nan, 0.21972400000000175], 'true,false': [0.21972400000000175, nan], 'false': [nan, -3.595864047368928e-17]}
{'': [0.22155690980095544, 5.572884202040001e-17], 'true': [nan, 0.22155690980095544], 'true,false': [nan, 0.22155690980095544], 'true,false,false': [nan, 0.22155690980095544], 'false': [5.572884202040001e-17, nan]}
{'': [0.22456255912010037, -1.2623394717619366e-16], 'true': [nan, 0.22456255912010037], 'true,false': [0.22456255912010037, nan], 'false': [nan, -1.2623394717619366e-16]}
{'': [0.22537608912903867, 1.2053849981644556e-16], 'true': [nan, 0.22537608912903867], 'true,false': [nan, 0.22537608912903867], 'true,false,false': [nan, 0.22537608912903867], 'false': [nan, 1.2053849981644556e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5823185443878174
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048807;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.1418510649004877;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839144;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.12544463852839227;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360635;  // std dev = 7.60e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.11231637819360588;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.10159632948783553;  // std dev = 3.15e-07, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926079;  // std dev = 6.83e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.09269127618926137;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.99e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.08518475138839678;  // std dev = 1.38e-07, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109148;  // std dev = 7.60e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   else return -0.07877675473109183;  // std dev = 0.000, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333693;  // std dev = 5.87e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.07324622576333677;  // std dev = 1.92e-07, 530.000 (wgt'ed) examples reached here.  /* #neg=530 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.66e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.06842697784420355;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else return -0.06419184008202537;  // std dev = 2.46e-07, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
Inference time using transfer learning 0.8683948516845703
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.5823185443878174 

Total Inference Time : 1.4825592041015625 

Total revision time: 8.438753366470337
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.458791255950928 

Total Inference Time : 1.4825592041015625 

Run: 5

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.183913469314575
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5167347936853666;  // std dev = 10.550, 495.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048754;  // std dev = 1.52e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.45240959160996275;  // std dev = 10.381, 487.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.34593820509172896;  // std dev = 10.691, 502.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360586;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.25687315010795403;  // std dev = 10.864, 511.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783551;  // std dev = 3.22e-07, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21535113376523796;  // std dev = 10.550, 495.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926151;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.17257775628404;  // std dev = 10.381, 487.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.38e-07, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.09683252413391336;  // std dev = 10.883, 512.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109187;  // std dev = 0.000, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06795382057636068;  // std dev = 10.956, 516.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333709;  // std dev = 1.01e-07, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07679588360021425;  // std dev = 10.570, 496.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420351;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04650451681431049;  // std dev = 10.750, 505.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820254;  // std dev = 2.44e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
Inference time using transfer learning 1.1361865997314453
Parameter learned model CLL:-0.294493 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.55, 169, 326], 'false,true': [0.0, 0, 0], 'false,false': [1.52e-07, 482, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.381, 161, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 457, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.691, 176, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 486, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.864, 185, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.22e-07, 474, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.55, 169, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 511, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.381, 161, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.38e-07, 464, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.883, 186, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 468, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.956, 190, 326], 'false,true': [1.01e-07, 468, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.57, 170, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 482, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.75, 179, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.44e-07, 484, 0]}]
{'': [0.2248505254565888, 4.791003923693622e-17], 'true': [nan, 0.2248505254565888], 'true,false': [nan, 0.2248505254565888], 'true,false,false': [nan, 0.2248505254565888], 'false': [nan, 4.791003923693622e-17]}
{'': [0.22130210946624546, -1.3410133689126617e-16], 'true': [nan, 0.22130210946624546], 'true,false': [nan, 0.22130210946624546], 'true,false,false': [0.22130210946624546, nan], 'false': [nan, -1.3410133689126617e-16]}
{'': [0.22767892573133097, -1.0965165675310187e-17], 'true': [nan, 0.22767892573133097], 'true,false': [nan, 0.22767892573133097], 'true,false,false': [nan, 0.22767892573133097], 'false': [nan, -1.0965165675310187e-17]}
{'': [0.2309657208726984, 2.1923391372344864e-16], 'true': [nan, 0.2309657208726984], 'true,false': [0.2309657208726984, nan], 'false': [nan, 2.1923391372344864e-16]}
{'': [0.22485052545658707, -3.823860123953572e-17], 'true': [nan, 0.22485052545658707], 'true,false': [nan, 0.22485052545658707], 'true,false,false': [nan, 0.22485052545658707], 'false': [nan, -3.823860123953572e-17]}
{'': [0.2213021094662465, 4.1154819016277357e-17], 'true': [nan, 0.2213021094662465], 'true,false': [0.2213021094662465, nan], 'false': [nan, 4.1154819016277357e-17]}
{'': [0.23130798339843617, -1.613144565694672e-17], 'true': [nan, 0.23130798339843617], 'true,false': [0.23130798339843617, nan], 'false': [nan, -1.613144565694672e-17]}
{'': [0.23263325521302922, 2.1824897065280855e-17], 'true': [nan, 0.23263325521302922], 'true,false': [nan, 0.23263325521302922], 'true,false,false': [nan, 0.23263325521302922], 'false': [2.1824897065280855e-17, nan]}
{'': [0.22526990114464243, -1.2069644500074315e-16], 'true': [nan, 0.22526990114464243], 'true,false': [0.22526990114464243, nan], 'false': [nan, -1.2069644500074315e-16]}
{'': [0.22881678266836478, 1.2340908827444921e-16], 'true': [nan, 0.22881678266836478], 'true,false': [nan, 0.22881678266836478], 'true,false,false': [nan, 0.22881678266836478], 'false': [nan, 1.2340908827444921e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5527071952819824
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.14185106490048785;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283913;  // std dev = 4.71e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.12544463852839227;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360636;  // std dev = 6.99e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.11231637819360586;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.10159632948783541;  // std dev = 3.45e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926082;  // std dev = 6.66e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.09269127618926133;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839678;  // std dev = 6.50e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.08518475138839678;  // std dev = 1.44e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109155;  // std dev = 7.74e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.07877675473109204;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333678;  // std dev = 9.88e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   else return -0.07324622576333699;  // std dev = 1.33e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6.41e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.06842697784420353;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.06419184008202546;  // std dev = 2.31e-07, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
Inference time using transfer learning 0.9916622638702393
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.5527071952819824 

Total Inference Time : 1.4945526123046875 

Total revision time: 8.129578828811646
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.149547815322876 

Total Inference Time : 1.4945526123046875 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1549723148345947
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.49096143509950796;  // std dev = 10.907, 512.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048716;  // std dev = 2.98e-07, 451.000 (wgt'ed) examples reached here.  /* #neg=451 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.43020937138075566;  // std dev = 10.757, 504.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839235;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3443748180794179;  // std dev = 10.833, 508.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360596;  // std dev = 0.000, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.28374723019138365;  // std dev = 10.600, 496.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783531;  // std dev = 3.71e-07, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24017481355580314;  // std dev = 10.217, 478.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926129;  // std dev = 0.000, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1545445273957663;  // std dev = 10.620, 497.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.40e-07, 437.000 (wgt'ed) examples reached here.  /* #neg=437 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1334805337057357;  // std dev = 10.349, 484.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109212;  // std dev = 1.12e-07, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11174084263851503;  // std dev = 10.172, 476.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333732;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.04295507067477677;  // std dev = 10.814, 507.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0684269778442035;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.054828314974988364;  // std dev = 10.477, 490.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820254;  // std dev = 2.43e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
Inference time using transfer learning 1.1160860061645508
Parameter learned model CLL:-0.305638 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.907, 188, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.98e-07, 451, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.757, 180, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 504, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.833, 184, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 461, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.6, 172, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.71e-07, 520, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.217, 154, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 467, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.62, 173, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.4e-07, 437, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.349, 160, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.12e-07, 510, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.172, 152, 324], 'false,true': [0.0, 498, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.814, 183, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 473, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.477, 166, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 483, 0]}]
{'': [0.23236083984375266, 1.9693534804880826e-16], 'true': [nan, 0.23236083984375266], 'true,false': [nan, 0.23236083984375266], 'true,false,false': [nan, 0.23236083984375266], 'false': [nan, 1.9693534804880826e-16]}
{'': [0.22959183673469175, -1.3745618400120986e-16], 'true': [nan, 0.22959183673469175], 'true,false': [nan, 0.22959183673469175], 'true,false,false': [0.22959183673469175, nan], 'false': [nan, -1.3745618400120986e-16]}
{'': [0.2310124620249226, -9.633171580261662e-18], 'true': [nan, 0.2310124620249226], 'true,false': [nan, 0.2310124620249226], 'true,false,false': [nan, 0.2310124620249226], 'false': [nan, -9.633171580261662e-18]}
{'': [0.22652185223725232, 2.6474549048753733e-16], 'true': [nan, 0.22652185223725232], 'true,false': [0.22652185223725232, nan], 'false': [nan, 2.6474549048753733e-16]}
{'': [0.218378529787645, -3.803761968737153e-18], 'true': [nan, 0.218378529787645], 'true,false': [nan, 0.218378529787645], 'true,false,false': [nan, 0.218378529787645], 'false': [nan, -3.803761968737153e-18]}
{'': [0.22692290564311532, 4.4713787719457103e-17], 'true': [nan, 0.22692290564311532], 'true,false': [0.22692290564311532, nan], 'false': [nan, 4.4713787719457103e-17]}
{'': [0.22129635953828408, 2.4381368383925006e-17], 'true': [nan, 0.22129635953828408], 'true,false': [0.22129635953828408, nan], 'false': [nan, 2.4381368383925006e-17]}
{'': [0.21735753124779514, -1.070094481566416e-17], 'true': [nan, 0.21735753124779514], 'true,false': [nan, 0.21735753124779514], 'true,false,false': [nan, 0.21735753124779514], 'false': [-1.070094481566416e-17, nan]}
{'': [0.23066419243023817, -1.2111523905001707e-16], 'true': [nan, 0.23066419243023817], 'true,false': [0.23066419243023817, nan], 'false': [nan, -1.2111523905001707e-16]}
{'': [0.22400666389004567, 1.2274515427532788e-16], 'true': [nan, 0.22400666389004567], 'true,false': [nan, 0.22400666389004567], 'true,false,false': [nan, 0.22400666389004567], 'false': [nan, 1.2274515427532788e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.612546682357788
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.14185106490048727;  // std dev = 2.67e-07, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839136;  // std dev = 3.65e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.12544463852839235;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360646;  // std dev = 4.21e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.11231637819360588;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.10159632948783551;  // std dev = 3.21e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926079;  // std dev = 6.83e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.09269127618926142;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 6.14e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 448.000 (wgt'ed) examples reached here.  /* #neg=448 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109148;  // std dev = 8.02e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else return -0.07877675473109184;  // std dev = 1.75e-07, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333682;  // std dev = 8.69e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.07324622576333738;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6.14e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.0684269778442035;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.06419184008202539;  // std dev = 2.45e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
Inference time using transfer learning 1.0364131927490234
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.612546682357788 

Total Inference Time : 1.5739924907684326 

Total revision time: 8.205495834350586
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.225464820861816 

Total Inference Time : 1.5739924907684326 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6713335514068604
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.505767982718556;  // std dev = 8.479, 315.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048813;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4537150996159838;  // std dev = 8.219, 305.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839197;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.33408809235887676;  // std dev = 8.623, 321.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360697;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2497358065148144;  // std dev = 8.737, 326.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878366;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19151549720502556;  // std dev = 8.715, 325.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926042;  // std dev = 1.66e-07, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14014182549616946;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.03e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.13721624866707902;  // std dev = 8.378, 311.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109141;  // std dev = 4.47e-08, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09891016873241033;  // std dev = 8.429, 313.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.0732462257633369;  // std dev = 1.06e-07, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10058939230718324;  // std dev = 8.108, 301.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.068426977844203;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01482352932438662;  // std dev = 8.847, 331.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202612;  // std dev = 6.99e-08, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
Inference time using transfer learning 1.190659523010254
Parameter learned model CLL:-0.30591 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.479, 111, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 261, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.219, 101, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 288, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.623, 117, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 283, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.737, 122, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 280, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.715, 121, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.66e-07, 312, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.76, 123, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.03e-07, 292, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.378, 107, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [4.47e-08, 288, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.429, 109, 204], 'false,true': [1.06e-07, 279, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.108, 97, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 301, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.847, 127, 204], 'false,true': [0.0, 0, 0], 'false,false': [6.99e-08, 270, 0]}]
{'': [0.22820861678004992, -8.847754372491668e-17], 'true': [nan, 0.22820861678004992], 'true,false': [nan, 0.22820861678004992], 'true,false,false': [nan, 0.22820861678004992], 'false': [nan, -8.847754372491668e-17]}
{'': [0.22148884708411865, -8.018277400070575e-17], 'true': [nan, 0.22148884708411865], 'true,false': [nan, 0.22148884708411865], 'true,false,false': [0.22148884708411865, nan], 'false': [nan, -8.018277400070575e-17]}
{'': [0.23163595073805723, -1.1612226688658882e-16], 'true': [nan, 0.23163595073805723], 'true,false': [nan, 0.23163595073805723], 'true,false,false': [nan, 0.23163595073805723], 'false': [nan, -1.1612226688658882e-16]}
{'': [0.23418269411720405, -6.026924990822278e-17], 'true': [nan, 0.23418269411720405], 'true,false': [0.23418269411720405, nan], 'false': [nan, -6.026924990822278e-17]}
{'': [0.23369467455621085, 8.82484968291791e-17], 'true': [nan, 0.23369467455621085], 'true,false': [nan, 0.23369467455621085], 'true,false,false': [nan, 0.23369467455621085], 'false': [nan, 8.82484968291791e-17]}
{'': [0.23466038212271523, 3.650048300137501e-17], 'true': [nan, 0.23466038212271523], 'true,false': [0.23466038212271523, nan], 'false': [nan, 3.650048300137501e-17]}
{'': [0.22568004880015763, 6.938893903907228e-18], 'true': [nan, 0.22568004880015763], 'true,false': [0.22568004880015763, nan], 'false': [nan, 6.938893903907228e-18]}
{'': [0.2269697557390605, 4.0588798749736907e-17], 'true': [nan, 0.2269697557390605], 'true,false': [nan, 0.2269697557390605], 'true,false,false': [nan, 0.2269697557390605], 'false': [4.0588798749736907e-17, nan]}
{'': [0.21840818534011813, -5.827748767135373e-17], 'true': [nan, 0.21840818534011813], 'true,false': [0.21840818534011813, nan], 'false': [nan, -5.827748767135373e-17]}
{'': [0.23647100701892096, 1.8092523364261812e-17], 'true': [nan, 0.23647100701892096], 'true,false': [nan, 0.23647100701892096], 'true,false,false': [nan, 0.23647100701892096], 'false': [nan, 1.8092523364261812e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 1.9942140579223633
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.14185106490048785;  // std dev = 8.94e-08, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839108;  // std dev = 7.45e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.12544463852839202;  // std dev = 0.000, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360625;  // std dev = 7.45e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.11231637819360683;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1015963294878363;  // std dev = 1.49e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.10159632948783662;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926093;  // std dev = 6.14e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   else return -0.09269127618926043;  // std dev = 1.52e-07, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839682;  // std dev = 5.67e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.08518475138839678;  // std dev = 9.88e-08, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109161;  // std dev = 5.58e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07877675473109143;  // std dev = 4.21e-08, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07346138431135028;  // std dev = 0.022, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.073246225763337;  // std dev = 9.42e-08, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06858132759455132;  // std dev = 0.021, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.06842697784420299;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06416964683162678;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06419184008202591;  // std dev = 1.26e-07, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
Inference time using transfer learning 1.0259451866149902
Refined model CLL: -0.063597


******************************************
Best model found
******************************************
Results 

CLL : -0.06649 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.9942140579223633 

Total Inference Time : 1.4839327335357666 

Total revision time: 7.194560766220093
Best scored revision CLL: -0.063597


Results 

CLL : -0.06649 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.214529752731323 

Total Inference Time : 1.4839327335357666 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.4337501525878906
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5000536970042698;  // std dev = 10.985, 525.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048757;  // std dev = 1.19e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4693959255019939;  // std dev = 10.327, 493.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839235;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3495720668664535;  // std dev = 10.812, 516.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360586;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2723477939897813;  // std dev = 10.792, 515.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783548;  // std dev = 3.29e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16918537881102272;  // std dev = 11.358, 546.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926155;  // std dev = 0.000, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.17984012532658392;  // std dev = 10.546, 503.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.44e-07, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1430272020705043;  // std dev = 10.416, 497.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0787767547310923;  // std dev = 0.000, 544.000 (wgt'ed) examples reached here.  /* #neg=544 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08145250532467488;  // std dev = 10.832, 517.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333699;  // std dev = 1.32e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0797601733493637;  // std dev = 10.546, 503.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420357;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07839223081723802;  // std dev = 10.258, 490.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202539;  // std dev = 2.43e-07, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
Inference time using transfer learning 0.9562480449676514
Parameter learned model CLL:-0.306816 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.985, 188, 337], 'false,true': [0.0, 0, 0], 'false,false': [1.19e-07, 486, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.327, 156, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 495, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.812, 179, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 486, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.792, 178, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.29e-07, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.358, 209, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 523, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.546, 166, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 508, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.416, 160, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 544, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.832, 180, 337], 'false,true': [1.32e-07, 484, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.546, 166, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 514, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.258, 153, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 489, 0]}]
{'': [0.22986303854875542, 2.924044180082717e-17], 'true': [nan, 0.22986303854875542], 'true,false': [nan, 0.22986303854875542], 'true,false,false': [nan, 0.22986303854875542], 'false': [nan, 2.924044180082717e-17]}
{'': [0.21630206254705586, -1.3816108750890837e-16], 'true': [nan, 0.21630206254705586], 'true,false': [nan, 0.21630206254705586], 'true,false,false': [0.21630206254705586, nan], 'false': [nan, -1.3816108750890837e-16]}
{'': [0.22656015263505797, -1.0965165675310187e-17], 'true': [nan, 0.22656015263505797], 'true,false': [nan, 0.22656015263505797], 'true,false,false': [nan, 0.22656015263505797], 'false': [nan, -1.0965165675310187e-17]}
{'': [0.2261702328211937, 2.2527602329192367e-16], 'true': [nan, 0.2261702328211937], 'true,false': [0.2261702328211937, nan], 'false': [nan, 2.2527602329192367e-16]}
{'': [0.23626038186477794, -4.5852423196755987e-17], 'true': [nan, 0.23626038186477794], 'true,false': [nan, 0.23626038186477794], 'true,false,false': [nan, 0.23626038186477794], 'false': [nan, -4.5852423196755987e-17]}
{'': [0.2211067590481002, 4.108699382471052e-17], 'true': [nan, 0.2211067590481002], 'true,false': [0.2211067590481002, nan], 'false': [nan, 4.108699382471052e-17]}
{'': [0.2182916411952595, -6.612357720193947e-17], 'true': [nan, 0.2182916411952595], 'true,false': [0.2182916411952595, nan], 'false': [nan, -6.612357720193947e-17]}
{'': [0.22694536625150957, 3.578404790114141e-17], 'true': [nan, 0.22694536625150957], 'true,false': [nan, 0.22694536625150957], 'true,false,false': [nan, 0.22694536625150957], 'false': [3.578404790114141e-17, nan]}
{'': [0.2211067590480975, -1.235501109115933e-16], 'true': [nan, 0.2211067590480975], 'true,false': [0.2211067590480975, nan], 'false': [nan, -1.235501109115933e-16]}
{'': [0.2147480216576442, 1.207849998160702e-16], 'true': [nan, 0.2147480216576442], 'true,false': [nan, 0.2147480216576442], 'true,false,false': [nan, 0.2147480216576442], 'false': [nan, 1.207849998160702e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5280911922454834
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048827;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.1418510649004878;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839144;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.12544463852839227;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360639;  // std dev = 5.96e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.11231637819360579;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.10159632948783545;  // std dev = 3.36e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926075;  // std dev = 7.45e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.09269127618926147;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 6.14e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 534.000 (wgt'ed) examples reached here.  /* #neg=534 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109148;  // std dev = 8.43e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   else return -0.0787767547310921;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07392187608179296;  // std dev = 0.049, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.0732462257633369;  // std dev = 1.55e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06937004274557226;  // std dev = 0.058, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.06842697784420358;  // std dev = 0.000, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0647162725006744;  // std dev = 0.043, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.06419184008202536;  // std dev = 2.44e-07, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
Inference time using transfer learning 0.8313124179840088
Refined model CLL: -0.064212


******************************************
Best model found
******************************************
Results 

CLL : -0.063851 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.5280911922454834 

Total Inference Time : 1.5340666770935059 

Total revision time: 8.52589201927185
Best scored revision CLL: -0.064212


Results 

CLL : -0.063851 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.545861005783081 

Total Inference Time : 1.5340666770935059 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.376173257827759
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5049819485352085;  // std dev = 10.910, 521.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4196469360810427;  // std dev = 11.096, 531.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839235;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3679445997315456;  // std dev = 10.671, 509.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360595;  // std dev = 0.000, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.27478214674457835;  // std dev = 10.851, 518.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878354;  // std dev = 3.50e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21868449498391546;  // std dev = 10.692, 510.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926119;  // std dev = 6.99e-08, 449.000 (wgt'ed) examples reached here.  /* #neg=449 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1503229252412028;  // std dev = 10.910, 521.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.12033089730636147;  // std dev = 10.792, 515.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109214;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07322762151439452;  // std dev = 11.060, 529.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333677;  // std dev = 1.93e-07, 531.000 (wgt'ed) examples reached here.  /* #neg=531 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.09769519034501213;  // std dev = 10.394, 496.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420351;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0490645025598869;  // std dev = 10.792, 515.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202537;  // std dev = 2.45e-07, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
Inference time using transfer learning 1.0140135288238525
Parameter learned model CLL:-0.302561 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.91, 184, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 495, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [11.096, 194, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 507, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.671, 172, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 462, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.851, 181, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.5e-07, 499, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.692, 173, 337], 'false,true': [0.0, 0, 0], 'false,false': [6.99e-08, 449, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.91, 184, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 495, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.792, 178, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 511, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.06, 192, 337], 'false,true': [1.93e-07, 531, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.394, 159, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 476, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.792, 178, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.45e-07, 507, 0]}]
{'': [0.22844006616539395, -7.177199351112123e-18], 'true': [nan, 0.22844006616539395], 'true,false': [nan, 0.22844006616539395], 'true,false,false': [nan, 0.22844006616539395], 'false': [nan, -7.177199351112123e-18]}
{'': [0.23186894641456998, -1.383946650025836e-16], 'true': [nan, 0.23186894641456998], 'true,false': [nan, 0.23186894641456998], 'true,false,false': [0.23186894641456998, nan], 'false': [nan, -1.383946650025836e-16]}
{'': [0.22372925841725919, -1.3457248783335231e-17], 'true': [nan, 0.22372925841725919], 'true,false': [nan, 0.22372925841725919], 'true,false,false': [nan, 0.22372925841725919], 'false': [nan, -1.3457248783335231e-17]}
{'': [0.22732591941086966, 2.456285008389124e-16], 'true': [nan, 0.22732591941086966], 'true,false': [0.22732591941086966, nan], 'false': [nan, 2.456285008389124e-16]}
{'': [0.2241484044598232, 1.0879691109912446e-17], 'true': [nan, 0.2241484044598232], 'true,false': [nan, 0.2241484044598232], 'true,false,false': [nan, 0.2241484044598232], 'false': [nan, 1.0879691109912446e-17]}
{'': [0.2284400661653929, 4.126889626889471e-17], 'true': [nan, 0.2284400661653929], 'true,false': [0.2284400661653929, nan], 'false': [nan, 4.126889626889471e-17]}
{'': [0.22617023282119147, -4.606013331125894e-17], 'true': [nan, 0.22617023282119147], 'true,false': [0.22617023282119147, nan], 'false': [nan, -4.606013331125894e-17]}
{'': [0.2312170125178214, 7.02514004282585e-17], 'true': [nan, 0.2312170125178214], 'true,false': [nan, 0.2312170125178214], 'true,false,false': [nan, 0.2312170125178214], 'false': [7.02514004282585e-17, nan]}
{'': [0.21780290712799102, -1.2221782876125674e-16], 'true': [nan, 0.21780290712799102], 'true,false': [0.21780290712799102, nan], 'false': [nan, -1.2221782876125674e-16]}
{'': [0.22617023282119122, 1.182486061730936e-16], 'true': [nan, 0.22617023282119122], 'true,false': [nan, 0.22617023282119122], 'true,false,false': [nan, 0.22617023282119122], 'false': [nan, 1.182486061730936e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.6193196773529053
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.14185106490048735;  // std dev = 2.42e-07, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839152;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.12544463852839235;  // std dev = 0.000, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360626;  // std dev = 8.94e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.11231637819360595;  // std dev = 0.000, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.10159632948783559;  // std dev = 3.00e-07, 456.000 (wgt'ed) examples reached here.  /* #neg=456 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926068;  // std dev = 8.30e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   else return -0.09269127618926153;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.32e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109155;  // std dev = 7.60e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.07877675473109201;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333685;  // std dev = 7.30e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.07324622576333692;  // std dev = 1.55e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.50e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.06842697784420357;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.06419184008202546;  // std dev = 2.30e-07, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
Inference time using transfer learning 0.8566081523895264
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.6193196773529053 

Total Inference Time : 1.5264091491699219 

Total revision time: 8.56803297996521
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.58800196647644 

Total Inference Time : 1.5264091491699219 

Starting experiments for fasttext using wmd 

Run: 1

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.3100624084472656
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5562217402386943;  // std dev = 9.921, 467.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048766;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.3844299454973946;  // std dev = 11.301, 536.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.37330637354199425;  // std dev = 10.360, 486.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360595;  // std dev = 0.000, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.26599896929826544;  // std dev = 10.730, 504.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783547;  // std dev = 3.31e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20809646221747227;  // std dev = 10.631, 499.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926133;  // std dev = 0.000, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15629320500778002;  // std dev = 10.631, 499.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.35e-07, 456.000 (wgt'ed) examples reached here.  /* #neg=456 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.13752957317810716;  // std dev = 10.316, 484.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109207;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07172612733822453;  // std dev = 10.807, 508.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333702;  // std dev = 1.23e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08606284180842037;  // std dev = 10.316, 484.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420355;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03608951390055611;  // std dev = 10.769, 506.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202546;  // std dev = 2.27e-07, 456.000 (wgt'ed) examples reached here.  /* #neg=456 */
Inference time using transfer learning 1.0570061206817627
Parameter learned model CLL:-0.298438 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [9.921, 141, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 494, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [11.301, 210, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 486, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.36, 160, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 459, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.73, 178, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.31e-07, 482, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.631, 173, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 475, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.631, 173, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.35e-07, 456, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.316, 158, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 500, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.807, 182, 326], 'false,true': [1.23e-07, 479, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.316, 158, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 500, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.769, 180, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.27e-07, 456, 0]}]
{'': [0.21076716386429672, -3.595864047368928e-18], 'true': [nan, 0.21076716386429672], 'true,false': [nan, 0.21076716386429672], 'true,false,false': [nan, 0.21076716386429672], 'false': [nan, -3.595864047368928e-18]}
{'': [0.23829082200935095, -1.3706457094137734e-16], 'true': [nan, 0.23829082200935095], 'true,false': [nan, 0.23829082200935095], 'true,false,false': [0.23829082200935095, nan], 'false': [nan, -1.3706457094137734e-16]}
{'': [0.2208335450219372, -1.548023389455556e-17], 'true': [nan, 0.2208335450219372], 'true,false': [nan, 0.2208335450219372], 'true,false,false': [nan, 0.2208335450219372], 'false': [nan, -1.548023389455556e-17]}
{'': [0.22844230284706135, 2.266513394670444e-16], 'true': [nan, 0.22844230284706135], 'true,false': [0.22844230284706135, nan], 'false': [nan, 2.266513394670444e-16]}
{'': [0.22649708234103147, -1.1219095827791055e-17], 'true': [nan, 0.22649708234103147], 'true,false': [nan, 0.22649708234103147], 'true,false,false': [nan, 0.22649708234103147], 'false': [nan, -1.1219095827791055e-17]}
{'': [0.22649708234103344, 3.992907369265914e-17], 'true': [nan, 0.22649708234103344], 'true,false': [0.22649708234103344, nan], 'false': [nan, 3.992907369265914e-17]}
{'': [0.21987910661839935, -3.9968028886505634e-17], 'true': [nan, 0.21987910661839935], 'true,false': [0.21987910661839935, nan], 'false': [nan, -3.9968028886505634e-17]}
{'': [0.22991195982391815, 3.1521989843219477e-17], 'true': [nan, 0.22991195982391815], 'true,false': [nan, 0.22991195982391815], 'true,false,false': [nan, 0.22991195982391815], 'false': [3.1521989843219477e-17, nan]}
{'': [0.21987910661840057, -1.1990408665951691e-16], 'true': [nan, 0.21987910661840057], 'true,false': [0.21987910661840057, nan], 'false': [nan, -1.1990408665951691e-16]}
{'': [0.22918652064553355, 1.134570020779217e-16], 'true': [nan, 0.22918652064553355], 'true,false': [nan, 0.22918652064553355], 'true,false,false': [nan, 0.22918652064553355], 'false': [nan, 1.134570020779217e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5154612064361572
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.14185106490048807;  // std dev = 0.000, 536.000 (wgt'ed) examples reached here.  /* #neg=536 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839133;  // std dev = 4.21e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.12544463852839224;  // std dev = 0.000, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360635;  // std dev = 7.60e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.11231637819360593;  // std dev = 0.000, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.10159632948783544;  // std dev = 3.37e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926071;  // std dev = 8.02e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   else return -0.09269127618926129;  // std dev = 0.000, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839678;  // std dev = 6.32e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109154;  // std dev = 8.16e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.0787767547310919;  // std dev = 0.000, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333692;  // std dev = 6.05e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.07324622576333724;  // std dev = 0.000, 443.000 (wgt'ed) examples reached here.  /* #neg=443 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6.32e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.06842697784420347;  // std dev = 0.000, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.0641918400820254;  // std dev = 2.42e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
Inference time using transfer learning 1.0427758693695068
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.5154612064361572 

Total Inference Time : 1.5365078449249268 

Total revision time: 8.262673377990723
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.277547359466553 

Total Inference Time : 1.5365078449249268 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.191737413406372
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5074475322938967;  // std dev = 10.660, 499.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048724;  // std dev = 2.70e-07, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.476886599776452;  // std dev = 9.985, 468.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 448.000 (wgt'ed) examples reached here.  /* #neg=448 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.35861329171832207;  // std dev = 10.414, 487.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360593;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.29441999596929935;  // std dev = 10.149, 475.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783556;  // std dev = 3.10e-07, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18215292472334285;  // std dev = 10.776, 505.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926126;  // std dev = 0.000, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14703153764721094;  // std dev = 10.620, 497.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.48e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10387634138717257;  // std dev = 10.718, 502.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109214;  // std dev = 1.12e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06685285043390701;  // std dev = 10.889, 511.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333684;  // std dev = 1.75e-07, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0723405328653511;  // std dev = 10.559, 494.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420351;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05487330155278305;  // std dev = 10.559, 494.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202544;  // std dev = 2.37e-07, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
Inference time using transfer learning 1.10288405418396
Parameter learned model CLL:-0.302336 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.66, 175, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.7e-07, 458, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [9.985, 144, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 448, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.414, 163, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 470, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.149, 151, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.1e-07, 464, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.776, 181, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 461, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.62, 173, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.48e-07, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.718, 178, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.12e-07, 511, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.889, 187, 324], 'false,true': [1.75e-07, 515, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.559, 170, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.559, 170, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.37e-07, 470, 0]}]
{'': [0.2277099288757903, 1.5901884370176915e-16], 'true': [nan, 0.2277099288757903], 'true,false': [nan, 0.2277099288757903], 'true,false,false': [nan, 0.2277099288757903], 'false': [nan, 1.5901884370176915e-16]}
{'': [0.2130177514792927, -1.308477136165363e-16], 'true': [nan, 0.2130177514792927], 'true,false': [nan, 0.2130177514792927], 'true,false,false': [0.2130177514792927, nan], 'false': [nan, -1.308477136165363e-16]}
{'': [0.22267665673001158, -7.558965274043619e-18], 'true': [nan, 0.22267665673001158], 'true,false': [nan, 0.22267665673001158], 'true,false,false': [nan, 0.22267665673001158], 'false': [nan, -7.558965274043619e-18]}
{'': [0.21683767313020152, 2.067311838957188e-16], 'true': [nan, 0.21683767313020152], 'true,false': [0.21683767313020152, nan], 'false': [nan, 2.067311838957188e-16]}
{'': [0.2299539260856752, 0.0], 'true': [nan, 0.2299539260856752], 'true,false': [nan, 0.2299539260856752], 'true,false,false': [nan, 0.2299539260856752], 'false': [nan, 0.0]}
{'': [0.22692290564311604, 4.468248723337386e-17], 'true': [nan, 0.22692290564311604], 'true,false': [0.22692290564311604, nan], 'false': [nan, 4.468248723337386e-17]}
{'': [0.22885351026173903, 2.4333655334250005e-17], 'true': [nan, 0.22885351026173903], 'true,false': [0.22885351026173903, nan], 'false': [nan, 2.4333655334250005e-17]}
{'': [0.23203036140333594, 5.949933102845499e-17], 'true': [nan, 0.23203036140333594], 'true,false': [nan, 0.23203036140333594], 'true,false,false': [nan, 0.23203036140333594], 'false': [5.949933102845499e-17, nan]}
{'': [0.22570440426822302, -1.211993468549129e-16], 'true': [nan, 0.22570440426822302], 'true,false': [0.22570440426822302, nan], 'false': [nan, -1.211993468549129e-16]}
{'': [0.2257044042682237, 1.19053703066187e-16], 'true': [nan, 0.2257044042682237], 'true,false': [nan, 0.2257044042682237], 'true,false,false': [nan, 0.2257044042682237], 'false': [nan, 1.19053703066187e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.839315176010132
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048835;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   else return -0.14185106490048766;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1254446385283914;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.1254446385283923;  // std dev = 0.000, 443.000 (wgt'ed) examples reached here.  /* #neg=443 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360635;  // std dev = 6.99e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.112316378193606;  // std dev = 0.000, 447.000 (wgt'ed) examples reached here.  /* #neg=447 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.10159632948783541;  // std dev = 3.48e-07, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926068;  // std dev = 8.30e-08, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   else return -0.09269127618926133;  // std dev = 0.000, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839678;  // std dev = 6.50e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.08518475138839678;  // std dev = 1.33e-07, 437.000 (wgt'ed) examples reached here.  /* #neg=437 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109155;  // std dev = 7.88e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.07877675473109204;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333689;  // std dev = 5.87e-08, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.0732462257633369;  // std dev = 1.56e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420264;  // std dev = 6.83e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.06842697784420353;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.06419184008202547;  // std dev = 2.27e-07, 452.000 (wgt'ed) examples reached here.  /* #neg=452 */
Inference time using transfer learning 1.0535645484924316
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.839315176010132 

Total Inference Time : 1.4886183738708496 

Total revision time: 8.415846824645996
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.430720806121826 

Total Inference Time : 1.4886183738708496 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.8045215606689453
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5292015666784559;  // std dev = 8.192, 304.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004879;  // std dev = 5.96e-08, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.404732606901877;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839202;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.35568360793221215;  // std dev = 8.429, 313.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360676;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.27665325962761894;  // std dev = 8.429, 313.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783663;  // std dev = 0.000, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23590853969655087;  // std dev = 8.108, 301.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926043;  // std dev = 1.52e-07, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.12714741269884083;  // std dev = 8.715, 325.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 9.88e-08, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.12366179307107429;  // std dev = 8.378, 311.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109143;  // std dev = 5.37e-08, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0909341479385331;  // std dev = 8.403, 312.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333693;  // std dev = 1.02e-07, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07719452754374842;  // std dev = 8.300, 308.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420287;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.048006570716348014;  // std dev = 8.429, 313.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202612;  // std dev = 7.60e-08, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
Inference time using transfer learning 1.1966626644134521
Parameter learned model CLL:-0.31266 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.192, 100, 204], 'false,true': [0.0, 0, 0], 'false,false': [5.96e-08, 292, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.76, 123, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 311, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.429, 109, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 308, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.429, 109, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 310, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.108, 97, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.52e-07, 296, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.715, 121, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [9.88e-08, 282, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.378, 107, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.37e-08, 270, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.403, 108, 204], 'false,true': [1.02e-07, 289, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.3, 104, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 276, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.429, 109, 204], 'false,true': [0.0, 0, 0], 'false,false': [7.6e-08, 270, 0]}]
{'': [0.22074099722992158, 1.2166827667125003e-17], 'true': [nan, 0.22074099722992158], 'true,false': [nan, 0.22074099722992158], 'true,false,false': [nan, 0.22074099722992158], 'false': [nan, 1.2166827667125003e-17]}
{'': [0.23466038212271967, -8.567637489068732e-17], 'true': [nan, 0.23466038212271967], 'true,false': [nan, 0.23466038212271967], 'true,false,false': [0.23466038212271967, nan], 'false': [nan, -8.567637489068732e-17]}
{'': [0.22696975573905967, -6.632501186072363e-17], 'true': [nan, 0.22696975573905967], 'true,false': [nan, 0.22696975573905967], 'true,false,false': [nan, 0.22696975573905967], 'false': [nan, -6.632501186072363e-17]}
{'': [0.22696975573906267, -5.1571650176136306e-17], 'true': [nan, 0.22696975573906267], 'true,false': [0.22696975573906267, nan], 'false': [nan, -5.1571650176136306e-17]}
{'': [0.21840818534011852, 7.801567200068668e-17], 'true': [nan, 0.21840818534011852], 'true,false': [nan, 0.21840818534011852], 'true,false,false': [nan, 0.21840818534011852], 'false': [nan, 7.801567200068668e-17]}
{'': [0.23369467455621434, 3.4645257506033254e-17], 'true': [nan, 0.23369467455621434], 'true,false': [0.23369467455621434, nan], 'false': [nan, 3.4645257506033254e-17]}
{'': [0.2256800488001577, 1.0691036533427433e-17], 'true': [nan, 0.2256800488001577], 'true,false': [0.2256800488001577, nan], 'false': [nan, 1.0691036533427433e-17]}
{'': [0.2263313609467456, 3.611106031652758e-17], 'true': [nan, 0.2263313609467456], 'true,false': [nan, 0.2263313609467456], 'true,false,false': [nan, 0.2263313609467456], 'false': [3.611106031652758e-17, nan]}
{'': [0.22364648338674276, -3.539841527790354e-17], 'true': [nan, 0.22364648338674276], 'true,false': [0.22364648338674276, nan], 'false': [nan, -3.539841527790354e-17]}
{'': [0.22696975573906064, 2.1382073066854867e-17], 'true': [nan, 0.22696975573906064], 'true,false': [nan, 0.22696975573906064], 'true,false,false': [nan, 0.22696975573906064], 'false': [nan, 2.1382073066854867e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.0847716331481934
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.14185106490048782;  // std dev = 1.15e-07, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839108;  // std dev = 7.88e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.12544463852839197;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360624;  // std dev = 7.45e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.11231637819360689;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10535328328747587;  // std dev = 0.479, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.10159632948783662;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.0960901097826533;  // std dev = 0.462, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.09269127618926043;  // std dev = 1.41e-07, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.084628765694889;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.08518475138839678;  // std dev = 1.07e-07, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07829913019454789;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.07877675473109143;  // std dev = 2.11e-08, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07283172916611934;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.07324622576333693;  // std dev = 1.02e-07, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06806403831465674;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.06842697784420305;  // std dev = 0.000, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06387152169338899;  // std dev = 3.94e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06419184008202605;  // std dev = 9.42e-08, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
Inference time using transfer learning 1.0107676982879639
Refined model CLL: -0.065137


******************************************
Best model found
******************************************
Results 

CLL : -0.10228 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 2.0847716331481934 

Total Inference Time : 1.4860117435455322 

Total revision time: 7.218028783798218
Best scored revision CLL: -0.065137


Results 

CLL : -0.10228 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 7.232902765274048 

Total Inference Time : 1.4860117435455322 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.208509683609009
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5099864592774577;  // std dev = 10.832, 517.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048766;  // std dev = 4.21e-08, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4322264041533634;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839235;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.36820602165238153;  // std dev = 10.609, 506.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936058;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.29132248979458064;  // std dev = 10.525, 502.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783548;  // std dev = 3.29e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19747986394983347;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926142;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15583671362955642;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.40e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.14906809542427166;  // std dev = 10.258, 490.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109226;  // std dev = 0.000, 537.000 (wgt'ed) examples reached here.  /* #neg=537 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09720383825224736;  // std dev = 10.503, 501.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333677;  // std dev = 1.92e-07, 531.000 (wgt'ed) examples reached here.  /* #neg=531 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.05536179446852646;  // std dev = 10.792, 515.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420354;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04341296535551253;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202541;  // std dev = 2.41e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
Inference time using transfer learning 0.9648373126983643
Parameter learned model CLL:-0.303428 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.832, 180, 337], 'false,true': [0.0, 0, 0], 'false,false': [4.21e-08, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.89, 183, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 509, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.609, 169, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 501, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.525, 165, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.29e-07, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.89, 183, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.773, 177, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.4e-07, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.258, 153, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 537, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.503, 164, 337], 'false,true': [1.92e-07, 531, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.792, 178, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.773, 177, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.41e-07, 478, 0]}]
{'': [0.22694536625151315, 3.6104813808948184e-18], 'true': [nan, 0.22694536625151315], 'true,false': [nan, 0.22694536625151315], 'true,false,false': [nan, 0.22694536625151315], 'false': [nan, 3.6104813808948184e-18]}
{'': [0.22807322485207032, -1.3959582234972498e-16], 'true': [nan, 0.22807322485207032], 'true,false': [nan, 0.22807322485207032], 'true,false,false': [0.22807322485207032, nan], 'false': [nan, -1.3959582234972498e-16]}
{'': [0.22244137543158427, -8.864056084831589e-18], 'true': [nan, 0.22244137543158427], 'true,false': [nan, 0.22244137543158427], 'true,false,false': [nan, 0.22244137543158427], 'false': [nan, -8.864056084831589e-18]}
{'': [0.22065125950381903, 2.2527602329192367e-16], 'true': [nan, 0.22065125950381903], 'true,false': [0.22065125950381903, nan], 'false': [nan, 2.2527602329192367e-16]}
{'': [0.22807322485206988, -2.1751308237554086e-17], 'true': [nan, 0.22807322485206988], 'true,false': [nan, 0.22807322485206988], 'true,false,false': [nan, 0.22807322485206988], 'false': [nan, -2.1751308237554086e-17]}
{'': [0.22577556056867049, 4.070817756958907e-17], 'true': [nan, 0.22577556056867049], 'true,false': [0.22577556056867049, nan], 'false': [nan, 4.070817756958907e-17]}
{'': [0.2147480216576459, -6.285061442943158e-17], 'true': [nan, 0.2147480216576459], 'true,false': [0.2147480216576459, nan], 'false': [nan, -6.285061442943158e-17]}
{'': [0.22019035780733867, 6.941507423268398e-17], 'true': [nan, 0.22019035780733867], 'true,false': [nan, 0.22019035780733867], 'true,false,false': [nan, 0.22019035780733867], 'false': [6.941507423268398e-17, nan]}
{'': [0.22617023282118928, -1.2070578928987504e-16], 'true': [nan, 0.22617023282118928], 'true,false': [0.22617023282118928, nan], 'false': [nan, -1.2070578928987504e-16]}
{'': [0.22577556056866788, 1.2124192863061332e-16], 'true': [nan, 0.22577556056866788], 'true,false': [nan, 0.22577556056866788], 'true,false,false': [nan, 0.22577556056866788], 'false': [nan, 1.2124192863061332e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.7600128650665283
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.14185106490048777;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839122;  // std dev = 6.32e-08, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.1254446385283923;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360643;  // std dev = 5.58e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.11231637819360583;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.10159632948783541;  // std dev = 3.44e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926076;  // std dev = 7.15e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.09269127618926162;  // std dev = 0.000, 537.000 (wgt'ed) examples reached here.  /* #neg=537 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.32e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 529.000 (wgt'ed) examples reached here.  /* #neg=529 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109153;  // std dev = 8.02e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.07877675473109208;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333686;  // std dev = 7.67e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.07324622576333695;  // std dev = 1.43e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.23e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.06842697784420355;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.06419184008202537;  // std dev = 2.43e-07, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
Inference time using transfer learning 0.8547840118408203
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.7600128650665283 

Total Inference Time : 1.6810593605041504 

Total revision time: 8.673686504364014
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.688560485839844 

Total Inference Time : 1.6810593605041504 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.3377954959869385
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5308036257182704;  // std dev = 10.503, 501.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004881;  // std dev = 0.000, 539.000 (wgt'ed) examples reached here.  /* #neg=539 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4081656708201388;  // std dev = 11.203, 537.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3864459325617388;  // std dev = 10.327, 493.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360586;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2785508492600549;  // std dev = 10.671, 509.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783548;  // std dev = 3.28e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21617886708914236;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926126;  // std dev = 0.000, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15060595729368403;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.38e-07, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11051646448764868;  // std dev = 10.812, 516.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109212;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09092740525037264;  // std dev = 10.692, 510.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333689;  // std dev = 1.59e-07, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06365281715115363;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.048372872432780094;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202539;  // std dev = 2.43e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
Inference time using transfer learning 1.0289647579193115
Parameter learned model CLL:-0.303671 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.503, 164, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 539, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [11.203, 200, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 499, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.327, 156, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 483, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.671, 172, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.28e-07, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.588, 168, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 461, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.773, 177, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.38e-07, 470, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.812, 179, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 509, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.692, 173, 337], 'false,true': [1.59e-07, 503, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.773, 177, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 485, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.773, 177, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 492, 0]}]
{'': [0.2201903578073421, -1.7796524921635162e-16], 'true': [nan, 0.2201903578073421], 'true,false': [nan, 0.2201903578073421], 'true,false,false': [nan, 0.2201903578073421], 'false': [nan, -1.7796524921635162e-16]}
{'': [0.23372831337626462, -1.2459416709220194e-16], 'true': [nan, 0.23372831337626462], 'true,false': [nan, 0.23372831337626462], 'true,false,false': [0.23372831337626462, nan], 'false': [nan, -1.2459416709220194e-16]}
{'': [0.21630206254705434, -1.1033272294411493e-17], 'true': [nan, 0.21630206254705434], 'true,false': [nan, 0.21630206254705434], 'true,false,false': [nan, 0.21630206254705434], 'false': [nan, -1.1033272294411493e-17]}
{'': [0.22372925841725336, 2.238949766327399e-16], 'true': [nan, 0.22372925841725336], 'true,false': [0.22372925841725336, nan], 'false': [nan, 2.238949766327399e-16]}
{'': [0.22200176453288542, 0.0], 'true': [nan, 0.22200176453288542], 'true,false': [nan, 0.22200176453288542], 'true,false,false': [nan, 0.22200176453288542], 'false': [nan, 0.0]}
{'': [0.22577556056866765, 4.062943834798445e-17], 'true': [nan, 0.22577556056866765], 'true,false': [0.22577556056866765, nan], 'false': [nan, 4.062943834798445e-17]}
{'': [0.2265601526350559, -4.6241116153346404e-17], 'true': [nan, 0.2265601526350559], 'true,false': [0.2265601526350559, nan], 'false': [nan, -4.6241116153346404e-17]}
{'': [0.2241484044598237, 5.0324224575454413e-17], 'true': [nan, 0.2241484044598237], 'true,false': [nan, 0.2241484044598237], 'true,false,false': [nan, 0.2241484044598237], 'false': [5.0324224575454413e-17, nan]}
{'': [0.22577556056866827, -1.2727505189517258e-16], 'true': [nan, 0.22577556056866827], 'true,false': [0.22577556056866827, nan], 'false': [nan, -1.2727505189517258e-16]}
{'': [0.2257755605686678, 1.200485059147527e-16], 'true': [nan, 0.2257755605686678], 'true,false': [nan, 0.2257755605686678], 'true,false,false': [nan, 0.2257755605686678], 'false': [nan, 1.200485059147527e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.7586777210235596
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.1418510649004877;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839144;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.12544463852839233;  // std dev = 0.000, 543.000 (wgt'ed) examples reached here.  /* #neg=543 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360638;  // std dev = 6.66e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.11231637819360588;  // std dev = 0.000, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.10159632948783545;  // std dev = 3.35e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926072;  // std dev = 7.74e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.0926912761892614;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 6.14e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.08518475138839678;  // std dev = 1.44e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109151;  // std dev = 8.43e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.07877675473109214;  // std dev = 0.000, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333685;  // std dev = 8.09e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.07324622576333689;  // std dev = 1.59e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.32e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.06842697784420351;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.06419184008202536;  // std dev = 2.45e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
Inference time using transfer learning 0.8519318103790283
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.7586777210235596 

Total Inference Time : 1.5732536315917969 

Total revision time: 8.662624597549438
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.677498579025269 

Total Inference Time : 1.5732536315917969 

Run: 2

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1322357654571533
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5359036128541858;  // std dev = 10.249, 481.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048718;  // std dev = 2.98e-07, 442.000 (wgt'ed) examples reached here.  /* #neg=442 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.46749418502262147;  // std dev = 10.089, 474.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3545533129012291;  // std dev = 10.446, 490.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936059;  // std dev = 0.000, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.28091208005081136;  // std dev = 10.338, 485.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878355;  // std dev = 3.24e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17320697158061574;  // std dev = 10.938, 515.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926136;  // std dev = 0.000, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.13998052364567587;  // std dev = 10.788, 507.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.46e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11146278588433672;  // std dev = 10.691, 502.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.078776754731092;  // std dev = 1.44e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09710184197333638;  // std dev = 10.488, 492.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333717;  // std dev = 6.32e-08, 453.000 (wgt'ed) examples reached here.  /* #neg=453 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08297557241273057;  // std dev = 10.338, 485.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06305061479167295;  // std dev = 10.338, 485.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820254;  // std dev = 2.43e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
Inference time using transfer learning 1.1135075092315674
Parameter learned model CLL:-0.302883 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.249, 155, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.98e-07, 442, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.089, 148, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.446, 164, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 477, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.338, 159, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.24e-07, 476, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.938, 189, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 479, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.788, 181, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.46e-07, 475, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.691, 176, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 488, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.488, 166, 326], 'false,true': [6.32e-08, 453, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.338, 159, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.338, 159, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 483, 0]}]
{'': [0.2184032745363334, 2.0094534382355775e-16], 'true': [nan, 0.2184032745363334], 'true,false': [nan, 0.2184032745363334], 'true,false,false': [nan, 0.2184032745363334], 'false': [nan, 2.0094534382355775e-16]}
{'': [0.21474478805034006, -1.3479630901893793e-16], 'true': [nan, 0.21474478805034006], 'true,false': [nan, 0.21474478805034006], 'true,false,false': [0.21474478805034006, nan], 'false': [nan, -1.3479630901893793e-16]}
{'': [0.2226738858808855, -5.586027796856134e-18], 'true': [nan, 0.2226738858808855], 'true,false': [nan, 0.2226738858808855], 'true,false,false': [nan, 0.2226738858808855], 'false': [nan, -5.586027796856134e-18]}
{'': [0.22035923052396977, 2.2017868387524114e-16], 'true': [nan, 0.22035923052396977], 'true,false': [0.22035923052396977, nan], 'false': [nan, 2.2017868387524114e-16]}
{'': [0.2323084173814669, -1.2979642876619784e-17], 'true': [nan, 0.2323084173814669], 'true,false': [nan, 0.2323084173814669], 'true,false,false': [nan, 0.2323084173814669], 'false': [nan, -1.2979642876619784e-17]}
{'': [0.22955156409867308, 4.487638331116422e-17], 'true': [nan, 0.22955156409867308], 'true,false': [0.22955156409867308, nan], 'false': [nan, 4.487638331116422e-17]}
{'': [0.22767892573133935, 4.277088701424783e-17], 'true': [nan, 0.22767892573133935], 'true,false': [0.22767892573133935, nan], 'false': [nan, 4.277088701424783e-17]}
{'': [0.22356071121686885, 8.822964434107205e-18], 'true': [nan, 0.22356071121686885], 'true,false': [nan, 0.22356071121686885], 'true,false,false': [nan, 0.22356071121686885], 'false': [8.822964434107205e-18, nan]}
{'': [0.22035923052396775, -1.2053849981644556e-16], 'true': [nan, 0.22035923052396775], 'true,false': [0.22035923052396775, nan], 'false': [nan, -1.2053849981644556e-16]}
{'': [0.22035923052396572, 1.2274515427532788e-16], 'true': [nan, 0.22035923052396572], 'true,false': [nan, 0.22035923052396572], 'true,false,false': [nan, 0.22035923052396572], 'false': [nan, 1.2274515427532788e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.3881545066833496
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.14185106490048746;  // std dev = 1.93e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839124;  // std dev = 6.32e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.1254446385283923;  // std dev = 0.000, 450.000 (wgt'ed) examples reached here.  /* #neg=450 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360632;  // std dev = 8.43e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.11231637819360596;  // std dev = 0.000, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.1015963294878354;  // std dev = 3.50e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0926912761892608;  // std dev = 6.83e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.09269127618926129;  // std dev = 0.000, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 6.14e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.08518475138839678;  // std dev = 1.38e-07, 438.000 (wgt'ed) examples reached here.  /* #neg=438 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109154;  // std dev = 7.67e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.07877675473109193;  // std dev = 1.59e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0732462257633369;  // std dev = 6.75e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.07324622576333718;  // std dev = 5.58e-08, 451.000 (wgt'ed) examples reached here.  /* #neg=451 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6.14e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.06842697784420353;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.06419184008202539;  // std dev = 2.45e-07, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
Inference time using transfer learning 1.031599998474121
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.3881545066833496 

Total Inference Time : 1.5111427307128906 

Total revision time: 8.02070951461792
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.035988807678223 

Total Inference Time : 1.5111427307128906 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.407311201095581
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5275704227028138;  // std dev = 10.349, 484.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004876;  // std dev = 1.12e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.434384174239029;  // std dev = 10.600, 496.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.32717960926549794;  // std dev = 10.962, 515.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360596;  // std dev = 0.000, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2930506519161223;  // std dev = 10.371, 485.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878355;  // std dev = 3.24e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21817393866883847;  // std dev = 10.435, 488.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926144;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.13272280080288654;  // std dev = 10.907, 512.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.40e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.09712881188088326;  // std dev = 10.944, 514.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109194;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11910941904020826;  // std dev = 10.239, 479.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333709;  // std dev = 1.01e-07, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10882634056433033;  // std dev = 9.936, 466.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420354;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.054092362781779514;  // std dev = 10.392, 486.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202541;  // std dev = 2.42e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
Inference time using transfer learning 1.146444320678711
Parameter learned model CLL:-0.309377 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.349, 160, 324], 'false,true': [0.0, 0, 0], 'false,false': [1.12e-07, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.6, 172, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.962, 191, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 457, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.371, 161, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.24e-07, 476, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.435, 164, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 497, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.907, 188, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.4e-07, 472, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.944, 190, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 478, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.239, 155, 324], 'false,true': [1.01e-07, 468, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [9.936, 142, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 497, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.392, 162, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.42e-07, 480, 0]}]
{'': [0.22129635953828566, 2.5532849847642203e-17], 'true': [nan, 0.22129635953828566], 'true,false': [nan, 0.22129635953828566], 'true,false,false': [nan, 0.22129635953828566], 'false': [nan, 2.5532849847642203e-17]}
{'': [0.22652185223725474, -1.395708945243054e-16], 'true': [nan, 0.22652185223725474], 'true,false': [nan, 0.22652185223725474], 'true,false,false': [0.22652185223725474, nan], 'false': [nan, -1.395708945243054e-16]}
{'': [0.23332642096333348, -1.5547981088842454e-17], 'true': [nan, 0.23332642096333348], 'true,false': [nan, 0.23332642096333348], 'true,false,false': [nan, 0.23332642096333348], 'false': [nan, -1.5547981088842454e-17]}
{'': [0.22176214262940055, 2.2017868387524114e-16], 'true': [nan, 0.22176214262940055], 'true,false': [0.22176214262940055, nan], 'false': [nan, 2.2017868387524114e-16]}
{'': [0.22312550389680147, -2.859326904467204e-17], 'true': [nan, 0.22312550389680147], 'true,false': [nan, 0.22312550389680147], 'true,false,false': [nan, 0.22312550389680147], 'false': [nan, -2.859326904467204e-17]}
{'': [0.2323608398437524, 4.139814668093804e-17], 'true': [nan, 0.2323608398437524], 'true,false': [0.2323608398437524, nan], 'false': [nan, 4.139814668093804e-17]}
{'': [0.23300882678011725, -2.3226423109312897e-17], 'true': [nan, 0.23300882678011725], 'true,false': [0.23300882678011725, nan], 'false': [nan, -2.3226423109312897e-17]}
{'': [0.21887979916405473, 2.1824897065280855e-17], 'true': [nan, 0.21887979916405473], 'true,false': [nan, 0.21887979916405473], 'true,false,false': [nan, 0.21887979916405473], 'false': [2.1824897065280855e-17, nan]}
{'': [0.21186612389250217, -1.1973431412456416e-16], 'true': [nan, 0.21186612389250217], 'true,false': [0.21186612389250217, nan], 'false': [nan, -1.1973431412456416e-16]}
{'': [0.22222222222222315, 1.2212453270876723e-16], 'true': [nan, 0.22222222222222315], 'true,false': [nan, 0.22222222222222315], 'true,false,false': [nan, 0.22222222222222315], 'false': [nan, 1.2212453270876723e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.641326665878296
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.14185106490048718;  // std dev = 2.95e-07, 447.000 (wgt'ed) examples reached here.  /* #neg=447 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839147;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.12544463852839235;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360642;  // std dev = 5.16e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.11231637819360596;  // std dev = 0.000, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.10159632948783541;  // std dev = 3.44e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926082;  // std dev = 6.50e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.09269127618926148;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839678;  // std dev = 6.83e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.08518475138839678;  // std dev = 1.48e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109155;  // std dev = 7.74e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.07877675473109201;  // std dev = 1.40e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333684;  // std dev = 8.02e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.07324622576333707;  // std dev = 1.07e-07, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6.83e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.06842697784420353;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.06419184008202541;  // std dev = 2.42e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
Inference time using transfer learning 0.9991157054901123
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.641326665878296 

Total Inference Time : 1.4548256397247314 

Total revision time: 8.43140697479248
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.446686267852783 

Total Inference Time : 1.4548256397247314 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6199309825897217
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5314162618321817;  // std dev = 8.164, 303.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.141851064900488;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4081925185401699;  // std dev = 8.715, 325.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839194;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3672374988624663;  // std dev = 8.273, 307.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360679;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.24854139413440227;  // std dev = 8.715, 325.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783662;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20641958993463239;  // std dev = 8.503, 316.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926043;  // std dev = 1.48e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.17839948271017825;  // std dev = 8.219, 305.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.07e-07, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11262466876791004;  // std dev = 8.479, 315.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109143;  // std dev = 4.47e-08, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07264073325824712;  // std dev = 8.623, 321.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333692;  // std dev = 1.03e-07, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10161697288914685;  // std dev = 8.051, 299.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420294;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05931675041061667;  // std dev = 8.273, 307.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.064191840082026;  // std dev = 1.06e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
Inference time using transfer learning 1.1102614402770996
Parameter learned model CLL:-0.315432 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.164, 99, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 279, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.715, 121, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 272, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.273, 103, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 305, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.715, 121, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 287, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.503, 112, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.48e-07, 292, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.219, 101, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.07e-07, 319, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.479, 111, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [4.47e-08, 280, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.623, 117, 204], 'false,true': [1.03e-07, 285, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.051, 95, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 289, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.273, 103, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.06e-07, 292, 0]}]
{'': [0.2199784334869177, -2.865091676452017e-17], 'true': [nan, 0.2199784334869177], 'true,false': [nan, 0.2199784334869177], 'true,false,false': [nan, 0.2199784334869177], 'false': [nan, -2.865091676452017e-17]}
{'': [0.23369467455621457, -7.18379604169219e-17], 'true': [nan, 0.23369467455621457], 'true,false': [nan, 0.23369467455621457], 'true,false,false': [0.23369467455621457, nan], 'false': [nan, -7.18379604169219e-17]}
{'': [0.22294135746798233, -7.280150981148567e-17], 'true': [nan, 0.22294135746798233], 'true,false': [nan, 0.22294135746798233], 'true,false,false': [nan, 0.22294135746798233], 'false': [nan, -7.280150981148567e-17]}
{'': [0.233694674556214, -5.725191903990354e-17], 'true': [nan, 0.233694674556214], 'true,false': [0.233694674556214, nan], 'false': [nan, -5.725191903990354e-17]}
{'': [0.22880948565935, 7.452181946114065e-17], 'true': [nan, 0.22880948565935], 'true,false': [nan, 0.22880948565935], 'true,false,false': [nan, 0.22880948565935], 'false': [nan, 7.452181946114065e-17]}
{'': [0.22148884708411967, 3.6195358796556825e-17], 'true': [nan, 0.22148884708411967], 'true,false': [0.22148884708411967, nan], 'false': [nan, 3.6195358796556825e-17]}
{'': [0.22820861678004584, 7.137148015447434e-18], 'true': [nan, 0.22820861678004584], 'true,false': [0.22820861678004584, nan], 'false': [nan, 7.137148015447434e-18]}
{'': [0.2316359507380559, 3.739698609263685e-17], 'true': [nan, 0.2316359507380559], 'true,false': [nan, 0.2316359507380559], 'true,false,false': [nan, 0.2316359507380559], 'false': [3.739698609263685e-17, nan]}
{'': [0.21677609870135572, -4.763586680052575e-17], 'true': [nan, 0.21677609870135572], 'true,false': [0.21677609870135572, nan], 'false': [nan, -4.763586680052575e-17]}
{'': [0.22294135746798288, 3.878176318896095e-17], 'true': [nan, 0.22294135746798288], 'true,false': [nan, 0.22294135746798288], 'true,false,false': [nan, 0.22294135746798288], 'false': [nan, 3.878176318896095e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.312302589416504
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048788;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | else return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.14185106490048793;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839105;  // std dev = 8.02e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.125444638528392;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1123163781936062;  // std dev = 9.19e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360692;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else return -0.10159632948783648;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #neg=329 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926086;  // std dev = 7.07e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.09269127618926042;  // std dev = 1.67e-07, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.0851847513883968;  // std dev = 6.83e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else return -0.17941946653727028;  // std dev = 0.231, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08518475138839678;  // std dev = 1.03e-07, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.07877675473109161;  // std dev = 5.58e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( female(B) )
%   | | | then return -0.07220381786429386;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.1996151356556066;  // std dev = 0.570, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07877675473109143;  // std dev = 4.21e-08, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07255347538559596;  // std dev = 0.030, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.073246225763337;  // std dev = 9.19e-08, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06764801926266759;  // std dev = 0.033, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06842697784420287;  // std dev = 0.000, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06369977432451898;  // std dev = 0.027, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   else return -0.06419184008202594;  // std dev = 1.20e-07, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
Inference time using transfer learning 0.9648737907409668
Refined model CLL: -0.065173


******************************************
Best model found
******************************************
Results 

CLL : -0.104004 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 2.312302589416504 

Total Inference Time : 1.4490959644317627 

Total revision time: 7.366191864013672
Best scored revision CLL: -0.065173


Results 

CLL : -0.104004 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 7.381471157073975 

Total Inference Time : 1.4490959644317627 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.3736159801483154
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4928005358528036;  // std dev = 11.096, 531.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048782;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4517384276355455;  // std dev = 10.630, 507.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.33044280657051234;  // std dev = 11.186, 536.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360583;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.28015796979184965;  // std dev = 10.832, 517.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783556;  // std dev = 3.10e-07, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2028157960161683;  // std dev = 10.985, 525.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926144;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1585864909765121;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.44e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1164912949379582;  // std dev = 10.929, 522.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109212;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06839793866705635;  // std dev = 11.221, 538.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.0732462257633369;  // std dev = 1.58e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1258313376338873;  // std dev = 10.044, 481.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420357;  // std dev = 0.000, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05427138069897204;  // std dev = 10.712, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202534;  // std dev = 2.43e-07, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */
Inference time using transfer learning 0.9763445854187012
Parameter learned model CLL:-0.300707 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.096, 194, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 509, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.63, 170, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 494, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.186, 199, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 494, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.832, 180, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.1e-07, 464, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.985, 188, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 497, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.89, 183, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 501, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.929, 185, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 509, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.221, 201, 337], 'false,true': [1.58e-07, 502, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.044, 144, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 513, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.712, 174, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 520, 0]}]
{'': [0.23186894641457761, -6.281812005737624e-17], 'true': [nan, 0.23186894641457761], 'true,false': [nan, 0.23186894641457761], 'true,false,false': [nan, 0.23186894641457761], 'false': [nan, -6.281812005737624e-17]}
{'': [0.2228757941092914, -1.2405730963422803e-16], 'true': [nan, 0.2228757941092914], 'true,false': [nan, 0.2228757941092914], 'true,false,false': [0.2228757941092914, nan], 'false': [nan, -1.2405730963422803e-16]}
{'': [0.23342824125640282, -1.0787592142106784e-17], 'true': [nan, 0.23342824125640282], 'true,false': [nan, 0.23342824125640282], 'true,false,false': [nan, 0.23342824125640282], 'false': [nan, -1.0787592142106784e-17]}
{'': [0.2269453662515148, 2.067311838957188e-16], 'true': [nan, 0.2269453662515148], 'true,false': [0.2269453662515148, nan], 'false': [nan, 2.067311838957188e-16]}
{'': [0.22986303854875612, -2.859326904467204e-17], 'true': [nan, 0.22986303854875612], 'true,false': [nan, 0.22986303854875612], 'true,false,false': [nan, 0.22986303854875612], 'false': [nan, -2.859326904467204e-17]}
{'': [0.22807322485206924, 4.1661063598708467e-17], 'true': [nan, 0.22807322485206924], 'true,false': [0.22807322485206924, nan], 'false': [nan, 4.1661063598708467e-17]}
{'': [0.22880242509651866, -4.6241116153346404e-17], 'true': [nan, 0.22880242509651866], 'true,false': [0.22880242509651866, nan], 'false': [nan, -4.6241116153346404e-17]}
{'': [0.2340245436077426, 4.9539832174508976e-17], 'true': [nan, 0.2340245436077426], 'true,false': [nan, 0.2340245436077426], 'true,false,false': [nan, 0.2340245436077426], 'false': [4.9539832174508976e-17, nan]}
{'': [0.2097501307480497, -1.246566203087895e-16], 'true': [nan, 0.2097501307480497], 'true,false': [0.2097501307480497, nan], 'false': [nan, -1.246566203087895e-16]}
{'': [0.22456255912010234, 1.13584355596266e-16], 'true': [nan, 0.22456255912010234], 'true,false': [nan, 0.22456255912010234], 'true,false,false': [nan, 0.22456255912010234], 'false': [nan, 1.13584355596266e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.7201220989227295
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.14185106490048777;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839133;  // std dev = 4.71e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.1254446385283923;  // std dev = 0.000, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360633;  // std dev = 7.60e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.11231637819360582;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.1015963294878356;  // std dev = 2.98e-07, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926071;  // std dev = 8.02e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else return -0.09269127618926136;  // std dev = 0.000, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.50e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109154;  // std dev = 7.52e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.07877675473109205;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333682;  // std dev = 8.75e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.07324622576333684;  // std dev = 1.72e-07, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.75e-08, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.06842697784420353;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else return -0.06419184008202536;  // std dev = 2.45e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
Inference time using transfer learning 0.8708665370941162
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.7201220989227295 

Total Inference Time : 1.5054631233215332 

Total revision time: 8.868269681930542
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.883548974990845 

Total Inference Time : 1.5054631233215332 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.238644599914551
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5267997287503017;  // std dev = 10.567, 504.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048793;  // std dev = 0.000, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.43949321434831756;  // std dev = 10.732, 512.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3671183157605777;  // std dev = 10.546, 503.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360578;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.28322683368219814;  // std dev = 10.567, 504.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783548;  // std dev = 3.26e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20779498615039427;  // std dev = 10.671, 509.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926165;  // std dev = 0.000, 545.000 (wgt'ed) examples reached here.  /* #neg=545 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.13825149880992785;  // std dev = 10.948, 523.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.46e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.12411260006209583;  // std dev = 10.630, 507.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109204;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10685656167055962;  // std dev = 10.416, 497.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333689;  // std dev = 1.59e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.05091497073518722;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420357;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09127657781414723;  // std dev = 10.044, 481.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202537;  // std dev = 2.43e-07, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
Inference time using transfer learning 0.9797465801239014
Parameter learned model CLL:-0.311377 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.567, 167, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 520, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.732, 175, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 511, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.546, 166, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 511, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.567, 167, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.26e-07, 479, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.671, 172, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 545, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.948, 186, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.46e-07, 511, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.63, 170, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 494, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.416, 160, 337], 'false,true': [1.59e-07, 504, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.89, 183, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 509, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.044, 144, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 503, 0]}]
{'': [0.22155690980096004, -1.0589819619501494e-16], 'true': [nan, 0.22155690980096004], 'true,false': [nan, 0.22155690980096004], 'true,false,false': [nan, 0.22155690980096004], 'false': [nan, -1.0589819619501494e-16]}
{'': [0.22497177124023385, -1.2862074962389288e-16], 'true': [nan, 0.22497177124023385], 'true,false': [nan, 0.22497177124023385], 'true,false,false': [0.22497177124023385, nan], 'false': [nan, -1.2862074962389288e-16]}
{'': [0.22110675904809024, -6.952472952642859e-18], 'true': [nan, 0.22110675904809024], 'true,false': [nan, 0.22110675904809024], 'true,false,false': [nan, 0.22110675904809024], 'false': [nan, -6.952472952642859e-18]}
{'': [0.22155690980095852, 2.225081635991963e-16], 'true': [nan, 0.22155690980095852], 'true,false': [0.22155690980095852, nan], 'false': [nan, 2.225081635991963e-16]}
{'': [0.2237292584172548, -5.866866625542112e-17], 'true': [nan, 0.2237292584172548], 'true,false': [nan, 0.2237292584172548], 'true,false,false': [nan, 0.2237292584172548], 'false': [nan, -5.866866625542112e-17]}
{'': [0.22916034497256196, 4.171483771585715e-17], 'true': [nan, 0.22916034497256196], 'true,false': [0.22916034497256196, nan], 'false': [nan, 4.171483771585715e-17]}
{'': [0.22287579410929412, -3.595864047368928e-17], 'true': [nan, 0.22287579410929412], 'true,false': [0.22287579410929412, nan], 'false': [nan, -3.595864047368928e-17]}
{'': [0.2182916411952623, 5.0224374923518987e-17], 'true': [nan, 0.2182916411952623], 'true,false': [nan, 0.2182916411952623], 'true,false,false': [nan, 0.2182916411952623], 'false': [5.0224374923518987e-17, nan]}
{'': [0.22807322485207085, -1.247637662250667e-16], 'true': [nan, 0.22807322485207085], 'true,false': [0.22807322485207085, nan], 'false': [nan, -1.247637662250667e-16]}
{'': [0.20975013074805215, 1.174231906760603e-16], 'true': [nan, 0.20975013074805215], 'true,false': [nan, 0.20975013074805215], 'true,false,false': [nan, 0.20975013074805215], 'false': [nan, 1.174231906760603e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.456066370010376
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.14185106490048793;  // std dev = 0.000, 521.000 (wgt'ed) examples reached here.  /* #neg=521 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283913;  // std dev = 5.16e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.12544463852839227;  // std dev = 0.000, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1123163781936063;  // std dev = 8.43e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.11231637819360593;  // std dev = 0.000, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.1015963294878354;  // std dev = 3.50e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0926912761892607;  // std dev = 8.16e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.09269127618926125;  // std dev = 4.21e-08, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 6.14e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109155;  // std dev = 7.88e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.07877675473109198;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333685;  // std dev = 8.56e-08, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else return -0.07324622576333678;  // std dev = 1.90e-07, 528.000 (wgt'ed) examples reached here.  /* #neg=528 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420264;  // std dev = 6.91e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.06842697784420357;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.06419184008202534;  // std dev = 2.46e-07, 524.000 (wgt'ed) examples reached here.  /* #neg=524 */
Inference time using transfer learning 0.8662111759185791
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.456066370010376 

Total Inference Time : 1.673227310180664 

Total revision time: 8.447094678878784
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.462373971939087 

Total Inference Time : 1.673227310180664 

Run: 3

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1954410076141357
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5221000552624407;  // std dev = 10.467, 491.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004873;  // std dev = 2.60e-07, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4514966059752937;  // std dev = 10.381, 487.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 454.000 (wgt'ed) examples reached here.  /* #neg=454 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.35685150457181564;  // std dev = 10.509, 493.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360574;  // std dev = 2.98e-08, 534.000 (wgt'ed) examples reached here.  /* #neg=534 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.27386353465663266;  // std dev = 10.550, 495.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783529;  // std dev = 3.78e-07, 527.000 (wgt'ed) examples reached here.  /* #neg=527 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.189238065053244;  // std dev = 10.826, 509.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926125;  // std dev = 4.21e-08, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1696453399144649;  // std dev = 10.403, 488.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.52e-07, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.09230124014213494;  // std dev = 10.938, 515.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109196;  // std dev = 1.49e-07, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11422580446121738;  // std dev = 10.249, 481.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333735;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08216188062787846;  // std dev = 10.316, 484.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0684269778442035;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0555795810321978;  // std dev = 10.424, 489.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202547;  // std dev = 2.28e-07, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
Inference time using transfer learning 1.1120872497558594
Parameter learned model CLL:-0.303002 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.467, 165, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.6e-07, 461, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.381, 161, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 454, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.509, 167, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.98e-08, 534, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.55, 169, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.78e-07, 527, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.826, 183, 326], 'false,true': [0.0, 0, 0], 'false,false': [4.21e-08, 458, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.403, 162, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.52e-07, 506, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.938, 189, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.49e-07, 466, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.249, 155, 326], 'false,true': [0.0, 492, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.316, 158, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 473, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.424, 163, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.28e-07, 455, 0]}]
{'': [0.22312003019732227, 1.4642420801997727e-16], 'true': [nan, 0.22312003019732227], 'true,false': [nan, 0.22312003019732227], 'true,false,false': [nan, 0.22312003019732227], 'false': [nan, 1.4642420801997727e-16]}
{'': [0.22130210946624726, -1.3498746907336704e-16], 'true': [nan, 0.22130210946624726], 'true,false': [nan, 0.22130210946624726], 'true,false,false': [0.22130210946624726, nan], 'false': [nan, -1.3498746907336704e-16]}
{'': [0.22399598434883725, 1.6632554676032308e-18], 'true': [nan, 0.22399598434883725], 'true,false': [nan, 0.22399598434883725], 'true,false,false': [nan, 0.22399598434883725], 'false': [nan, 1.6632554676032308e-18]}
{'': [0.22485052545657996, 2.713410352404557e-16], 'true': [nan, 0.22485052545657996], 'true,false': [0.22485052545657996, nan], 'false': [nan, 2.713410352404557e-16]}
{'': [0.23026775410006842, 3.878508382969979e-18], 'true': [nan, 0.23026775410006842], 'true,false': [nan, 0.23026775410006842], 'true,false,false': [nan, 0.23026775410006842], 'false': [nan, 3.878508382969979e-18]}
{'': [0.22176498253157764, 4.563762630870209e-17], 'true': [nan, 0.22176498253157764], 'true,false': [0.22176498253157764, nan], 'false': [nan, 4.563762630870209e-17]}
{'': [0.23230841738146876, 4.764905685086509e-17], 'true': [nan, 0.23230841738146876], 'true,false': [0.23230841738146876, nan], 'false': [nan, 4.764905685086509e-17]}
{'': [0.21840327453632932, -1.0831444142684454e-17], 'true': [nan, 0.21840327453632932], 'true,false': [nan, 0.21840327453632932], 'true,false,false': [nan, 0.21840327453632932], 'false': [-1.0831444142684454e-17, nan]}
{'': [0.21987910661840082, -1.2111523905001707e-16], 'true': [nan, 0.21987910661840082], 'true,false': [0.21987910661840082, nan], 'false': [nan, -1.2111523905001707e-16]}
{'': [0.22222222222222027, 1.1468237836787332e-16], 'true': [nan, 0.22222222222222027], 'true,false': [nan, 0.22222222222222027], 'true,false,false': [nan, 0.22222222222222027], 'false': [nan, 1.1468237836787332e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.52939510345459
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048804;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.1418510649004875;  // std dev = 1.79e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839147;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.12544463852839233;  // std dev = 0.000, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360622;  // std dev = 7.74e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.1123163781936059;  // std dev = 0.000, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.10159632948783562;  // std dev = 2.95e-07, 452.000 (wgt'ed) examples reached here.  /* #neg=452 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0926912761892608;  // std dev = 6.83e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.09269127618926122;  // std dev = 5.58e-08, 453.000 (wgt'ed) examples reached here.  /* #neg=453 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 4.94e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109154;  // std dev = 7.74e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.07877675473109168;  // std dev = 1.99e-07, 439.000 (wgt'ed) examples reached here.  /* #neg=439 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333686;  // std dev = 7.45e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.07324622576333734;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420267;  // std dev = 5.77e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.06842697784420353;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.06419184008202543;  // std dev = 2.38e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
Inference time using transfer learning 1.0170207023620605
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.52939510345459 

Total Inference Time : 1.4609217643737793 

Total revision time: 8.077694416046143
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.09311842918396 

Total Inference Time : 1.4609217643737793 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.3412551879882812
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.487275148691741;  // std dev = 10.962, 515.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004876;  // std dev = 1.12e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.409849762961289;  // std dev = 11.068, 521.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3634514444491143;  // std dev = 10.620, 497.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360596;  // std dev = 0.000, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.27453547529169475;  // std dev = 10.757, 504.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783537;  // std dev = 3.55e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20742168840732655;  // std dev = 10.776, 505.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926151;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.17829709389498233;  // std dev = 10.435, 488.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.12174051454752217;  // std dev = 10.620, 497.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109208;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08250997706591225;  // std dev = 10.757, 504.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333706;  // std dev = 1.13e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.09163711524069605;  // std dev = 10.306, 482.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04921378602734785;  // std dev = 10.620, 497.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202537;  // std dev = 2.45e-07, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
Inference time using transfer learning 1.1370787620544434
Parameter learned model CLL:-0.302546 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.962, 191, 324], 'false,true': [0.0, 0, 0], 'false,false': [1.12e-07, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [11.068, 197, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 465, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.62, 173, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 458, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.757, 180, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.55e-07, 505, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.776, 181, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 512, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.435, 164, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 491, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.62, 173, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 502, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.757, 180, 324], 'false,true': [1.13e-07, 473, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.306, 158, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.62, 173, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.45e-07, 507, 0]}]
{'': [0.23332642096333567, 2.5532849847642203e-17], 'true': [nan, 0.23332642096333567], 'true,false': [nan, 0.23332642096333567], 'true,false,false': [nan, 0.23332642096333567], 'false': [nan, 2.5532849847642203e-17]}
{'': [0.2351450223068791, -1.3752440046969682e-16], 'true': [nan, 0.2351450223068791], 'true,false': [nan, 0.2351450223068791], 'true,false,false': [0.2351450223068791, nan], 'false': [nan, -1.3752440046969682e-16]}
{'': [0.22692290564311285, -1.5514033531879916e-17], 'true': [nan, 0.22692290564311285], 'true,false': [nan, 0.22692290564311285], 'true,false,false': [nan, 0.22692290564311285], 'false': [nan, -1.5514033531879916e-17]}
{'': [0.2295918367346949, 2.497452190047877e-16], 'true': [nan, 0.2295918367346949], 'true,false': [0.2295918367346949, nan], 'false': [nan, 2.497452190047877e-16]}
{'': [0.22995392608567908, -3.8163916471489756e-17], 'true': [nan, 0.22995392608567908], 'true,false': [nan, 0.22995392608567908], 'true,false,false': [nan, 0.22995392608567908], 'false': [nan, -3.8163916471489756e-17]}
{'': [0.22312550389680397, 4.160509908982257e-17], 'true': [nan, 0.22312550389680397], 'true,false': [0.22312550389680397, nan], 'false': [nan, 4.160509908982257e-17]}
{'': [0.22692290564311685, -4.069343357191809e-17], 'true': [nan, 0.22692290564311685], 'true,false': [0.22692290564311685, nan], 'false': [nan, -4.069343357191809e-17]}
{'': [0.22959183673469516, 2.7227456840701514e-17], 'true': [nan, 0.22959183673469516], 'true,false': [nan, 0.22959183673469516], 'true,false,false': [nan, 0.22959183673469516], 'false': [2.7227456840701514e-17, nan]}
{'': [0.22034744580843876, -1.2053849981644556e-16], 'true': [nan, 0.22034744580843876], 'true,false': [0.22034744580843876, nan], 'false': [nan, -1.2053849981644556e-16]}
{'': [0.22692290564311213, 1.182486061730936e-16], 'true': [nan, 0.22692290564311213], 'true,false': [nan, 0.22692290564311213], 'true,false,false': [nan, 0.22692290564311213], 'false': [nan, 1.182486061730936e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.7276031970977783
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048802;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.14185106490048796;  // std dev = 0.000, 524.000 (wgt'ed) examples reached here.  /* #neg=524 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839144;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.12544463852839227;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360646;  // std dev = 4.71e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.11231637819360592;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.10159632948783556;  // std dev = 3.10e-07, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926074;  // std dev = 7.60e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.0926912761892612;  // std dev = 5.96e-08, 452.000 (wgt'ed) examples reached here.  /* #neg=452 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 5.58e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.08518475138839678;  // std dev = 1.40e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109153;  // std dev = 8.30e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.07877675473109198;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333695;  // std dev = 5.58e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.07324622576333716;  // std dev = 6.66e-08, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420268;  // std dev = 4.94e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.0684269778442035;  // std dev = 0.000, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.06419184008202541;  // std dev = 2.39e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
Inference time using transfer learning 1.0056147575378418
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.7276031970977783 

Total Inference Time : 1.4751031398773193 

Total revision time: 8.430948972702026
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.446372985839844 

Total Inference Time : 1.4751031398773193 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7222890853881836
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.509906123597911;  // std dev = 8.429, 313.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048777;  // std dev = 1.33e-07, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4256725122709071;  // std dev = 8.552, 318.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283919;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3071338714077896;  // std dev = 8.993, 338.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360683;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.29601886119326043;  // std dev = 8.326, 309.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783659;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21051774417426544;  // std dev = 8.503, 316.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926044;  // std dev = 1.75e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1582546195297543;  // std dev = 8.503, 316.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.05e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08576253357055935;  // std dev = 8.890, 333.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109144;  // std dev = 4.47e-08, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08537363936484167;  // std dev = 8.646, 322.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333704;  // std dev = 8.43e-08, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.050848043208960046;  // std dev = 8.804, 329.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420296;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07431377148825508;  // std dev = 8.378, 311.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820259;  // std dev = 1.30e-07, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
Inference time using transfer learning 1.2153081893920898
Parameter learned model CLL:-0.302366 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.429, 109, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.33e-07, 310, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.552, 114, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 261, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.993, 134, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 302, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.326, 105, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 261, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.503, 112, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.75e-07, 303, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.503, 112, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.05e-07, 303, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.89, 129, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [4.47e-08, 279, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.646, 118, 204], 'false,true': [8.43e-08, 323, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.804, 125, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 290, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.378, 107, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.3e-07, 313, 0]}]
{'': [0.22696975573906492, 5.730183352904034e-17], 'true': [nan, 0.22696975573906492], 'true,false': [nan, 0.22696975573906492], 'true,false,false': [nan, 0.22696975573906492], 'false': [nan, 5.730183352904034e-17]}
{'': [0.22997508009968143, -6.805964901916668e-17], 'true': [nan, 0.22997508009968143], 'true,false': [nan, 0.22997508009968143], 'true,false,false': [0.22997508009968143, nan], 'false': [nan, -6.805964901916668e-17]}
{'': [0.23927733622772568, -7.058371547285764e-17], 'true': [nan, 0.23927733622772568], 'true,false': [nan, 0.23927733622772568], 'true,false,false': [nan, 0.23927733622772568], 'false': [nan, -7.058371547285764e-17]}
{'': [0.22433782637383096, -6.295517534272918e-17], 'true': [nan, 0.22433782637383096], 'true,false': [0.22433782637383096, nan], 'false': [nan, -6.295517534272918e-17]}
{'': [0.22880948565934897, 1.0112922600545981e-16], 'true': [nan, 0.22880948565934897], 'true,false': [nan, 0.22880948565934897], 'true,false,false': [nan, 0.22880948565934897], 'false': [nan, 1.0112922600545981e-16]}
{'': [0.22880948565934897, 3.664102391502167e-17], 'true': [nan, 0.22880948565934897], 'true,false': [0.22880948565934897, nan], 'false': [nan, 3.664102391502167e-17]}
{'': [0.23731839948056213, 7.162729191130042e-18], 'true': [nan, 0.23731839948056213], 'true,false': [0.23731839948056213, nan], 'false': [nan, 7.162729191130042e-18]}
{'': [0.23216696886694113, 2.1998227113315797e-17], 'true': [nan, 0.23216696886694113], 'true,false': [nan, 0.23216696886694113], 'true,false,false': [nan, 0.23216696886694113], 'false': [2.1998227113315797e-17, nan]}
{'': [0.23558540663888997, -4.8237276242334385e-17], 'true': [nan, 0.23558540663888997], 'true,false': [0.23558540663888997, nan], 'false': [nan, -4.8237276242334385e-17]}
{'': [0.2256800488001573, 5.391498394345808e-17], 'true': [nan, 0.2256800488001573], 'true,false': [nan, 0.2256800488001573], 'true,false,false': [nan, 0.2256800488001573], 'false': [nan, 5.391498394345808e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.048609733581543
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048763;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.1418510649004879;  // std dev = 5.16e-08, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839133;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.12544463852839205;  // std dev = 0.000, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11341353933988303;  // std dev = 0.115, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.11231637819360697;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10483081843688709;  // std dev = 0.182, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.10159632948783658;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09312699455819402;  // std dev = 0.099, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.09269127618926047;  // std dev = 9.88e-08, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0848139723694803;  // std dev = 6.32e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 9.66e-08, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07845828024719097;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07877675473109143;  // std dev = 5.16e-08, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07296987968221204;  // std dev = 2.79e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.07324622576333698;  // std dev = 9.66e-08, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.0702083910180629;  // std dev = 0.222, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.0684269778442029;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06584450453533926;  // std dev = 0.212, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else return -0.06419184008202601;  // std dev = 1.02e-07, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
Inference time using transfer learning 1.031489610671997
Refined model CLL: -0.06375


******************************************
Best model found
******************************************
Results 

CLL : -0.072292 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.048609733581543 

Total Inference Time : 1.4279844760894775 

Total revision time: 7.020612478256226
Best scored revision CLL: -0.06375


Results 

CLL : -0.072292 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.036036491394043 

Total Inference Time : 1.4279844760894775 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.2886576652526855
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5176401288372771;  // std dev = 10.712, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048754;  // std dev = 1.52e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4397712889165274;  // std dev = 10.753, 513.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839235;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3372676968543429;  // std dev = 11.041, 528.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360592;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.27935096518283387;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783548;  // std dev = 3.26e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20809083856948984;  // std dev = 10.832, 517.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926137;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1451540619922642;  // std dev = 11.004, 526.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.48e-07, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1395388789270499;  // std dev = 10.525, 502.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0787767547310919;  // std dev = 0.000, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0768192255098006;  // std dev = 10.967, 524.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.0732462257633369;  // std dev = 1.56e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07831305492929347;  // std dev = 10.651, 508.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420354;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05042008194784737;  // std dev = 10.792, 515.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202534;  // std dev = 2.46e-07, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
Inference time using transfer learning 0.9952552318572998
Parameter learned model CLL:-0.299373 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.712, 174, 337], 'false,true': [0.0, 0, 0], 'false,false': [1.52e-07, 482, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.753, 176, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 510, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.041, 191, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 469, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.773, 177, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.26e-07, 479, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.832, 180, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 483, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.004, 189, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.48e-07, 514, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.525, 165, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 471, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.967, 187, 337], 'false,true': [1.56e-07, 501, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.651, 171, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.792, 178, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.46e-07, 519, 0]}]
{'': [0.22456255912010403, 4.791003923693622e-17], 'true': [nan, 0.22456255912010403], 'true,false': [nan, 0.22456255912010403], 'true,false,false': [nan, 0.22456255912010403], 'false': [nan, 4.791003923693622e-17]}
{'': [0.22537608912904325, -1.4280515767727505e-16], 'true': [nan, 0.22537608912904325], 'true,false': [nan, 0.22537608912904325], 'true,false,false': [0.22537608912904325, nan], 'false': [nan, -1.4280515767727505e-16]}
{'': [0.2308848427456487, -1.3256394323882466e-17], 'true': [nan, 0.2308848427456487], 'true,false': [nan, 0.2308848427456487], 'true,false,false': [nan, 0.2308848427456487], 'false': [nan, -1.3256394323882466e-17]}
{'': [0.22577556056867015, 2.225081635991963e-16], 'true': [nan, 0.22577556056867015], 'true,false': [0.22577556056867015, nan], 'false': [nan, 2.225081635991963e-16]}
{'': [0.22694536625150658, -1.838878715735249e-17], 'true': [nan, 0.22694536625150658], 'true,false': [nan, 0.22694536625150658], 'true,false,false': [nan, 0.22694536625150658], 'false': [nan, -1.838878715735249e-17]}
{'': [0.23020789660107724, 4.233535268998651e-17], 'true': [nan, 0.23020789660107724], 'true,false': [0.23020789660107724, nan], 'false': [nan, 4.233535268998651e-17]}
{'': [0.22065125950381595, -1.8857291288750004e-17], 'true': [nan, 0.22065125950381595], 'true,false': [0.22065125950381595, nan], 'false': [nan, -1.8857291288750004e-17]}
{'': [0.22951386865567552, 4.875230846657374e-17], 'true': [nan, 0.22951386865567552], 'true,false': [nan, 0.22951386865567552], 'true,false,false': [nan, 0.22951386865567552], 'false': [4.875230846657374e-17, nan]}
{'': [0.22330507161014435, -1.2070578928987504e-16], 'true': [nan, 0.22330507161014435], 'true,false': [0.22330507161014435, nan], 'false': [nan, -1.2070578928987504e-16]}
{'': [0.22617023282118964, 1.1637019757150003e-16], 'true': [nan, 0.22617023282118964], 'true,false': [nan, 0.22617023282118964], 'true,false,false': [nan, 0.22617023282118964], 'false': [nan, 1.1637019757150003e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.636747360229492
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004881;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.14185106490048788;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839136;  // std dev = 3.65e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.1254446385283923;  // std dev = 0.000, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360654;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else return -0.11231637819360582;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.10159632948783556;  // std dev = 3.10e-07, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926075;  // std dev = 7.30e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.09269127618926135;  // std dev = 0.000, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.66e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 527.000 (wgt'ed) examples reached here.  /* #neg=527 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109148;  // std dev = 8.16e-08, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else return -0.07877675473109218;  // std dev = 0.000, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333686;  // std dev = 7.74e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.07324622576333699;  // std dev = 1.32e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.99e-08, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   else return -0.06842697784420353;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.06419184008202539;  // std dev = 2.43e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
Inference time using transfer learning 0.8692240715026855
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.636747360229492 

Total Inference Time : 1.580153465270996 

Total revision time: 8.726549625396729
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.741973638534546 

Total Inference Time : 1.580153465270996 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.254737377166748
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5074745613037469;  // std dev = 10.871, 519.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048804;  // std dev = 0.000, 533.000 (wgt'ed) examples reached here.  /* #neg=533 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.43016820886150287;  // std dev = 10.929, 522.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.37047964449868115;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360579;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2958993450162079;  // std dev = 10.460, 499.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783534;  // std dev = 3.63e-07, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18709592269116715;  // std dev = 11.041, 528.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926133;  // std dev = 0.000, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14658002943495096;  // std dev = 10.948, 523.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0979000304587536;  // std dev = 11.132, 533.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109215;  // std dev = 0.000, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08205591210124312;  // std dev = 11.004, 526.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333706;  // std dev = 1.12e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07182682702761176;  // std dev = 10.851, 518.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0494362402162427;  // std dev = 10.929, 522.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202536;  // std dev = 2.43e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
Inference time using transfer learning 0.9793033599853516
Parameter learned model CLL:-0.297055 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.871, 182, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 533, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.929, 185, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.588, 168, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 506, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.46, 162, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.63e-07, 512, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.041, 191, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 474, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.948, 186, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.132, 196, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 515, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.004, 189, 337], 'false,true': [1.12e-07, 473, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.851, 181, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.929, 185, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 511, 0]}]
{'': [0.2277018573587145, -1.5663934606343672e-16], 'true': [nan, 0.2277018573587145], 'true,false': [nan, 0.2277018573587145], 'true,false,false': [nan, 0.2277018573587145], 'false': [nan, -1.5663934606343672e-16]}
{'': [0.2288024250965154, -1.2325741334613983e-16], 'true': [nan, 0.2288024250965154], 'true,false': [nan, 0.2288024250965154], 'true,false,false': [0.2288024250965154, nan], 'false': [nan, -1.2325741334613983e-16]}
{'': [0.22200176453289372, -8.776466597827325e-18], 'true': [nan, 0.22200176453289372], 'true,false': [nan, 0.22200176453289372], 'true,false,false': [nan, 0.22200176453289372], 'false': [nan, -8.776466597827325e-18]}
{'': [0.2192521315175432, 2.5673907444456745e-16], 'true': [nan, 0.2192521315175432], 'true,false': [0.2192521315175432, nan], 'false': [nan, 2.5673907444456745e-16]}
{'': [0.23088484274563736, -1.1242764806330699e-17], 'true': [nan, 0.23088484274563736], 'true,false': [nan, 0.23088484274563736], 'true,false,false': [nan, 0.23088484274563736], 'false': [nan, -1.1242764806330699e-17]}
{'': [0.22916034497255983, 4.143631572637501e-17], 'true': [nan, 0.22916034497255983], 'true,false': [0.22916034497255983, nan], 'false': [nan, 4.143631572637501e-17]}
{'': [0.2325046024309288, -4.9151621284375864e-17], 'true': [nan, 0.2325046024309288], 'true,false': [0.2325046024309288, nan], 'false': [nan, -4.9151621284375864e-17]}
{'': [0.23020789660107913, 2.6288579018608357e-17], 'true': [nan, 0.23020789660107913], 'true,false': [nan, 0.23020789660107913], 'true,false,false': [nan, 0.23020789660107913], 'false': [2.6288579018608357e-17, nan]}
{'': [0.22732591941086105, -1.2675236174365237e-16], 'true': [nan, 0.22732591941086105], 'true,false': [0.22732591941086105, nan], 'false': [nan, -1.2675236174365237e-16]}
{'': [0.22880242509651813, 1.1558486283768752e-16], 'true': [nan, 0.22880242509651813], 'true,false': [nan, 0.22880242509651813], 'true,false,false': [nan, 0.22880242509651813], 'false': [nan, 1.1558486283768752e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.577376365661621
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048838;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   else return -0.14185106490048752;  // std dev = 1.69e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else return -0.12544463852839235;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360642;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.11231637819360585;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.10159632948783538;  // std dev = 3.51e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926067;  // std dev = 8.16e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.09269127618926147;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 5.77e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.08518475138839678;  // std dev = 1.50e-07, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109148;  // std dev = 7.74e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.07877675473109205;  // std dev = 1.32e-07, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333682;  // std dev = 8.16e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.07324622576333702;  // std dev = 1.23e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 4.71e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.06842697784420358;  // std dev = 0.000, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.06419184008202544;  // std dev = 2.31e-07, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
Inference time using transfer learning 0.8922278881072998
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.577376365661621 

Total Inference Time : 1.5545430183410645 

Total revision time: 8.483571767807007
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.498995780944824 

Total Inference Time : 1.5545430183410645 

Run: 4

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.281053066253662
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5248156017661747;  // std dev = 10.424, 489.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.46939265265545804;  // std dev = 10.089, 474.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.35246963304682266;  // std dev = 10.509, 493.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360599;  // std dev = 0.000, 450.000 (wgt'ed) examples reached here.  /* #neg=450 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2726864115225595;  // std dev = 10.509, 493.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783535;  // std dev = 3.60e-07, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17927777788437113;  // std dev = 10.920, 514.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926164;  // std dev = 0.000, 541.000 (wgt'ed) examples reached here.  /* #neg=541 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14716487755438473;  // std dev = 10.730, 504.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.14277937038206504;  // std dev = 10.227, 480.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.078776754731092;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09913188633544971;  // std dev = 10.360, 486.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333689;  // std dev = 1.59e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08202139313736657;  // std dev = 10.249, 481.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420351;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03667787763388743;  // std dev = 10.651, 500.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202539;  // std dev = 2.45e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
Inference time using transfer learning 1.1090095043182373
Parameter learned model CLL:-0.30285 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.424, 163, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 498, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.089, 148, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.509, 167, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 450, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.509, 167, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.6e-07, 509, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.92, 188, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 541, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.73, 178, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 499, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.227, 154, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 488, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.36, 160, 326], 'false,true': [1.59e-07, 504, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.249, 155, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.651, 174, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.45e-07, 494, 0]}]
{'': [0.22222222222222493, -2.140188963132832e-17], 'true': [nan, 0.22222222222222493], 'true,false': [nan, 0.22222222222222493], 'true,false,false': [nan, 0.22222222222222493], 'false': [nan, -2.140188963132832e-17]}
{'': [0.21474478805035005, -1.2456160764087123e-16], 'true': [nan, 0.21474478805035005], 'true,false': [nan, 0.21474478805035005], 'true,false,false': [0.21474478805035005, nan], 'false': [nan, -1.2456160764087123e-16]}
{'': [0.22399598434884643, -1.578983857244667e-17], 'true': [nan, 0.22399598434884643], 'true,false': [nan, 0.22399598434884643], 'true,false,false': [nan, 0.22399598434884643], 'false': [nan, -1.578983857244667e-17]}
{'': [0.22399598434883392, 2.547623757882481e-16], 'true': [nan, 0.22399598434883392], 'true,false': [0.22399598434883392, nan], 'false': [nan, 2.547623757882481e-16]}
{'': [0.231979288104286, -5.581897646913911e-17], 'true': [nan, 0.231979288104286], 'true,false': [nan, 0.231979288104286], 'true,false,false': [nan, 0.231979288104286], 'false': [nan, -5.581897646913911e-17]}
{'': [0.22844230284706532, 4.093808347315206e-17], 'true': [nan, 0.22844230284706532], 'true,false': [0.22844230284706532, nan], 'false': [nan, 4.093808347315206e-17]}
{'': [0.21789930555555345, -3.185066054252498e-17], 'true': [nan, 0.21789930555555345], 'true,false': [0.21789930555555345, nan], 'false': [nan, -3.185066054252498e-17]}
{'': [0.22083354502193145, 5.0224374923518987e-17], 'true': [nan, 0.22083354502193145], 'true,false': [nan, 0.22083354502193145], 'true,false,false': [nan, 0.22083354502193145], 'false': [5.0224374923518987e-17, nan]}
{'': [0.21840327453632943, -1.2187063555136854e-16], 'true': [nan, 0.21840327453632943], 'true,false': [0.21840327453632943, nan], 'false': [nan, -1.2187063555136854e-16]}
{'': [0.22689600000000093, 1.2136041159870133e-16], 'true': [nan, 0.22689600000000093], 'true,false': [nan, 0.22689600000000093], 'true,false,false': [nan, 0.22689600000000093], 'false': [nan, 1.2136041159870133e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5042648315429688
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.1418510649004875;  // std dev = 1.79e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839155;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else return -0.1254446385283923;  // std dev = 0.000, 456.000 (wgt'ed) examples reached here.  /* #neg=456 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1123163781936062;  // std dev = 9.31e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.1123163781936058;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1015963294878365;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.10159632948783551;  // std dev = 3.21e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926082;  // std dev = 6.83e-08, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.09269127618926157;  // std dev = 0.000, 524.000 (wgt'ed) examples reached here.  /* #neg=524 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5.77e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.08518475138839678;  // std dev = 1.40e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109155;  // std dev = 7.45e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.07877675473109212;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333678;  // std dev = 9.66e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   else return -0.07324622576333696;  // std dev = 1.43e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420267;  // std dev = 6.05e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.06842697784420348;  // std dev = 0.000, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.06419184008202543;  // std dev = 2.35e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
Inference time using transfer learning 1.0032408237457275
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.5042648315429688 

Total Inference Time : 1.509392499923706 

Total revision time: 8.417062282562256
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.432831764221191 

Total Inference Time : 1.509392499923706 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1691250801086426
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5534279050565896;  // std dev = 9.936, 466.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004876;  // std dev = 1.12e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.45170591039722463;  // std dev = 10.262, 480.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.369547507459153;  // std dev = 10.172, 476.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360593;  // std dev = 0.000, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2579810659242896;  // std dev = 10.600, 496.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783556;  // std dev = 3.07e-07, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24761940816721445;  // std dev = 9.762, 459.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926148;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15074777700478692;  // std dev = 10.328, 483.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10103472649891374;  // std dev = 10.518, 492.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0787767547310921;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09698371500040422;  // std dev = 10.194, 477.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333702;  // std dev = 1.21e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.025932626940158215;  // std dev = 10.926, 513.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420355;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04140303477448712;  // std dev = 10.600, 496.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202546;  // std dev = 2.27e-07, 456.000 (wgt'ed) examples reached here.  /* #neg=456 */
Inference time using transfer learning 1.1107115745544434
Parameter learned model CLL:-0.307022 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [9.936, 142, 324], 'false,true': [0.0, 0, 0], 'false,false': [1.12e-07, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.262, 156, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 482, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.172, 152, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 463, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.6, 172, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.07e-07, 462, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [9.762, 135, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 507, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.328, 159, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 496, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.518, 168, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 504, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.194, 153, 324], 'false,true': [1.21e-07, 479, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.926, 189, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 503, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.6, 172, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.27e-07, 456, 0]}]
{'': [0.21186612389250412, 2.5532849847642203e-17], 'true': [nan, 0.21186612389250412], 'true,false': [nan, 0.21186612389250412], 'true,false,false': [nan, 0.21186612389250412], 'false': [nan, 2.5532849847642203e-17]}
{'': [0.21937499999999496, -1.3820203626039293e-16], 'true': [nan, 0.21937499999999496], 'true,false': [nan, 0.21937499999999496], 'true,false,false': [0.21937499999999496, nan], 'false': [nan, -1.3820203626039293e-16]}
{'': [0.21735753124779614, -1.3428183451189799e-17], 'true': [nan, 0.21735753124779614], 'true,false': [nan, 0.21735753124779614], 'true,false,false': [nan, 0.21735753124779614], 'false': [nan, -1.3428183451189799e-17]}
{'': [0.22652185223724966, 2.037811958619335e-16], 'true': [nan, 0.22652185223724966], 'true,false': [0.22652185223724966, nan], 'false': [nan, 2.037811958619335e-16]}
{'': [0.20761245674740672, -3.503662405128699e-17], 'true': [nan, 0.20761245674740672], 'true,false': [nan, 0.20761245674740672], 'true,false,false': [nan, 0.20761245674740672], 'false': [nan, -3.503662405128699e-17]}
{'': [0.22082481385749253, 4.118569284899774e-17], 'true': [nan, 0.22082481385749253], 'true,false': [0.22082481385749253, nan], 'false': [nan, 4.118569284899774e-17]}
{'': [0.2248661511005343, -4.3175339846533866e-17], 'true': [nan, 0.2248661511005343], 'true,false': [0.2248661511005343, nan], 'false': [nan, -4.3175339846533866e-17]}
{'': [0.21787112851548543, 3.0594872494889493e-17], 'true': [nan, 0.21787112851548543], 'true,false': [nan, 0.21787112851548543], 'true,false,false': [nan, 0.21787112851548543], 'false': [3.0594872494889493e-17, nan]}
{'': [0.23268698060941723, -1.2536912087218467e-16], 'true': [nan, 0.23268698060941723], 'true,false': [0.23268698060941723, nan], 'false': [nan, -1.2536912087218467e-16]}
{'': [0.22652185223725235, 1.134570020779217e-16], 'true': [nan, 0.22652185223725235], 'true,false': [nan, 0.22652185223725235], 'true,false,false': [nan, 0.22652185223725235], 'false': [nan, 1.134570020779217e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5348494052886963
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048804;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.14185106490048738;  // std dev = 2.27e-07, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1254446385283914;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.12544463852839233;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1123163781936064;  // std dev = 6.32e-08, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.11231637819360585;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.10159632948783562;  // std dev = 2.97e-07, 453.000 (wgt'ed) examples reached here.  /* #neg=453 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926082;  // std dev = 6.66e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.09269127618926123;  // std dev = 4.21e-08, 456.000 (wgt'ed) examples reached here.  /* #neg=456 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839678;  // std dev = 6.32e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.08518475138839678;  // std dev = 1.48e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109154;  // std dev = 7.74e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.078776754731092;  // std dev = 1.44e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333689;  // std dev = 7.15e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.07324622576333693;  // std dev = 1.48e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420267;  // std dev = 5.87e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.0684269778442035;  // std dev = 0.000, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.06419184008202548;  // std dev = 2.24e-07, 445.000 (wgt'ed) examples reached here.  /* #neg=445 */
Inference time using transfer learning 1.0298542976379395
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.5348494052886963 

Total Inference Time : 1.443532943725586 

Total revision time: 8.180920362472534
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.19668984413147 

Total Inference Time : 1.443532943725586 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.8357341289520264
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5204865974371707;  // std dev = 8.300, 308.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048788;  // std dev = 7.88e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.38413684689436817;  // std dev = 9.013, 339.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839202;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.35556807777428634;  // std dev = 8.503, 316.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936069;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2793869113074713;  // std dev = 8.479, 315.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783662;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1773525319950311;  // std dev = 8.890, 333.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926044;  // std dev = 1.26e-07, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14460853591425676;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.03e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10847318919200952;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109141;  // std dev = 4.71e-08, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12865154098992396;  // std dev = 8.192, 304.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.073246225763337;  // std dev = 9.19e-08, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07973020917082246;  // std dev = 8.403, 312.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0684269778442029;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0380931441108179;  // std dev = 8.669, 323.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202596;  // std dev = 1.17e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
Inference time using transfer learning 1.1634538173675537
Parameter learned model CLL:-0.304342 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.3, 104, 204], 'false,true': [0.0, 0, 0], 'false,false': [7.88e-08, 296, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [9.013, 135, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 303, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.503, 112, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 291, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.479, 111, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 295, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.89, 129, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.26e-07, 271, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.76, 123, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.03e-07, 292, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.76, 123, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [4.71e-08, 287, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.192, 100, 204], 'false,true': [9.19e-08, 309, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.403, 108, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 279, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.669, 119, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.17e-07, 301, 0]}]
{'': [0.22364648338674775, 2.100421938480026e-17], 'true': [nan, 0.22364648338674775], 'true,false': [nan, 0.22364648338674775], 'true,false,false': [nan, 0.22364648338674775], 'false': [nan, 2.100421938480026e-17]}
{'': [0.23964288511238097, -8.500717548285028e-17], 'true': [nan, 0.23964288511238097], 'true,false': [nan, 0.23964288511238097], 'true,false,false': [0.23964288511238097, nan], 'false': [nan, -8.500717548285028e-17]}
{'': [0.2288094856593452, -1.0224734384863984e-16], 'true': [nan, 0.2288094856593452], 'true,false': [nan, 0.2288094856593452], 'true,false,false': [nan, 0.2288094856593452], 'false': [nan, -1.0224734384863984e-16]}
{'': [0.22820861678004611, -5.419393747322798e-17], 'true': [nan, 0.22820861678004611], 'true,false': [0.22820861678004611, nan], 'false': [nan, -5.419393747322798e-17]}
{'': [0.23731839948055958, 5.899340057048802e-17], 'true': [nan, 0.23731839948055958], 'true,false': [nan, 0.23731839948055958], 'true,false,false': [nan, 0.23731839948055958], 'false': [nan, 5.899340057048802e-17]}
{'': [0.23466038212271784, 3.650048300137501e-17], 'true': [nan, 0.23466038212271784], 'true,false': [0.23466038212271784, nan], 'false': [nan, 3.650048300137501e-17]}
{'': [0.23466038212271692, 7.736745816203181e-18], 'true': [nan, 0.23466038212271692], 'true,false': [0.23466038212271692, nan], 'false': [nan, 7.736745816203181e-18]}
{'': [0.22074099722991783, 2.73064562690977e-17], 'true': [nan, 0.22074099722991783], 'true,false': [nan, 0.22074099722991783], 'true,false,false': [nan, 0.22074099722991783], 'false': [2.73064562690977e-17, nan]}
{'': [0.22633136094674405, -3.820122235269356e-17], 'true': [nan, 0.22633136094674405], 'true,false': [0.22633136094674405, nan], 'false': [nan, -3.820122235269356e-17]}
{'': [0.23268698060941892, 4.5736762476252294e-17], 'true': [nan, 0.23268698060941892], 'true,false': [nan, 0.23268698060941892], 'true,false,false': [nan, 0.23268698060941892], 'false': [nan, 4.5736762476252294e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.147242784500122
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048777;  // std dev = 2.98e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.14185106490048777;  // std dev = 1.37e-07, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839105;  // std dev = 8.02e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.12544463852839194;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11401052408123956;  // std dev = 0.162, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else return -0.11231637819360692;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10247736310630591;  // std dev = 0.106, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.10159632948783653;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09338544684862804;  // std dev = 0.099, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.09269127618926044;  // std dev = 1.72e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08582199727830621;  // std dev = 0.092, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.08518475138839678;  // std dev = 1.07e-07, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.0793220685453351;  // std dev = 0.087, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.07877675473109143;  // std dev = 3.65e-08, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07294459825811117;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.07324622576333703;  // std dev = 8.82e-08, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07001713707969245;  // std dev = 0.156, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else return -0.06842697784420287;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06476518450123736;  // std dev = 0.105, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.0641918400820259;  // std dev = 1.30e-07, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
Inference time using transfer learning 1.0191214084625244
Refined model CLL: -0.063596


******************************************
Best model found
******************************************
Results 

CLL : -0.06857 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.147242784500122 

Total Inference Time : 1.4804401397705078 

Total revision time: 7.313976526260376
Best scored revision CLL: -0.063596


Results 

CLL : -0.06857 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.3297460079193115 

Total Inference Time : 1.4804401397705078 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1759798526763916
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5389570159075888;  // std dev = 10.371, 495.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004875;  // std dev = 1.79e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4348476227775395;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3903952193400814;  // std dev = 10.141, 485.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360572;  // std dev = 2.98e-08, 536.000 (wgt'ed) examples reached here.  /* #neg=536 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.244308874603684;  // std dev = 11.060, 529.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783534;  // std dev = 3.63e-07, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2072182580328794;  // std dev = 10.712, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926142;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15171035671815386;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.48e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11515826253413362;  // std dev = 10.753, 513.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109211;  // std dev = 1.19e-07, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10788595337923167;  // std dev = 10.416, 497.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333696;  // std dev = 1.41e-07, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.03350792157724944;  // std dev = 11.168, 535.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06956249666970031;  // std dev = 10.482, 500.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202541;  // std dev = 2.39e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
Inference time using transfer learning 0.987250804901123
Parameter learned model CLL:-0.302465 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.371, 158, 337], 'false,true': [0.0, 0, 0], 'false,false': [1.79e-07, 478, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.773, 177, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.141, 148, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.98e-08, 536, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.06, 192, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.63e-07, 512, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.712, 174, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.773, 177, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.48e-07, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.753, 176, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.19e-07, 506, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.416, 160, 337], 'false,true': [1.41e-07, 489, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.168, 198, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.482, 163, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.39e-07, 475, 0]}]
{'': [0.21730843791450122, 6.689209855482115e-17], 'true': [nan, 0.21730843791450122], 'true,false': [nan, 0.21730843791450122], 'true,false,false': [nan, 0.21730843791450122], 'false': [nan, 6.689209855482115e-17]}
{'': [0.22577556056866027, -1.3900353316445049e-16], 'true': [nan, 0.22577556056866027], 'true,false': [nan, 0.22577556056866027], 'true,false,false': [0.22577556056866027, nan], 'false': [nan, -1.3900353316445049e-16]}
{'': [0.21203528536508084, 1.6570492904853082e-18], 'true': [nan, 0.21203528536508084], 'true,false': [nan, 0.21203528536508084], 'true,false,false': [nan, 0.21203528536508084], 'false': [nan, 1.6570492904853082e-18]}
{'': [0.23121701251782653, 2.5673907444456745e-16], 'true': [nan, 0.23121701251782653], 'true,false': [0.23121701251782653, nan], 'false': [nan, 2.5673907444456745e-16]}
{'': [0.22456255912010253, -1.9938699217757912e-17], 'true': [nan, 0.22456255912010253], 'true,false': [nan, 0.22456255912010253], 'true,false,false': [nan, 0.22456255912010253], 'false': [nan, -1.9938699217757912e-17]}
{'': [0.22577556056866754, 4.4408920985006264e-17], 'true': [nan, 0.22577556056866754], 'true,false': [0.22577556056866754, nan], 'false': [nan, 4.4408920985006264e-17]}
{'': [0.2253760891290376, 2.8084693113047436e-17], 'true': [nan, 0.2253760891290376], 'true,false': [0.2253760891290376, nan], 'false': [nan, 2.8084693113047436e-17]}
{'': [0.2182916411952605, 4.0867105200926006e-17], 'true': [nan, 0.2182916411952605], 'true,false': [nan, 0.2182916411952605], 'true,false,false': [nan, 0.2182916411952605], 'false': [4.0867105200926006e-17, nan]}
{'': [0.23312429033103121, -1.2128103677630047e-16], 'true': [nan, 0.23312429033103121], 'true,false': [0.23312429033103121, nan], 'false': [nan, -1.2128103677630047e-16]}
{'': [0.219724, 1.2060528014875384e-16], 'true': [nan, 0.219724], 'true,false': [nan, 0.219724], 'true,false,false': [nan, 0.219724], 'false': [nan, 1.2060528014875384e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.706325054168701
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048832;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.1418510649004879;  // std dev = 0.000, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839144;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.1254446385283923;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360629;  // std dev = 8.43e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.11231637819360574;  // std dev = 0.000, 528.000 (wgt'ed) examples reached here.  /* #neg=528 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.10159632948783538;  // std dev = 3.51e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926067;  // std dev = 8.43e-08, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   else return -0.0926912761892613;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.50e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109148;  // std dev = 7.74e-08, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   else return -0.07877675473109216;  // std dev = 0.000, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333688;  // std dev = 7.30e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.07324622576333692;  // std dev = 1.53e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.75e-08, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.0684269778442035;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.06419184008202533;  // std dev = 2.47e-07, 530.000 (wgt'ed) examples reached here.  /* #neg=530 */
Inference time using transfer learning 0.8544549942016602
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.706325054168701 

Total Inference Time : 1.7572345733642578 

Total revision time: 8.859532117843628
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.875301599502563 

Total Inference Time : 1.7572345733642578 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.3640644550323486
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5062258581764311;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004875;  // std dev = 1.84e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.44947959682330374;  // std dev = 10.630, 507.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.35886011891752356;  // std dev = 10.712, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360589;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2524889581916664;  // std dev = 11.114, 532.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783558;  // std dev = 3.05e-07, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17745973941312485;  // std dev = 11.324, 544.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926123;  // std dev = 5.16e-08, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15455228506888485;  // std dev = 11.004, 526.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.49e-07, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.125832746932145;  // std dev = 10.851, 518.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109207;  // std dev = 1.26e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08106200747151716;  // std dev = 11.060, 529.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333688;  // std dev = 1.62e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07467999248101227;  // std dev = 10.851, 518.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420357;  // std dev = 0.000, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08132293318457666;  // std dev = 10.460, 499.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202544;  // std dev = 2.31e-07, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
Inference time using transfer learning 0.9760401248931885
Parameter learned model CLL:-0.300404 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.89, 183, 337], 'false,true': [0.0, 0, 0], 'false,false': [1.84e-07, 477, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.63, 170, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 489, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.712, 174, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.114, 195, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.05e-07, 460, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.324, 207, 337], 'false,true': [0.0, 0, 0], 'false,false': [5.16e-08, 455, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.004, 189, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.49e-07, 496, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.851, 181, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.26e-07, 500, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.06, 192, 337], 'false,true': [1.62e-07, 505, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.851, 181, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 513, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.46, 162, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.31e-07, 460, 0]}]
{'': [0.22807322485207357, 7.075635209351103e-17], 'true': [nan, 0.22807322485207357], 'true,false': [nan, 0.22807322485207357], 'true,false,false': [nan, 0.22807322485207357], 'false': [nan, 7.075635209351103e-17]}
{'': [0.2228757941092935, -1.3803999978979452e-16], 'true': [nan, 0.2228757941092935], 'true,false': [nan, 0.2228757941092935], 'true,false,false': [0.2228757941092935, nan], 'false': [nan, -1.3803999978979452e-16]}
{'': [0.2245625591201024, -5.539574343244025e-18], 'true': [nan, 0.2245625591201024], 'true,false': [nan, 0.2245625591201024], 'true,false,false': [nan, 0.2245625591201024], 'false': [nan, -5.539574343244025e-18]}
{'': [0.23218878964327513, 2.0273637840981118e-16], 'true': [nan, 0.23218878964327513], 'true,false': [0.23218878964327513, nan], 'false': [nan, 2.0273637840981118e-16]}
{'': [0.23572326448961664, 5.856121448572254e-18], 'true': [nan, 0.23572326448961664], 'true,false': [nan, 0.23572326448961664], 'true,false,false': [nan, 0.23572326448961664], 'false': [nan, 5.856121448572254e-18]}
{'': [0.23020789660108143, 4.476705744456276e-17], 'true': [nan, 0.23020789660108143], 'true,false': [0.23020789660108143, nan], 'false': [nan, 4.476705744456276e-17]}
{'': [0.2273259194108618, 3.1974423109204506e-17], 'true': [nan, 0.2273259194108618], 'true,false': [0.2273259194108618, nan], 'false': [nan, 3.1974423109204506e-17]}
{'': [0.23121701251781882, 5.1883689863670685e-17], 'true': [nan, 0.23121701251781882], 'true,false': [nan, 0.23121701251781882], 'true,false,false': [nan, 0.23121701251781882], 'false': [5.1883689863670685e-17, nan]}
{'': [0.22732591941086167, -1.1946259446258994e-16], 'true': [nan, 0.22732591941086167], 'true,false': [0.22732591941086167, nan], 'false': [nan, -1.1946259446258994e-16]}
{'': [0.21925213151754316, 1.1633206475420118e-16], 'true': [nan, 0.21925213151754316], 'true,false': [nan, 0.21925213151754316], 'true,false,false': [nan, 0.21925213151754316], 'false': [nan, 1.1633206475420118e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.6787874698638916
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004883;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.14185106490048777;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283915;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.1254446385283923;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360643;  // std dev = 5.16e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.11231637819360589;  // std dev = 0.000, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.10159632948783553;  // std dev = 3.15e-07, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926076;  // std dev = 6.99e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.09269127618926136;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.50e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.08518475138839678;  // std dev = 1.46e-07, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109153;  // std dev = 8.02e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.07877675473109204;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333682;  // std dev = 8.43e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.07324622576333677;  // std dev = 1.90e-07, 529.000 (wgt'ed) examples reached here.  /* #neg=529 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420267;  // std dev = 6.05e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.06842697784420357;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.06419184008202544;  // std dev = 2.33e-07, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
Inference time using transfer learning 0.8816142082214355
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.6787874698638916 

Total Inference Time : 1.6719996929168701 

Total revision time: 8.810622453689575
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.82639193534851 

Total Inference Time : 1.6719996929168701 

Run: 5

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.2286558151245117
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5444647245731923;  // std dev = 10.112, 475.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004876;  // std dev = 9.42e-08, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4645723623927085;  // std dev = 10.112, 475.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.33358260373460163;  // std dev = 10.750, 505.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360586;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.3030704950992821;  // std dev = 10.042, 472.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878354;  // std dev = 3.50e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18276986111032376;  // std dev = 10.769, 506.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926129;  // std dev = 0.000, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.16366736148572725;  // std dev = 10.360, 486.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.44e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10937341880276008;  // std dev = 10.570, 496.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0787767547310919;  // std dev = 1.65e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05943187969656955;  // std dev = 10.920, 514.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333677;  // std dev = 1.92e-07, 530.000 (wgt'ed) examples reached here.  /* #neg=530 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.05373183028242978;  // std dev = 10.788, 507.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420351;  // std dev = 0.000, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.059051788297429686;  // std dev = 10.509, 493.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202543;  // std dev = 2.37e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
Inference time using transfer learning 1.1203577518463135
Parameter learned model CLL:-0.298147 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.112, 149, 326], 'false,true': [0.0, 0, 0], 'false,false': [9.42e-08, 489, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.112, 149, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 459, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.75, 179, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 484, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.042, 146, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.5e-07, 500, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.769, 180, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 467, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.36, 160, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 471, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.57, 170, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.65e-07, 472, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.92, 188, 326], 'false,true': [1.92e-07, 530, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.788, 181, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 477, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.509, 167, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.37e-07, 472, 0]}]
{'': [0.21528642659280056, 1.8163157867078227e-17], 'true': [nan, 0.21528642659280056], 'true,false': [nan, 0.21528642659280056], 'true,false,false': [nan, 0.21528642659280056], 'false': [nan, 1.8163157867078227e-17]}
{'': [0.21528642659280445, -1.335170173405417e-16], 'true': [nan, 0.21528642659280445], 'true,false': [nan, 0.21528642659280445], 'true,false,false': [0.21528642659280445, nan], 'false': [nan, -1.335170173405417e-16]}
{'': [0.2288167826683621, -1.101047627727428e-17], 'true': [nan, 0.2288167826683621], 'true,false': [nan, 0.2288167826683621], 'true,false,false': [nan, 0.2288167826683621], 'false': [nan, -1.101047627727428e-17]}
{'': [0.2136419132433202, 2.451372438372346e-16], 'true': [nan, 0.2136419132433202], 'true,false': [0.2136419132433202, nan], 'false': [nan, 2.451372438372346e-16]}
{'': [0.2291865206455322, -5.7056429531057295e-18], 'true': [nan, 0.2291865206455322], 'true,false': [nan, 0.2291865206455322], 'true,false,false': [nan, 0.2291865206455322], 'false': [nan, -5.7056429531057295e-18]}
{'': [0.2208335450219298, 4.4314634528562514e-17], 'true': [nan, 0.2208335450219298], 'true,false': [0.2208335450219298, nan], 'false': [nan, 4.4314634528562514e-17]}
{'': [0.22526990114464102, 5.739288517130046e-17], 'true': [nan, 0.22526990114464102], 'true,false': [0.22526990114464102, nan], 'false': [nan, 5.739288517130046e-17]}
{'': [0.23197928810428955, 6.954604607085886e-17], 'true': [nan, 0.23197928810428955], 'true,false': [nan, 0.23197928810428955], 'true,false,false': [nan, 0.23197928810428955], 'false': [6.954604607085886e-17, nan]}
{'': [0.22955156409867264, -1.2103060226521622e-16], 'true': [nan, 0.22955156409867264], 'true,false': [0.22955156409867264, nan], 'false': [nan, -1.2103060226521622e-16]}
{'': [0.22399598434883536, 1.1949010519270753e-16], 'true': [nan, 0.22399598434883536], 'true,false': [nan, 0.22399598434883536], 'true,false,false': [nan, 0.22399598434883536], 'false': [nan, 1.1949010519270753e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.4545202255249023
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048804;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.14185106490048768;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283912;  // std dev = 6.66e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.12544463852839235;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360636;  // std dev = 7.60e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.11231637819360585;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.10159632948783538;  // std dev = 3.51e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926083;  // std dev = 6.50e-08, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.09269127618926144;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839678;  // std dev = 6.83e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109154;  // std dev = 8.16e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.07877675473109182;  // std dev = 0.000, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333695;  // std dev = 5.27e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.073246225763337;  // std dev = 1.28e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420267;  // std dev = 6.05e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.06842697784420348;  // std dev = 0.000, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.06419184008202537;  // std dev = 2.45e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
Inference time using transfer learning 0.9946119785308838
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.4545202255249023 

Total Inference Time : 1.4618964195251465 

Total revision time: 8.132152080535889
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.14763593673706 

Total Inference Time : 1.4618964195251465 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.243802070617676
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.49973309351534956;  // std dev = 10.776, 505.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048754;  // std dev = 1.40e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4018494812889007;  // std dev = 11.155, 526.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 443.000 (wgt'ed) examples reached here.  /* #neg=443 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3534813173327304;  // std dev = 10.757, 504.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360585;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2796665201058368;  // std dev = 10.699, 501.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783553;  // std dev = 3.15e-07, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2687511857492592;  // std dev = 9.813, 461.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926139;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1432647902479929;  // std dev = 10.738, 503.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.38e-07, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10751428597584241;  // std dev = 10.738, 503.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109196;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12613678342827095;  // std dev = 10.032, 470.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333682;  // std dev = 1.78e-07, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.03030849534014323;  // std dev = 11.033, 519.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0390590644888704;  // std dev = 10.795, 506.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820254;  // std dev = 2.43e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
Inference time using transfer learning 1.1209981441497803
Parameter learned model CLL:-0.300195 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.776, 181, 324], 'false,true': [0.0, 0, 0], 'false,false': [1.4e-07, 484, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [11.155, 202, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 443, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.757, 180, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.699, 177, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.15e-07, 469, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [9.813, 137, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 485, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.738, 179, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.38e-07, 466, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.738, 179, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.032, 146, 324], 'false,true': [1.78e-07, 517, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.033, 195, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.795, 182, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 482, 0]}]
{'': [0.22995392608568055, 4.0371746350005693e-17], 'true': [nan, 0.22995392608568055], 'true,false': [nan, 0.22995392608568055], 'true,false,false': [nan, 0.22995392608568055], 'false': [nan, 4.0371746350005693e-17]}
{'': [0.2365510561089575, -1.343294675392966e-16], 'true': [nan, 0.2365510561089575], 'true,false': [nan, 0.2365510561089575], 'true,false,false': [0.2365510561089575, nan], 'false': [nan, -1.343294675392966e-16]}
{'': [0.22959183673470043, -1.0942649934703802e-17], 'true': [nan, 0.22959183673470043], 'true,false': [nan, 0.22959183673470043], 'true,false,false': [nan, 0.22959183673470043], 'false': [nan, -1.0942649934703802e-17]}
{'': [0.22847717738175363, 2.1210230918211945e-16], 'true': [nan, 0.22847717738175363], 'true,false': [0.22847717738175363, nan], 'false': [nan, 2.1210230918211945e-16]}
{'': [0.20886406519825795, -1.8312957107219077e-17], 'true': [nan, 0.20886406519825795], 'true,false': [nan, 0.20886406519825795], 'true,false,false': [nan, 0.20886406519825795], 'false': [nan, -1.8312957107219077e-17]}
{'': [0.2292250473303354, 4.097818889174398e-17], 'true': [nan, 0.2292250473303354], 'true,false': [0.2292250473303354, nan], 'false': [nan, 4.097818889174398e-17]}
{'': [0.22922504733032936, -2.4980018054066023e-17], 'true': [nan, 0.22922504733032936], 'true,false': [0.22922504733032936, nan], 'false': [nan, -2.4980018054066023e-17]}
{'': [0.21414214576731283, 6.098710618830648e-17], 'true': [nan, 0.21414214576731283], 'true,false': [nan, 0.21414214576731283], 'true,false,false': [nan, 0.21414214576731283], 'false': [6.098710618830648e-17, nan]}
{'': [0.2345551137692517, -1.2053849981644556e-16], 'true': [nan, 0.2345551137692517], 'true,false': [0.2345551137692517, nan], 'false': [nan, -1.2053849981644556e-16]}
{'': [0.23031136246465306, 1.225391388175484e-16], 'true': [nan, 0.23031136246465306], 'true,false': [nan, 0.23031136246465306], 'true,false,false': [nan, 0.23031136246465306], 'false': [nan, 1.225391388175484e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.772852659225464
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.14185106490048774;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839136;  // std dev = 3.65e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.12544463852839227;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1123163781936064;  // std dev = 5.96e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.11231637819360579;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else return -0.10159632948783547;  // std dev = 3.32e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926078;  // std dev = 6.99e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.09269127618926139;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 5.96e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.08518475138839678;  // std dev = 1.44e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109155;  // std dev = 8.02e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.07877675473109158;  // std dev = 9.19e-08, 426.000 (wgt'ed) examples reached here.  /* #neg=426 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333684;  // std dev = 7.67e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.07324622576333752;  // std dev = 0.000, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6.50e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.06842697784420344;  // std dev = 0.000, 441.000 (wgt'ed) examples reached here.  /* #neg=441 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.06419184008202546;  // std dev = 2.28e-07, 454.000 (wgt'ed) examples reached here.  /* #neg=454 */
Inference time using transfer learning 0.9789261817932129
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.772852659225464 

Total Inference Time : 1.4649386405944824 

Total revision time: 8.314471960067749
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.329955816268921 

Total Inference Time : 1.4649386405944824 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.8288462162017822
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.47633075328132657;  // std dev = 8.826, 330.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048802;  // std dev = 0.000, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4542866398137974;  // std dev = 8.273, 307.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.125444638528392;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.30816751095802647;  // std dev = 8.993, 338.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360679;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.24387650053803167;  // std dev = 8.952, 336.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783662;  // std dev = 0.000, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22220863390847823;  // std dev = 8.528, 317.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926043;  // std dev = 1.48e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14761778221450786;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.15e-07, 351.000 (wgt'ed) examples reached here.  /* #neg=351 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.14921871888025215;  // std dev = 8.300, 308.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109143;  // std dev = 5.16e-08, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1078081580065689;  // std dev = 8.352, 310.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333696;  // std dev = 9.88e-08, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06880282034951768;  // std dev = 8.503, 316.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420299;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.046031187885443726;  // std dev = 8.576, 319.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202604;  // std dev = 9.77e-08, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
Inference time using transfer learning 1.1990571022033691
Parameter learned model CLL:-0.305572 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.826, 126, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 275, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.273, 103, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 301, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.993, 134, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 305, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.952, 132, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 300, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.528, 113, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.48e-07, 291, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.76, 123, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.15e-07, 351, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.3, 104, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.16e-08, 276, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.352, 106, 204], 'false,true': [9.88e-08, 297, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.503, 112, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 296, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.576, 115, 204], 'false,true': [0.0, 0, 0], 'false,false': [9.77e-08, 284, 0]}]
{'': [0.2360330578512441, -4.198661620400592e-17], 'true': [nan, 0.2360330578512441], 'true,false': [nan, 0.2360330578512441], 'true,false,false': [nan, 0.2360330578512441], 'false': [nan, -4.198661620400592e-17]}
{'': [0.22294135746798094, -8.557200721363333e-17], 'true': [nan, 0.22294135746798094], 'true,false': [nan, 0.22294135746798094], 'true,false,false': [0.22294135746798094, nan], 'false': [nan, -8.557200721363333e-17]}
{'': [0.23927733622772063, -7.280150981148567e-17], 'true': [nan, 0.23927733622772063], 'true,false': [nan, 0.23927733622772063], 'true,false,false': [nan, 0.23927733622772063], 'false': [nan, -7.280150981148567e-17]}
{'': [0.2385204081632631, -5.329070518200751e-17], 'true': [nan, 0.2385204081632631], 'true,false': [0.2385204081632631, nan], 'false': [nan, -5.329070518200751e-17]}
{'': [0.22939824259371366, 7.477790818781124e-17], 'true': [nan, 0.22939824259371366], 'true,false': [nan, 0.22939824259371366], 'true,false,false': [nan, 0.22939824259371366], 'false': [nan, 7.477790818781124e-17]}
{'': [0.23466038212271761, 3.7956342722227575e-17], 'true': [nan, 0.23466038212271761], 'true,false': [0.23466038212271761, nan], 'false': [nan, 3.7956342722227575e-17]}
{'': [0.22364648338674475, 9.654113257610057e-18], 'true': [nan, 0.22364648338674475], 'true,false': [0.22364648338674475, nan], 'false': [nan, 9.654113257610057e-18]}
{'': [0.22501560874089366, 3.289549702593056e-17], 'true': [nan, 0.22501560874089366], 'true,false': [nan, 0.22501560874089366], 'true,false,false': [nan, 0.22501560874089366], 'false': [3.289549702593056e-17, nan]}
{'': [0.22880948565934983, -5.401084984662924e-17], 'true': [nan, 0.22880948565934983], 'true,false': [0.22880948565934983, nan], 'false': [nan, -5.401084984662924e-17]}
{'': [0.23054018730161832, 3.3619429618930795e-17], 'true': [nan, 0.23054018730161832], 'true,false': [nan, 0.23054018730161832], 'true,false,false': [nan, 0.23054018730161832], 'false': [nan, 3.3619429618930795e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.248077869415283
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048793;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else return -0.14185106490048782;  // std dev = 1.03e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839108;  // std dev = 7.60e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.125444638528392;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360621;  // std dev = 7.45e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360699;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10159632948783638;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.1015963294878366;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926087;  // std dev = 6.75e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.09269127618926042;  // std dev = 1.60e-07, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0851847513883968;  // std dev = 6.66e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 1.01e-07, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109158;  // std dev = 5.96e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07877675473109141;  // std dev = 3.65e-08, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.07324622576333707;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333707;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.1803401224049635;  // std dev = 0.694, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.073246225763337;  // std dev = 9.19e-08, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.06842697784420265;  // std dev = 5.16e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else return -0.15518375883096175;  // std dev = 0.242, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06842697784420305;  // std dev = 0.000, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06350812259899916;  // std dev = 0.023, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06419184008202602;  // std dev = 1.01e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
Inference time using transfer learning 1.0634140968322754
Refined model CLL: -0.065342


******************************************
Best model found
******************************************
Results 

CLL : -0.107967 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 2.248077869415283 

Total Inference Time : 1.4435036182403564 

Total revision time: 7.430241823196411
Best scored revision CLL: -0.065342


Results 

CLL : -0.107967 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 7.445725679397583 

Total Inference Time : 1.4435036182403564 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.2304458618164062
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5228432151784035;  // std dev = 10.630, 507.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4506162032958658;  // std dev = 10.567, 504.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.36031723757790335;  // std dev = 10.630, 507.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360583;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.30365103811599276;  // std dev = 10.235, 489.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783544;  // std dev = 3.37e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19875692186946803;  // std dev = 10.732, 512.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926151;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15564911297098744;  // std dev = 10.630, 507.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.46e-07, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10026502484385412;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0787767547310922;  // std dev = 0.000, 524.000 (wgt'ed) examples reached here.  /* #neg=524 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09614092884201672;  // std dev = 10.567, 504.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333684;  // std dev = 1.74e-07, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.054720283561883735;  // std dev = 10.851, 518.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420348;  // std dev = 0.000, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.044136670191171075;  // std dev = 10.812, 516.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202539;  // std dev = 2.45e-07, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
Inference time using transfer learning 1.0067496299743652
Parameter learned model CLL:-0.30152 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.63, 170, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 498, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.567, 167, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 514, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.63, 170, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.235, 152, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.37e-07, 488, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.732, 175, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 511, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.63, 170, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.46e-07, 513, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.89, 183, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 524, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.567, 167, 337], 'false,true': [1.74e-07, 515, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.851, 181, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 457, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.812, 179, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.45e-07, 493, 0]}]
{'': [0.22287579410929698, -2.140188963132832e-17], 'true': [nan, 0.22287579410929698], 'true,false': [nan, 0.22287579410929698], 'true,false,false': [nan, 0.22287579410929698], 'false': [nan, -2.140188963132832e-17]}
{'': [0.2215569098009674, -1.3823788633464984e-16], 'true': [nan, 0.2215569098009674], 'true,false': [nan, 0.2215569098009674], 'true,false,false': [0.2215569098009674, nan], 'false': [nan, -1.3823788633464984e-16]}
{'': [0.22287579410929217, -1.0809473667750003e-17], 'true': [nan, 0.22287579410929217], 'true,false': [nan, 0.22287579410929217], 'true,false,false': [nan, 0.22287579410929217], 'false': [nan, -1.0809473667750003e-17]}
{'': [0.21421790641558497, 2.3296483139675417e-16], 'true': [nan, 0.21421790641558497], 'true,false': [0.21421790641558497, nan], 'false': [nan, 2.3296483139675417e-16]}
{'': [0.22497177124023454, -3.823860123953572e-17], 'true': [nan, 0.22497177124023454], 'true,false': [nan, 0.22497177124023454], 'true,false,false': [nan, 0.22497177124023454], 'false': [nan, -3.823860123953572e-17]}
{'': [0.22287579410929467, 4.15522067695965e-17], 'true': [nan, 0.22287579410929467], 'true,false': [0.22287579410929467, nan], 'false': [nan, 4.15522067695965e-17]}
{'': [0.22807322485207193, -5.508740198521769e-17], 'true': [nan, 0.22807322485207193], 'true,false': [0.22807322485207193, nan], 'false': [nan, -5.508740198521769e-17]}
{'': [0.22155690980095882, 5.863702188311507e-17], 'true': [nan, 0.22155690980095882], 'true,false': [nan, 0.22155690980095882], 'true,false,false': [nan, 0.22155690980095882], 'false': [5.863702188311507e-17, nan]}
{'': [0.22732591941086264, -1.2438384871073963e-16], 'true': [nan, 0.22732591941086264], 'true,false': [0.22732591941086264, nan], 'false': [nan, -1.2438384871073963e-16]}
{'': [0.22656015263505738, 1.2160657876218752e-16], 'true': [nan, 0.22656015263505738], 'true,false': [nan, 0.22656015263505738], 'true,false,false': [nan, 0.22656015263505738], 'false': [nan, 1.2160657876218752e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.9288363456726074
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.14185106490048754;  // std dev = 1.40e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283914;  // std dev = 2.11e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.12544463852839235;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1123163781936064;  // std dev = 5.96e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.1123163781936058;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.10159632948783538;  // std dev = 3.54e-07, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926075;  // std dev = 7.30e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.09269127618926151;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 8.02e-08, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109148;  // std dev = 7.88e-08, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   else return -0.07877675473109198;  // std dev = 1.48e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333685;  // std dev = 7.81e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.0732462257633369;  // std dev = 1.56e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420267;  // std dev = 5.67e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.06842697784420353;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.0641918400820254;  // std dev = 2.43e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
Inference time using transfer learning 0.8555507659912109
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.9288363456726074 

Total Inference Time : 1.5084071159362793 

Total revision time: 8.674662351608276
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.690146207809448 

Total Inference Time : 1.5084071159362793 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.131103754043579
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5189332488249981;  // std dev = 10.692, 510.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048782;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.42331571700723625;  // std dev = 11.004, 526.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.37754126827479656;  // std dev = 10.460, 499.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360583;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.29045209732543237;  // std dev = 10.503, 501.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783545;  // std dev = 3.36e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19165704271075162;  // std dev = 10.948, 523.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926142;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15010430718610054;  // std dev = 10.851, 518.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11014900206606267;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109202;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07673936666623826;  // std dev = 10.985, 525.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333685;  // std dev = 1.70e-07, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07172065977675962;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420355;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06609194660330094;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202534;  // std dev = 2.46e-07, 522.000 (wgt'ed) examples reached here.  /* #neg=522 */
Inference time using transfer learning 1.0158648490905762
Parameter learned model CLL:-0.302564 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.692, 173, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 510, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [11.004, 189, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 512, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.46, 162, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.503, 164, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.36e-07, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.948, 186, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 491, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.851, 181, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 499, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.89, 183, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.985, 188, 337], 'false,true': [1.7e-07, 512, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.773, 177, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 501, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.588, 168, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.46e-07, 522, 0]}]
{'': [0.22414840445982576, -6.617799989922502e-17], 'true': [nan, 0.22414840445982576], 'true,false': [nan, 0.22414840445982576], 'true,false,false': [nan, 0.22414840445982576], 'false': [nan, -6.617799989922502e-17]}
{'': [0.23020789660107793, -1.3183898417423734e-16], 'true': [nan, 0.23020789660107793], 'true,false': [nan, 0.23020789660107793], 'true,false,false': [0.23020789660107793, nan], 'false': [nan, -1.3183898417423734e-16]}
{'': [0.21925213151754797, -1.0831444142684454e-17], 'true': [nan, 0.21925213151754797], 'true,false': [nan, 0.21925213151754797], 'true,false,false': [nan, 0.21925213151754797], 'false': [nan, -1.0831444142684454e-17]}
{'': [0.2201903578073394, 2.316194236178971e-16], 'true': [nan, 0.2201903578073394], 'true,false': [0.2201903578073394, nan], 'false': [nan, 2.316194236178971e-16]}
{'': [0.2291603449725622, -2.3515925572508408e-17], 'true': [nan, 0.2291603449725622], 'true,false': [nan, 0.2291603449725622], 'true,false,false': [nan, 0.2291603449725622], 'false': [nan, -2.3515925572508408e-17]}
{'': [0.22732591941085917, 4.093808347315206e-17], 'true': [nan, 0.22732591941085917], 'true,false': [0.22732591941085917, nan], 'false': [nan, 4.093808347315206e-17]}
{'': [0.22807322485207412, -3.513078942018751e-17], 'true': [nan, 0.22807322485207412], 'true,false': [0.22807322485207412, nan], 'false': [nan, -3.513078942018751e-17]}
{'': [0.22986303854875334, 5.637851296924623e-17], 'true': [nan, 0.22986303854875334], 'true,false': [nan, 0.22986303854875334], 'true,false,false': [nan, 0.22986303854875334], 'false': [5.637851296924623e-17, nan]}
{'': [0.2257755605686704, -1.1966475714522646e-16], 'true': [nan, 0.2257755605686704], 'true,false': [0.2257755605686704, nan], 'false': [nan, -1.1966475714522646e-16]}
{'': [0.22200176453288922, 1.1570140333258335e-16], 'true': [nan, 0.22200176453288922], 'true,false': [nan, 0.22200176453288922], 'true,false,false': [nan, 0.22200176453288922], 'false': [nan, 1.1570140333258335e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.7202439308166504
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.14185106490048777;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839147;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.12544463852839227;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360626;  // std dev = 8.69e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.11231637819360578;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.10159632948783545;  // std dev = 3.36e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926065;  // std dev = 8.43e-08, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else return -0.09269127618926148;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.83e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109148;  // std dev = 8.02e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.07877675473109182;  // std dev = 0.000, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333682;  // std dev = 8.49e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.07324622576333721;  // std dev = 3.65e-08, 446.000 (wgt'ed) examples reached here.  /* #neg=446 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420264;  // std dev = 7.30e-08, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else return -0.06842697784420357;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.06419184008202533;  // std dev = 2.46e-07, 532.000 (wgt'ed) examples reached here.  /* #neg=532 */
Inference time using transfer learning 0.8642878532409668
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.7202439308166504 

Total Inference Time : 1.6673312187194824 

Total revision time: 8.703577041625977
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.719060897827148 

Total Inference Time : 1.6673312187194824 

