Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Starting experiments for fasttext using euclidean 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.9245882034301758
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8392810105712079;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048843;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return -0.14185106490048766;  // std dev = 8.54e-09, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6982657356905919;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839202;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5525810321482024;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360683;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | | else return -0.11231637819360625;  // std dev = 5.05e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.40297258508592676;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783655;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783619;  // std dev = 5.27e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3144758126782121;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926042;  // std dev = 9.59e-09, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24858654028759414;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19057926580741585;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 9.54e-08, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17784525674323345;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333673;  // std dev = 1.24e-07, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12162841980347258;  // std dev = 0.203, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420303;  // std dev = 0.000, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12352515007153617;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
Inference time using transfer learning 1.7462282180786133
Parameter learned model CLL:-0.087393 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.716, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 232, 0], 'false,false': [8.54e-09, 80, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 302, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 245, 0], 'false,false,false': [5.05e-08, 68, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 216, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.27e-08, 85, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.59e-09, 307, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 298, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [9.54e-08, 289, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.405, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.24e-07, 239, 0], 'false,false': [0.0, 85, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.203, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 306, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 235, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 79, 0]}]
{'': [0.018511925952302145, 6.26279654916755e-17], 'false': [-2.029028286383907e-16, 7.216449660063518e-17], 'false,true': [nan, -2.029028286383907e-16]}
{'': [0.024375000000001812, -9.999359691988165e-17], 'false': [nan, -9.999359691988165e-17]}
{'': [0.012497997115846302, -6.100906077812362e-17], 'false': [nan, -6.100906077812362e-17], 'false,false': [-9.06304509898087e-17, 3.7551661127027356e-17]}
{'': [0.024375000000000768, -5.311365964984138e-17], 'false': [nan, -5.311365964984138e-17], 'false,false': [-8.429471112894708e-17, 3.2653618371328135e-17], 'false,false,false': [nan, 3.2653618371328135e-17]}
{'': [0.018511925952296438, 9.257885807949189e-17], 'false': [nan, 9.257885807949189e-17], 'false,false': [nan, 9.257885807949189e-17]}
{'': [0.01851192595229627, 3.7255806195475053e-17], 'false': [nan, 3.7255806195475053e-17], 'false,false': [nan, 3.7255806195475053e-17]}
{'': [0.03009143165772912, 3.150113772292832e-17], 'false': [nan, 3.150113772292832e-17], 'false,false': [nan, 3.150113772292832e-17], 'false,false,false': [nan, 3.150113772292832e-17]}
{'': [0.012497997115846678, -4.797259982948207e-18], 'true': [0.012497997115846678, nan], 'false': [6.41049277817036e-17, -7.836868409118752e-18]}
{'': [0.041100530693665704, -5.950214903219793e-17], 'false': [nan, -5.950214903219793e-17], 'false,false': [nan, -5.950214903219793e-17]}
{'': [0.024375000000000178, 5.445042859626564e-17], 'false': [-4.724353296277262e-19, -9.134746405143692e-18], 'false,false': [nan, -9.134746405143692e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 45.41052460670471
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E) )
%   | | then if ( tweets(A, F), follows(E, G) )
%   | | | then return 0.7849782033921947;  // std dev = 1.667, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( tweets(A, I) )
%   | then return -0.1418510649004884;  // std dev = 0.000, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | else return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.7208186307268006;  // std dev = 0.031, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.6615044922092566;  // std dev = 0.971, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.6196621366329502;  // std dev = 0.313, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7194734122109543;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.7280583521939;  // std dev = 0.047, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.7431939798484314;  // std dev = 0.068, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.12544463852839205;  // std dev = 0.000, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.49141790936900476;  // std dev = 1.669, 46.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=43 */
%   | | | else return 0.5580457725972447;  // std dev = 0.029, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.03673892317454219;  // std dev = 1.112, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.5703867116508566;  // std dev = 0.033, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5975722597677567;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5688516320548398;  // std dev = 0.024, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.5586061700908312;  // std dev = 0.047, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.5782613528799653;  // std dev = 0.087, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.11231637819360699;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.4341873354650575;  // std dev = 0.028, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.41952151769303225;  // std dev = 0.029, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.37558781335006236;  // std dev = 0.992, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.4292527676375282;  // std dev = 0.162, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.35117677063409414;  // std dev = 0.970, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.10783611981740208;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.41477103152524125;  // std dev = 0.002, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.44656667028647246;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1015963294878366;  // std dev = 0.000, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.3328664947241724;  // std dev = 0.054, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.3715328676292288;  // std dev = 0.148, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.3457410095236804;  // std dev = 0.136, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.32366420575533195;  // std dev = 0.038, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then return 0.2523664815993887;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.30813410797677143;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3406037387228779;  // std dev = 0.049, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(K, A) )
%   | then return -0.09269127618926051;  // std dev = 4.37e-09, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else return -0.09269127618926082;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, D) )
%   | | | then return 0.26256429935915754;  // std dev = 0.023, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.25668830047512264;  // std dev = 0.019, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.2701147690875664;  // std dev = 0.021, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.26343727721938726;  // std dev = 0.035, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.035690247000605115;  // std dev = 1.075, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.18858556108936048;  // std dev = 0.961, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.21013713213314125;  // std dev = 0.859, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.25911609909921735;  // std dev = 0.062, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.08518475138839676;  // std dev = 5.82e-09, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.21364152745596343;  // std dev = 0.016, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.04571732418341712;  // std dev = 1.205, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.229862759653469;  // std dev = 0.066, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.22122909005725527;  // std dev = 0.009, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.14931881254623305;  // std dev = 0.958, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.25385252488403276;  // std dev = 0.965, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return 0.12086608937256901;  // std dev = 1.341, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.16845237626704576;  // std dev = 1.385, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   else return -0.07877675473109141;  // std dev = 2.98e-08, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.1685897883022565;  // std dev = 0.999, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return -0.2089953280553658;  // std dev = 0.952, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.18464399290625955;  // std dev = 0.043, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.20536213796102343;  // std dev = 0.208, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(F, H) )
%   | | | then return 0.21632073345389813;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2598506273542238;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.18400641347633456;  // std dev = 0.022, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.19040916253167692;  // std dev = 0.036, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07324622576333703;  // std dev = 4.84e-09, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.15646205500872729;  // std dev = 0.030, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.10635781959598306;  // std dev = 1.387, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.17921288995989718;  // std dev = 0.105, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.15799829794565665;  // std dev = 0.021, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.17736235288857585;  // std dev = 0.065, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.044885695625712534;  // std dev = 1.551, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.150611758941443;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.16679439178934738;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420314;  // std dev = 0.000, 334.000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(D, E), tweets(E, F) )
%   | | | then return 0.1442518132027023;  // std dev = 0.183, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.03678639661166312;  // std dev = 1.332, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.040968915202593256;  // std dev = 0.946, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.48156641117072424;  // std dev = 0.784, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.17502618833780367;  // std dev = 0.194, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1429049274821157;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.14841816097770946;  // std dev = 0.038, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.14452615817007328;  // std dev = 0.075, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.06419184008202597;  // std dev = 6.32e-09, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
Inference time using transfer learning 4.929425954818726
Refined model CLL: -0.084097


******************************************
Best model found
******************************************
Results 

CLL : -0.089802 

AUC ROC : 0.994295 

AUC PR : 0.403087 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 45.41052460670471 

Total Inference Time : 6.796586751937866 

Total revision time: 56.265623807907104
Best scored revision CLL: -0.084097


Results 

CLL : -0.089802 

AUC ROC : 0.994295 

AUC PR : 0.403087 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 56.27955937385559 

Total Inference Time : 6.796586751937866 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.4798088073730469
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8502749193514789;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048846;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else return -0.14185106490048766;  // std dev = 8.12e-09, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.690290655390459;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283919;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5337280251558928;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360658;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | | else return -0.1123163781936063;  // std dev = 2.98e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.39368538876565784;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.1015963294878365;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783631;  // std dev = 7.45e-09, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.28631794770102104;  // std dev = 0.223, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926044;  // std dev = 8.33e-09, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2547656810006503;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19169901310174428;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 5.96e-08, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17443946605085195;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.0732462257633367;  // std dev = 1.07e-07, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14822038392751183;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420275;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10597643465899163;  // std dev = 0.208, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
Inference time using transfer learning 2.123460054397583
Parameter learned model CLL:-0.09272 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.996, 1, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 212, 0], 'false,false': [8.12e-09, 66, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 253, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 196, 0], 'false,false,false': [2.98e-08, 53, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 185, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 44, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.223, 7, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [8.33e-09, 271, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 247, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.96e-08, 242, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.712, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.07e-07, 184, 0], 'false,false': [0.0, 64, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 254, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.208, 6, 126], 'false,true': [0.0, 186, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 66, 0]}]
{'': [0.007812015624035403, -3.1948864017990115e-17], 'false': [-2.388026883155997e-16, 6.728624391667616e-17], 'false,true': [nan, -2.388026883155997e-16]}
{'': [0.02982248520709868, -8.425407933914231e-17], 'false': [nan, -8.425407933914231e-17]}
{'': [0.029822485207099993, -8.917454013053466e-17], 'false': [nan, -8.917454013053466e-17], 'false,false': [-4.0783702945413916e-17, 1.67580833905684e-17]}
{'': [0.03671114736903384, -7.950942185088457e-17], 'false': [nan, -7.950942185088457e-17], 'false,false': [-9.361880640082402e-17, 1.261617073437678e-18], 'false,false,false': [nan, 1.261617073437678e-18]}
{'': [0.04986149584487516, 6.88256339989027e-17], 'false': [nan, 6.88256339989027e-17], 'false,false': [nan, 6.88256339989027e-17]}
{'': [0.022714981070848805, 3.3261742438162584e-17], 'false': [nan, 3.3261742438162584e-17], 'false,false': [nan, 3.3261742438162584e-17]}
{'': [0.036711147369034414, 1.4680635036365707e-17], 'false': [nan, 1.4680635036365707e-17], 'false,false': [nan, 1.4680635036365707e-17], 'false,false,false': [nan, 1.4680635036365707e-17]}
{'': [0.02271498107084933, 2.954625791341142e-17], 'true': [0.02271498107084933, nan], 'false': [6.214835409586475e-17, -2.6020852139652106e-18]}
{'': [0.022714981070849304, -6.993530863780514e-18], 'false': [nan, -6.993530863780514e-18], 'false,false': [nan, -6.993530863780514e-18]}
{'': [0.043388429752066124, 6.1679056923619804e-18], 'false': [-4.775152794086695e-18, -6.7286243916676156e-18], 'false,false': [nan, -6.7286243916676156e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 41.54827380180359
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( tweets(A, H) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.7040887968263387;  // std dev = 0.992, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.6205620161965166;  // std dev = 0.905, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.723620004600574;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21947341221095437;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.7364569885174231;  // std dev = 0.062, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.7194734122109542;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839188;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.5591621219443421;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.5538534139552804;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, E), follows(E, D) )
%   | | | then return 0.5871284582165774;  // std dev = 0.119, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.5599054594369901;  // std dev = 0.028, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return 0.41059376503083495;  // std dev = 0.793, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5749937601830104;  // std dev = 0.108, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, J) )
%   | then return -0.11231637819360675;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return -0.1123163781936063;  // std dev = 3.95e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.39405491610790694;  // std dev = 1.349, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | | | else return 0.28063877335322224;  // std dev = 0.936, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.1911026300966246;  // std dev = 1.507, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.3490660035994913;  // std dev = 0.943, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.45490596454623533;  // std dev = 0.091, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.43193631404298866;  // std dev = 0.062, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.41755447381784744;  // std dev = 0.000347, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.42775007012168187;  // std dev = 0.116, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783659;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.32770163951585873;  // std dev = 0.053, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.3504640463583469;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.3743451182476141;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3351238638221985;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return 0.12225004869774656;  // std dev = 0.863, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3459650310364359;  // std dev = 0.051, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.36606860671189234;  // std dev = 0.105, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.23691950505950568;  // std dev = 1.306, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   else return -0.09269127618926044;  // std dev = 8.23e-09, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.26150909572983294;  // std dev = 0.056, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.2835612286613583;  // std dev = 0.144, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.06659244653828356;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return 0.21142835677023558;  // std dev = 0.955, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.19332840976429957;  // std dev = 1.001, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.14272718609267693;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.27023596942015815;  // std dev = 0.034, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( tweets(A, J) )
%   | then return -0.08518475138839678;  // std dev = 5.51e-09, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return -0.08518475138839679;  // std dev = 2.46e-09, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.21967822663429898;  // std dev = 0.087, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.11571843260520523;  // std dev = 1.588, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.2196436088994524;  // std dev = 0.040, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.24890918951045604;  // std dev = 0.076, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return -0.27366502557054107;  // std dev = 0.967, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2679220601248863;  // std dev = 0.151, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1372570991099471;  // std dev = 1.360, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.21589327764290914;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109144;  // std dev = 3.48e-09, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, D) )
%   | | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | | then return 0.15964617826059543;  // std dev = 0.978, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.19513988320691814;  // std dev = 0.133, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.19766286153847046;  // std dev = 0.046, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.39305535441074396;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(G, F) )
%   | | | then return 0.2062525657503425;  // std dev = 0.049, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.24519419064536696;  // std dev = 0.116, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.21109370712345454;  // std dev = 0.057, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.186212392255277;  // std dev = 0.037, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.07324622576333678;  // std dev = 7.57e-09, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( tweets(D, E) )
%   | | then if ( recursion_accounttype(D, B), follows(D, F) )
%   | | | then return 0.14008755561040828;  // std dev = 0.991, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.17168255192210452;  // std dev = 0.219, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.12469516561940612;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.1767640755180052;  // std dev = 0.064, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.06312579132111612;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.1846469672918869;  // std dev = 1.055, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1586454421370285;  // std dev = 0.012, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420265;  // std dev = 2.95e-09, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | else return -0.06842697784420268;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.14503582790582728;  // std dev = 0.104, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.13629435254480157;  // std dev = 0.024, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.15280177530784952;  // std dev = 0.069, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.18231960337500777;  // std dev = 0.053, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( follows(H, J) )
%   | | | then return 0.09699505989630285;  // std dev = 0.854, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.008207622355334307;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.13499206408014836;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16550588872790725;  // std dev = 0.162, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.06419184008202623;  // std dev = 2.46e-09, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
Inference time using transfer learning 6.649612188339233
Refined model CLL: -0.090839


******************************************
Best model found
******************************************
Results 

CLL : -0.084949 

AUC ROC : 0.996061 

AUC PR : 0.466057 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 41.54827380180359 

Total Inference Time : 5.546422004699707 

Total revision time: 50.54846215248108
Best scored revision CLL: -0.090839


Results 

CLL : -0.084949 

AUC ROC : 0.996061 

AUC PR : 0.466057 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 50.562397718429565 

Total Inference Time : 5.546422004699707 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.8195905685424805
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8331489350995097;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004885;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6934355028803846;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839202;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.519150739732;  // std dev = 0.215, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360683;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | | else return -0.11231637819360622;  // std dev = 6.50e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4200055695452944;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783652;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878362;  // std dev = 5.05e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.30839531317445407;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926043;  // std dev = 8.64e-09, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2430009650806765;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.25e-09, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2095727487754274;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 9.42e-08, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17474393270564148;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333664;  // std dev = 1.28e-07, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return -0.07324622576333707;  // std dev = 1.29e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13074150027993728;  // std dev = 0.189, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420296;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13143907946999825;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 1.83e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
Inference time using transfer learning 2.0024313926696777
Parameter learned model CLL:-0.087332 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.975, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 222, 0], 'false,false': [8.33e-09, 71, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 309, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.215, 8, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 244, 0], 'false,false,false': [6.5e-08, 84, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 232, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.05e-08, 87, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [8.64e-09, 284, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.25e-09, 317, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [9.42e-08, 297, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.716, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.28e-07, 224, 0], 'false,false': [1.29e-08, 51, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.189, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 291, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [1.83e-08, 226, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 95, 0]}]
{'': [0.024375000000006076, 1.2125302658022188e-17], 'false': [-2.360474178482315e-16, 6.880255363874209e-17], 'false,true': [nan, -2.360474178482315e-16]}
{'': [0.030091431657728995, -9.485400598739201e-17], 'false': [nan, -9.485400598739201e-17]}
{'': [0.04640095181439701, -4.8741498642080043e-17], 'false': [nan, -4.8741498642080043e-17], 'false,false': [-8.918184951906995e-17, 5.0224374923518987e-17]}
{'': [0.01851192595229609, -3.2018971243107964e-17], 'false': [nan, -3.2018971243107964e-17], 'false,false': [-6.891039463190627e-17, 2.9350723639515634e-17], 'false,false,false': [nan, 2.9350723639515634e-17]}
{'': [0.03009143165772983, 7.50573312422641e-17], 'false': [nan, 7.50573312422641e-17], 'false,false': [nan, 7.50573312422641e-17]}
{'': [0.03009143165772927, 4.0626457683444214e-17], 'false': [nan, 4.0626457683444214e-17], 'false,false': [nan, 4.0626457683444214e-17]}
{'': [0.018511925952295786, 2.990499729630051e-17], 'false': [nan, 2.990499729630051e-17], 'false,false': [nan, 2.990499729630051e-17], 'false,false,false': [nan, 2.990499729630051e-17]}
{'': [0.018511925952296348, 2.0185873175002847e-17], 'true': [0.018511925952296348, nan], 'false': [7.335402126987641e-17, 3.2653618371328133e-18]}
{'': [0.03566529492455434, -4.6545432647515155e-17], 'false': [nan, -4.6545432647515155e-17], 'false,false': [nan, -4.6545432647515155e-17]}
{'': [0.018511925952296292, 5.879685800195533e-17], 'false': [1.4737473778210042e-18, -1.3439541877041369e-17], 'false,false': [nan, -1.3439541877041369e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 37.01260948181152
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.8581489350995111;  // std dev = 5.20e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, E) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( tweets(A, H) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | else return -0.14185106490048763;  // std dev = 8.30e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.7194734122109546;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(F, A) )
%   | | | then return 0.5766162693538118;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.726497805911846;  // std dev = 0.096, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.623661184764457;  // std dev = 0.941, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.12544463852839205;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.5403610367855501;  // std dev = 0.997, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.3228367369622487;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.5553664367462847;  // std dev = 5.16e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.5537468856887865;  // std dev = 0.002, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.555250754527892;  // std dev = 0.002, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.5660544813666399;  // std dev = 0.116, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5553664367462843;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5889080478797324;  // std dev = 0.057, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360682;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.42109421692619103;  // std dev = 0.004, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.41754171787850325;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.06373513496426558;  // std dev = 1.001, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.4256206584379379;  // std dev = 0.070, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, H) )
%   | | | then return 0.4220258071601647;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4942051325263068;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.4157915345169475;  // std dev = 0.013, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.4372223393777477;  // std dev = 0.064, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.10159632948783662;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), follows(D, A) )
%   | | | then return 0.3005986640144542;  // std dev = 0.988, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.3355016532412082;  // std dev = 0.172, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.009981376962276226;  // std dev = 1.169, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), follows(A, G) )
%   | | | then return 0.32607145488324496;  // std dev = 0.110, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.3195461604448955;  // std dev = 0.012, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.316481728002412;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.33758446913125073;  // std dev = 0.039, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(I, A) )
%   | then return -0.09269127618926049;  // std dev = 5.10e-09, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return -0.09269127618926083;  // std dev = 1.05e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.24407922959013936;  // std dev = 0.999, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.1842929004135849;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.07338709795576918;  // std dev = 1.470, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.25894175258293406;  // std dev = 0.099, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2654831332232294;  // std dev = 0.060, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2530715543539335;  // std dev = 0.006, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.25985554096369023;  // std dev = 0.064, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.26962568294018546;  // std dev = 0.039, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839676;  // std dev = 5.67e-09, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(F, D), follows(A, F) )
%   | | | then return 0.2155599835414226;  // std dev = 0.015, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.22483009969153755;  // std dev = 0.098, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.27930634283752004;  // std dev = 0.148, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2125572301483931;  // std dev = 0.088, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H) )
%   | | then if ( recursion_accounttype(H, B), tweets(A, I) )
%   | | | then return 0.2171453196420966;  // std dev = 0.052, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.21131761223910103;  // std dev = 0.059, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.2046762054354132;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22071151964685198;  // std dev = 0.025, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109143;  // std dev = 1.49e-08, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(A, G), follows(D, G) )
%   | | | then return 0.18119321101448707;  // std dev = 0.045, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.1880111317429195;  // std dev = 0.063, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.19963769809551266;  // std dev = 0.065, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.07584123530412781;  // std dev = 1.244, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.507237326034715;  // std dev = 0.940, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.17830676527288483;  // std dev = 0.080, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.11226760841645131;  // std dev = 0.972, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( tweets(A, K) )
%   | then return -0.07324622576333671;  // std dev = 8.07e-09, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(A, G), follows(D, G) )
%   | | | then return 0.15584951097849783;  // std dev = 0.040, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.16100916549174413;  // std dev = 0.056, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.16977903744308548;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.372605533693946;  // std dev = 1.119, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.07092265281094348;  // std dev = 1.170, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08734948927338596;  // std dev = 1.616, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | | | else return 0.1638279040101437;  // std dev = 0.036, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.0684269778442031;  // std dev = 0.000, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.13853433061601345;  // std dev = 0.058, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.10227289494198719;  // std dev = 0.982, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( follows(A, F), tweets(A, G) )
%   | | | then return -0.17434527894181231;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.08014460711103089;  // std dev = 0.971, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( follows(H, A), follows(A, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2580557334047135;  // std dev = 0.229, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15021253704646878;  // std dev = 0.149, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.061720143694960844;  // std dev = 0.809, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.14268385970968742;  // std dev = 0.033, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.06419184008202586;  // std dev = 7.51e-09, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
Inference time using transfer learning 6.3634326457977295
Refined model CLL: -0.084537


******************************************
Best model found
******************************************
Results 

CLL : -0.089993 

AUC ROC : 0.994756 

AUC PR : 0.442857 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 37.01260948181152 

Total Inference Time : 7.278136968612671 

Total revision time: 48.33632159233093
Best scored revision CLL: -0.084537


Results 

CLL : -0.089993 

AUC ROC : 0.994756 

AUC PR : 0.442857 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 48.34793734550476 

Total Inference Time : 7.278136968612671 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5174829959869385
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8425239350995104;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048838;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6844482478692147;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839186;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.559962062344657;  // std dev = 0.088, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360646;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else return -0.1123163781936063;  // std dev = 2.79e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4054987657326612;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783649;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878362;  // std dev = 4.08e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.31786705655555686;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926051;  // std dev = 7.33e-09, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22146658570006142;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2026165557140311;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 8.56e-08, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15424870914488936;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333671;  // std dev = 1.03e-07, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13140852460028948;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420283;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12109672367784395;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
Inference time using transfer learning 2.243805170059204
Parameter learned model CLL:-0.092865 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.403, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 194, 0], 'false,false': [7.21e-09, 50, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 235, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.088, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 180, 0], 'false,false,false': [2.79e-08, 52, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 178, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.08e-08, 61, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [7.33e-09, 244, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.393, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 228, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.56e-08, 244, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [2.193, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.03e-07, 178, 0], 'false,false': [0.0, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 265, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 199, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 47, 0]}]
{'': [0.015380859375004219, -1.4924309511354563e-16], 'false': [-2.3120108347864086e-16, 5.773159728050814e-17], 'false,true': [nan, -2.3120108347864086e-16]}
{'': [0.036711147369035683, -6.614094614788166e-17], 'false': [nan, -6.614094614788166e-17]}
{'': [0.0078120156240309825, -7.465292751789846e-17], 'false': [nan, -7.465292751789846e-17], 'false,false': [-1.4802973661668754e-17, 1.4945309946877107e-17]}
{'': [0.022714981070849176, -7.060832625231121e-17], 'false': [nan, -7.060832625231121e-17], 'false,false': [-8.607347044846719e-17, 2.7300566179307128e-17], 'false,false,false': [nan, 2.7300566179307128e-17]}
{'': [0.015380859375000541, 5.278109461332711e-17], 'false': [nan, 5.278109461332711e-17], 'false,false': [nan, 5.278109461332711e-17]}
{'': [0.04338842975206595, 3.408579461568463e-17], 'false': [nan, 3.408579461568463e-17], 'false,false': [nan, 3.408579461568463e-17]}
{'': [0.022714981070848926, 3.0030622797237843e-17], 'false': [nan, 3.0030622797237843e-17], 'false,false': [nan, 3.0030622797237843e-17], 'false,false,false': [nan, 3.0030622797237843e-17]}
{'': [0.03671114736903447, 4.028657388935167e-17], 'true': [0.03671114736903447, nan], 'false': [5.98771968337163e-17, -1.8817339400426382e-18]}
{'': [0.036711147369034317, -1.424437088198314e-17], 'false': [nan, -1.424437088198314e-17], 'false,false': [nan, -1.424437088198314e-17]}
{'': [0.02982248520710047, 2.7078610356711136e-18], 'false': [-2.2316040695983046e-18, -4.724353296277262e-18], 'false,false': [nan, -4.724353296277262e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 38.50300693511963
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E), follows(D, A) )
%   | | | then return 0.8116373071925351;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.8581489350995117;  // std dev = 2.38e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, F) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.7259298629133466;  // std dev = 0.033, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.4717961597197418;  // std dev = 0.858, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.7194734122109548;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0.7413433124639606;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.12544463852839174;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.5658780957270381;  // std dev = 0.076, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.5563887290035051;  // std dev = 0.060, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.5772803580979211;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(G, F) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.0553664367462845;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( tweets(A, H) )
%   | then return -0.11231637819360653;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else if ( follows(I, A) )
%   | | then return -0.11231637819360643;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.11231637819360635;  // std dev = 3.48e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(D, F), tweets(A, F) )
%   | | | then return 0.4250286893961993;  // std dev = 0.054, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.41669138109466675;  // std dev = 0.005, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, D), tweets(A, G) )
%   | | | then return 0.42020569487011583;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.44309496100307716;  // std dev = 0.105, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.24818067237669736;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.33693708885063595;  // std dev = 0.859, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.41726498776411447;  // std dev = 2.98e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.4175135841583098;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1015963294878366;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D), recursion_accounttype(E, B) )
%   | | | then return 0.32670214945584725;  // std dev = 0.047, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.3190149599691062;  // std dev = 0.003, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.20885003485544437;  // std dev = 0.924, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.3267097550339842;  // std dev = 0.086, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.3278774425511232;  // std dev = 0.107, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.21876256514736658;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.040349830054144914;  // std dev = 1.360, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.3359239150097819;  // std dev = 0.129, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926054;  // std dev = 6.45e-09, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2306901547541197;  // std dev = 1.404, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | | else return -0.011448554353881738;  // std dev = 0.788, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.25394308175981173;  // std dev = 0.002, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.28342832238466226;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(H, B), follows(I, A) )
%   | | | then return 0.10589239594121182;  // std dev = 1.239, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.28588138509191413;  // std dev = 0.150, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.12713113046576754;  // std dev = 0.360, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( tweets(A, J) )
%   | then return -0.08518475138839678;  // std dev = 5.19e-09, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return -0.08518475138839679;  // std dev = 9.31e-10, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.1633786992554957;  // std dev = 1.906, 72.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=68 */
%   | | | else return 0.24192532071113537;  // std dev = 0.158, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.10472420015941146;  // std dev = 0.766, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.2844958466775393;  // std dev = 0.102, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.20657130321707715;  // std dev = 0.010, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2237333720050257;  // std dev = 0.038, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, I) )
%   | then if ( follows(I, A) )
%   | | then return -0.07877675473109147;  // std dev = 5.67e-09, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | else return -0.07877675473109172;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return -0.0787767547310917;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A), follows(D, A) )
%   | | | then return 0.1888727483640777;  // std dev = 0.020, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.11512112369808854;  // std dev = 1.653, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | | else return -0.10285425749272316;  // std dev = 0.439, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.1038401837376665;  // std dev = 0.951, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.1971613704592433;  // std dev = 0.060, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2720021967563295;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1951875750286713;  // std dev = 0.067, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, J) )
%   | then return -0.07324622576333661;  // std dev = 8.84e-09, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), tweets(E, G) )
%   | | | then return 0.16186494633879567;  // std dev = 0.018, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.16828334540075418;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.19973838527749843;  // std dev = 0.075, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.16668403645008587;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J), tweets(I, K) )
%   | | | then return 0.1326588024053232;  // std dev = 0.984, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.022196337480796448;  // std dev = 1.221, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else if ( tweets(A, L) )
%   | | | then return -0.01043021413882832;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.030614133815358633;  // std dev = 0.939, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.06842697784420262;  // std dev = 4.84e-09, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.08043444274479013;  // std dev = 1.900, 64.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=60 */
%   | | | else return 0.15575148666542496;  // std dev = 0.086, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.18460903199806303;  // std dev = 1.142, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15332524046273835;  // std dev = 0.033, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.16716614691551285;  // std dev = 0.108, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.19117740245973358;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1707760971588079;  // std dev = 0.063, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, J) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
Inference time using transfer learning 8.36539912223816
Refined model CLL: -0.091293


******************************************
Best model found
******************************************
Results 

CLL : -0.085763 

AUC ROC : 0.99615 

AUC PR : 0.520781 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 38.50300693511963 

Total Inference Time : 6.4043309688568115 

Total revision time: 48.39120364189148
Best scored revision CLL: -0.091293


Results 

CLL : -0.085763 

AUC ROC : 0.99615 

AUC PR : 0.520781 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 48.40281939506531 

Total Inference Time : 6.4043309688568115 

Starting experiments for fasttext using softcosine 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.9523370265960693
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8517795083479174;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048846;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else return -0.14185106490048763;  // std dev = 8.74e-09, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6778123784674109;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839202;  // std dev = 0.000, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5301560563755657;  // std dev = 0.189, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.1123163781936067;  // std dev = 0.000, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | | else return -0.11231637819360622;  // std dev = 6.14e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.39248088507673984;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783653;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783615;  // std dev = 5.37e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.32982922403435566;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926042;  // std dev = 9.41e-09, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25982538417273593;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2114500886630486;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 1.03e-07, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16448906334848115;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333661;  // std dev = 1.28e-07, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else return -0.07324622576333707;  // std dev = 4.15e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.152847152950054;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0684269778442031;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1390896330722599;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202623;  // std dev = 3.33e-08, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
Inference time using transfer learning 1.8888795375823975
Parameter learned model CLL:-0.087798 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.997, 1, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 228, 0], 'false,false': [8.74e-09, 92, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [2.588, 7, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 307, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.189, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 217, 0], 'false,false,false': [6.14e-08, 80, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.588, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 210, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.37e-08, 75, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.41e-09, 300, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 309, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.03e-07, 322, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.975, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.28e-07, 213, 0], 'false,false': [4.15e-08, 89, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 324, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.08, 1, 156], 'false,true': [3.33e-08, 251, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 74, 0]}]
{'': [0.006328857154454536, 8.326672684688674e-17], 'false': [-2.1814908554038162e-16, 7.723290606088045e-17], 'false,true': [nan, -2.1814908554038162e-16]}
{'': [0.04110053069366295, -9.547194739447601e-17], 'false': [nan, -9.547194739447601e-17]}
{'': [0.03566529492455493, -8.971499188890154e-17], 'false': [nan, -8.971499188890154e-17], 'false,false': [-6.344131569286608e-17, 4.718447854656915e-17]}
{'': [0.041100530693664886, -5.609547913895528e-17], 'false': [nan, -5.609547913895528e-17], 'false,false': [-8.881784197001253e-17, 3.848773152033876e-17], 'false,false,false': [nan, 3.848773152033876e-17]}
{'': [0.012497997115847358, 8.881784197001253e-17], 'false': [nan, 8.881784197001253e-17], 'false,false': [nan, 8.881784197001253e-17]}
{'': [0.012497997115847167, 3.8803911540296735e-17], 'false': [nan, 3.8803911540296735e-17], 'false,false': [nan, 3.8803911540296735e-17]}
{'': [0.012497997115847133, 3.309981688323448e-17], 'false': [nan, 3.309981688323448e-17], 'false,false': [nan, 3.309981688323448e-17], 'false,false,false': [nan, 3.309981688323448e-17]}
{'': [0.02437499999999978, 9.558211470282804e-18], 'true': [0.02437499999999978, nan], 'false': [7.714225711010478e-17, 1.933534481088756e-17]}
{'': [0.012497997115846895, -7.264422259893e-17], 'false': [nan, -7.264422259893e-17], 'false,false': [nan, -7.264422259893e-17]}
{'': [0.006328857154448444, 6.148927521000867e-17], 'false': [4.423199301295444e-18, -7.50150692314295e-18], 'false,false': [nan, -7.50150692314295e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 57.19257616996765
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | | then return 0.8368723393548312;  // std dev = 0.989, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( recursion_accounttype(D, B), follows(F, A) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8354216623722389;  // std dev = 0.989, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.1418510649004879;  // std dev = 2.63e-09, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.7128890266994015;  // std dev = 1.001, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | | else return 0.6325168904718238;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return 0.4035276340019682;  // std dev = 0.838, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.7240375275582284;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4050490057843928;  // std dev = 0.835, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7300859494064731;  // std dev = 0.093, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.12544463852839205;  // std dev = 0.000, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.561831890940021;  // std dev = 0.007, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.5343673534371608;  // std dev = 0.965, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.31005606568193134;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | | | else return 0.576722732348598;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.6030773838267103;  // std dev = 0.158, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2520124893200004;  // std dev = 0.754, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.568776523596563;  // std dev = 0.141, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( tweets(A, I) )
%   | then return -0.11231637819360676;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else return -0.11231637819360614;  // std dev = 2.98e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), tweets(D, F) )
%   | | | then return 0.42443204283456104;  // std dev = 0.022, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.43015468688909747;  // std dev = 0.049, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.49981952719452055;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.44863634778846034;  // std dev = 0.119, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.14738656306061992;  // std dev = 0.851, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.4418884112776149;  // std dev = 0.115, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.417198593610881;  // std dev = 5.96e-08, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.446473477330474;  // std dev = 0.087, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1015963294878366;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.32509050916148746;  // std dev = 0.017, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.23664502840928978;  // std dev = 0.951, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( tweets(D, F), follows(G, D) )
%   | | | then return 0.3298440512615243;  // std dev = 0.043, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.40798353833258955;  // std dev = 0.213, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(J, A), recursion_accounttype(H, B) )
%   | | | then return 0.1605274456051297;  // std dev = 1.119, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.2724998438698851;  // std dev = 1.676, 50.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.32449894408542557;  // std dev = 0.071, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3481514878378895;  // std dev = 0.051, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926042;  // std dev = 1.01e-08, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2594106118221987;  // std dev = 0.032, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.10451898321081451;  // std dev = 0.857, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.28258510234723183;  // std dev = 0.167, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.3573174098412103;  // std dev = 0.181, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.21075880810641356;  // std dev = 1.382, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return -0.05631983145983508;  // std dev = 1.073, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.24453336992149022;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.28304358567213583;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(F, A), follows(D, F) )
%   | | | then return 0.21258640063675127;  // std dev = 0.027, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.21873742285983852;  // std dev = 0.056, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.23802486853149488;  // std dev = 0.176, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.05815369527822339;  // std dev = 1.456, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.2684798499506668;  // std dev = 0.070, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.23328710624226986;  // std dev = 0.116, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.14827872334190229;  // std dev = 0.941, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(A, J) )
%   | then return -0.07877675473109146;  // std dev = 4.27e-09, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else return -0.07877675473109168;  // std dev = 3.09e-09, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), tweets(D, F) )
%   | | | then return 0.15013027537718904;  // std dev = 1.337, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | | | else return 0.20262362991667573;  // std dev = 0.161, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.10048394818594898;  // std dev = 1.176, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(I, G) )
%   | | | then return 0.18254699175384992;  // std dev = 0.027, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.16121771563711176;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.19136214069867882;  // std dev = 0.086, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.2000857513499849;  // std dev = 0.062, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( tweets(A, L) )
%   | then return -0.07324622576333671;  // std dev = 8.12e-09, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then if ( follows(G, A), follows(G, E) )
%   | | | then return 0.15552128255212416;  // std dev = 1.009, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.005389597968366004;  // std dev = 1.511, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.15838945983586164;  // std dev = 0.045, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.19609679304785185;  // std dev = 0.098, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return 0.154763738079634;  // std dev = 0.022, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.15870635221816873;  // std dev = 0.038, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.1517576333161259;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17254612227854946;  // std dev = 0.097, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.06842697784420307;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.14545899132192594;  // std dev = 0.177, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.05653485751627149;  // std dev = 0.914, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.12986396787505888;  // std dev = 1.234, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(I, G) )
%   | | | then return 0.1378715599712548;  // std dev = 0.023, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.122615880133285;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.15307356645047424;  // std dev = 0.067, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.1436084392603147;  // std dev = 0.058, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else if ( tweets(A, L) )
%   | then return -0.06419184008202625;  // std dev = 9.31e-10, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else return -0.06419184008202623;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
Inference time using transfer learning 4.291054725646973
Refined model CLL: -0.084479


******************************************
Best model found
******************************************
Results 

CLL : -0.090551 

AUC ROC : 0.995765 

AUC PR : 0.55371 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 57.19257616996765 

Total Inference Time : 6.499946355819702 

Total revision time: 67.8814206123352
Best scored revision CLL: -0.084479


Results 

CLL : -0.090551 

AUC ROC : 0.995765 

AUC PR : 0.55371 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 67.92970776557922 

Total Inference Time : 6.499946355819702 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5593452453613281
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8425239350995104;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048852;  // std dev = 0.000, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return -0.14185106490048766;  // std dev = 8.12e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6918469560312815;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839186;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5427637305513519;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360647;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else return -0.11231637819360629;  // std dev = 3.33e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3929884623345479;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783648;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783628;  // std dev = 1.49e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3228442807744541;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926046;  // std dev = 8.01e-09, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2395571353638744;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19497065384222537;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109146;  // std dev = 8.56e-08, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1702334543526278;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.0732462257633367;  // std dev = 1.04e-07, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1016326459626004;  // std dev = 0.249, 135.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420286;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13892370735478432;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
Inference time using transfer learning 2.3878955841064453
Parameter learned model CLL:-0.09283 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.403, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 224, 0], 'false,false': [8.12e-09, 61, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 238, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 181, 0], 'false,false,false': [3.33e-08, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 174, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.49e-08, 46, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [8.01e-09, 266, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 265, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.56e-08, 234, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.712, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.04e-07, 180, 0], 'false,false': [0.0, 67, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.249, 9, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 272, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 203, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 71, 0]}]
{'': [0.015380859375004219, -9.349246523159213e-18], 'false': [-2.339398516174437e-16, 6.188128333976282e-17], 'false,true': [nan, -2.339398516174437e-16]}
{'': [0.02982248520710174, -7.463684199160717e-17], 'false': [nan, -7.463684199160717e-17]}
{'': [0.022714981070850664, -7.526935760170552e-17], 'false': [nan, -7.526935760170552e-17], 'false,false': [-1.962825236906354e-17, 2.0185873175002847e-17]}
{'': [0.03671114736903495, -8.074349270001139e-17], 'false': [nan, -8.074349270001139e-17], 'false,false': [-8.549993408032814e-17, 4.827056628805028e-18], 'false,false,false': [nan, 4.827056628805028e-18]}
{'': [0.015380859374999903, 6.344131569286608e-17], 'false': [nan, 6.344131569286608e-17], 'false,false': [nan, 6.344131569286608e-17]}
{'': [0.029822485207100836, 3.77056876287789e-17], 'false': [nan, 3.77056876287789e-17], 'false,false': [nan, 3.77056876287789e-17]}
{'': [0.029822485207100596, 3.131398274583775e-17], 'false': [nan, 3.131398274583775e-17], 'false,false': [nan, 3.131398274583775e-17], 'false,false,false': [nan, 3.131398274583775e-17]}
{'': [0.02271498107084894, 2.966587839079366e-17], 'true': [0.02271498107084894, nan], 'false': [6.044547578514741e-17, -4.14262322621327e-18]}
{'': [0.062222222222222345, -2.938825653419532e-17], 'false': [nan, -2.938825653419532e-17], 'false,false': [nan, -2.938825653419532e-17]}
{'': [0.01538085937499998, 2.5121834863780915e-17], 'false': [-2.73453946952009e-18, -7.818472004402511e-18], 'false,false': [nan, -7.818472004402511e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 24.48898458480835
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995104;  // std dev = 7.25e-07, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109554;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else return -0.12544463852839188;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.5553664367462839;  // std dev = 2.53e-07, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.5553664367462847;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.5553664367462847;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.5553664367462847;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.48869977007961807;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.22203310341295138;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.5553664367462847;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5553664367462847;  // std dev = 2.98e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.11231637819360692;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.4024765822451235;  // std dev = 0.994, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.3508469174916436;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.21751358415831018;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.426205129510202;  // std dev = 0.031, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.4835716266862969;  // std dev = 0.074, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4175135841583103;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( tweets(A, I) )
%   | then return -0.10159632948783649;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else if ( follows(J, A) )
%   | | then return -0.10159632948783621;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return -0.1015963294878362;  // std dev = 1.86e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.32399653810506385;  // std dev = 4.21e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.3203067303140777;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.34335109879268705;  // std dev = 0.104, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.24449666122255573;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.3414741744212192;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.3194514836390367;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16533575436147466;  // std dev = 1.300, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else return -0.09269127618926046;  // std dev = 7.79e-09, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2574122988922683;  // std dev = 1.01e-07, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.25489594938923194;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(G, A), tweets(G, D) )
%   | | | then return 0.27355616193220234;  // std dev = 0.071, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.262157497443039;  // std dev = 0.057, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.09883334279096663;  // std dev = 1.275, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.2716853737455047;  // std dev = 0.034, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.27820796303072404;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2866225710790959;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839678;  // std dev = 5.51e-09, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.15147333501197396;  // std dev = 1.681, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   | | | else return -0.18551616911452498;  // std dev = 1.096, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(E, G) )
%   | | | then return 0.2159101306348052;  // std dev = 0.079, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.04214694075739996;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.2572015803507249;  // std dev = 0.041, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.218797751219799;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.2114962443810936;  // std dev = 0.026, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.23083420582186676;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109144;  // std dev = 3.84e-09, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.14653128236394108;  // std dev = 1.665, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | | else return -0.04998285713080802;  // std dev = 0.898, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(H, D), follows(H, A) )
%   | | | then return 0.20601159931791016;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.18442189062613856;  // std dev = 0.045, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.21122478395644687;  // std dev = 0.035, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.18371138853651087;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.17838106778545582;  // std dev = 0.023, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.1924091945281087;  // std dev = 0.008, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07324622576333682;  // std dev = 7.15e-09, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.12091648686791971;  // std dev = 1.381, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.17833138493664147;  // std dev = 0.107, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.15754074035616894;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.20071085467085595;  // std dev = 1.101, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.15355415799045147;  // std dev = 0.005, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1607771543352987;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.16107002885844698;  // std dev = 0.049, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.16852436135397955;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420261;  // std dev = 4.47e-09, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E), recursion_accounttype(E, B) )
%   | | | then return 0.14839902512525702;  // std dev = 0.018, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.0017639208929741605;  // std dev = 1.823, 26.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=22 */
%   | | else if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.13463957551139288;  // std dev = 0.005, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.14470654014702936;  // std dev = 0.031, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.1477627812533361;  // std dev = 0.044, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.22421090368372873;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.13650795315984013;  // std dev = 0.031, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.1462123982885507;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202625;  // std dev = 1.32e-09, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
Inference time using transfer learning 7.1727118492126465
Refined model CLL: -0.091838


******************************************
Best model found
******************************************
Results 

CLL : -0.086071 

AUC ROC : 0.995515 

AUC PR : 0.424893 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 24.48898458480835 

Total Inference Time : 5.992856502532959 

Total revision time: 33.948517084121704
Best scored revision CLL: -0.091838


Results 

CLL : -0.086071 

AUC ROC : 0.995515 

AUC PR : 0.424893 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 33.99680423736572 

Total Inference Time : 5.992856502532959 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.7448210716247559
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.815204149823436;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048843;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7154005528413535;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.125444638528392;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5419444453241719;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360678;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | | else return -0.11231637819360622;  // std dev = 5.96e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.40728139027260174;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783653;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783621;  // std dev = 4.94e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.32364089790117173;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926043;  // std dev = 9.59e-09, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23720354267676033;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.18e-09, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15288994631916128;  // std dev = 3.338, 168.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 1.13e-07, 338.000 (wgt'ed) examples reached here.  /* #neg=338 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15005875886157388;  // std dev = 2.759, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333671;  // std dev = 1.25e-07, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15100911506744133;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.068426977844203;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14879812636164041;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
Inference time using transfer learning 1.8210771083831787
Parameter learned model CLL:-0.087129 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [2.588, 7, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 232, 0], 'false,false': [8.33e-09, 77, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 289, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 234, 0], 'false,false,false': [5.96e-08, 78, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 208, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.94e-08, 89, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.59e-09, 308, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.18e-09, 317, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [3.338, 12, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.13e-07, 338, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [2.759, 8, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.25e-07, 237, 0], 'false,false': [0.0, 91, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 299, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.08, 1, 156], 'false,true': [0.0, 229, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 90, 0]}]
{'': [0.04110053069367158, 5.748727635599516e-17], 'false': [-2.029028286383907e-16, 7.209240419643874e-17], 'false,true': [nan, -2.029028286383907e-16]}
{'': [0.01249799711584945, -9.52717336010515e-17], 'false': [nan, -9.52717336010515e-17]}
{'': [0.02437499999999937, -5.693451408334136e-17], 'false': [nan, -5.693451408334136e-17], 'false,false': [-8.160613685278929e-17, 4.554761126667309e-17]}
{'': [0.0243750000000005, -5.3828995133340925e-17], 'false': [nan, -5.3828995133340925e-17], 'false,false': [-8.967185968126265e-17, 2.7443715215453307e-17], 'false,false,false': [nan, 2.7443715215453307e-17]}
{'': [0.01249799711584729, 9.227827737144159e-17], 'false': [nan, 9.227827737144159e-17], 'false,false': [nan, 9.227827737144159e-17]}
{'': [0.03009143165772894, 3.922554534953235e-17], 'false': [nan, 3.922554534953235e-17], 'false,false': [nan, 3.922554534953235e-17]}
{'': [0.06632653061224471, 3.81023286557746e-17], 'false': [nan, 3.81023286557746e-17], 'false,false': [nan, 3.81023286557746e-17], 'false,false,false': [nan, 3.81023286557746e-17]}
{'': [0.046400951814395984, 2.030895776753335e-18], 'true': [0.046400951814395984, nan], 'false': [6.558279470359575e-17, -7.93016446160826e-18]}
{'': [0.024375000000000147, -5.49541831587034e-17], 'false': [nan, -5.49541831587034e-17], 'false,false': [nan, -5.49541831587034e-17]}
{'': [0.0063288571544482764, 5.568516737931819e-17], 'false': [-1.4544406436137421e-18, -1.2335811384723961e-17], 'false,false': [nan, -1.2335811384723961e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 53.82546067237854
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.8581489350995115;  // std dev = 3.58e-07, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.7043027812533584;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( tweets(A, H) )
%   | then return -0.1418510649004884;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else return -0.14185106490048766;  // std dev = 7.45e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.698196816466274;  // std dev = 0.989, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.7194734122109546;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.7216148132073369;  // std dev = 0.029, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7494530261603095;  // std dev = 4.21e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.7194734122109543;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839208;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #neg=329 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.5606139838867901;  // std dev = 2.11e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.5560528821088861;  // std dev = 0.037, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.5053664367462847;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.5878235196141076;  // std dev = 0.056, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5857065100863262;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.08570651008632635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.47536643674628465;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   else return -0.11231637819360658;  // std dev = 0.000, 335.000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.4204258668018577;  // std dev = 0.011, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.4286106395293038;  // std dev = 0.031, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(E, A), follows(E, D) )
%   | | | then return 0.28509870856953323;  // std dev = 1.315, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.39595367590294017;  // std dev = 1.394, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.4183760880418548;  // std dev = 0.006, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.41221016249469766;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.45254156027617287;  // std dev = 0.122, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( tweets(A, I) )
%   | then return -0.10159632948783656;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return -0.10159632948783615;  // std dev = 6.18e-09, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.3219960673298328;  // std dev = 0.014, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.33394357242599154;  // std dev = 0.055, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.3374903764796624;  // std dev = 0.056, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.42161058209211566;  // std dev = 0.093, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), follows(I, J) )
%   | | | then return 0.3364973754318673;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.3220493152243326;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.009894557779565752;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3017390876825466;  // std dev = 0.971, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else return -0.09269127618926042;  // std dev = 9.68e-09, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(F, D) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.2595530678392763;  // std dev = 0.076, 88.000 (wgt'ed) examples reached here.  /* #pos=88 */
%   | | | else return 0.17319245363746671;  // std dev = 1.282, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return -0.0769313378724682;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(I, H), follows(I, J) )
%   | | | then return 0.2660738307315002;  // std dev = 0.003, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.2551689442046899;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.286798888200534;  // std dev = 0.082, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.27289889177575205;  // std dev = 0.029, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(M, A) )
%   | then return -0.08518475138839678;  // std dev = 5.59e-09, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else return -0.08518475138839678;  // std dev = 4.17e-09, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.21001356358938952;  // std dev = 0.009, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.21456132373222736;  // std dev = 0.036, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(G, D), follows(G, A) )
%   | | | then return 0.22298644300303605;  // std dev = 0.000332, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.24299156723242285;  // std dev = 0.048, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return 0.2286733510678655;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.01740499783365464;  // std dev = 1.489, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.15166451074704296;  // std dev = 0.997, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.2253484372139019;  // std dev = 0.141, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.07877675473109143;  // std dev = 2.28e-09, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.17803271785568534;  // std dev = 0.034, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.19081521588095213;  // std dev = 0.022, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.19228616563291967;  // std dev = 0.038, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2492040575541792;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, I), tweets(A, J) )
%   | | then if ( follows(I, K), tweets(I, J) )
%   | | | then return 0.14115872216147363;  // std dev = 0.989, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.06332420293036828;  // std dev = 0.825, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.20164199842420802;  // std dev = 0.125, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.185719623543366;  // std dev = 0.022, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.07324622576333693;  // std dev = 6.04e-09, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.15345634449663664;  // std dev = 0.031, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.16307797858691503;  // std dev = 0.019, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.16418295219723514;  // std dev = 0.034, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.20564345249250077;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2087823288702367;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08746909056925173;  // std dev = 1.363, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return 0.16201475445178115;  // std dev = 0.034, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06842697784420318;  // std dev = 0.000, 345.000 (wgt'ed) examples reached here.  /* #neg=345 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.13542776961097905;  // std dev = 0.025, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.13267460934895875;  // std dev = 0.003, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(G, D), follows(G, A) )
%   | | | then return 0.13880792491087457;  // std dev = 0.000229, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1474977430782192;  // std dev = 0.018, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.14461079355516704;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1764531645608654;  // std dev = 0.051, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.142191617812849;  // std dev = 0.025, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.14893684693559073;  // std dev = 0.080, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.06419184008202582;  // std dev = 7.90e-09, 330.000 (wgt'ed) examples reached here.  /* #neg=330 */
Inference time using transfer learning 4.338571071624756
Refined model CLL: -0.087305


******************************************
Best model found
******************************************
Results 

CLL : -0.092893 

AUC ROC : 0.992188 

AUC PR : 0.333333 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 53.82546067237854 

Total Inference Time : 6.081385612487793 

Total revision time: 63.821112871170044
Best scored revision CLL: -0.087129


Results 

CLL : -0.092893 

AUC ROC : 0.992188 

AUC PR : 0.333333 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 63.847752809524536 

Total Inference Time : 6.081385612487793 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5199646949768066
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8273797043302796;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048838;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return -0.14185106490048766;  // std dev = 8.12e-09, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6948722393290376;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839188;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5457382297497095;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360661;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | | else return -0.1123163781936063;  // std dev = 3.16e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.42552655516117327;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783652;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783627;  // std dev = 2.36e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.30999540265840136;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926049;  // std dev = 6.84e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23748222431253968;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.96e-09, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17880840572931536;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 9.31e-08, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14923796080943555;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.13e-07, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return -0.07324622576333707;  // std dev = 1.29e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14909737343502816;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420282;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12134191342176903;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
Inference time using transfer learning 2.2283377647399902
Parameter learned model CLL:-0.092844 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.969, 4, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 195, 0], 'false,false': [8.12e-09, 66, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 245, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 201, 0], 'false,false,false': [3.16e-08, 54, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 198, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.36e-08, 49, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.84e-09, 243, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 250, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.393, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [9.31e-08, 269, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [2.393, 6, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.13e-07, 191, 0], 'false,false': [1.29e-08, 50, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 266, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 210, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 53, 0]}]
{'': [0.02982248520710475, -8.847754372491668e-17], 'false': [-2.3229281746003277e-16, 6.728624391667616e-17], 'false,true': [nan, -2.3229281746003277e-16]}
{'': [0.0298224852071024, -6.706653373245844e-17], 'false': [nan, -6.706653373245844e-17]}
{'': [0.022714981070848017, -9.404242090942502e-17], 'false': [nan, -9.404242090942502e-17], 'false,false': [-4.418798107960822e-17, 1.850371707708594e-17]}
{'': [0.0078120156240299755, -7.191728094737856e-17], 'false': [nan, -7.191728094737856e-17], 'false,false': [-9.420074148334662e-17, 1.1328806373726087e-17], 'false,false,false': [nan, 1.1328806373726087e-17]}
{'': [0.022714981070849287, 4.568819031379245e-17], 'false': [nan, 4.568819031379245e-17], 'false,false': [nan, 4.568819031379245e-17]}
{'': [0.02982248520710047, 3.4638958368304884e-17], 'false': [nan, 3.4638958368304884e-17], 'false,false': [nan, 3.4638958368304884e-17]}
{'': [0.04338842975206625, 3.219234049098967e-17], 'false': [nan, 3.219234049098967e-17], 'false,false': [nan, 3.219234049098967e-17], 'false,false,false': [nan, 3.219234049098967e-17]}
{'': [0.04338842975206622, 4.053926396971526e-17], 'true': [0.04338842975206622, nan], 'false': [6.626462031794128e-17, 3.3306690738754695e-18]}
{'': [0.022714981070849266, -2.253836215404453e-17], 'false': [nan, -2.253836215404453e-17], 'false,false': [nan, -2.253836215404453e-17]}
{'': [0.02982248520710048, 1.6885521287074624e-17], 'false': [-5.286776307738841e-19, -4.7132109535973624e-18], 'false,false': [nan, -4.7132109535973624e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 57.13377904891968
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( follows(G, A), recursion_accounttype(E, B) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.643863220813798;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( tweets(A, J) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return -0.14185106490048766;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.6361400788776209;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.7606300389475332;  // std dev = 5.16e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.7347337483847239;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return 0.6154063031586717;  // std dev = 0.929, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.22784656859004135;  // std dev = 1.573, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.5528067455442875;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | | else return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.12544463852839188;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(F, E), recursion_accounttype(E, B) )
%   | | | then return 0.5626514839744791;  // std dev = 0.069, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.35563112560474147;  // std dev = 1.237, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.5758380177364986;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6095047111841445;  // std dev = 0.102, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.5913526754237857;  // std dev = 0.038, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.6712854025449774;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.5912603964268499;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5562092180720897;  // std dev = 0.015, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.11231637819360693;  // std dev = 0.000, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), tweets(A, F) )
%   | | | then return 0.4198775192780945;  // std dev = 0.085, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.4419924146823311;  // std dev = 0.066, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.23913621259923926;  // std dev = 0.898, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.43085772728722466;  // std dev = 0.008, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return 0.09021692249335961;  // std dev = 1.348, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.376760101588519;  // std dev = 0.931, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.4586582446079463;  // std dev = 0.096, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.36175308182248217;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else return -0.10159632948783656;  // std dev = 0.000, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, E), follows(F, D) )
%   | | | then return 0.24276771304934677;  // std dev = 1.876, 45.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.35422236411636276;  // std dev = 0.197, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.3639515021719433;  // std dev = 0.086, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3318895827192708;  // std dev = 0.011, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.34160825937412675;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.4043401057673492;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.34760272414697624;  // std dev = 0.053, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3327002081877117;  // std dev = 0.002, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.09269127618926047;  // std dev = 5.89e-09, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.25097684186962027;  // std dev = 0.984, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | | else return 0.35997643275677277;  // std dev = 0.076, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), follows(G, E) )
%   | | | then return 0.13396068192744806;  // std dev = 1.277, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.2627877228931995;  // std dev = 0.010, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.19276234066884837;  // std dev = 0.958, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.02507767565283371;  // std dev = 1.432, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0.2736098953299799;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2633366782460826;  // std dev = 0.001, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.08518475138839678;  // std dev = 5.67e-09, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.20420727338278483;  // std dev = 0.995, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.23948207571822522;  // std dev = 0.074, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, G), tweets(D, G) )
%   | | | then return 0.1968180288411401;  // std dev = 0.949, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.0023864770169556015;  // std dev = 1.200, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.3045864509712322;  // std dev = 0.105, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.21542117808956773;  // std dev = 0.002, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.21346805814194902;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, J) )
%   | then return -0.07877675473109144;  // std dev = 3.23e-09, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
%   | else return -0.07877675473109164;  // std dev = 2.63e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | | then return 0.16696767454652445;  // std dev = 0.991, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.2070507848652196;  // std dev = 0.254, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.18125764379894516;  // std dev = 0.000536, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.05558796042120847;  // std dev = 0.909, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.0687020008972607;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.07324622576333686;  // std dev = 6.14e-08, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | | else return -0.07324622576333699;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return -0.073246225763337;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.07657077109329401;  // std dev = 2.073, 51.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=46 */
%   | | | else return 0.1546432449386601;  // std dev = 1.030, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | else return -0.16686220789968131;  // std dev = 0.766, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.15589324031633062;  // std dev = 0.000475, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.16990281566464982;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.18684828163027675;  // std dev = 0.074, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, I) )
%   | then if ( follows(I, A) )
%   | | then return -0.06842697784420261;  // std dev = 4.06e-09, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else return -0.06842697784420262;  // std dev = 2.46e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return -0.06842697784420262;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), follows(E, A) )
%   | | | then return 0.15150920951970595;  // std dev = 0.046, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.08483273028249863;  // std dev = 1.628, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | | else if ( follows(D, F) )
%   | | | then return -0.4896804413896409;  // std dev = 0.778, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.18578367589151235;  // std dev = 0.077, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.17451846713299385;  // std dev = 0.026, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15194131697985275;  // std dev = 0.042, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.13352486261395133;  // std dev = 0.000940, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.14449919177165133;  // std dev = 0.021, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.06419184008202622;  // std dev = 2.79e-09, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
Inference time using transfer learning 14.085395574569702
Refined model CLL: -0.09016


******************************************
Best model found
******************************************
Results 

CLL : -0.084384 

AUC ROC : 0.996482 

AUC PR : 0.525288 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 57.13377904891968 

Total Inference Time : 11.251460790634155 

Total revision time: 71.71142148971558
Best scored revision CLL: -0.09016


Results 

CLL : -0.084384 

AUC ROC : 0.996482 

AUC PR : 0.525288 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 71.73806142807007 

Total Inference Time : 11.251460790634155 

Starting experiments for fasttext using wmd 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.9658536911010742
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8392810105712079;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048824;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7168963089389996;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283921;  // std dev = 0.000, 338.000 (wgt'ed) examples reached here.  /* #neg=338 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5295995720272548;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360683;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | | else return -0.11231637819360621;  // std dev = 6.99e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4101701423219387;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783653;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783613;  // std dev = 5.48e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3263420075702375;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926042;  // std dev = 9.77e-09, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23958176289803265;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18361497475282945;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 8.43e-08, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17182935687314613;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333664;  // std dev = 1.22e-07, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1467075541358756;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420303;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13362901394282922;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 1.83e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
Inference time using transfer learning 1.7647883892059326
Parameter learned model CLL:-0.087675 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.716, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 251, 0], 'false,false': [8.33e-09, 84, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.997, 1, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 338, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 247, 0], 'false,false,false': [6.99e-08, 90, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 203, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.48e-08, 76, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.08, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.77e-09, 314, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 272, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.404, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.43e-08, 303, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.716, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.22e-07, 204, 0], 'false,false': [0.0, 80, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 305, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.112, 2, 156], 'false,true': [1.83e-08, 226, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 73, 0]}]
{'': [0.018511925952302145, 1.166562700501657e-16], 'false': [-1.2384958043627243e-16, 7.401486830834377e-17], 'false,true': [nan, -1.2384958043627243e-16]}
{'': [0.006328857154450192, -9.985437854616793e-17], 'false': [nan, -9.985437854616793e-17]}
{'': [0.03009143165772723, -4.2168708353715146e-17], 'false': [nan, -4.2168708353715146e-17], 'false,false': [-8.98966011842232e-17, 5.427757009278543e-17]}
{'': [0.018511925952297163, -5.889355112706924e-17], 'false': [nan, -5.889355112706924e-17], 'false,false': [-9.188052617587502e-17, 3.944213376957793e-17], 'false,false,false': [nan, 3.944213376957793e-17]}
{'': [0.006328857154448653, 9.758648241928128e-17], 'false': [nan, 9.758648241928128e-17], 'false,false': [nan, 9.758648241928128e-17]}
{'': [0.024375000000000435, 3.673532066774415e-17], 'false': [nan, 3.673532066774415e-17], 'false,false': [nan, 3.673532066774415e-17]}
{'': [0.03566529492455423, 2.3450255305613868e-17], 'false': [nan, 2.3450255305613868e-17], 'false,false': [nan, 2.3450255305613868e-17], 'false,false,false': [nan, 2.3450255305613868e-17]}
{'': [0.018511925952296057, 1.1727708006603766e-17], 'true': [0.018511925952296057, nan], 'false': [7.292641436263283e-17, -5.551115123125783e-18]}
{'': [0.01851192595229622, -5.824120784918854e-17], 'false': [nan, -5.824120784918854e-17], 'false,false': [nan, -5.824120784918854e-17]}
{'': [0.012497997115846897, 4.455744580435411e-17], 'false': [1.4737473778210042e-18, -7.604267291953127e-18], 'false,false': [nan, -7.604267291953127e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 41.5428683757782
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), tweets(A, F) )
%   | | | then return 0.8068668838174602;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.8025933795439567;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return 0.8581489350995121;  // std dev = 2.06e-07, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else if ( tweets(A, H) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | else return -0.14185106490048766;  // std dev = 7.45e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return 0.729706327087814;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.7194734122109542;  // std dev = 5.96e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.7447652478218815;  // std dev = 0.100, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.7305483838299364;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7194734122109547;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return -0.12544463852839205;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, F) )
%   | | then if ( follows(G, A), follows(G, E) )
%   | | | then return 0.5483542780737364;  // std dev = 0.996, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | | else return 0.4450842243949129;  // std dev = 0.936, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.22203310341295093;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.5781646367060235;  // std dev = 0.097, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5663214446559567;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.5553664367462844;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( tweets(A, J) )
%   | then return -0.11231637819360671;  // std dev = 0.000, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( follows(K, A) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.11231637819360633;  // std dev = 1.49e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(D, G) )
%   | | | then return 0.4248083000804991;  // std dev = 0.039, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.4528594809538878;  // std dev = 0.058, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A), follows(A, H) )
%   | | | then return 0.29677538545890897;  // std dev = 0.838, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.45072276482368573;  // std dev = 0.052, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, I), follows(I, A) )
%   | | then if ( follows(A, J), follows(J, I) )
%   | | | then return 0.2219256660871224;  // std dev = 1.205, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.42568871168785183;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(K, A), tweets(A, L) )
%   | | | then return 0.3675135841583098;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.41751358415831014;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.10159632948783615;  // std dev = 8.01e-09, 367.000 (wgt'ed) examples reached here.  /* #neg=367 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.32697767911030384;  // std dev = 0.028, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.3347867222016881;  // std dev = 0.068, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.13996476058951013;  // std dev = 1.179, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.3502514845148978;  // std dev = 0.146, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.3320568695771984;  // std dev = 0.024, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1790702424191189;  // std dev = 1.298, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( follows(J, A), follows(A, J) )
%   | | | then return 0.25435757435439516;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.32180975255534766;  // std dev = 0.023, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.09269127618926047;  // std dev = 9.13e-09, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.22667514560650798;  // std dev = 0.983, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.2609519883205076;  // std dev = 0.050, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.342346084146111;  // std dev = 0.099, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.27361193886338425;  // std dev = 0.134, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.1436195234302865;  // std dev = 0.934, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.3877828615893022;  // std dev = 0.803, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.27701354652261373;  // std dev = 0.046, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.25496363145779105;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(A, E) )
%   | | | then return 0.15362395819542438;  // std dev = 1.375, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | | else return 0.2138349182879665;  // std dev = 0.043, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( follows(D, F), follows(F, D) )
%   | | | then return 0.06384240192515094;  // std dev = 1.379, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.2911119713591979;  // std dev = 0.078, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return 0.24593600602231186;  // std dev = 0.088, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.21812219577371833;  // std dev = 0.059, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.21446221262831383;  // std dev = 0.005, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.20982720985650696;  // std dev = 0.013, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else return -0.07877675473109143;  // std dev = 3.65e-08, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.19530559640774373;  // std dev = 0.014, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.18236217599753707;  // std dev = 0.035, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( tweets(A, G), follows(A, D) )
%   | | | then return 0.17471834452046675;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.18128407422055726;  // std dev = 0.029, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.09984790813077897;  // std dev = 1.325, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.10358054313213445;  // std dev = 0.820, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.18878610836069745;  // std dev = 0.104, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.17724642721803893;  // std dev = 0.011, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.07324622576333721;  // std dev = 0.000, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.1603259328488465;  // std dev = 0.043, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.1526418322458981;  // std dev = 0.027, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.23671812524032224;  // std dev = 0.083, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1605327633320171;  // std dev = 0.088, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.16426964788095955;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.040501825117127174;  // std dev = 0.911, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.11151927142176143;  // std dev = 0.957, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.1556893254735444;  // std dev = 0.044, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.06842697784420308;  // std dev = 0.000, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1407019831384983;  // std dev = 0.041, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.20620511134347286;  // std dev = 0.083, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.1434003586881848;  // std dev = 0.046, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.09619828665942763;  // std dev = 0.924, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return -0.06817672608582402;  // std dev = 1.404, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.19664416005131433;  // std dev = 0.081, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H), follows(I, A) )
%   | | | then return 0.0850395671738791;  // std dev = 0.974, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.1363080724332448;  // std dev = 0.039, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.06419184008202591;  // std dev = 7.15e-09, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
Inference time using transfer learning 4.262866258621216
Refined model CLL: -0.085269


******************************************
Best model found
******************************************
Results 

CLL : -0.090976 

AUC ROC : 0.993287 

AUC PR : 0.352508 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 41.5428683757782 

Total Inference Time : 5.78285026550293 

Total revision time: 51.55096626281738
Best scored revision CLL: -0.085269


Results 

CLL : -0.090976 

AUC ROC : 0.993287 

AUC PR : 0.352508 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 51.56929349899292 

Total Inference Time : 5.78285026550293 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.4724550247192383
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834893121146022;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048832;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6859751824560069;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283918;  // std dev = 0.000, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5693333349006058;  // std dev = 3.94e-08, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360657;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | | else return -0.11231637819360628;  // std dev = 3.80e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.40469868938784237;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783652;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878362;  // std dev = 4.21e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.30217462816918317;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0926912761892605;  // std dev = 7.90e-09, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23134896951898803;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22645739465571427;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 8.94e-08, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15108352370760234;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333666;  // std dev = 1.16e-07, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14389378193373972;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 5.51e-09, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13244003032770027;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
Inference time using transfer learning 2.3092575073242188
Parameter learned model CLL:-0.093374 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.712, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 187, 0], 'false,false': [7.21e-09, 46, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 224, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [3.94e-08, 0, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 194, 0], 'false,false,false': [3.8e-08, 58, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 195, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.21e-08, 62, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [7.9e-09, 254, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 256, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.0, 0, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.94e-08, 260, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [2.193, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.16e-07, 197, 0], 'false,false': [0.0, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 223, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 201, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 61, 0]}]
{'': [0.022714981070853308, -1.9440815195152957e-16], 'false': [-2.1610758340297165e-16, 5.3097622916855314e-17], 'false,true': [nan, -2.1610758340297165e-16]}
{'': [0.03671114736903573, -5.551115123125783e-17], 'false': [nan, -5.551115123125783e-17]}
{'': [1.466199296012905e-15, -9.339971477005285e-17], 'false': [nan, -9.339971477005285e-17], 'false,false': [-3.433679457603577e-17, 2.488430917263282e-17]}
{'': [0.022714981070847743, -6.566299600895868e-17], 'false': [nan, -6.566299600895868e-17], 'false,false': [-9.337260309667983e-17, 2.865091676452017e-17], 'false,false,false': [nan, 2.865091676452017e-17]}
{'': [0.02982248520710076, 6.294177777402462e-17], 'false': [nan, 6.294177777402462e-17], 'false,false': [nan, 6.294177777402462e-17]}
{'': [0.03671114736903457, 3.642919299551295e-17], 'false': [nan, 3.642919299551295e-17], 'false,false': [nan, 3.642919299551295e-17]}
{'': [-4.229421046191072e-17, 3.0744637605004337e-17], 'false': [nan, 3.0744637605004337e-17], 'false,false': [nan, 3.0744637605004337e-17], 'false,false,false': [nan, 3.0744637605004337e-17]}
{'': [0.03671114736903431, 2.896233977283017e-17], 'true': [0.03671114736903431, nan], 'false': [6.875492842856299e-17, -9.912705577010326e-19]}
{'': [0.02271498107084931, 2.98714715145782e-17], 'false': [nan, 2.98714715145782e-17], 'false,false': [nan, 2.98714715145782e-17]}
{'': [0.015380859375000076, 1.52549728574449e-17], 'false': [-1.6570492904853082e-18, -4.550094363217854e-18], 'false,false': [nan, -4.550094363217854e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 42.90305209159851
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8137044906550676;  // std dev = 1.382, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | | else return 0.7152917922423693;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( tweets(A, G) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.7284684500362102;  // std dev = 0.051, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.7203689982442407;  // std dev = 0.030, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5766162693538116;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.5194734122109544;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.1254446385283919;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(F, D) )
%   | | then if ( follows(D, E), tweets(A, G) )
%   | | | then return 0.5347374399640845;  // std dev = 1.393, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | | | else return 0.4172142401708999;  // std dev = 1.857, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | else return -0.08589254377802373;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.5608798086287631;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5785864496700279;  // std dev = 0.050, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.6040520610480192;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, J) )
%   | then return -0.11231637819360658;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else if ( follows(K, A) )
%   | | then return -0.11231637819360632;  // std dev = 3.23e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return -0.1123163781936063;  // std dev = 1.86e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( tweets(A, G), tweets(E, G) )
%   | | | then return 0.42866806572511923;  // std dev = 0.034, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.45122258358500117;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.46919344993080636;  // std dev = 0.041, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( tweets(H, J), follows(A, H) )
%   | | | then return 0.37849698031868173;  // std dev = 0.986, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.22223076291572916;  // std dev = 0.830, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.4442174383436735;  // std dev = 0.031, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3377390427820115;  // std dev = 1.347, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   else if ( tweets(A, L) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else return -0.10159632948783621;  // std dev = 5.10e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.33405203154473817;  // std dev = 0.146, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.2580122271542897;  // std dev = 0.961, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.13057844742928149;  // std dev = 0.918, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.3341464138358142;  // std dev = 0.037, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.34014758540149437;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.34878008221556867;  // std dev = 0.046, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3656113960119175;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, J) )
%   | then return -0.09269127618926057;  // std dev = 3.48e-09, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else return -0.09269127618926104;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.23749051761730536;  // std dev = 0.988, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.2621775521471661;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), follows(H, D) )
%   | | | then return 0.2670152354098145;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2846980127718733;  // std dev = 0.109, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), tweets(I, J) )
%   | | | then return 0.3329565904188521;  // std dev = 0.125, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.28871002920518096;  // std dev = 0.029, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.26842175550302777;  // std dev = 0.040, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.28069458616605086;  // std dev = 0.042, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.08518475138839678;  // std dev = 5.74e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.17100931797499008;  // std dev = 1.380, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.2178570969406504;  // std dev = 0.030, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.25437611854500186;  // std dev = 0.145, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.21973118062582372;  // std dev = 0.065, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return 0.10819539703609593;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, F) )
%   | then if ( follows(F, A) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.07877675473109148;  // std dev = 7.96e-08, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.07877675473109169;  // std dev = 2.28e-09, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return -0.07877675473109168;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, F) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, G) )
%   | | | then return 0.15038742629146698;  // std dev = 1.384, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.19520022624956002;  // std dev = 0.119, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(D, E), follows(E, A) )
%   | | | then return -0.044878150835689544;  // std dev = 1.249, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.14199045002203414;  // std dev = 0.970, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.20135955036134287;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18461645401152213;  // std dev = 0.029, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.20134524542747267;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, I) )
%   | then return -0.07324622576333671;  // std dev = 7.68e-09, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.16439058090590633;  // std dev = 0.039, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.06595393816011719;  // std dev = 0.957, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return -0.5807227606250702;  // std dev = 0.867, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.18702425606997145;  // std dev = 0.065, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.18424069853798014;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1693746793913505;  // std dev = 0.031, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.1580750594669867;  // std dev = 0.028, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1709013117485514;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06842697784420282;  // std dev = 0.000, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.12215808381431952;  // std dev = 1.396, 78.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=76 */
%   | | | else return 0.031176963197471787;  // std dev = 0.950, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.13877881854887364;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.15000179810317793;  // std dev = 0.129, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.036916633917296875;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.06419184008202625;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.06419184008202615;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.06419184008202615;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
Inference time using transfer learning 5.749967575073242
Refined model CLL: -0.091568


******************************************
Best model found
******************************************
Results 

CLL : -0.085434 

AUC ROC : 0.996209 

AUC PR : 0.503806 

Precision : 0.334764 

Recall : 1.0 

F1 : 0.501608 

Total Learning Time : 42.90305209159851 

Total Inference Time : 5.178287506103516 

Total revision time: 51.45450520515442
Best scored revision CLL: -0.091568


Results 

CLL : -0.085434 

AUC ROC : 0.996209 

AUC PR : 0.503806 

Precision : 0.334764 

Recall : 1.0 

F1 : 0.501608 

Total Learning Time : 51.472832441329956 

Total Inference Time : 5.178287506103516 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.0740668773651123
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8392810105712079;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004885;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7106075078424906;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839208;  // std dev = 0.000, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5495457122654601;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360676;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | | else return -0.11231637819360624;  // std dev = 6.05e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.38865875898595564;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783656;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783617;  // std dev = 5.37e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3034015307525042;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926042;  // std dev = 9.77e-09, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2517490584451919;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.18e-09, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20500397403720355;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 9.77e-08, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1592155152328252;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333674;  // std dev = 1.21e-07, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14194113118309143;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420318;  // std dev = 0.000, 347.000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13546413382135533;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
Inference time using transfer learning 1.725234031677246
Parameter learned model CLL:-0.087546 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.716, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 223, 0], 'false,false': [8.93e-09, 86, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 318, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 231, 0], 'false,false,false': [6.05e-08, 77, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.404, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 231, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.37e-08, 83, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.77e-09, 316, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.18e-09, 304, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [9.77e-08, 307, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [2.201, 5, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.21e-07, 242, 0], 'false,false': [0.0, 86, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 347, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 221, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 89, 0]}]
{'': [0.018511925952302145, 5.748727635599516e-17], 'false': [-2.349889092480152e-16, 7.229359230117299e-17], 'false,true': [nan, -2.349889092480152e-16]}
{'': [0.01249799711584864, -1.0334151424183847e-16], 'false': [nan, -1.0334151424183847e-16]}
{'': [0.012497997115845672, -6.920870802858119e-17], 'false': [nan, -6.920870802858119e-17], 'false,false': [-7.882102858810636e-17, 4.7580986769649563e-17]}
{'': [0.03566529492455482, -4.9500389632968764e-17], 'false': [nan, -4.9500389632968764e-17], 'false,false': [-7.882102858810636e-17, 3.477807065090852e-17], 'false,false,false': [nan, 3.477807065090852e-17]}
{'': [0.030091431657729966, 9.41581552530196e-17], 'false': [nan, 9.41581552530196e-17], 'false,false': [nan, 9.41581552530196e-17]}
{'': [0.018511925952296282, 3.7981314000334304e-17], 'false': [nan, 3.7981314000334304e-17], 'false,false': [nan, 3.7981314000334304e-17]}
{'': [0.018511925952296, 3.1100710136079305e-17], 'false': [nan, 3.1100710136079305e-17], 'false,false': [nan, 3.1100710136079305e-17], 'false,false,false': [nan, 3.1100710136079305e-17]}
{'': [0.030091431657729307, 6.769652589177784e-19], 'true': [0.030091431657729307, nan], 'false': [6.055761952500853e-17, -7.10026352957949e-18]}
{'': [0.024375000000000084, -8.894582156939294e-17], 'false': [nan, -8.894582156939294e-17], 'false,false': [nan, -8.894582156939294e-17]}
{'': [0.01249799711584666, 5.08553772570233e-17], 'false': [-2.5118167977944717e-18, -1.1850695206673019e-17], 'false,false': [nan, -1.1850695206673019e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 50.923641204833984
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), tweets(E, F) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | | | else return 0.19148226843284555;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else if ( tweets(A, G) )
%   | | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, J) )
%   | then return -0.1418510649004885;  // std dev = 0.000, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return -0.14185106490048766;  // std dev = 7.88e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.7194734122109542;  // std dev = 1.46e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.7435471781862156;  // std dev = 0.097, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.7336899220885286;  // std dev = 0.106, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.40071486327427047;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6858692931546596;  // std dev = 0.988, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   else return -0.125444638528392;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), follows(E, D) )
%   | | | then return 0.5408548252717094;  // std dev = 1.005, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.3838928933620509;  // std dev = 1.660, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.559233679695833;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.351021414977663;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5361953162672;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.4617621442390606;  // std dev = 1.270, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.5785646614656043;  // std dev = 0.025, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.5637465096137554;  // std dev = 0.026, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.11231637819360692;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.42606449280290865;  // std dev = 0.079, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.2609125592023678;  // std dev = 0.760, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.46887149903907055;  // std dev = 0.129, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.4346953298557303;  // std dev = 0.119, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return 0.4367035227953807;  // std dev = 0.155, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4659462075139846;  // std dev = 0.156, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.3220561529972149;  // std dev = 1.338, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return 0.4238149833223607;  // std dev = 0.026, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783659;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return 0.2928113825082957;  // std dev = 0.791, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.3284099676665629;  // std dev = 0.178, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.1193402061626549;  // std dev = 1.241, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.2829188180677866;  // std dev = 0.714, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.3299905525538896;  // std dev = 0.110, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.3567894421266195;  // std dev = 0.027, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.3397687819714527;  // std dev = 0.013, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.23408713805163142;  // std dev = 0.954, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.09269127618926042;  // std dev = 9.77e-09, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(E, B), tweets(F, D) )
%   | | | then return 0.2723042876661999;  // std dev = 0.234, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.20990211866505148;  // std dev = 1.295, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | else return 0.09627391987468052;  // std dev = 0.926, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return 0.2687607642240585;  // std dev = 0.133, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2532775974456856;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2941993304222687;  // std dev = 0.118, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2740283050437814;  // std dev = 0.026, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( tweets(A, K) )
%   | then return -0.08518475138839675;  // std dev = 5.96e-09, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(F, A) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.19383763604390528;  // std dev = 0.816, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.2728127212354253;  // std dev = 0.113, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.01823121785931936;  // std dev = 1.372, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.19456489931284668;  // std dev = 0.977, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(I, H) )
%   | | | then return 0.2195024650992433;  // std dev = 0.119, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2084306206818349;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.23721214834550056;  // std dev = 0.104, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.22300325461292464;  // std dev = 0.023, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07877675473109143;  // std dev = 2.95e-09, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.18221470872467052;  // std dev = 0.110, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.17543429254951992;  // std dev = 0.009, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(F, A), follows(D, F) )
%   | | | then return 0.23233562360671978;  // std dev = 0.125, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.19397086835175847;  // std dev = 0.112, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.1211299808797413;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.1827087033991624;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.18975980404481207;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, I) )
%   | then return -0.07324622576333668;  // std dev = 8.28e-09, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.1272991210027574;  // std dev = 0.985, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.15257735475406364;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.19367441501965624;  // std dev = 0.110, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.16498697196430598;  // std dev = 0.053, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.1553862744174151;  // std dev = 0.098, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.16617649728006142;  // std dev = 0.005, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.009957347547409012;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.09111217990905258;  // std dev = 1.369, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else return -0.06842697784420294;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), tweets(E, G) )
%   | | | then return 0.13758418957329696;  // std dev = 0.093, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.1490930181833643;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.2705566945056261;  // std dev = 1.611, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.16317436704984067;  // std dev = 0.074, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.1452487914851946;  // std dev = 0.020, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.08166206645717639;  // std dev = 0.777, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.15826763103161626;  // std dev = 0.080, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.14537156481705274;  // std dev = 0.041, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.06419184008202584;  // std dev = 7.68e-09, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
Inference time using transfer learning 5.316433429718018
Refined model CLL: -0.083668


******************************************
Best model found
******************************************
Results 

CLL : -0.090073 

AUC ROC : 0.994379 

AUC PR : 0.409428 

Precision : 0.334218 

Recall : 1.0 

F1 : 0.500994 

Total Learning Time : 50.923641204833984 

Total Inference Time : 7.407300710678101 

Total revision time: 62.533483266830444
Best scored revision CLL: -0.083668


Results 

CLL : -0.090073 

AUC ROC : 0.994379 

AUC PR : 0.409428 

Precision : 0.334218 

Recall : 1.0 

F1 : 0.500994 

Total Learning Time : 62.552486181259155 

Total Inference Time : 7.407300710678101 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5622458457946777
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834893121146022;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6933738906180738;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839188;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5148867225356498;  // std dev = 0.223, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.1123163781936066;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else return -0.11231637819360633;  // std dev = 2.11e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3940547640137197;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783652;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783621;  // std dev = 3.65e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3004232890158541;  // std dev = 0.208, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926046;  // std dev = 7.68e-09, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25060972785628605;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19540564795981735;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 9.42e-08, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17716807410957514;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333668;  // std dev = 1.08e-07, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return -0.07324622576333707;  // std dev = 1.29e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15027388294912403;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420274;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13739750522917013;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
Inference time using transfer learning 2.123286485671997
Parameter learned model CLL:-0.092955 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.712, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 206, 0], 'false,false': [7.9e-09, 54, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 241, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.223, 7, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 199, 0], 'false,false,false': [2.11e-08, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.393, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 194, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.65e-08, 58, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.208, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [7.68e-09, 263, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 243, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [9.42e-08, 262, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.712, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.08e-07, 185, 0], 'false,false': [1.29e-08, 51, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 252, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 169, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 57, 0]}]
{'': [0.022714981070853308, -9.223391281501301e-17], 'false': [-2.3713501496848003e-16, 5.756711979537848e-17], 'false,true': [nan, -2.3713501496848003e-16]}
{'': [0.029822485207101908, -7.923583412262528e-17], 'false': [nan, -7.923583412262528e-17]}
{'': [0.049861495844873344, -8.98966011842232e-17], 'false': [nan, -8.98966011842232e-17], 'false,false': [-4.2400477322367786e-17, 9.25185853854297e-18]}
{'': [0.04338842975206619, -6.696583323135864e-17], 'false': [nan, -6.696583323135864e-17], 'false,false': [-9.614302481290016e-17, 2.2970131543968756e-17], 'false,false,false': [nan, 2.2970131543968756e-17]}
{'': [0.043388429752065805, 5.909932450476118e-17], 'false': [nan, 5.909932450476118e-17], 'false,false': [nan, 5.909932450476118e-17]}
{'': [0.029822485207100416, 3.4723024638482264e-17], 'false': [nan, 3.4723024638482264e-17], 'false,false': [nan, 3.4723024638482264e-17]}
{'': [0.03671114736903435, 3.389993968321089e-17], 'false': [nan, 3.389993968321089e-17], 'false,false': [nan, 3.389993968321089e-17], 'false,false,false': [nan, 3.389993968321089e-17]}
{'': [0.022714981070848832, 4.516161456102332e-17], 'true': [0.022714981070848832, nan], 'false': [6.301265815440077e-17, 3.2653618371328133e-18]}
{'': [0.022714981070849228, -6.1679056923619804e-18], 'false': [nan, -6.1679056923619804e-18], 'false,false': [nan, -6.1679056923619804e-18]}
{'': [0.015380859374999861, 9.824982518806695e-19], 'false': [-5.91243030865468e-18, -4.86939923081209e-18], 'false,false': [nan, -4.86939923081209e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 32.011559009552
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.8581489350995118;  // std dev = 2.31e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( tweets(A, G) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.6960604716015579;  // std dev = 0.989, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.7208090600447787;  // std dev = 0.010, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.7217962780089094;  // std dev = 0.015, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.7261516513800756;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3913342648980488;  // std dev = 1.416, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.6425503352878774;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.752568439653742;  // std dev = 0.097, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.1254446385283919;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F) )
%   | | | then return 0.5538814142276531;  // std dev = 1.009, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | | | else return 0.2454906521186296;  // std dev = 0.749, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(D, G), tweets(A, H) )
%   | | | then return 0.569529700201909;  // std dev = 0.108, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.5607737472456228;  // std dev = 0.108, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.3550365947964231;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( tweets(A, I) )
%   | then return -0.1123163781936067;  // std dev = 0.000, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( follows(J, A) )
%   | | then if ( follows(A, K), follows(K, J) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.11231637819360632;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.1123163781936063;  // std dev = 1.86e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.4052198078743988;  // std dev = 0.991, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.504357869326275;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(D, G), follows(A, G) )
%   | | | then return 0.2726070220877033;  // std dev = 1.606, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.4201572135300261;  // std dev = 0.030, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, H) )
%   | | then return 0.4665513837833223;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.432687958180154;  // std dev = 0.121, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.41607821730029204;  // std dev = 0.000866, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( tweets(A, J) )
%   | then return -0.10159632948783652;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return -0.10159632948783617;  // std dev = 5.59e-09, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(A, E) )
%   | | | then return 0.3088621832528203;  // std dev = 0.990, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.34778252514659824;  // std dev = 0.056, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.3839176426862956;  // std dev = 0.092, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.33986488367219314;  // std dev = 0.103, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.187683869774056;  // std dev = 1.311, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.11338509597899599;  // std dev = 1.035, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.31959459520887945;  // std dev = 0.000619, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3198471532711676;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.09269127618926044;  // std dev = 8.84e-09, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.26444404349741146;  // std dev = 0.024, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.20461127663294557;  // std dev = 0.957, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3166772975913391;  // std dev = 0.196, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2643139432298684;  // std dev = 0.105, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return 0.1681099874532131;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(A, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.08518475138839678;  // std dev = 6.14e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | | else return -0.08518475138839689;  // std dev = 7.45e-09, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.08518475138839678;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return -0.08518475138839682;  // std dev = 2.28e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.19343666624504102;  // std dev = 0.989, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.21264522879705938;  // std dev = 0.008, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(E, F), follows(F, A) )
%   | | | then return 0.08479739334221714;  // std dev = 1.620, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return 0.21468893119771143;  // std dev = 0.095, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.23975228000867763;  // std dev = 0.023, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3178417094022385;  // std dev = 0.095, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.24667250519984063;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.207670492368736;  // std dev = 0.000544, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.07877675473109144;  // std dev = 4.56e-09, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.1850816528920798;  // std dev = 0.022, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.2023083440679753;  // std dev = 0.037, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return -0.15014486539468996;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1875893760297327;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I) )
%   | | | then return 0.2062436303006861;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.27578945901772767;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.21092606405396594;  // std dev = 0.073, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.17330955076622992;  // std dev = 0.012, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333703;  // std dev = 4.66e-09, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.13709755102459947;  // std dev = 0.991, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.1657442581655115;  // std dev = 0.068, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.1809235633650078;  // std dev = 0.067, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.15260984650625195;  // std dev = 0.057, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.16902607897672084;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2097351106019937;  // std dev = 0.062, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return -0.01573333946692318;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.15168796956929348;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.0684269778442028;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(D, F) )
%   | | | then return 0.144614950212384;  // std dev = 0.079, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | | else return 0.18125193790427965;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G), follows(D, A) )
%   | | | then return 0.10041705395216094;  // std dev = 0.963, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.1359234035314058;  // std dev = 0.046, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.03932769274474828;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, H) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.06419184008202623;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.06419184008202622;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06419184008202625;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
Inference time using transfer learning 8.816437721252441
Refined model CLL: -0.093216


******************************************
Best model found
******************************************
Results 

CLL : -0.08718 

AUC ROC : 0.993671 

AUC PR : 0.333333 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 32.011559009552 

Total Inference Time : 6.501626491546631 

Total revision time: 42.04224705696106
Best scored revision CLL: -0.092955


Results 

CLL : -0.08718 

AUC ROC : 0.993671 

AUC PR : 0.333333 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 42.06124997138977 

Total Inference Time : 6.501626491546631 

