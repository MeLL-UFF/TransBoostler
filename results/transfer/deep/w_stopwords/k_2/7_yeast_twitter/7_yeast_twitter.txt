Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.444
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8031030635398779;  // std dev = 2.381, 109.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7082648155574317;  // std dev = 1.406, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02310964411140046;  // std dev = 0.278, 184.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09722869761780853;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7285554015677008;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13119823150249552;  // std dev = 2.955, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5462254482913477;  // std dev = 1.677, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7349738812800964;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.3193056375329319;  // std dev = 1.009, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.3643290406600241;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.571661220550116;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.571661220550116;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.03002268091289136;  // std dev = 0.268, 282.000 (wgt'ed) examples reached here.  /* #neg=250 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5096451047702183;  // std dev = 1.973, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11963317318702116;  // std dev = 0.000259, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13697142027555995;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31111106322620624;  // std dev = 1.541, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.43237894510087654;  // std dev = 0.191, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3115947544916521;  // std dev = 2.58e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6183794335069355;  // std dev = 0.089, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.086869450122968;  // std dev = 2.078, 261.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=9 */
%   | | else return -0.1069702678274145;  // std dev = 1.32e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03179901445520611;  // std dev = 3.345, 272.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26643888374769875;  // std dev = 0.219, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4395683822574584;  // std dev = 1.337, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11096412489828554;  // std dev = 0.040, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.10618430587617868;  // std dev = 0.042, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26253016195286044;  // std dev = 2.129, 111.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=107 */
%   | else return -0.07869049126691978;  // std dev = 1.846, 251.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03417483395466183;  // std dev = 0.626, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20017702389140765;  // std dev = 0.068, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.273525983751036;  // std dev = 0.107, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.043934431543291005;  // std dev = 0.149, 205.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=22 */
%   | | else return 2.2387145150482013E-4;  // std dev = 0.227, 98.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17237457674461382;  // std dev = 0.146, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2608210599973493;  // std dev = 1.014, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09136686741783516;  // std dev = 0.023, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.41001546433888336;  // std dev = 0.505, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09526221907815459;  // std dev = 0.001, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13886048511783303;  // std dev = 2.418, 99.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=94 */
%   | | else return 0.13553553878854543;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08442576740627318;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08377006071334414;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.008916092566382915;  // std dev = 0.609, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.18432213878118978;  // std dev = 1.143, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.014752991740060187;  // std dev = 1.525, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.460', 'seconds']
Parameter learned model CLL:-0.108026 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [2.381, 6, 103], 'true,false,true': [0.0, 176, 0], 'true,false,false': [0.249, 28, 2], 'false,true,true': [0.977, 1, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [7.21e-09, 50, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.406, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.278, 162, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.982, 27, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.955, 39, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.677, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [1.009, 2, 2], 'true,false,false': [0.894, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false': [0.268, 250, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.973, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.000259, 225, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 24, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.541, 2, 73], 'true,false': [0.191, 0, 4], 'false,true,true': [2.58e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.089, 0, 23], 'false,false,true,false': [2.078, 252, 9], 'false,false,false': [1.32e-09, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.345, 181, 91], 'false,true': [0.219, 0, 13], 'false,false,true': [1.337, 1, 22], 'false,false,false,true': [0.04, 32, 0], 'false,false,false,false': [0.042, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.129, 4, 107], 'true,false': [1.846, 240, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.626, 11, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.068, 0, 80], 'true,false,true': [0.107, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 183, 22], 'false,false,false': [0.227, 76, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.146, 2, 77], 'false,true,true,true': [1.014, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.023, 193, 0], 'false,false,true': [0.505, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.001, 44, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [2.418, 5, 94], 'true,true,false': [0.013, 0, 9], 'true,false,true': [0.0, 177, 0], 'true,false,false,true': [3.73e-09, 12, 0], 'true,false,false,false': [0.609, 11, 2], 'false,true': [1.143, 2, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.525, 51, 17]}]
{'': [0.22222222222222435, 0.20659722222222243], 'true': [0.05201582358387565, 0.009614478273164131], 'false': [0.04338842975206614, 5.773159728050814e-17], 'false,true': [0.04338842975206614, nan], 'true,false': [-1.8924256101565169e-16, 0.062222222222222255]}
{'': [0.0235395950807819, 0.10034951211083425], 'false': [0.07711532160621451, 0.1409254768701291], 'false,false': [0.034438775510204085, 0.16772339727928492], 'false,false,false': [0.0, 0.1559146007002036], 'false,true': [nan, 0.07711532160621451], 'false,false,true': [nan, 0.034438775510204085]}
{'': [0.06030531180597522, 0.08697387793411565], 'false': [nan, 0.08697387793411558], 'false,false': [1.5673736818237505e-16, 0.07163370714851942], 'true': [0.03848631030107479, 0.20243597608942168], 'true,false': [0.2543547757405628, 0.16], 'true,true': [0.038532087991284554, 0.0], 'false,false,true': [4.9343245538895844e-17, 0.0]}
{'': [0.030414286822168346, 2.6242554776113775e-05], 'false': [6.683897039789283e-08, 2.3129646346357427e-18], 'false,true': [nan, 6.683897039789283e-08], 'false,false': [nan, 2.3129646346357427e-18], 'false,false,false': [nan, 2.3129646346357427e-18]}
{'': [0.031241029987637736, 0.05245752898572586], 'false': [3.918434204559376e-17, 0.04903664472163788], 'false,false': [0.0522520735831488, 2.64338815386942e-18], 'false,false,true': [0.00034285086863297795, 0.016545999810016393], 'true': [0.031678321906885736, 0.009080509817210564], 'false,true': [3.918434204559376e-17, nan]}
{'': [0.04113043718649598, 0.0756848381300379], 'false': [0.0036741637492321375, 0.07971734198572142], 'false,false': [0.0777766970248907, 5.904515621740857e-05], 'true': [nan, 0.041130437186495956], 'true,false': [nan, 0.04113043718649598], 'false,false,false': [4.980766667832953e-05, 5.6975971571076605e-05]}
{'': [0.046686424735308, 0.020607429659681823], 'true': [0.04083575835470943, 0.013572389193632045], 'false': [nan, 0.020607429659681823], 'false,false': [nan, 0.020607429659681823], 'false,false,false': [nan, 0.020607429659681823]}
{'': [0.00032372605004120266, 0.03217012598268839], 'false': [nan, 0.0321701259826884], 'false,false': [0.022249897457418764, 0.05160234745384135], 'true': [5.813958437837496e-05, 0.005698335981442648], 'true,false': [0.005698335981442648, nan]}
{'': [0.021447982209790425, 0.028786813759277944], 'false': [0.02002141252163995, 0.055506201912526594], 'false,false': [0.015014394863051686, 4.020073729838935e-08], 'false,true': [0.031174865070753073, 2.84508440355757e-06], 'false,true,true': [0.031174865070753073, nan], 'false,false,false': [nan, 4.020073729838935e-08]}
{'': [0.031075725867888503, 0.052034832259183844], 'false': [0.21769917519436613, 0.03420407340370321], 'false,false': [nan, 0.03420407340370321], 'true': [0.05411928096311264, 0.0021818435889841155], 'true,true': [0.05903662183707818, 1.8397353740028253e-05], 'true,false': [-2.258080728051166e-17, 0.01625661896127856], 'true,false,false': [1.1564823173178713e-18, 0.028573232828963308]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 11.501
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.8081489350995125;  // std dev = 1.688, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return -0.09837280403092258;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6941657869693991;  // std dev = 0.185, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.722408698985387;  // std dev = 0.019, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12544463852839113;  // std dev = 7.30e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.0587405818910746;  // std dev = 1.404, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.005292751697935638;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.13029275169793567;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11749636043657541;  // std dev = 2.942, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.542832829596392;  // std dev = 1.256, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return 0.43812040426601234;  // std dev = 1.278, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.6354595655938855;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6370624687137652;  // std dev = 0.300, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.5616066871386471;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.4776379314819146;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(I, A) )
%   | | then return -0.06861697205367745;  // std dev = 0.179, 222.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08187162908461823;  // std dev = 2.146, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.1511998729631814;  // std dev = 1.905, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.44382389320326054;  // std dev = 0.152, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.22215785708711017;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.45179888810793783;  // std dev = 0.084, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I), follows(A, H) )
%   | | | then return 0.5121218241093486;  // std dev = 0.414, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.6413635812571655;  // std dev = 0.313, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6775385976466639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4438035342833798;  // std dev = 1.155, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(K, A) )
%   | then return -0.10795800582850126;  // std dev = 0.079, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else return -0.15493371604203193;  // std dev = 0.028, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.31045239569433547;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.32613544260445015;  // std dev = 0.037, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, F), tweets(D, G) )
%   | | | then return 9.285861705257507E-4;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.28365445314223375;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.38462340474878465;  // std dev = 0.367, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.35012594399187635;  // std dev = 0.021, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.41203573652417197;  // std dev = 1.284, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.07947047745524571;  // std dev = 1.904, 242.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=9 */
%   | | else return -0.09928087358029246;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2745002882319204;  // std dev = 0.013, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return -0.002436171683654176;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2678929745806645;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05444982728021362;  // std dev = 1.414, 147.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=12 */
%   | | | else return -0.03864749072699016;  // std dev = 0.987, 32.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2808212090430496;  // std dev = 0.035, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2904124736985311;  // std dev = 0.337, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.49175365010468186;  // std dev = 0.299, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11482189261388011;  // std dev = 0.015, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(C, E), follows(A, C) )
%   | | | then return 0.15976271662606203;  // std dev = 1.372, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0.06024151969078579;  // std dev = 1.310, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.22783473874530216;  // std dev = 0.013, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.2270763416835622;  // std dev = 0.018, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.3420058001991565;  // std dev = 0.096, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.08635515929619005;  // std dev = 0.060, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.17126360217891448;  // std dev = 1.183, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.006852777062290066;  // std dev = 0.995, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.046017855320499616;  // std dev = 1.392, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.19477863718308946;  // std dev = 0.010, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return 0.1295519760170572;  // std dev = 0.233, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0.23684413402936094;  // std dev = 0.101, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.07097720594779273;  // std dev = 0.053, 140.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=3 */
%   | | else if ( follows(A, H), follows(F, H) )
%   | | | then return -0.029235944791040996;  // std dev = 1.672, 70.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=15 */
%   | | | else return 0.01728941269146991;  // std dev = 0.733, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.19572465800339164;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.006979071052081915;  // std dev = 1.380, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.04817670512512417;  // std dev = 1.191, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.12113795540919947;  // std dev = 1.366, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.16410119367258047;  // std dev = 0.060, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.057261219481030856;  // std dev = 0.327, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.2281542913035662;  // std dev = 0.249, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.0625620876838311;  // std dev = 1.326, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.24774276393853828;  // std dev = 1.010, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.07578183412549508;  // std dev = 0.072, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3630672627383065;  // std dev = 0.061, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11607549166818568;  // std dev = 0.042, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.09787783582014545;  // std dev = 1.920, 75.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=71 */
%   | | | else return 0.22397849306609038;  // std dev = 0.335, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.09872734239851641;  // std dev = 0.191, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06713713146071855;  // std dev = 0.037, 217.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.23983887643649673;  // std dev = 0.070, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.10068084213928291;  // std dev = 0.009, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.21583675160921656;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11071810243211133;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.045201606324892674;  // std dev = 0.211, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.953', 'seconds']
Refined model CLL: -0.102355


******************************************
Best model found
******************************************
Results 

CLL : -0.101206 

AUC ROC : 0.993967 

AUC PR : 0.322879 

Precision : 0.336226 

Recall : 0.99359 

F1 : 0.502431 

Total Learning Time : 11.501 

Total Inference Time : 14.74028754234314 

Total revision time: 36.417060203552246
Best scored revision CLL: -0.102355


Results 

CLL : -0.101206 

AUC ROC : 0.993967 

AUC PR : 0.322879 

Precision : 0.336226 

Recall : 0.99359 

F1 : 0.502431 

Total Learning Time : 36.434110708236695 

Total Inference Time : 14.74028754234314 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.602
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else return -0.07042249347191629;  // std dev = 0.258, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.54e-09, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7248060761505545;  // std dev = 0.203, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03591247776105955;  // std dev = 0.262, 178.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05105353580325149;  // std dev = 1.776, 45.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6136428511256345;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.10258140290981456;  // std dev = 4.617, 146.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5258404664525071;  // std dev = 1.756, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7291378002033149;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.587714206327369;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.47134633188758374;  // std dev = 0.792, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5564011338124953;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.006617997023663488;  // std dev = 0.308, 357.000 (wgt'ed) examples reached here.  /* #neg=300 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.500388966982919;  // std dev = 3.164, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12414315706013744;  // std dev = 0.004, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.137922687344309;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2918317014928271;  // std dev = 1.697, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.4790347123800687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30816756096985026;  // std dev = 0.035, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5433610840496779;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5498584579670427;  // std dev = 1.396, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return -0.0996771006944556;  // std dev = 1.666, 265.000 (wgt'ed) examples reached here.  /* #neg=260 #pos=5 */
%   | | else return 0.014986783152241535;  // std dev = 0.276, 69.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02622894789149316;  // std dev = 3.276, 250.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25728009512215055;  // std dev = 0.198, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.440213162791714;  // std dev = 1.695, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11124190434321787;  // std dev = 0.024, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | | else return -0.11763546162491477;  // std dev = 0.034, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25904318570991497;  // std dev = 2.319, 126.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=121 */
%   | else return -0.08929050312786173;  // std dev = 1.760, 281.000 (wgt'ed) examples reached here.  /* #neg=274 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03432315902640939;  // std dev = 2.163, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19860298675726257;  // std dev = 0.086, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.27281057479720683;  // std dev = 0.027, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05348996346628056;  // std dev = 0.155, 201.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=19 */
%   | | else return 0.007219113355172101;  // std dev = 0.214, 207.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14784851057767667;  // std dev = 0.202, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2791543448275514;  // std dev = 1.129, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0935908916371091;  // std dev = 0.109, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3335619495917943;  // std dev = 1.208, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0984918676287632;  // std dev = 0.085, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17053269095469603;  // std dev = 1.653, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.12492098087895728;  // std dev = 0.819, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08278399813906742;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0985404180475284;  // std dev = 0.026, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.0346189279585136;  // std dev = 0.999, 36.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.0234895229193912;  // std dev = 0.924, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.008654833070389232;  // std dev = 2.211, 148.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.693', 'seconds']
Parameter learned model CLL:-0.106341 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 150, 0], 'true,false,false': [0.258, 52, 4], 'false,true,true': [0.987, 1, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.54e-09, 104, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.203, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.262, 159, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.776, 41, 4], 'false,false,false,true': [0.943, 1, 8], 'false,false,false,false': [4.617, 106, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.756, 3, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.226, 0, 3], 'true,false,false': [0.0, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.792, 1, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false': [0.308, 300, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.164, 6, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.004, 200, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 95, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.697, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.035, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.396, 2, 39], 'false,false,true,false': [1.666, 260, 5], 'false,false,false': [0.276, 56, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.276, 168, 82], 'false,true': [0.198, 0, 22], 'false,false,true': [1.695, 2, 52], 'false,false,false,true': [0.024, 71, 0], 'false,false,false,false': [0.034, 62, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.319, 5, 121], 'true,false': [1.76, 274, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.163, 53, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.086, 0, 83], 'true,false,true': [0.027, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 182, 19], 'false,false,false': [0.214, 155, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.202, 3, 78], 'false,true,true,true': [1.129, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.109, 218, 0], 'false,false,true': [1.208, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.085, 95, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.653, 2, 85], 'true,true,false': [0.819, 1, 19], 'true,false,true': [0.0, 160, 0], 'true,false,false,true': [0.026, 22, 0], 'true,false,false,false': [0.999, 32, 4], 'false,true': [0.924, 1, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.211, 108, 40]}]
{'': [0.22667259436937415, 0.21530180699730955], 'true': [0.009433106575965852, 0.019040437364501738], 'false': [0.019991670137443407, 7.259150545626024e-17], 'false,true': [0.025623268698062793, -1.6148698540002277e-16], 'true,false': [-1.1546319456101628e-16, 0.06632653061224474]}
{'': [0.0004838360483309062, 0.11239971258595167], 'false': [0.06866354036385655, 0.14373888156556996], 'false,false': [0.07012942265315766, 0.15754883786952154], 'false,false,false': [0.09876543209876543, 0.14600696128039511], 'false,false,true': [nan, 0.07012942265315766], 'false,true': [nan, 0.06866354036385655]}
{'': [0.04041427479628385, 0.10606153398668666], 'false': [nan, 0.10606153398668568], 'false,false': [0.030051273702351642, 0.09488494835410709], 'true': [0.04404003480278454, 0.008622402982758182], 'true,true': [0.04404003480278454, nan], 'false,false,true': [0.08951436975478624, -2.3684757858670006e-16], 'true,false': [0.01706956276360024, 0.0]}
{'': [0.061781346152722065, 5.142984736336743e-05], 'false': [1.4712691942504463e-05, -5.609547913895528e-17], 'false,true': [nan, 1.4712691942502243e-05], 'false,false': [nan, -5.609547913895528e-17], 'false,false,false': [nan, -5.609547913895528e-17]}
{'': [0.035998040050751336, 0.06867516974569525], 'false': [0.0025683142222630443, 0.06670909307065158], 'false,false': [0.06439336359618342, 0.0763556938037943], 'false,false,true': [0.04756161967297185, 0.01046891196593494], 'true': [0.03601536163428389, 0.0], 'false,true': [6.263501439042196e-05, 0.0]}
{'': [0.0429353850640951, 0.0746498470389932], 'false': [0.0017764783728686305, 0.0785190636948962], 'false,false': [0.0532203990526909, 2.314892528171339e-05], 'true': [nan, 0.04293538506409511], 'true,false': [nan, 0.0429353850640951], 'false,false,false': [8.359423722684519e-06, 1.8263426776974418e-05]}
{'': [0.04675917836176949, 0.05777747484550764], 'false': [nan, 0.0577774748455078], 'false,false': [nan, 0.05777747484550764], 'false,false,false': [nan, 0.05777747484550764], 'true': [0.0426696355525059, 0.011029333348816858]}
{'': [0.00022189496373736534, 0.035998686797128754], 'false': [nan, 0.03599868679712912], 'false,false': [0.023873514061054948, 0.04595670918798001], 'true': [8.881933531428807e-05, 0.00036733838818224507], 'true,false': [0.00036733838818224507, nan]}
{'': [0.04076660841227545, 0.0333742153595423], 'false': [0.022893768715989873, 0.050085023761822105], 'false,false': [0.03556492993315595, 7.592483702195499e-05], 'false,true': [0.032703025339815874, 5.4771584773393155e-05], 'false,true,true': [0.032703025339815874, nan], 'false,false,false': [nan, 7.592483702195499e-05]}
{'': [0.026449941063252463, 0.036577634485121316], 'false': [0.09492562797824644, 0.03301683032724961], 'false,false': [nan, 0.033016830327249495], 'true': [0.032131784622270114, 0.00494516391421213], 'true,true': [0.03142521200464789, 0.033513812477572756], 'true,false': [-1.5265566588595904e-17, 0.018167092301384927], 'true,false,false': [3.159072486883594e-05, 0.027700053101498028]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
0;false,true;follows(E, F), follows(A, F).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 20.703
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.8311219080724858;  // std dev = 1.395, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | | else return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.12358622471783995;  // std dev = 0.134, 219.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=4 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.14185106490048763;  // std dev = 7.88e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.7081693944094325;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return 0.7422076686843208;  // std dev = 0.195, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.12272685763098523;  // std dev = 1.099, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.7388135977543412;  // std dev = 0.199, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.12746218911737406;  // std dev = 1.49e-07, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.6948866153432078;  // std dev = 0.991, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.1254446385283915;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2805585879425678;  // std dev = 1.265, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.20096115364643136;  // std dev = 2.249, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5650829368681812;  // std dev = 0.138, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.6958088824453911;  // std dev = 0.171, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5650361117552679;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5915050764882467;  // std dev = 0.191, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5639946638773957;  // std dev = 0.022, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.577701228526628;  // std dev = 0.238, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11394648775322834;  // std dev = 6.66e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05489050540991466;  // std dev = 2.737, 76.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=19 */
%   | | | else return 0.10127336931404182;  // std dev = 2.899, 70.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.4220187833671727;  // std dev = 0.057, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | | else return 0.3900140524291761;  // std dev = 0.865, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0.3034902871842788;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(F, B), tweets(A, H) )
%   | | | then return 0.2782886274441959;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5471461328906239;  // std dev = 0.199, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6590907920119369;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4946461191299482;  // std dev = 1.271, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( follows(J, A) )
%   | then return -0.1029382966137578;  // std dev = 1.13e-07, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return -0.1325641920418761;  // std dev = 0.208, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.3028451646722369;  // std dev = 0.988, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.3222721776647963;  // std dev = 0.034, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.3623249447570068;  // std dev = 0.064, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.09750827280327706;  // std dev = 0.823, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3313972330057243;  // std dev = 0.041, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.25933174669596015;  // std dev = 1.178, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.09381376929019856;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.033076208199773825;  // std dev = 2.225, 93.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=25 */
%   | | | else return 0.08287368159540295;  // std dev = 2.233, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.26105572259678056;  // std dev = 0.023, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.1284535312855497;  // std dev = 0.831, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.05191541169126702;  // std dev = 0.107, 149.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=14 */
%   | | else return -0.07405438226015795;  // std dev = 0.064, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.3175690112924154;  // std dev = 0.268, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2563364700891477;  // std dev = 0.023, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.04107294688831003;  // std dev = 1.498, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4399136565022618;  // std dev = 0.437, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.10561860903652938;  // std dev = 0.023, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.216843057513512;  // std dev = 0.029, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(F, D), follows(F, A) )
%   | | | then return -0.07648453386868995;  // std dev = 0.498, 110.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=1 */
%   | | | else return -0.052242100166302693;  // std dev = 0.421, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.23028240211422313;  // std dev = 1.007, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.08058871444725715;  // std dev = 0.014, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B), follows(I, H) )
%   | | | then return 0.2938248841198038;  // std dev = 0.123, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.10917207400196928;  // std dev = 0.895, 77.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0785782832823666;  // std dev = 0.952, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.03392428174120887;  // std dev = 1.429, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.12719157618483523;  // std dev = 1.684, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | | else return 0.10740353935701265;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.1745640842973782;  // std dev = 0.014, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.3415038595607482;  // std dev = 0.051, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04384747950767863;  // std dev = 0.098, 236.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B), follows(I, H) )
%   | | | then return 0.2368400636813564;  // std dev = 0.106, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.10031550681096589;  // std dev = 0.856, 67.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10129996920112037;  // std dev = 0.876, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0.02808230167791135;  // std dev = 1.420, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.16253043564181352;  // std dev = 0.014, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.0027357582059444403;  // std dev = 1.585, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else return 0.16333325534511586;  // std dev = 0.032, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.20949233118551416;  // std dev = 0.075, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.2091682617116112;  // std dev = 0.369, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 1.7546165686684507E-6;  // std dev = 0.923, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.07241347156281583;  // std dev = 0.023, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.27491528366788986;  // std dev = 0.089, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.09886885936388641;  // std dev = 0.030, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.10824863963429468;  // std dev = 0.182, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | | else return 0.21080484227083612;  // std dev = 0.056, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.061465530265849895;  // std dev = 0.048, 215.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.1914951454455078;  // std dev = 0.053, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.08973557362688402;  // std dev = 0.031, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.09027648276308158;  // std dev = 1.001, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.07730890406324425;  // std dev = 1.29e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.0298317999391437;  // std dev = 0.578, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.014345364519525715;  // std dev = 1.134, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.079', 'seconds']
Refined model CLL: -0.095462


******************************************
Best model found
******************************************
Results 

CLL : -0.099878 

AUC ROC : 0.993999 

AUC PR : 0.399438 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 20.703 

Total Inference Time : 13.29128909111023 

Total revision time: 46.59919183731079
Best scored revision CLL: -0.095462


Results 

CLL : -0.099878 

AUC ROC : 0.993999 

AUC PR : 0.399438 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 46.61624234199524 

Total Inference Time : 13.29128909111023 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.368
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else return -0.07288554765910848;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7286615585897837;  // std dev = 0.139, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03584453537311182;  // std dev = 0.264, 206.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09474665508429864;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5366846563336448;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.12283391160105243;  // std dev = 3.000, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5512322877516919;  // std dev = 1.362, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.30622409727838334;  // std dev = 0.605, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8179054425457668;  // std dev = 0.084, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6206064127999152;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5623174528846994;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4512063417735883;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.02785337290339249;  // std dev = 0.270, 279.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48351896062178845;  // std dev = 2.579, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11889208905338462;  // std dev = 0.002, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1362407519544702;  // std dev = 2.11e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29675442154720566;  // std dev = 1.702, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.43002062313314093;  // std dev = 0.171, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3224727629378512;  // std dev = 0.050, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6274109195539762;  // std dev = 0.058, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08472921403504628;  // std dev = 2.128, 255.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=9 */
%   | | else return -0.1077072221854609;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.027927022940871273;  // std dev = 3.378, 282.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1965546681117786;  // std dev = 0.969, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.500453968785041;  // std dev = 0.619, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11013156894945347;  // std dev = 0.027, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.10731542736174005;  // std dev = 0.046, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27979107478341214;  // std dev = 1.643, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07522441095060253;  // std dev = 1.834, 236.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0330455787359092;  // std dev = 0.711, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20103618134911333;  // std dev = 0.093, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22521816422885227;  // std dev = 0.044, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04253557419269537;  // std dev = 0.151, 204.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=22 */
%   | | else return 0.008091826457955215;  // std dev = 0.219, 92.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13955529609647782;  // std dev = 0.229, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2885905078324665;  // std dev = 0.689, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09098810826422206;  // std dev = 0.028, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.40794040524981573;  // std dev = 0.514, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09589180443117994;  // std dev = 0.000800, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16284928826308132;  // std dev = 1.870, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.15107842708775784;  // std dev = 0.000343, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08393909727370781;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0847686559335905;  // std dev = 3.73e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.03524172653563474;  // std dev = 0.493, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14080090676751728;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.025674324878334896;  // std dev = 1.498, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.526', 'seconds']
Parameter learned model CLL:-0.108396 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 182, 0], 'true,false,false': [0.253, 27, 2], 'false,true,true': [1.351, 2, 21], 'false,true,false': [0.0, 1, 0], 'false,false': [7.9e-09, 52, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.139, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 184, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.981, 25, 1], 'false,false,false,true': [0.894, 1, 4], 'false,false,false,false': [3.0, 42, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.362, 2, 70], 'true,true,false': [0.605, 1, 1], 'true,false,true': [0.084, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false': [0.27, 247, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.579, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.002, 213, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.11e-08, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.702, 3, 73], 'true,false': [0.171, 0, 4], 'false,true,true': [0.05, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.058, 0, 23], 'false,false,true,false': [2.128, 246, 9], 'false,false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.378, 191, 91], 'false,true': [0.969, 1, 13], 'false,false,true': [0.619, 0, 22], 'false,false,false,true': [0.027, 25, 0], 'false,false,false,false': [0.046, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.643, 2, 107], 'true,false': [1.834, 225, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.711, 13, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.093, 0, 80], 'true,false,true': [0.044, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.151, 182, 22], 'false,false,false': [0.219, 70, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.229, 4, 77], 'false,true,true,true': [0.689, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.028, 209, 0], 'false,false,true': [0.514, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0008, 43, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.87, 3, 94], 'true,true,false': [0.000343, 0, 9], 'true,false,true': [0.0, 180, 0], 'true,false,false,true': [3.73e-09, 16, 0], 'true,false,false,false': [0.493, 13, 2], 'false,true': [0.031, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.498, 44, 17]}]
{'': [0.22116411534354072, 0.19996537396121908], 'true': [0.03598567560485849, 0.009388827744210432], 'false': [0.10937500000000015, 5.551115123125783e-17], 'false,true': [0.07939508506616269, 0.0], 'true,false': [-2.049642507000289e-16, 0.06420927467300835]}
{'': [0.00023555512808925982, 0.0944707313138302], 'false': [0.0697800298899655, 0.14116057191766587], 'false,false': [0.03698224852071011, 0.16544007437677477], 'false,false,false': [0.1600000000000001, 0.1525204383387532], 'false,true': [nan, 0.0697800298899655], 'false,false,true': [nan, 0.03698224852071011]}
{'': [0.03134304973974267, 0.08801257890491841], 'false': [nan, 0.08801257890491837], 'false,false': [0.05246913580246905, 0.07298367474116736], 'false,false,true': [-4.9343245538895844e-17, 0.09876543209876543], 'true': [0.031580225632040895, 0.009828568968726378], 'true,true': [0.025751624538589566, 0.1830032573648239], 'true,false': [0.003534435480409215, 0.0]}
{'': [0.05077440891807875, 4.411659989373592e-05], 'false': [3.243112908648715e-06, 1.057355261547768e-17], 'false,true': [nan, 3.2431129086445452e-06], 'false,false': [nan, 1.057355261547768e-17], 'false,false,false': [nan, 1.057355261547768e-17]}
{'': [0.03739728324800122, 0.05619376909961425], 'false': [0.00014705780446110176, 0.05263135271762992], 'false,false': [0.05479290710945725, -2.135044278125301e-18], 'false,false,true': [0.00014871350274981842, 0.01776367783373939], 'true': [0.038094144126779556, 0.007285040090327932], 'false,true': [0.00014705780446110176, nan]}
{'': [0.04046054744899202, 0.07349347179667397], 'false': [0.06707770930910777, 0.07107391301001495], 'false,false': [0.017389641598911633, 4.2036340532147465e-05], 'true': [nan, 0.04046054744899148], 'true,false': [nan, 0.04046054744899202], 'false,false,false': [2.9532896512862727e-05, 4.603920693623157e-05]}
{'': [0.04481370883222387, 0.02409250699097481], 'true': [0.02475810490251007, 0.014256610423264671], 'false': [nan, 0.02409250699097481], 'false,false': [nan, 0.02409250699097481], 'false,false,false': [nan, 0.02409250699097481]}
{'': [0.00014331445433909216, 0.031013366106360782], 'false': [nan, 0.0310133661063611], 'false,false': [0.02266414881377143, 0.04776036389488707], 'true': [0.00010796955661086516, 0.000986604708838136], 'true,false': [0.000986604708838136, nan]}
{'': [0.052397696033378405, 0.027237543250615684], 'false': [0.0185665277607883, 0.05594327916397352], 'false,false': [0.015523221511683694, 1.4894996099572772e-08], 'false,true': [0.014855400163073115, 3.7941805580661855e-06], 'false,true,true': [0.014855400163073115, nan], 'false,false,false': [nan, 1.4894996099572772e-08]}
{'': [0.02498217227741521, 0.03531217656288817], 'false': [0.00024789736422621556, 0.03679583479906103], 'false,false': [nan, 0.03679583479906103], 'true': [0.03300169038350213, 0.0013073288063898739], 'true,true': [0.03605193772981914, 1.30934670513246e-08], 'true,false': [-4.934324553889585e-18, 0.008441674125039263], 'true,false,false': [8.673617379884035e-19, 0.016180104984131416]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
0;false,true;follows(E, F), follows(A, F).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 10.788
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.7956489350995123;  // std dev = 1.369, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(I, J), follows(A, J) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A) )
%   | | then return 0.7218171383442172;  // std dev = 0.005, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else return 0.75193608363723;  // std dev = 0.104, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.6083623010998431;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), tweets(A, G) )
%   | | then return 0.7444523422047076;  // std dev = 0.110, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10486805065859421;  // std dev = 1.467, 125.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=3 */
%   | | | else return -0.019129674536860684;  // std dev = 2.787, 91.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07938397983266234;  // std dev = 2.080, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.09821013960849453;  // std dev = 2.174, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5402471344408479;  // std dev = 0.131, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | else return 0.5548703037566967;  // std dev = 0.000203, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.6101899950099078;  // std dev = 0.078, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.561747362842072;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.47149689278296475;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.09772339683073938;  // std dev = 1.486, 156.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=3 */
%   | | | else return 0.0013188037210984127;  // std dev = 2.749, 80.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17847232638832153;  // std dev = 1.984, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | | else return 0.19875259414947682;  // std dev = 1.833, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.3195281139665784;  // std dev = 2.121, 50.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=45 */
%   | | | else return 0.5016130918777113;  // std dev = 0.162, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.42387587725576;  // std dev = 0.010, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.4222953288246867;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4655526248316698;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.7397984283566006;  // std dev = 0.061, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.604946180402171;  // std dev = 0.968, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else if ( follows(J, A) )
%   | then return -0.11215551137765556;  // std dev = 0.012, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return -0.15861215864010006;  // std dev = 0.002, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.3243050983365142;  // std dev = 0.130, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.20781480386482354;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.3190956822296618;  // std dev = 0.000588, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A) )
%   | | then return -0.03011600655645709;  // std dev = 0.977, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.31885881564502283;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.33788342724902015;  // std dev = 0.016, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.47667086999163144;  // std dev = 1.351, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.08285491703734915;  // std dev = 1.840, 226.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=9 */
%   | | else return -0.0947818504610452;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27109895902456643;  // std dev = 0.009, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.041370987667748285;  // std dev = 2.024, 144.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=16 */
%   | | | else return -0.005987726663318024;  // std dev = 0.502, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.03824205936396365;  // std dev = 0.157, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.3077761028513954;  // std dev = 0.181, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.27651776445451237;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.1187077673375674;  // std dev = 0.992, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4703889699811661;  // std dev = 0.274, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11851582235905045;  // std dev = 0.019, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.17041224141372902;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.220251134759594;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2187188229319708;  // std dev = 0.002, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.22270374647022095;  // std dev = 0.033, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then return -0.04919125270657058;  // std dev = 0.148, 265.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.27803629812877156;  // std dev = 0.088, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11551114105039421;  // std dev = 0.005, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.04817640503902842;  // std dev = 0.891, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.05806147172100402;  // std dev = 1.002, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), tweets(F, E) )
%   | | | then return 0.1566372941500956;  // std dev = 1.383, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return 0.1905115786837238;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.11439636005835867;  // std dev = 0.248, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.253288474017138;  // std dev = 0.120, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.03220401349370828;  // std dev = 0.159, 215.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=23 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.28347605302614504;  // std dev = 0.312, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11124520131519831;  // std dev = 0.048, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.008943822931739613;  // std dev = 0.485, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.030999424188062032;  // std dev = 1.015, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.147368759129412;  // std dev = 0.987, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.16090157856125006;  // std dev = 0.007, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.17549127480585008;  // std dev = 0.032, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.26112707509604477;  // std dev = 0.084, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15624293276434084;  // std dev = 0.034, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.4874930375338742;  // std dev = 0.083, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08443444549698814;  // std dev = 0.009, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.29412696788605663;  // std dev = 0.083, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.10888826238507218;  // std dev = 0.014, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.11898396841840936;  // std dev = 1.399, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | | else return 0.2850926038421146;  // std dev = 0.996, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return 0.14175256365778693;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07630059849701583;  // std dev = 0.055, 211.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.131305888620488;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.16476372880635634;  // std dev = 0.049, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08583979768006966;  // std dev = 0.016, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06811135857433581;  // std dev = 0.564, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.06739000386537376;  // std dev = 0.754, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.128', 'seconds']
Refined model CLL: -0.106209


******************************************
Best model found
******************************************
Results 

CLL : -0.102768 

AUC ROC : 0.99467 

AUC PR : 0.359704 

Precision : 0.3379 

Recall : 0.948718 

F1 : 0.498316 

Total Learning Time : 10.788 

Total Inference Time : 10.729824304580688 

Total revision time: 32.632590394973754
Best scored revision CLL: -0.106209


Results 

CLL : -0.102768 

AUC ROC : 0.99467 

AUC PR : 0.359704 

Precision : 0.3379 

Recall : 0.948718 

F1 : 0.498316 

Total Learning Time : 32.66328368759155 

Total Inference Time : 10.729824304580688 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.703
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else return -0.0716756263039965;  // std dev = 0.255, 57.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7248094852435107;  // std dev = 0.203, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04654996220866329;  // std dev = 0.248, 202.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04641579544597998;  // std dev = 1.781, 41.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6136428511256345;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.12213378996715032;  // std dev = 4.519, 137.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5425669667710037;  // std dev = 1.349, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7290879276589636;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4766030952162579;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5901565835496897;  // std dev = 0.185, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5564002923837188;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 5.802876924111678E-4;  // std dev = 0.303, 371.000 (wgt'ed) examples reached here.  /* #neg=314 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5186251840981251;  // std dev = 2.569, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12286190020753941;  // std dev = 0.005, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13953745987438826;  // std dev = 7.30e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29157490995224294;  // std dev = 1.520, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.4748096028036958;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29799666718645135;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5095199427217703;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5940748205925103;  // std dev = 0.109, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.09847317433839059;  // std dev = 1.649, 271.000 (wgt'ed) examples reached here.  /* #neg=266 #pos=5 */
%   | | else return 0.005893408659578496;  // std dev = 0.268, 73.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.035703053355630704;  // std dev = 3.118, 231.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25060678709379913;  // std dev = 0.183, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.3895491806859997;  // std dev = 2.351, 56.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11214963333770196;  // std dev = 0.033, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | | else return -0.11699849928496751;  // std dev = 0.045, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2818162889149671;  // std dev = 1.348, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.08547340878816605;  // std dev = 1.612, 254.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04384616364350552;  // std dev = 2.021, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.165801212451882;  // std dev = 1.387, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2582062584778989;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.041979564992131325;  // std dev = 0.149, 171.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=19 */
%   | | else return 0.006711041586721112;  // std dev = 0.212, 209.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1601455503349265;  // std dev = 0.152, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2366514769822991;  // std dev = 1.664, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09519967811174668;  // std dev = 0.112, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3335207059072205;  // std dev = 1.080, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10077263100775039;  // std dev = 0.087, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17696742895358178;  // std dev = 1.152, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.1686365882722048;  // std dev = 0.421, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08347016077883926;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09690414161537357;  // std dev = 0.039, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.01874155755800335;  // std dev = 0.995, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.040127446824977375;  // std dev = 0.894, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.012041707643755457;  // std dev = 2.111, 146.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.209', 'seconds']
Parameter learned model CLL:-0.107331 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 153, 0], 'true,false,false': [0.255, 53, 4], 'false,true,true': [0.987, 1, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.93e-09, 93, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.203, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.248, 183, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.781, 37, 4], 'false,false,false,true': [0.943, 1, 8], 'false,false,false,false': [4.519, 97, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.349, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.226, 0, 3], 'true,false,false': [0.943, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.185, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false': [0.303, 314, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.569, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.005, 215, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.3e-08, 93, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.52, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.109, 0, 39], 'false,false,true,false': [1.649, 266, 5], 'false,false,false': [0.268, 60, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.118, 149, 82], 'false,true': [0.183, 0, 22], 'false,false,true': [2.351, 4, 52], 'false,false,false,true': [0.033, 78, 0], 'false,false,false,false': [0.045, 76, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.348, 1, 121], 'true,false': [1.612, 247, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.021, 53, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [1.387, 2, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 152, 19], 'false,false,false': [0.212, 157, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.152, 2, 78], 'false,true,true,true': [1.664, 2, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.112, 210, 0], 'false,false,true': [1.08, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.087, 86, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.152, 1, 85], 'true,true,false': [0.421, 0, 19], 'true,false,true': [0.0, 156, 0], 'true,false,false,true': [0.039, 30, 0], 'true,false,false,false': [0.995, 23, 4], 'false,true': [0.894, 1, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.111, 106, 40]}]
{'': [0.225306122448982, 0.22376512596707077], 'true': [0.009433106575965852, 0.01868480725623573], 'false': [0.019991670137443407, 7.879002110243047e-17], 'false,true': [0.025623268698062793, -1.6148698540002277e-16], 'true,false': [-1.248093857748542e-16, 0.06525084641428117]}
{'': [0.0004848026749460179, 0.10930920120232987], 'false': [0.06134473685654019, 0.14858339564624257], 'false,false': [0.07737596978191937, 0.1599106803340668], 'false,false,false': [0.09876543209876543, 0.14903553231649194], 'false,false,true': [nan, 0.07737596978191937], 'false,true': [nan, 0.06134473685654019]}
{'': [0.03585178899600773, 0.10310280412510535], 'false': [nan, 0.10310280412510633], 'false,false': [0.0018603872543375964, 0.09170402763137814], 'true': [0.026383688132632904, 0.0902864853709544], 'true,false': [0.017038202227305527, 0.09876543209876548], 'true,true': [0.026383688132632904, nan], 'false,false,true': [0.0056974359664091105, -1.1842378929335003e-16]}
{'': [0.04149180905309953, 7.816749916193385e-05], 'false': [2.8015496948100595e-05, 5.730183352904034e-17], 'false,true': [nan, 2.8015496948096465e-05], 'false,false': [nan, 5.730183352904034e-17], 'false,false,false': [nan, 5.730183352904034e-17]}
{'': [0.028919049284540428, 0.06527504226419287], 'false': [0.002037963471589318, 0.0635475596564859], 'false,false': [0.061557224017175, 0.0717591139352207], 'false,false,true': [0.00030586370671478665, 0.01003236224642667], 'true': [0.02886603181214824, 0.0], 'false,true': [9.285640731138134e-06, 0.0]}
{'': [0.04209815354857074, 0.07353476950535418], 'false': [0.001528432995034054, 0.07603024079541061], 'false,false': [0.09869610169364333, 2.5841996566293164e-05], 'true': [nan, 0.04209815354857135], 'true,false': [nan, 0.04209815354857074], 'false,false,false': [1.3900964387616511e-05, 2.6188843862269623e-05]}
{'': [0.041312496617590955, 0.05044820880022858], 'false': [nan, 0.0504482088002285], 'false,false': [nan, 0.05044820880022858], 'false,false,false': [nan, 0.05044820880022858], 'true': [0.014886724672038248, 0.010233886801732017]}
{'': [0.022294422713437317, 0.03520405684941458], 'false': [nan, 0.03520405684941443], 'false,false': [0.02220266862346652, 0.044774707480950984], 'true': [0.022620363366752716, 9.9544198785953e-05], 'true,false': [9.9544198785953e-05, nan]}
{'': [0.0230794656564716, 0.03568762699831427], 'false': [0.02593206588170124, 0.05048294215406249], 'false,false': [0.028470465276492767, 8.719321853840146e-05], 'false,true': [0.06925608390836248, 5.9841709900457624e-05], 'false,true,true': [0.06925608390836248, nan], 'false,false,false': [nan, 8.719321853840146e-05]}
{'': [0.02231398237832348, 0.033955261168285004], 'false': [0.08879329209170321, 0.030529032806395424], 'false,false': [nan, 0.030529032806395278], 'true': [0.014338585013891823, 0.005174380556147528], 'true,true': [0.015437306919644176, 0.009308578418354313], 'true,false': [-4.127752271042249e-17, 0.018928260522202357], 'true,false,false': [5.104844609167825e-05, 0.036687472424387885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
0;false,true;follows(E, F), follows(A, F).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 12.248
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(E, A) )
%   | | | then return 0.8368723393548312;  // std dev = 0.989, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return -0.09639651944594228;  // std dev = 1.382, 44.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=2 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(I, J), follows(A, J) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048766;  // std dev = 7.88e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6917947318632705;  // std dev = 0.173, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else return 0.7289516160539681;  // std dev = 0.030, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, E), follows(A, F) )
%   | | | then return 0.5528067455442878;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7361411596184156;  // std dev = 0.200, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.12720997118104974;  // std dev = 0.006, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.6900616475050725;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.12544463852839152;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.29701438684128156;  // std dev = 1.195, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.18435864674270172;  // std dev = 2.230, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then return 0.5440357207478722;  // std dev = 0.147, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | else return 0.571396761742951;  // std dev = 0.028, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.5887555218871391;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5778360497569989;  // std dev = 0.126, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.49052472933549407;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10865405756417264;  // std dev = 0.663, 148.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=1 */
%   | | | else return 0.00126351573138737;  // std dev = 2.485, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.053108442045061384;  // std dev = 2.932, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.1184590292946009;  // std dev = 2.622, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.4305428234679856;  // std dev = 0.056, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.5368388283866099;  // std dev = 0.164, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3054355231683689;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(H, F) )
%   | | | then return 0.4265614737526745;  // std dev = 0.034, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.4575834897555694;  // std dev = 0.118, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.5507123966731806;  // std dev = 0.028, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.6431918722722497;  // std dev = 0.182, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(K, A) )
%   | then return -0.10735549570402567;  // std dev = 0.009, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else return -0.13109202640045328;  // std dev = 0.022, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.31851301206846444;  // std dev = 0.128, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.252403574686894;  // std dev = 0.961, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.01137051680296434;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.4266979961229038;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33118335103559887;  // std dev = 0.027, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3897591681864009;  // std dev = 0.961, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.09154276045612494;  // std dev = 1.371, 264.000 (wgt'ed) examples reached here.  /* #neg=259 #pos=5 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return -0.0973706188008961;  // std dev = 0.689, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | | else return 0.015342919359972524;  // std dev = 1.898, 49.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26585806084978886;  // std dev = 0.005, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3205244924501757;  // std dev = 0.074, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08809267298939377;  // std dev = 0.053, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | else return -0.07019033004533701;  // std dev = 0.088, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.27104679090602624;  // std dev = 0.049, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1988000083211503;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.19989347208825006;  // std dev = 2.187, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   | | | else return 0.39155251243826744;  // std dev = 0.397, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.1065065651442144;  // std dev = 0.022, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, C) )
%   | then return 0.21449352463422855;  // std dev = 0.007, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else return 0.23212377005071727;  // std dev = 0.021, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, F), tweets(A, H) )
%   | | | then return 0.2510896475332964;  // std dev = 0.062, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.39790299041137167;  // std dev = 0.235, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.08258857427507105;  // std dev = 0.006, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2326043526611315;  // std dev = 1.473, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return -0.09724664619400272;  // std dev = 0.119, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.026284171261649385;  // std dev = 1.013, 41.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=14 */
%   | | | else return -0.0018241839190494982;  // std dev = 1.629, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.1426106342471201;  // std dev = 1.388, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return -0.17027216911183574;  // std dev = 0.840, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1860814344245;  // std dev = 0.005, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.2424645537214185;  // std dev = 0.022, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.05018710101996222;  // std dev = 0.105, 237.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=23 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.17305469760003872;  // std dev = 1.002, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.07563511892918215;  // std dev = 0.944, 39.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=2 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.04721144234412311;  // std dev = 0.837, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.036082659258617596;  // std dev = 1.640, 65.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=23 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16142201155135316;  // std dev = 0.007, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(E, A) )
%   | | then return 0.06793116468114731;  // std dev = 0.358, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.012163209317968637;  // std dev = 0.409, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1614644977929703;  // std dev = 0.070, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.24724036598542665;  // std dev = 0.287, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07290485947867834;  // std dev = 0.006, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.18081063885451265;  // std dev = 0.970, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.38891114479356353;  // std dev = 0.033, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.09400846961402681;  // std dev = 0.022, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.11264650725913972;  // std dev = 0.190, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else return -0.06305019380852142;  // std dev = 0.049, 218.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=4 */
%   else if ( tweets(A, E), follows(A, F) )
%   | then if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | then if ( tweets(H, E), follows(F, H) )
%   | | | then return 0.1244328814390328;  // std dev = 0.972, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.2702566764449377;  // std dev = 0.113, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07366015801026084;  // std dev = 0.013, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.2085698647778935;  // std dev = 0.064, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.0851013610942739;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.014918668083902695;  // std dev = 0.496, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.0021568714517565045;  // std dev = 1.184, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.642', 'seconds']
Refined model CLL: -0.095467


******************************************
Best model found
******************************************
Results 

CLL : -0.099059 

AUC ROC : 0.993127 

AUC PR : 0.354988 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 12.248 

Total Inference Time : 19.415151357650757 

Total revision time: 43.54882338142395
Best scored revision CLL: -0.095467


Results 

CLL : -0.099059 

AUC ROC : 0.993127 

AUC PR : 0.354988 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 43.57951667404175 

Total Inference Time : 19.415151357650757 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.311
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else return -0.05489454316135737;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7030017781572;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04009479953478855;  // std dev = 0.260, 214.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09529924511358065;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.10223627654142615;  // std dev = 2.978, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5663941137325764;  // std dev = 1.080, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7330686317538225;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8176621196425771;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6040520610480189;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5663933889921533;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.36639338899215335;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return -0.0349554685731956;  // std dev = 0.259, 300.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4886782983544307;  // std dev = 2.425, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11788394180174139;  // std dev = 0.001, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13301379083531198;  // std dev = 2.58e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3053044907338306;  // std dev = 1.517, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.2534037489846311;  // std dev = 0.650, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.33355500967786567;  // std dev = 0.092, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.62161167213101;  // std dev = 0.092, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08395745521741213;  // std dev = 2.076, 260.000 (wgt'ed) examples reached here.  /* #neg=251 #pos=9 */
%   | | else return -0.10880235971314771;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.038140351092257205;  // std dev = 3.291, 262.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.21030673341593578;  // std dev = 0.970, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4370778454025677;  // std dev = 1.318, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10691476225353734;  // std dev = 0.030, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.10575953090901859;  // std dev = 0.031, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27447349116828534;  // std dev = 1.758, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07573575054924506;  // std dev = 1.838, 240.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.037374679792638296;  // std dev = 0.742, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18749150825922567;  // std dev = 1.005, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.24151468200956155;  // std dev = 0.069, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04129393316092716;  // std dev = 0.151, 197.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=22 */
%   | | else return 0.024425725764777445;  // std dev = 0.216, 85.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16319717990117744;  // std dev = 0.170, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2684743788746078;  // std dev = 1.005, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09137409296877447;  // std dev = 0.024, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4050242136026481;  // std dev = 0.507, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0954056337389604;  // std dev = 0.000287, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16218815200954073;  // std dev = 1.751, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.16321105912245829;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0840148829531145;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08729107639647166;  // std dev = 9.13e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.06826238528699842;  // std dev = 0.769, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.055087415235306116;  // std dev = 0.909, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.004198476911905996;  // std dev = 1.570, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.580', 'seconds']
Parameter learned model CLL:-0.108153 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 169, 0], 'true,false,false': [0.282, 21, 2], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.97e-09, 44, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.26, 192, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.98, 24, 1], 'false,false,false,true': [0.894, 1, 4], 'false,false,false,false': [2.978, 46, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.08, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [1.265, 2, 8], 'false,false,false': [0.259, 268, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.425, 4, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.001, 210, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.58e-08, 48, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.517, 2, 73], 'true,false': [0.65, 1, 4], 'false,true,true': [0.092, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.092, 0, 23], 'false,false,true,false': [2.076, 251, 9], 'false,false,false': [0.0, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.291, 171, 91], 'false,true': [0.97, 1, 13], 'false,false,true': [1.318, 1, 22], 'false,false,false,true': [0.03, 26, 0], 'false,false,false,false': [0.031, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.758, 2, 107], 'true,false': [1.838, 229, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.742, 13, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [1.005, 1, 80], 'true,false,true': [0.069, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.151, 175, 22], 'false,false,false': [0.216, 63, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.17, 2, 77], 'false,true,true,true': [1.005, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.024, 222, 0], 'false,false,true': [0.507, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.000287, 36, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.751, 3, 94], 'true,true,false': [0.011, 0, 9], 'true,false,true': [0.0, 173, 0], 'true,false,false,true': [9.13e-09, 22, 0], 'true,false,false,false': [0.769, 13, 2], 'false,true': [0.909, 1, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.57, 55, 17]}]
{'': [0.2281991802171097, 0.21869822485207113], 'true': [0.027500889996442155, 0.010308159722222057], 'false': [0.0, 4.794144879063176e-17], 'true,false': [-1.708035422500241e-16, 0.07939508506616262], 'false,true': [0.0, nan]}
{'': [0.02355081912827202, 0.08997559233489016], 'false': [0.06740798692085832, 0.13321398543430926], 'false,false': [0.03840000000000001, 0.1540715415118934], 'false,false,false': [0.16000000000000006, 0.14080052692011108], 'false,true': [nan, 0.06740798692085832], 'false,false,true': [nan, 0.03840000000000001]}
{'': [0.016980432161932624, 0.08255966256936115], 'false': [nan, 0.08255966256936126], 'false,false': [0.09418282548476427, 0.06716547435085511], 'false,false,true': [-9.868649107779169e-17, 0.1599999999999999], 'true': [0.016584421880547713, 0.011253666024685508], 'true,true': [0.016432166468460276, 0.0], 'true,false': [0.00334149331887601, 0.0]}
{'': [0.045242588242749446, 3.570867590366242e-05], 'false': [1.2823181714038428e-06, 1.3877787807814457e-17], 'false,true': [nan, 1.2823181714038428e-06], 'false,false': [nan, 1.3877787807814457e-17], 'false,false,false': [nan, 1.3877787807814457e-17]}
{'': [0.034204778009172175, 0.05336828566289742], 'false': [0.0004932780283428825, 0.049236804583019676], 'false,false': [0.05242380017634148, -6.6084703846735505e-18], 'false,false,true': [0.00036941460976652496, 0.016569108557951687], 'true': [0.0306828742031148, 0.08450800354304973], 'false,true': [0.0004932780283428825, nan]}
{'': [0.0413494623499176, 0.08164089167830528], 'false': [0.06727421055443374, 0.08008687313609864], 'false,false': [0.07551940855258099, 3.084774309155732e-05], 'true': [nan, 0.04134946234991764], 'true,false': [nan, 0.0413494623499176], 'false,false,false': [3.351223128949447e-05, 2.823188419403283e-05]}
{'': [0.044877177053609, 0.026230625328953556], 'true': [0.02836905762041405, 0.014069543238985396], 'false': [nan, 0.026230625328953556], 'false,false': [nan, 0.026230625328953556], 'false,false,false': [nan, 0.026230625328953556]}
{'': [0.012284087495149365, 0.030980240599206045], 'false': [nan, 0.030980240599205993], 'false,false': [0.022898655518423773, 0.046693277339284106], 'true': [0.012457662178895398, 0.002406134882148865], 'true,false': [0.002406134882148865, nan]}
{'': [0.02885210814433785, 0.02730187783055544], 'false': [0.018548310477990628, 0.059415704842184204], 'false,false': [0.01513377455429679, 2.293890173489367e-09], 'false,true': [0.030577308818671923, 2.5673116023583965e-06], 'false,true,true': [0.030577308818671923, nan], 'false,false,false': [nan, 2.293890173489367e-09]}
{'': [0.0250234867229572, 0.04294327747850937], 'false': [0.16521013200750245, 0.034224288821144457], 'false,false': [nan, 0.034224288821144457], 'true': [0.028929806027298104, 0.0028331841023610544], 'true,true': [0.0316126936139793, 1.3282316428352919e-05], 'true,false': [-2.0535917218500004e-17, 0.01606400744112173], 'true,false,false': [3.784851220313033e-18, 0.039409254286006355]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 31.03
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048835;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.14185106490048774;  // std dev = 1.29e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.6824363751739175;  // std dev = 0.189, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | else return 0.7290629543760275;  // std dev = 0.126, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(E, F) )
%   | | then if ( tweets(A, G), tweets(E, G) )
%   | | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4761016894777689;  // std dev = 0.858, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.7397397215084223;  // std dev = 0.118, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6569734122109543;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.12656327255847655;  // std dev = 0.078, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06324857451886882;  // std dev = 2.119, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return 0.17872585973777283;  // std dev = 2.028, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.535158493518071;  // std dev = 1.391, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.3575599343856136;  // std dev = 1.256, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.059895045644867;  // std dev = 0.717, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return 0.6096186724787976;  // std dev = 0.084, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5529972076337951;  // std dev = 7.45e-09, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5707416375986883;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11267775420880917;  // std dev = 0.048, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0539131933517182;  // std dev = 2.093, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
%   | | | else return 0.07289125697202825;  // std dev = 2.131, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F) )
%   | | then if ( tweets(A, G), recursion_accounttype(E, B) )
%   | | | then return 0.4242633183413306;  // std dev = 0.907, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | | | else return 0.45040603423899617;  // std dev = 0.215, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.3046475746600056;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2652752292664684;  // std dev = 0.964, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6952308400675409;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5660189676708547;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(K, A) )
%   | then return -0.10253031147196559;  // std dev = 0.068, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return -0.14500775652213352;  // std dev = 0.054, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.31376041497484713;  // std dev = 0.991, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.03577761574759127;  // std dev = 0.725, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.33103828503238486;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4230205546223721;  // std dev = 0.073, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.39339314211391274;  // std dev = 0.195, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3291389501252667;  // std dev = 0.014, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.39934197494826756;  // std dev = 0.466, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07891674504478888;  // std dev = 1.878, 261.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=9 */
%   | | else return -0.09248845993226568;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.25205222584245285;  // std dev = 0.997, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.33298072092730924;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.08883094343438853;  // std dev = 0.530, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.24898606764222714;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.05949906830550122;  // std dev = 0.090, 188.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=15 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.20690351793146006;  // std dev = 0.262, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2816611085754366;  // std dev = 0.114, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4952333410993911;  // std dev = 0.242, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11176376773868991;  // std dev = 0.016, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( follows(A, E), recursion_accounttype(D, B) )
%   | then if ( follows(E, C), follows(C, E) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.19995122673572102;  // std dev = 1.375, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | | | else return 0.009034164420622715;  // std dev = 0.872, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( recursion_accounttype(C, B) )
%   | | | then return 0.22093574488342457;  // std dev = 0.054, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.25916329197080534;  // std dev = 0.083, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08150753609134913;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.03489056701767425;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return -0.06509018128772492;  // std dev = 0.394, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   else return 0.047867215819914315;  // std dev = 0.251, 59.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19340286924354438;  // std dev = 0.026, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return -0.06839084167648225;  // std dev = 0.510, 131.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=3 */
%   | | | else return -0.07560998311119228;  // std dev = 5.27e-09, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.1820241009801657;  // std dev = 1.008, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.07805427874411754;  // std dev = 0.049, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), follows(A, I) )
%   | | | then return 0.004543822181348271;  // std dev = 1.251, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
%   | | | else return -0.024858457148212672;  // std dev = 0.371, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.01665572152305229;  // std dev = 0.602, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.015143758498969677;  // std dev = 1.065, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.16470960819774622;  // std dev = 0.025, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else return 0.08911519269959066;  // std dev = 0.313, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.04794385114018356;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.17539977704858142;  // std dev = 0.072, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.002558497534739845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.1550245346773036;  // std dev = 0.167, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return -0.07116629708981177;  // std dev = 0.052, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.36285061533909624;  // std dev = 0.054, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11716674487949916;  // std dev = 0.050, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.11354071870662355;  // std dev = 1.389, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | | else return 0.1789241889341411;  // std dev = 0.083, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.07175343020578238;  // std dev = 0.291, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06284312772694152;  // std dev = 0.036, 185.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.13574974018140398;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2778860321211852;  // std dev = 0.140, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10259623763339351;  // std dev = 0.034, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.011879778178330561;  // std dev = 0.469, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.026104833603985245;  // std dev = 0.814, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '35.738', 'seconds']
Refined model CLL: -0.09797


******************************************
Best model found
******************************************
Results 

CLL : -0.096733 

AUC ROC : 0.995399 

AUC PR : 0.425455 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 31.03 

Total Inference Time : 35.07177114486694 

Total revision time: 77.2448224220276
Best scored revision CLL: -0.09797


Results 

CLL : -0.096733 

AUC ROC : 0.995399 

AUC PR : 0.425455 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 77.26928273773194 

Total Inference Time : 35.07177114486694 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.556
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | | else return -0.06637936678728018;  // std dev = 0.264, 53.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6831344901249741;  // std dev = 1.906, 89.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.040168052775442636;  // std dev = 0.262, 182.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05321221818590172;  // std dev = 1.780, 46.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6136428511256345;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.11816889150088757;  // std dev = 4.563, 140.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5661803305969865;  // std dev = 1.064, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.4850915857691222;  // std dev = 0.894, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.587714206327369;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6017167337181167;  // std dev = 0.179, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5689539325520566;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.0034261140203086867;  // std dev = 0.307, 364.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5074950008553912;  // std dev = 2.978, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12353045186502863;  // std dev = 0.005, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13940315070383133;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2926731552263966;  // std dev = 1.724, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return -0.06481248205573559;  // std dev = 0.866, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3085266373150638;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.518499836638296;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5969367743797763;  // std dev = 0.108, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.0979049605697096;  // std dev = 1.655, 238.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=5 */
%   | | else return 0.0024197267290886676;  // std dev = 0.270, 77.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.022484508467431802;  // std dev = 3.268, 257.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.268916688398253;  // std dev = 0.333, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45974342276672503;  // std dev = 1.221, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11189422287891596;  // std dev = 0.024, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | | else return -0.11849190810155681;  // std dev = 0.037, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2768005110046844;  // std dev = 1.677, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.0859960750354175;  // std dev = 1.603, 261.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01917372433290881;  // std dev = 2.213, 92.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1976639744615418;  // std dev = 0.078, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.34940964766791804;  // std dev = 0.111, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04454155162545345;  // std dev = 0.146, 183.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=19 */
%   | | else return 0.019157832883490527;  // std dev = 0.209, 190.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.172869870031097;  // std dev = 0.131, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24731838848856835;  // std dev = 1.470, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09353377109631153;  // std dev = 0.097, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.34785785311502193;  // std dev = 0.669, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09956113738231201;  // std dev = 0.069, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18909467764217708;  // std dev = 0.761, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.09825128894518716;  // std dev = 1.061, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08304960428885633;  // std dev = 2.11e-08, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0987696674389722;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.017726805566887358;  // std dev = 1.037, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.06777278287794426;  // std dev = 1.208, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.008003139917649152;  // std dev = 2.083, 147.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.051', 'seconds']
Parameter learned model CLL:-0.106793 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 154, 0], 'true,false,false': [0.264, 49, 4], 'false,true,true': [0.987, 1, 37], 'false,true,false': [0.957, 1, 11], 'false,false': [8.33e-09, 84, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.906, 4, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.262, 163, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.78, 42, 4], 'false,false,false,true': [0.943, 1, 8], 'false,false,false,false': [4.563, 100, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.064, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.894, 1, 3], 'true,false,false': [0.0, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.179, 0, 6], 'false,false,true,false': [2.98e-08, 0, 15], 'false,false,false': [0.307, 307, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.978, 6, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.005, 205, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 97, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.724, 3, 77], 'true,false': [0.866, 1, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.108, 0, 39], 'false,false,true,false': [1.655, 233, 5], 'false,false,false': [0.27, 64, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.268, 175, 82], 'false,true': [0.333, 0, 22], 'false,false,true': [1.221, 1, 52], 'false,false,false,true': [0.024, 67, 0], 'false,false,false,false': [0.037, 56, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.677, 2, 121], 'true,false': [1.603, 254, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.213, 64, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.078, 0, 83], 'true,false,true': [0.111, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.146, 164, 19], 'false,false,false': [0.209, 138, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.131, 1, 78], 'false,true,true,true': [1.47, 2, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.097, 219, 0], 'false,false,true': [0.669, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.069, 97, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.761, 0, 85], 'true,true,false': [1.061, 2, 19], 'true,false,true': [2.11e-08, 143, 0], 'true,false,false,true': [0.0, 17, 0], 'true,false,false,false': [1.037, 25, 4], 'false,true': [1.208, 2, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.083, 107, 40]}]
{'': [0.22598985393338952, 0.22989529962129715], 'false': [0.0384000000000006, 7.401486830834377e-17], 'true': [0.01851192595229848, 0.018950267217437873], 'false,true': [0.025623268698062793, 0.07638888888888877], 'true,false': [-1.2688263138573217e-16, 0.06977572089711626]}
{'': [0.04081202620187058, 0.11324940524104815], 'false': [0.06842807364928351, 0.145515311840256], 'false,false': [0.0689073405053224, 0.15960627103635056], 'false,false,false': [0.09876543209876543, 0.14868894432186555], 'false,false,true': [nan, 0.0689073405053224], 'false,true': [nan, 0.06842807364928351]}
{'': [0.02450970334964553, 0.10613281869853836], 'false': [nan, 0.1061328186985391], 'false,false': [0.0017524916575456253, 0.09412765569227932], 'true': [0.01663454817584691, 0.06899905416271142], 'true,false': [0.19997622765463977, 0.0], 'true,true': [0.01663454817584691, nan], 'false,false,true': [0.005367005701233903, 5.921189464667501e-17]}
{'': [0.054752235251695223, 7.263879465961456e-05], 'false': [2.6087395492695616e-05, -2.7469435660828616e-17], 'false,true': [nan, 2.608739549269778e-05], 'false,false': [nan, -2.7469435660828616e-17], 'false,false,false': [nan, -2.7469435660828616e-17]}
{'': [0.04844163653296185, 0.07092396417573447], 'false': [0.0020081581586325285, 0.06934718272848428], 'false,false': [0.06833913886123774, 0.07296865142102217], 'false,false,true': [0.0003004182515830951, 0.011512180586333139], 'true': [0.03716190387587086, 0.3749519370965901], 'false,true': [9.102045895914568e-06, 0.0]}
{'': [0.041545085901459736, 0.07426259740871989], 'false': [0.005036184526975306, 0.07797993293005576], 'false,false': [0.028116604164104064, 2.6670032360574114e-05], 'true': [nan, 0.041545085901460305], 'true,false': [nan, 0.041545085901459736], 'false,false,false': [8.932962754230867e-06, 2.418000522810826e-05]}
{'': [0.042671772349705504, 0.05323324461660025], 'false': [nan, 0.05323324461660045], 'false,false': [nan, 0.05323324461660025], 'false,false,false': [nan, 0.05323324461660025], 'true': [0.022855400435255923, 0.009850554546935623]}
{'': [0.0007462908486327096, 0.033808023328808695], 'false': [nan, 0.03380802332880899], 'false,false': [0.021347588445314248, 0.04381865786865335], 'true': [7.385170032324278e-05, 0.0061675720333699], 'true,false': [0.0061675720333699, nan]}
{'': [0.017088923374360288, 0.03203249233063945], 'false': [0.023548066563395795, 0.044685174681784776], 'false,false': [0.011191555057436454, 4.916547700901869e-05], 'false,true': [0.05399934046340406, 4.330284059983936e-05], 'false,true,true': [0.05399934046340406, nan], 'false,false,false': [nan, 4.916547700901869e-05]}
{'': [0.02415746167661586, 0.03726655336562318], 'false': [0.1459715435708026, 0.02950592419533197], 'false,false': [nan, 0.029505924195331934], 'true': [0.01739367754588409, 0.0062877898019948345], 'true,true': [0.006807159250906537, 0.053626282833791714], 'true,false': [3.105518950000438e-18, 0.02488794643104539], 'true,false,false': [-3.2653618371328133e-18, 0.03705014807804058]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 29.026
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return -0.09639651944594228;  // std dev = 1.382, 44.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=2 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else return -0.14185106490048763;  // std dev = 8.56e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7075686503061919;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return 0.42757709712051506;  // std dev = 0.867, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.5518526675222027;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7369680810870358;  // std dev = 0.201, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.12870083859288758;  // std dev = 0.205, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.13772655760353625;  // std dev = 3.056, 61.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=19 */
%   | | | else return 0.20313460342579884;  // std dev = 3.027, 54.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5342901738650452;  // std dev = 0.170, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | else return 0.6020650669670249;  // std dev = 0.069, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.581930965454896;  // std dev = 0.129, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5583041628397627;  // std dev = 2.98e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.22497082950642935;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5634062334335689;  // std dev = 0.204, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1155347970102677;  // std dev = 0.221, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08052193453422347;  // std dev = 3.818, 106.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=29 */
%   | | | else return 0.04751193421685489;  // std dev = 2.404, 47.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.42677175557443237;  // std dev = 0.174, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | | else return 0.3741372050143649;  // std dev = 0.996, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.5648469121263516;  // std dev = 0.185, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.2633451482958161;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5126353663596338;  // std dev = 0.059, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.6694750000620674;  // std dev = 0.107, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.6157483747819668;  // std dev = 0.980, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   else if ( follows(L, A) )
%   | then return -0.10308022898505245;  // std dev = 0.136, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else return -0.15443387774826242;  // std dev = 0.050, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.31002882230661427;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.30586408778933516;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.4002564056172335;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3670792985841075;  // std dev = 0.050, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.338043391744998;  // std dev = 0.030, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.41252220593173405;  // std dev = 1.263, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.09205997975717753;  // std dev = 1.398, 262.000 (wgt'ed) examples reached here.  /* #neg=257 #pos=5 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.07253184869357729;  // std dev = 0.578, 36.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   | | | else return 0.09109830927024577;  // std dev = 1.756, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.2614792080717319;  // std dev = 0.014, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.21869995517877877;  // std dev = 0.795, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.08461548616497094;  // std dev = 5.16e-08, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.26176629671752044;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.07331265629890867;  // std dev = 0.059, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2704157775862497;  // std dev = 0.031, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.03285595855689017;  // std dev = 1.526, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.44350632356973985;  // std dev = 0.349, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.1143730692142911;  // std dev = 0.021, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20252827859041067;  // std dev = 0.109, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return 0.024091690771651963;  // std dev = 0.620, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.07844146329356375;  // std dev = 0.076, 126.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=2 */
%   | | else if ( follows(G, E), tweets(A, H) )
%   | | | then return 0.007892023827670177;  // std dev = 1.200, 69.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=19 */
%   | | | else return -0.05974923767443891;  // std dev = 0.463, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2433699828748511;  // std dev = 1.432, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return -0.11374700593687004;  // std dev = 0.037, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.018041705551610596;  // std dev = 1.458, 39.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
%   | | | else return 0.02719400842171583;  // std dev = 1.321, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.16304262177686782;  // std dev = 0.134, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.10963675947753052;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.12792294088662914;  // std dev = 0.978, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return -0.06475428922815211;  // std dev = 0.826, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then if ( follows(I, A), follows(A, I) )
%   | | then return 0.1479229283049392;  // std dev = 0.784, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.24927417266155544;  // std dev = 0.057, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(J, A) )
%   | | then return -0.0554044263118571;  // std dev = 0.078, 239.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=17 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.008998962921666758;  // std dev = 1.631, 83.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=25 */
%   | | | else return 0.03497560903765105;  // std dev = 1.584, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.13067329767170746;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.1592447262431361;  // std dev = 1.29e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.16932917100928024;  // std dev = 0.031, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.22557549561965853;  // std dev = 0.057, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return 0.14275259922948177;  // std dev = 0.960, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.19131224210221126;  // std dev = 0.306, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.07146359151858998;  // std dev = 0.065, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.31061912722709395;  // std dev = 0.047, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.11398613637778982;  // std dev = 0.013, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.14171227610836215;  // std dev = 0.010, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.06304210610245395;  // std dev = 1.362, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | else return 0.19805391527351354;  // std dev = 0.031, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06399569261752491;  // std dev = 0.066, 220.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=4 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.15741181666055673;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.22111825372118113;  // std dev = 0.092, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.09877290492203299;  // std dev = 0.067, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.01723698332899244;  // std dev = 0.755, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | | else return 0.002010040514108886;  // std dev = 1.100, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.846', 'seconds']
Refined model CLL: -0.099033


******************************************
Best model found
******************************************
Results 

CLL : -0.098327 

AUC ROC : 0.993437 

AUC PR : 0.367711 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 29.026 

Total Inference Time : 25.16415786743164 

Total revision time: 65.85914014053344
Best scored revision CLL: -0.099033


Results 

CLL : -0.098327 

AUC ROC : 0.993437 

AUC PR : 0.367711 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 65.88360045623779 

Total Inference Time : 25.16415786743164 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.656
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else return -0.09423201728144012;  // std dev = 0.213, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6711203970371331;  // std dev = 2.179, 87.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.038626029828598335;  // std dev = 0.258, 216.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08076269011629142;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10984996408461;  // std dev = 2.960, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.575703463987339;  // std dev = 1.072, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7345555969489167;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8253786280368687;  // std dev = 0.075, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5764248055601174;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5764248055601174;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.02944232291395932;  // std dev = 0.268, 279.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5049436289786314;  // std dev = 1.921, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11844848958583827;  // std dev = 0.002, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.134534897860408;  // std dev = 1.83e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.33404394596296183;  // std dev = 0.512, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else return 0.1647900452120003;  // std dev = 0.978, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31577549416107586;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6169981737761082;  // std dev = 0.101, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08341468071379404;  // std dev = 2.053, 251.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=9 */
%   | | else return -0.10689228786697906;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.027125971743295278;  // std dev = 3.479, 272.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2656944280787022;  // std dev = 0.174, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4792238625205011;  // std dev = 0.618, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1080459582539143;  // std dev = 0.029, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.10306014384278826;  // std dev = 0.041, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2541789358017061;  // std dev = 2.255, 111.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=107 */
%   | else return -0.07766350955278231;  // std dev = 1.905, 229.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0014651906384167011;  // std dev = 0.696, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15211751377248994;  // std dev = 1.941, 84.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.257166073080012;  // std dev = 0.077, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0484308991481007;  // std dev = 0.151, 219.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=22 */
%   | | else return 0.01458871538857678;  // std dev = 0.202, 92.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14643400619872915;  // std dev = 0.219, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.20305899318181161;  // std dev = 1.857, 35.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09042249936651692;  // std dev = 0.070, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.33105272310114386;  // std dev = 1.200, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09550180796826328;  // std dev = 0.001, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17134033901424875;  // std dev = 1.875, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.15449530277063095;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08308325316416353;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08240296417227334;  // std dev = 6.45e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.02943244955767827;  // std dev = 0.501, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.2963104261755896;  // std dev = 1.310, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05754617983329056;  // std dev = 1.428, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.116', 'seconds']
Parameter learned model CLL:-0.107632 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 166, 0], 'true,false,false': [0.213, 40, 2], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.97e-09, 41, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [2.179, 5, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.258, 194, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.975, 19, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.96, 44, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.072, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.075, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false': [0.268, 247, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.921, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.002, 202, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.83e-08, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.512, 0, 73], 'true,false': [0.978, 1, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.101, 0, 23], 'false,false,true,false': [2.053, 242, 9], 'false,false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.479, 181, 91], 'false,true': [0.174, 0, 13], 'false,false,true': [0.618, 0, 22], 'false,false,false,true': [0.029, 23, 0], 'false,false,false,false': [0.041, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.255, 4, 107], 'true,false': [1.905, 218, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.696, 19, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [1.941, 4, 80], 'true,false,true': [0.077, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.151, 197, 22], 'false,false,false': [0.202, 70, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.219, 4, 77], 'false,true,true,true': [1.857, 3, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.07, 236, 0], 'false,false,true': [1.2, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.001, 46, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.875, 3, 94], 'true,true,false': [0.01, 0, 9], 'true,false,true': [0.0, 194, 0], 'true,false,false,true': [6.45e-09, 9, 0], 'true,false,false,false': [0.501, 13, 2], 'false,true': [1.31, 3, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.428, 31, 17]}]
{'': [0.22222222222222435, 0.2239854318418315], 'false': [0.0, 4.603363760640893e-17], 'true': [0.03598567560485849, 0.009522928994082679], 'true,false': [-1.6318940843887844e-16, 0.04535147392290247], 'false,true': [0.0, nan]}
{'': [0.054586310755222134, 0.09077963969078906], 'false': [0.06646678810973304, 0.13999970438067966], 'false,false': [0.04750000000000002, 0.15621589105377873], 'false,false,false': [0.0, 0.14358935613288384], 'false,true': [nan, 0.06646678810973304], 'false,false,true': [nan, 0.04750000000000002]}
{'': [0.016703354378710043, 0.08769481455516186], 'false': [nan, 0.0876948145551618], 'false,false': [-5.224578939412501e-17, 0.07195621735954728], 'true': [0.016317759268660154, 0.017129615341228144], 'true,false': [0.0027844570599893093, 0.0], 'true,true': [0.01619711463973727, 0.0], 'false,false,true': [-1.4802973661668753e-16, -1.6653345369377348e-16]}
{'': [0.028830430511434746, 3.7877222702002784e-05], 'false': [4.75411035988525e-06, 9.00180830777154e-18], 'false,true': [nan, 4.754110359891845e-06], 'false,false': [nan, 9.00180830777154e-18], 'false,false,false': [nan, 9.00180830777154e-18]}
{'': [0.017330199589727646, 0.054431751285769284], 'false': [-5.224578939412501e-17, 0.05103372589743642], 'false,false': [0.053148443278737724, -4.270088556250602e-18], 'false,false,true': [0.0004425309536576928, 0.016798149605449605], 'true': [0.003589901758884636, 0.19112800364930027], 'false,true': [-5.224578939412501e-17, nan]}
{'': [0.04450949027735862, 0.06795430418637669], 'false': [0.0023163401177719823, 0.07227201348677052], 'false,false': [0.017343934402356872, 4.8950428808938035e-05], 'true': [nan, 0.04450949027735803], 'true,false': [nan, 0.04450949027735862], 'false,false,false': [3.7507209634355195e-05, 4.6570832988101743e-05]}
{'': [0.04983818094102389, 0.017965803607921566], 'true': [0.045810425396727535, 0.01583975104881761], 'false': [nan, 0.017965803607921566], 'false,false': [nan, 0.017965803607921566], 'false,false,false': [nan, 0.017965803607921566]}
{'': [0.04410959291275774, 0.02896231531215002], 'true': [0.04483220786709611, 0.002981197571742006], 'false': [nan, 0.028962315312149982], 'false,false': [0.0228741055482943, 0.04065827031881166], 'true,false': [0.002981197571742006, nan]}
{'': [0.04788544846562749, 0.030379330420229417], 'false': [0.022423716783835073, 0.05927187524536427], 'false,false': [0.07996865068452691, 4.603683423365368e-08], 'false,true': [0.09847679495719992, 2.067877796711066e-05], 'false,true,true': [0.09847679495719992, nan], 'false,false,false': [nan, 4.603683423365368e-08]}
{'': [0.025432128533429806, 0.08221241095377699], 'false': [0.24533393050159344, 0.04248746541403196], 'false,false': [nan, 0.04248746541403196], 'true': [0.0331781090635838, 0.001336839402954934], 'true,true': [0.036231452441091855, 1.0189842054820887e-05], 'true,false': [-2.7469435660828616e-17, 0.011127081403354973], 'true,false,false': [4.625929269271485e-18, 0.016751126963417306]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 10.418
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.846912980043332;  // std dev = 0.994, 89.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=88 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.039967116917694;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then return 0.6593764091340398;  // std dev = 0.248, 46.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=43 */
%   | | else return 0.7231269559307447;  // std dev = 0.022, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.7295235746043679;  // std dev = 0.047, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7269737047364763;  // std dev = 0.039, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12544463852839113;  // std dev = 7.60e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else return -0.010359148750030913;  // std dev = 0.291, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.10075939376766838;  // std dev = 0.174, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14015286664979076;  // std dev = 2.886, 54.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5417926940943347;  // std dev = 0.165, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.723811254702195;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8078861782353177;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5677471759628011;  // std dev = 0.012, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09687012001847559;  // std dev = 1.146, 120.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=3 */
%   | | | else return -0.002088120345510112;  // std dev = 2.333, 73.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09989871882309286;  // std dev = 2.103, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.13568289495244326;  // std dev = 1.921, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.43887870834908405;  // std dev = 0.143, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( tweets(A, F), tweets(D, G) )
%   | | | then return 0.299620995569554;  // std dev = 0.938, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.42303081301700063;  // std dev = 0.042, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.4978091308624447;  // std dev = 0.323, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.21680171834956075;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.5719037782292863;  // std dev = 0.045, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.6748490249146737;  // std dev = 0.109, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(L, A) )
%   | then return -0.10990377115946004;  // std dev = 0.155, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else return -0.15635698843381451;  // std dev = 0.015, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.3108999771504432;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.33146390064759956;  // std dev = 0.080, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(D, F), recursion_accounttype(D, B) )
%   | | | then return 0.3269093470186271;  // std dev = 0.035, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.3976106749969168;  // std dev = 0.127, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.44774739400778607;  // std dev = 0.221, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32525362727680834;  // std dev = 0.010, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.39857257529452333;  // std dev = 1.331, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.08258980094903454;  // std dev = 1.805, 229.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=9 */
%   | | else return -0.09540258284711489;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2521750506385592;  // std dev = 0.119, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.05895892104190284;  // std dev = 1.799, 172.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=16 */
%   | | | else return -0.04541734564867437;  // std dev = 0.390, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else return -0.045593482661143055;  // std dev = 0.163, 49.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2716048054321808;  // std dev = 0.094, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.15617396686474816;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.17046713068821417;  // std dev = 0.966, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4149050057062688;  // std dev = 0.945, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.11536967122456215;  // std dev = 0.016, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.22124150600270948;  // std dev = 0.057, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(D, A), follows(D, C) )
%   | | then return 0.32004257572639877;  // std dev = 0.086, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.26621321880372767;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.20459997940391206;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.1267186384030115;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.07486231690561214;  // std dev = 0.756, 162.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=3 */
%   | | | else return -0.026461806605670102;  // std dev = 1.551, 84.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=12 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.001357889139925375;  // std dev = 1.029, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.05016680988111404;  // std dev = 1.334, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( follows(D, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.16038977285581785;  // std dev = 0.987, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.09690928162310261;  // std dev = 1.355, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return -0.1535472582958657;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.19584120678526257;  // std dev = 0.022, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(E, A) )
%   | then return -0.04418017801579136;  // std dev = 0.139, 227.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=23 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.32043788888261965;  // std dev = 0.267, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11607849809498513;  // std dev = 0.011, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.023890844624159375;  // std dev = 0.598, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.03403169247800682;  // std dev = 1.156, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.139829002645167;  // std dev = 0.989, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.04373198986144351;  // std dev = 1.325, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0.1742400207305524;  // std dev = 0.023, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.07197516133565318;  // std dev = 1.162, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return -0.01541293550265462;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.22440176294840236;  // std dev = 0.222, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then return -0.02969680219768787;  // std dev = 0.130, 233.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=32 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3217550336972641;  // std dev = 0.057, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1126236842274626;  // std dev = 0.010, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.09349866288208242;  // std dev = 2.169, 76.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=71 */
%   | | | else return 0.31819403147188796;  // std dev = 0.609, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.08504700606577595;  // std dev = 0.299, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.07660938905276807;  // std dev = 0.055, 193.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.146350586038741;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J), follows(A, I) )
%   | | | then return -0.0922743474152782;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.008050022307085054;  // std dev = 0.711, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.04974662472649406;  // std dev = 0.567, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.041404466355402327;  // std dev = 0.781, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.635', 'seconds']
Refined model CLL: -0.105267


******************************************
Best model found
******************************************
Results 

CLL : -0.104259 

AUC ROC : 0.994498 

AUC PR : 0.361717 

Precision : 0.346939 

Recall : 0.980769 

F1 : 0.512563 

Total Learning Time : 10.418 

Total Inference Time : 12.477595567703247 

Total revision time: 33.207755207061766
Best scored revision CLL: -0.105267


Results 

CLL : -0.104259 

AUC ROC : 0.994498 

AUC PR : 0.361717 

Precision : 0.346939 

Recall : 0.980769 

F1 : 0.512563 

Total Learning Time : 60.859801887512205 

Total Inference Time : 12.477595567703247 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.772
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.141851064900488;  // std dev = 0.000, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | else return -0.0585177315671544;  // std dev = 0.276, 48.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8068668838174602;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.688692745661344;  // std dev = 1.720, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.01913044671350657;  // std dev = 0.280, 151.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07093283568970761;  // std dev = 1.795, 58.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7297063270878138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1196286185124162;  // std dev = 4.551, 139.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5600393469943117;  // std dev = 1.062, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7330852302623936;  // std dev = 0.222, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5654784850994425;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5963136612950332;  // std dev = 0.183, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5629537176240892;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -2.326511661792192E-5;  // std dev = 0.303, 372.000 (wgt'ed) examples reached here.  /* #neg=315 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4947356327016485;  // std dev = 3.073, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12464924991956633;  // std dev = 0.004, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13916462352582745;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30123350659934656;  // std dev = 1.399, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.4855050933355296;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30728763069681264;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5196837448935075;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5764262165783707;  // std dev = 0.976, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10167140318349005;  // std dev = 1.679, 279.000 (wgt'ed) examples reached here.  /* #neg=274 #pos=5 */
%   | | else return 0.009571900427839206;  // std dev = 0.279, 70.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0411244972741328;  // std dev = 3.045, 226.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.257073224863144;  // std dev = 0.185, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.3919092000435505;  // std dev = 2.459, 56.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11236789742433498;  // std dev = 0.029, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | | else return -0.11740687659135265;  // std dev = 0.042, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27005037062005927;  // std dev = 1.902, 124.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else return -0.08652985116167973;  // std dev = 1.642, 249.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.020646443423686;  // std dev = 2.159, 94.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1709060425825514;  // std dev = 1.399, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2652786686903143;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.049183848857291254;  // std dev = 0.153, 179.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=19 */
%   | | else return 0.018448097589854596;  // std dev = 0.211, 200.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1696569828008069;  // std dev = 0.130, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2923629052515254;  // std dev = 0.914, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09440363624849052;  // std dev = 0.075, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3671327657351935;  // std dev = 0.611, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10117404904689999;  // std dev = 0.087, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15300596187695356;  // std dev = 1.831, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.11558955011054342;  // std dev = 1.089, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08499646441195262;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09649583161096903;  // std dev = 0.029, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.048065157753865356;  // std dev = 1.137, 34.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.01858559491102306;  // std dev = 0.901, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02990458850213473;  // std dev = 2.068, 125.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.228', 'seconds']
Parameter learned model CLL:-0.108366 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [4.62e-07, 0, 104], 'true,false,true': [0.0, 140, 0], 'true,false,false': [0.276, 44, 4], 'false,true,true': [1.377, 2, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.93e-09, 90, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.72, 3, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.28, 132, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.795, 54, 4], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [4.551, 99, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.062, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.222, 0, 3], 'true,false,false': [0.0, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.183, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false': [0.303, 315, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.073, 8, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.004, 216, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 87, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.399, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.976, 1, 39], 'false,false,true,false': [1.679, 274, 5], 'false,false,false': [0.279, 57, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.045, 144, 82], 'false,true': [0.185, 0, 22], 'false,false,true': [2.459, 4, 52], 'false,false,false,true': [0.029, 87, 0], 'false,false,false,false': [0.042, 60, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.902, 3, 121], 'true,false': [1.642, 242, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.159, 66, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [1.399, 2, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 160, 19], 'false,false,false': [0.211, 148, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.13, 1, 78], 'false,true,true,true': [0.914, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.075, 210, 0], 'false,false,true': [0.611, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.087, 95, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.831, 3, 85], 'true,true,false': [1.089, 1, 19], 'true,false,true': [0.0, 168, 0], 'true,false,false,true': [0.029, 31, 0], 'true,false,false,false': [1.137, 30, 4], 'false,true': [0.901, 1, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.068, 85, 40]}]
{'': [0.23306436479639964, 0.22530612244898032], 'true': [2.049642507000289e-15, 0.02082390221819818], 'false': [0.0384000000000006, 7.401486830834377e-17], 'false,true': [0.04865220249835817, -1.6148698540002277e-16], 'true,false': [-7.930164461608261e-17, 0.07638888888888874]}
{'': [0.033625598707689525, 0.11717979373624213], 'false': [0.07852407233290848, 0.1406457438485271], 'false,false': [0.05556344712425103, 0.1600495219850652], 'false,false,false': [-2.220446049250313e-16, 0.14900550537359086], 'false,true': [nan, 0.07852407233290848], 'false,false,true': [nan, 0.05556344712425103]}
{'': [0.01599425049311916, 0.10356822985481852], 'false': [nan, 0.10356822985481996], 'false,false': [0.0018169564762910454, 0.09179804695377523], 'true': [0.016588329379330472, 0.010069732361535765], 'true,true': [0.016588329379330472, nan], 'true,false': [0.016491791247484455, 0.0], 'false,false,true': [0.005564429208642752, 0.0]}
{'': [0.05759555418711163, 5.486303168078375e-05], 'false': [1.646375001034755e-05, -4.083578941150001e-17], 'false,true': [nan, 1.646375001034755e-05], 'false,false': [nan, -4.083578941150001e-17], 'false,false,false': [nan, -4.083578941150001e-17]}
{'': [0.02489126808792489, 0.06717602074618235], 'false': [0.0020548466544685765, 0.06513645540285132], 'false,false': [0.06225697832055444, 0.07769506626195805], 'false,false,true': [0.02382385367227635, 0.010109877144275522], 'true': [0.024781897209831625, 0.0], 'false,true': [9.393305008353892e-06, 0.0]}
{'': [0.04103834949223621, 0.07798499435120593], 'false': [0.001550109032889082, 0.08101397039868555], 'false,false': [0.10796222145687209, 2.412420780389379e-05], 'true': [nan, 0.04103834949223677], 'true,false': [nan, 0.04103834949223621], 'false,false,false': [9.865933734591907e-06, 2.9771194585503923e-05]}
{'': [0.04513985205637776, 0.049583874633690614], 'false': [nan, 0.0495838746336906], 'false,false': [nan, 0.049583874633690614], 'false,false,false': [nan, 0.049583874633690614], 'true': [0.02916043220019075, 0.010827951026102912]}
{'': [0.02268318228773721, 0.03557183009647798], 'false': [nan, 0.03557183009647763], 'false,false': [0.023276696563171648, 0.0444156570566467], 'true': [0.023009813885982555, 9.988686264972291e-05], 'true,false': [9.988686264972291e-05, nan]}
{'': [0.016828046784298337, 0.03308633454544023], 'false': [0.022802731828118098, 0.0485530533904791], 'false,false': [0.009348066035179348, 7.929862926971252e-05], 'false,true': [0.022002035771500682, 2.6822953290154113e-05], 'false,true,true': [0.022002035771500682, nan], 'false,false,false': [nan, 7.929862926971252e-05]}
{'': [0.028488390906972867, 0.03797039976474928], 'false': [0.09018788473044946, 0.03420213579838871], 'false,false': [nan, 0.03420213579838872], 'true': [0.04225529259290718, 0.0057563020923059776], 'true,true': [0.038117908559342606, 0.05931905148398353], 'true,false': [-6.872809200060493e-17, 0.0204961465955058], 'true,false,false': [2.7443184181501347e-05, 0.03804015047531193]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
0;false,true;follows(E, F), follows(A, F).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 11.642
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else if ( tweets(A, E), follows(A, F) )
%   | | | then return 0.10814893509951232;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return -0.14185106490048774;  // std dev = 2.11e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.69e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6887041814417235;  // std dev = 0.173, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else return 0.730836505449573;  // std dev = 0.169, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6194734122109545;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.12544463852839113;  // std dev = 7.30e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else return -0.09415137738989705;  // std dev = 0.160, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.011134104502422177;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.06509334918986667;  // std dev = 1.151, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.6469082235107435;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.1240059755296741;  // std dev = 4.502, 134.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5470778881259013;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else return 0.43959931873629793;  // std dev = 0.768, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(F, A) )
%   | | then return 0.4646714250571719;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.6212701462318813;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5611853446511363;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.11044893440443719;  // std dev = 0.700, 140.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=1 */
%   | | | else return -0.017627178385585234;  // std dev = 2.802, 113.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=16 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.052646900154205034;  // std dev = 2.831, 65.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=15 */
%   | | | else return 0.17601620507990307;  // std dev = 3.285, 66.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.42704176557107837;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.28767651767920904;  // std dev = 2.074, 36.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=31 */
%   | | else return 0.4312169548029312;  // std dev = 0.265, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, G), tweets(F, H) )
%   | | | then return 0.5870783699865357;  // std dev = 0.439, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2622560159241533;  // std dev = 0.949, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.4684601069838764;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6654096976176543;  // std dev = 0.084, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else if ( follows(J, A) )
%   | then return -0.10897181014719216;  // std dev = 0.175, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else return -0.15620999369334432;  // std dev = 0.074, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.31776527964827317;  // std dev = 0.975, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.3459014063922491;  // std dev = 0.067, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.3831726860963002;  // std dev = 0.090, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.5162757925992946;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3259803524740312;  // std dev = 0.039, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08975483168802133;  // std dev = 0.556, 128.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=1 */
%   | | | else return 0.004646157608303869;  // std dev = 2.237, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.03277842962624085;  // std dev = 2.195, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.06718472173173963;  // std dev = 2.606, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27298731763662987;  // std dev = 0.013, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.2773494756757192;  // std dev = 1.557, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.0892462827211328;  // std dev = 0.084, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | else return -0.06659479091630015;  // std dev = 0.149, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.3048825521744469;  // std dev = 0.168, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.24836188300893006;  // std dev = 2.58e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.2020811700229615;  // std dev = 1.016, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.44504841000500284;  // std dev = 1.645, 46.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=43 */
%   | | else return -0.13171437796045335;  // std dev = 0.022, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.21024253273682086;  // std dev = 0.121, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then return -0.12402084841647487;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.13350659821181418;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.2055724501563678;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then return -0.04618445523028523;  // std dev = 0.150, 244.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=23 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.31619087305817634;  // std dev = 1.159, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.1199701679142545;  // std dev = 0.042, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return -0.0982885571023538;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.018855222763876023;  // std dev = 1.925, 69.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.170693683215755;  // std dev = 0.133, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else return 0.1851401978398414;  // std dev = 0.047, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.09278927807179715;  // std dev = 0.926, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, G), follows(A, H) )
%   | | | then return 0.05065104447424281;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4452879208856682;  // std dev = 0.430, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.08341703227281483;  // std dev = 0.013, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2005347383155323;  // std dev = 0.030, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02191998400424349;  // std dev = 1.957, 83.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=25 */
%   | | | else return 0.07774294907645647;  // std dev = 1.379, 34.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.164634038701501;  // std dev = 0.064, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.07090170855722372;  // std dev = 0.922, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.042159174991691716;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.20161964153254547;  // std dev = 0.079, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.16556818195832354;  // std dev = 0.160, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.33980447956072907;  // std dev = 0.406, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07761335094146773;  // std dev = 0.164, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.33676091092984994;  // std dev = 0.023, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.12416320441279487;  // std dev = 0.017, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.13054661119041872;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else return 0.24456930076437078;  // std dev = 0.070, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06472281989188812;  // std dev = 0.061, 201.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=4 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.24035002607001055;  // std dev = 0.058, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.11227854031689578;  // std dev = 0.105, 58.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2615762614160729;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10094807147847205;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.018224724720697895;  // std dev = 0.521, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.01096687145246061;  // std dev = 0.867, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.599', 'seconds']
Refined model CLL: -0.103993


******************************************
Best model found
******************************************
Results 

CLL : -0.102384 

AUC ROC : 0.993843 

AUC PR : 0.414961 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 11.642 

Total Inference Time : 18.319721460342407 

Total revision time: 41.89052268409729
Best scored revision CLL: -0.103993


Results 

CLL : -0.102384 

AUC ROC : 0.993843 

AUC PR : 0.414961 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 69.54256936454773 

Total Inference Time : 18.319721460342407 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.352
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8118526388032147;  // std dev = 2.184, 108.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else return -0.06777699082641374;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.45e-09, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6838088014722495;  // std dev = 1.961, 86.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03340486044794926;  // std dev = 0.268, 201.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10254915282123575;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1256743505773176;  // std dev = 2.923, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5497274890703773;  // std dev = 1.676, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7352748431282247;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8216533421939253;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.22203310341295115;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5755027697006052;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5755027697006052;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.02868767274088566;  // std dev = 0.270, 275.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5243391851144477;  // std dev = 1.396, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11899200060244768;  // std dev = 0.002, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13647700514931752;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.33663992193913767;  // std dev = 0.513, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else return 0.4110458998494617;  // std dev = 0.079, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31098820700875274;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5705017548996539;  // std dev = 0.969, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08178867578013307;  // std dev = 2.027, 222.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=9 */
%   | | else return -0.12390030332368157;  // std dev = 0.062, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0324441500086206;  // std dev = 3.554, 253.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2571411673267741;  // std dev = 0.108, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4829762177571267;  // std dev = 0.544, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10896358860499664;  // std dev = 0.033, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.10410932930455907;  // std dev = 0.056, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25543970206696315;  // std dev = 2.193, 111.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=107 */
%   | else return -0.08037986514836654;  // std dev = 1.761, 273.000 (wgt'ed) examples reached here.  /* #neg=262 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.004230571930071637;  // std dev = 0.696, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.13953531983284467;  // std dev = 2.167, 85.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22557412332282523;  // std dev = 0.038, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05164278580855007;  // std dev = 0.168, 206.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=22 */
%   | | else return 0.019913918077210442;  // std dev = 0.205, 87.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15684026948364402;  // std dev = 0.201, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2945125699220422;  // std dev = 0.724, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09050332866935165;  // std dev = 0.021, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.34950471508655806;  // std dev = 0.818, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.097024050292956;  // std dev = 0.001, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17757559126724973;  // std dev = 1.543, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.1437134658005759;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08356961544206117;  // std dev = 6.50e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0815976267449915;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.017503308692583184;  // std dev = 0.460, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.04278600906950032;  // std dev = 0.869, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01946221643736536;  // std dev = 1.475, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.097', 'seconds']
Parameter learned model CLL:-0.10808 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [2.184, 5, 103], 'true,false,true': [0.0, 178, 0], 'true,false,false': [0.262, 25, 2], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.45e-09, 38, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.961, 4, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.268, 179, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.984, 31, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.923, 40, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.676, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [1.155, 2, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [2.11e-08, 0, 8], 'false,false,false': [0.27, 243, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.396, 0, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.002, 198, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 47, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.513, 0, 73], 'true,false': [0.079, 0, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.969, 1, 23], 'false,false,true,false': [2.027, 213, 9], 'false,false,false': [0.062, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.554, 162, 91], 'false,true': [0.108, 0, 13], 'false,false,true': [0.544, 0, 22], 'false,false,false,true': [0.033, 25, 0], 'false,false,false,false': [0.056, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.193, 4, 107], 'true,false': [1.761, 262, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.696, 20, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [2.167, 5, 80], 'true,false,true': [0.038, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.168, 184, 22], 'false,false,false': [0.205, 65, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.201, 3, 77], 'false,true,true,true': [0.724, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.021, 190, 0], 'false,false,true': [0.818, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.001, 32, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.543, 2, 94], 'true,true,false': [0.009, 0, 9], 'true,false,true': [6.5e-08, 156, 0], 'true,false,false,true': [0.0, 14, 0], 'true,false,false,false': [0.46, 9, 2], 'false,true': [0.869, 1, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.475, 46, 17]}]
{'': [0.22292766079066043, 0.2292444699798909], 'false': [0.0, 4.0902953538821554e-17], 'true': [0.04415294924554408, 0.009660916121356175], 'true,false': [-1.9709577291098283e-16, 0.0685871056241427], 'false,true': [0.0, nan]}
{'': [0.044714220221201424, 0.09331139680771255], 'false': [0.07159705188445699, 0.13254753163927707], 'false,false': [0.03027343749999997, 0.16164034870556784], 'false,false,false': [0.0, 0.1498623949661504], 'false,true': [nan, 0.07159705188445699], 'false,false,true': [nan, 0.03027343749999997]}
{'': [0.060466024094660877, 0.08846967443377436], 'false': [nan, 0.08846967443377429], 'false,false': [-2.0898315757650005e-16, 0.0726860254884548], 'true': [0.03844067012663264, 0.23486504578217213], 'true,false': [0.003135193395207514, 0.22222222222222224], 'true,true': [0.038502013830025154, 0.0], 'false,false,true': [0.0, 5.551115123125783e-17]}
{'': [0.01546215856651705, 5.029334599606865e-05], 'false': [3.5823061197673113e-06, -3.0708296425802203e-17], 'false,true': [nan, 3.5823061197673113e-06], 'false,false': [nan, -3.0708296425802203e-17], 'false,false,false': [nan, -3.0708296425802203e-17]}
{'': [0.0037664812235833275, 0.05853195478489487], 'false': [-2.6122894697062506e-17, 0.055472833623687344], 'false,false': [0.057979049458621104, 0.0038305923192276546], 'false,false,true': [0.039102555614619505, 0.018509233841525124], 'true': [0.0035989535494223316, 0.0015752091073868435], 'false,true': [-2.6122894697062506e-17, nan]}
{'': [0.049925418033143196, 0.063256750830179], 'false': [0.0008907482471396644, 0.06583876499636487], 'false,false': [0.013439737368946285, 6.492439001237749e-05], 'true': [nan, 0.049925418033143126], 'true,false': [nan, 0.049925418033143196], 'false,false,false': [4.317320128696123e-05, 6.84485638115807e-05]}
{'': [0.04378147465295454, 0.017285818754082506], 'true': [0.0433316830832429, 0.011365396597246577], 'false': [nan, 0.017285818754082506], 'false,false': [nan, 0.017285818754082506], 'false,false,false': [nan, 0.017285818754082506]}
{'': [0.05414731771054091, 0.03323331610865956], 'true': [0.05523421526078306, 0.0007216725722740819], 'false': [nan, 0.03323331610865952], 'false,false': [0.028077321785305125, 0.04184178105381926], 'true,false': [0.0007216725722740819, nan]}
{'': [0.040309991099613175, 0.029218271355098666], 'false': [0.020647585117325822, 0.05931604833177651], 'false,false': [0.03715844496793245, 4.243185181690423e-08], 'false,true': [0.016359712788929365, 2.222685809564371e-06], 'false,true,true': [0.016359712788929365, nan], 'false,false,false': [nan, 4.243185181690423e-08]}
{'': [0.024257795992404626, 0.04339200226313772], 'false': [0.15113572363765077, 0.034555998443193334], 'false,false': [nan, 0.034555998443193334], 'true': [0.02277247404061585, 0.0014194887341368676], 'true,true': [0.024808261934327763, 9.043365331001807e-06], 'true,false': [2.7043894189587146e-17, 0.009492410319086018], 'true,false,false': [-1.982541115402065e-18, 0.019273134116406743]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 9.956
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.011995088945666036;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return -0.14185106490048782;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( recursion_accounttype(J, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6986739699917528;  // std dev = 0.154, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5324251143354537;  // std dev = 0.909, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.06522237502967489;  // std dev = 2.832, 169.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=12 */
%   | | | else return -0.04319801608614818;  // std dev = 1.447, 32.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.03220639032352005;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11002432643175429;  // std dev = 2.959, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5473511850152163;  // std dev = 0.998, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.2510075865212148;  // std dev = 1.420, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else return 0.6401678229013741;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6383854898486713;  // std dev = 0.298, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5604964451964926;  // std dev = 7.45e-09, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6781407998767719;  // std dev = 0.966, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.11923344585899419;  // std dev = 0.066, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09225832947860886;  // std dev = 2.009, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.1402331482076368;  // std dev = 2.045, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(D, F), follows(G, D) )
%   | | | then return 0.40853314630228055;  // std dev = 0.993, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | | | else return 0.4715380019023634;  // std dev = 0.162, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(D, H), follows(H, A) )
%   | | | then return 0.32421658768275624;  // std dev = 0.948, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4234680008384116;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(I, A), follows(A, I) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.3314996490839728;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5658969798531138;  // std dev = 0.195, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.47103313269044345;  // std dev = 0.329, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6713002229967678;  // std dev = 0.022, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.11521164428869915;  // std dev = 0.017, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3169659389853417;  // std dev = 0.124, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.14461562280428464;  // std dev = 1.177, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.41800599280636547;  // std dev = 0.309, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3564526445385109;  // std dev = 0.166, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3260205494748714;  // std dev = 0.024, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4029548241642079;  // std dev = 0.938, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.09718180871811788;  // std dev = 0.077, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03304169818056411;  // std dev = 1.589, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.04069033571533912;  // std dev = 1.643, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.2572384521034145;  // std dev = 1.025, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return -0.07018586249398069;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G), tweets(D, G) )
%   | | | then return -0.23575657803015299;  // std dev = 1.059, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.28045894028313706;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.05229104350136101;  // std dev = 0.129, 223.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=20 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I) )
%   | | then return 0.2855088307319744;  // std dev = 0.136, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.14775447569067507;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.45325104242352326;  // std dev = 0.112, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.12191713638809361;  // std dev = 0.026, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.21775386541370645;  // std dev = 0.035, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.118357052702087;  // std dev = 1.346, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return 0.24079875864386313;  // std dev = 0.093, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.23567895442884687;  // std dev = 0.155, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then return -0.045384261145827144;  // std dev = 0.137, 247.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.330738219073029;  // std dev = 0.363, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12694377719746255;  // std dev = 0.013, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.04883197662493091;  // std dev = 0.739, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.007013762600947573;  // std dev = 1.026, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19133846366511692;  // std dev = 0.153, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else return -0.09406725752614302;  // std dev = 0.859, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(G, A) )
%   | | then if ( tweets(A, H), follows(E, G) )
%   | | | then return 0.29823702507586003;  // std dev = 0.039, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4045624995301546;  // std dev = 0.085, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.010751222479405279;  // std dev = 0.859, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.06765030247011344;  // std dev = 0.862, 124.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=3 */
%   | | | else return -0.015544024061490342;  // std dev = 1.484, 83.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=12 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.024004590282474564;  // std dev = 1.323, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.027567818404606533;  // std dev = 1.185, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.1712910258770322;  // std dev = 0.257, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | else if ( follows(E, A) )
%   | | then return -0.032288025701230495;  // std dev = 0.916, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07832716830478681;  // std dev = 0.907, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.17159594901776723;  // std dev = 0.104, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.3951296966762242;  // std dev = 0.107, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07744636170133999;  // std dev = 0.076, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.21478905792159803;  // std dev = 0.961, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.38346321271617567;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1176393526438213;  // std dev = 0.055, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.09045082156333907;  // std dev = 1.934, 76.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=72 */
%   | | | else return 0.23334852837384695;  // std dev = 1.043, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return 0.04504222517398785;  // std dev = 0.284, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0718809499506032;  // std dev = 0.025, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else return -0.042248527201833606;  // std dev = 0.109, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.1214126479647395;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2897791698062469;  // std dev = 0.032, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10402298215576891;  // std dev = 0.039, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.059612780269683086;  // std dev = 0.191, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.768', 'seconds']
Refined model CLL: -0.103673


******************************************
Best model found
******************************************
Results 

CLL : -0.103032 

AUC ROC : 0.994442 

AUC PR : 0.375045 

Precision : 0.339869 

Recall : 1.0 

F1 : 0.507317 

Total Learning Time : 9.956 

Total Inference Time : 14.612502098083496 

Total revision time: 36.13884321022034
Best scored revision CLL: -0.103673


Results 

CLL : -0.103032 

AUC ROC : 0.994442 

AUC PR : 0.375045 

Precision : 0.339869 

Recall : 1.0 

F1 : 0.507317 

Total Learning Time : 36.15536084938049 

Total Inference Time : 14.612502098083496 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.648
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else return -0.07733493586822965;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.5914822684328456;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7149875723416727;  // std dev = 1.018, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03570189985210082;  // std dev = 0.263, 178.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.056941777129073695;  // std dev = 1.784, 49.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5194734122109546;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.1378930285334072;  // std dev = 4.530, 130.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5737545888703549;  // std dev = 0.364, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.2696456989223795;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7322021977754014;  // std dev = 0.224, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6040520610480192;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5945644800752551;  // std dev = 0.183, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5611255798213823;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.003675473869927867;  // std dev = 0.310, 359.000 (wgt'ed) examples reached here.  /* #neg=302 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5139447352072761;  // std dev = 2.704, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12445019312457535;  // std dev = 0.006, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1418166722348673;  // std dev = 7.60e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3070930236520531;  // std dev = 1.138, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.47906235885365356;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3020284838814657;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5134562869122332;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5877432893542325;  // std dev = 0.139, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10008374321773998;  // std dev = 1.639, 259.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=5 */
%   | | else return 0.024799555743836094;  // std dev = 0.296, 68.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03866997269646833;  // std dev = 3.042, 226.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2533035851437528;  // std dev = 0.184, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4406617298730749;  // std dev = 1.656, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11435325502326552;  // std dev = 0.023, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return -0.11926403104044463;  // std dev = 0.056, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2822358762183286;  // std dev = 0.901, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | else return -0.0869284874580146;  // std dev = 1.575, 257.000 (wgt'ed) examples reached here.  /* #neg=250 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03759613945587531;  // std dev = 2.211, 85.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18673292973103248;  // std dev = 0.084, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.25996705260958675;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.047907623752831155;  // std dev = 0.143, 188.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=19 */
%   | | else return 0.009103301855836564;  // std dev = 0.242, 184.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12009118109562011;  // std dev = 0.227, 83.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2865451374484531;  // std dev = 0.912, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09404559559457767;  // std dev = 0.095, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.32826631605281276;  // std dev = 1.317, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10350217602690553;  // std dev = 0.103, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1647159445418943;  // std dev = 1.423, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.16075912863168562;  // std dev = 0.398, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08404436150357071;  // std dev = 4.94e-08, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09925105862254449;  // std dev = 0.020, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.03553545331693087;  // std dev = 1.152, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.02419869731810747;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01958407456275308;  // std dev = 2.198, 132.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.150', 'seconds']
Parameter learned model CLL:-0.108124 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 174, 0], 'true,false,false': [0.246, 58, 4], 'false,true,true': [2.6e-07, 0, 37], 'false,true,false': [1.713, 4, 11], 'false,false': [8.93e-09, 100, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.018, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.263, 159, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.784, 45, 4], 'false,false,false,true': [1.265, 2, 8], 'false,false,false,false': [4.53, 90, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [0.364, 0, 67], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.224, 0, 3], 'true,false,false': [0.0, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.183, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false': [0.31, 302, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.704, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.006, 236, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.6e-08, 111, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.138, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.139, 0, 39], 'false,false,true,false': [1.639, 254, 5], 'false,false,false': [0.296, 55, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.042, 144, 82], 'false,true': [0.184, 0, 22], 'false,false,true': [1.656, 2, 52], 'false,false,false,true': [0.023, 72, 0], 'false,false,false,false': [0.056, 66, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.901, 0, 121], 'true,false': [1.575, 250, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.211, 57, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.084, 0, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.143, 169, 19], 'false,false,false': [0.242, 132, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.227, 5, 78], 'false,true,true,true': [0.912, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.095, 223, 0], 'false,false,true': [1.317, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.103, 93, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.423, 2, 85], 'true,true,false': [0.398, 0, 19], 'true,false,true': [4.94e-08, 195, 0], 'true,false,false,true': [0.02, 26, 0], 'true,false,false,false': [1.152, 21, 4], 'false,true': [0.943, 1, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.198, 92, 40]}]
{'': [0.2160664819944619, 0.21606648199446066], 'true': [0.01851192595229848, 0.016661878770468153], 'false': [0.07100591715976382, 7.993605777301127e-17], 'false,true': [1.8243664837083652e-15, 0.1955555555555553], 'true,false': [-1.8376105235175005e-16, 0.060353798126950985]}
{'': [0.012041872630317328, 0.11608369998979712], 'false': [0.06896177589814015, 0.150507318706836], 'false,false': [0.0649826004254904, 0.16765321163985647], 'false,false,false': [0.15999999999999984, 0.15784166385557205], 'false,true': [nan, 0.06896177589814015], 'false,false,true': [nan, 0.0649826004254904]}
{'': [0.01236024127268892, 0.10758796828929708], 'false': [nan, 0.10758796828929834], 'false,false': [0.001825567428878971, 0.09600787393859671], 'true': [0.012255430043401983, 0.00781813569525794], 'true,true': [0.001977699182532168, 0.0], 'true,false': [0.016722892063281664, -1.1102230246251565e-16], 'false,false,true': [0.005590800250942459, -1.1842378929335003e-16]}
{'': [0.04568798292990946, 8.985232096840373e-05], 'false': [3.5637865245233125e-05, 5.201044800045778e-17], 'false,true': [nan, 3.563786524520866e-05], 'false,false': [nan, 5.201044800045778e-17], 'false,false,false': [nan, 5.201044800045778e-17]}
{'': [0.016750645645116913, 0.0691896531412601], 'false': [0.0020361027293101914, 0.06763498692751621], 'false,false': [0.06288877757664449, 0.08744478860810158], 'false,false,true': [0.0004946806267837426, 0.010367467150421453], 'true': [0.01659105001553059, 0.0], 'false,true': [9.254727946383934e-06, 0.0]}
{'': [0.04094538620013734, 0.07353123404584147], 'false': [0.001537339500503579, 0.077105610148354], 'false,false': [0.05078689348309296, 3.2744251161865066e-05], 'true': [nan, 0.04094538620013736], 'true,false': [nan, 0.04094538620013734], 'false,false,false': [7.496173873263364e-06, 4.770549285211997e-05]}
{'': [0.038371314954302196, 0.05749161285198356], 'false': [nan, 0.057491612851983745], 'false,false': [nan, 0.05749161285198356], 'false,false,false': [nan, 0.05749161285198356], 'true': [0.006715396124061592, 0.009650697327570977]}
{'': [0.00020788077108417117, 0.04003183878914006], 'false': [nan, 0.04003183878913972], 'false,false': [0.020350072725609018, 0.05849887207401647], 'true': [8.432131153636797e-05, 9.855539449844797e-05], 'true,false': [9.855539449844797e-05, nan]}
{'': [0.051321784894672956, 0.03289462914369448], 'false': [0.021237086668123403, 0.05261329948361066], 'false,false': [0.04231084454709142, 0.00011505346859173945], 'false,true': [0.021869465186064592, 4.015610014782248e-05], 'false,true,true': [0.021869465186064592, nan], 'false,false,false': [nan, 0.00011505346859173945]}
{'': [0.022757972149954696, 0.04056669498910149], 'false': [0.09876543209876543, 0.03659724003815309], 'false,false': [nan, 0.03659724003815296], 'true': [0.02060114331261696, 0.005651665161047167], 'true,true': [0.023281028420146965, 0.008317240394115744], 'true,false': [1.25255930983351e-17, 0.027057375003640124], 'true,false,false': [1.5271389484810252e-05, 0.05311152281440132]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
0;false,true;follows(E, F), follows(A, F).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 13.998
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.8368723393548312;  // std dev = 0.989, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.06867525088898598;  // std dev = 1.777, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return -0.1418510649004877;  // std dev = 2.36e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else if ( recursion_accounttype(J, B) )
%   | then return 0.8581489350995121;  // std dev = 2.79e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else return -0.14185106490048763;  // std dev = 8.56e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.6449833217899462;  // std dev = 0.266, 65.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=60 */
%   | else return 0.7319336820037593;  // std dev = 0.174, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.11348480966179432;  // std dev = 0.101, 144.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.7380321636559932;  // std dev = 0.176, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.12955421329083597;  // std dev = 0.082, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.681011873749416;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.12544463852839152;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1209897929372511;  // std dev = 2.661, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | | else return 0.1670269944198436;  // std dev = 2.050, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5755427967339161;  // std dev = 0.027, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.6709880328105112;  // std dev = 0.145, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.597236712693391;  // std dev = 0.056, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5891924245567721;  // std dev = 0.157, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5722506891990803;  // std dev = 0.021, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5279125171194756;  // std dev = 0.819, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11441922718470937;  // std dev = 0.080, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09705278083660365;  // std dev = 3.203, 83.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=25 */
%   | | | else return 0.14976817983324475;  // std dev = 2.380, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.43366147708575536;  // std dev = 0.315, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | | | else return 0.3798364839461109;  // std dev = 0.745, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.20819026560638504;  // std dev = 0.778, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.5101778226937166;  // std dev = 0.279, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.38488209811557456;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.6566207206705378;  // std dev = 0.154, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.6513675568610919;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(L, A) )
%   | then return -0.1031161147334497;  // std dev = 0.066, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return -0.14011896520316536;  // std dev = 0.143, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.3072520094303826;  // std dev = 1.005, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.26673263818159154;  // std dev = 1.242, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return 0.3406364610807465;  // std dev = 0.073, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.4546810203237831;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33392486448237074;  // std dev = 0.032, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.39212668293648056;  // std dev = 1.111, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.08819421643820649;  // std dev = 1.311, 238.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=5 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.06992327248789315;  // std dev = 0.575, 36.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   | | | else return 0.07923045944528015;  // std dev = 1.622, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.21371788711304604;  // std dev = 1.374, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.2525114667215344;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.2878101377233864;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, G) )
%   | | then return -0.052603965588949246;  // std dev = 0.102, 144.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=14 */
%   | | else return -0.07256441999656046;  // std dev = 0.065, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26671904208333747;  // std dev = 0.035, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.3279295975412431;  // std dev = 0.406, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.3938933230833577;  // std dev = 0.974, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return -0.11007341948739127;  // std dev = 0.019, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.22297510373386029;  // std dev = 0.020, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.22666965361225655;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.05655321412412077;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.21203914551082806;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then return -0.046525862337165956;  // std dev = 0.111, 233.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.23519657786716391;  // std dev = 1.113, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.1009178807726997;  // std dev = 0.089, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.08674560844214121;  // std dev = 0.820, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.014323254622081649;  // std dev = 1.327, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.18448363565751055;  // std dev = 0.011, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.13591532747170956;  // std dev = 0.936, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.17713077120637374;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2645488093254779;  // std dev = 0.028, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.2178247355327905;  // std dev = 0.085, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.28726496583739336;  // std dev = 0.299, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.07857108500193535;  // std dev = 0.048, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.011758179291863432;  // std dev = 1.093, 66.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=15 */
%   | | | else return 0.0053202572191816955;  // std dev = 1.963, 84.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=25 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.08971825809870808;  // std dev = 1.665, 40.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=37 */
%   | | | else return 0.1508658841279454;  // std dev = 0.054, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.20541931085809764;  // std dev = 0.055, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.022955699867576913;  // std dev = 0.312, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.19117101016144764;  // std dev = 0.060, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07307435454024412;  // std dev = 0.048, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.24521758719692005;  // std dev = 0.153, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.3572239868612624;  // std dev = 0.142, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.10334813506335858;  // std dev = 0.022, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.12634692681802642;  // std dev = 0.986, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.15049766034731413;  // std dev = 0.090, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.19280042911499864;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06193813935972058;  // std dev = 0.047, 209.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13060118672957186;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.20288769373598503;  // std dev = 0.133, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.0829105806966461;  // std dev = 0.082, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04870404188613212;  // std dev = 0.649, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.010418194313914839;  // std dev = 1.063, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.965', 'seconds']
Refined model CLL: -0.096783


******************************************
Best model found
******************************************
Results 

CLL : -0.098276 

AUC ROC : 0.993345 

AUC PR : 0.36557 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 13.998 

Total Inference Time : 14.862261533737183 

Total revision time: 40.83127865409851
Best scored revision CLL: -0.096783


Results 

CLL : -0.098276 

AUC ROC : 0.993345 

AUC PR : 0.36557 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 40.84779629325867 

Total Inference Time : 14.862261533737183 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.463
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else return -0.08302753548872306;  // std dev = 0.235, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 7.45e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6933209791426751;  // std dev = 1.710, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.038096186112563005;  // std dev = 0.260, 213.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09978344692783747;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7285554015677008;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13356977103950904;  // std dev = 2.940, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5433342651574943;  // std dev = 1.762, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7344522732371825;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8228345367930714;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5643290406600241;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5709953390608059;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4598842279496948;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.02709375287793733;  // std dev = 0.271, 274.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4845569948136704;  // std dev = 2.641, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11843395736211125;  // std dev = 9.20e-05, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13759919638429507;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.327544838293066;  // std dev = 1.139, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.3861605434170823;  // std dev = 0.149, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3280927993939427;  // std dev = 0.050, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6229852784225662;  // std dev = 0.088, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08400154124206213;  // std dev = 2.085, 250.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=9 */
%   | | else return -0.10637280838233408;  // std dev = 2.28e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.037890742907648;  // std dev = 3.396, 259.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2730721772108056;  // std dev = 0.113, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48451106425361296;  // std dev = 0.649, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10920085261241005;  // std dev = 0.040, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.10769674901957063;  // std dev = 0.045, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25017291222324517;  // std dev = 2.376, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | else return -0.0784496144637891;  // std dev = 1.809, 256.000 (wgt'ed) examples reached here.  /* #neg=245 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.008007137040233236;  // std dev = 0.752, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.180196625893509;  // std dev = 1.414, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.23186418241870843;  // std dev = 0.045, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.041161270503201584;  // std dev = 0.161, 188.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=22 */
%   | | else return 0.0224911945736111;  // std dev = 0.219, 83.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16996956680517072;  // std dev = 0.160, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26607763863403844;  // std dev = 1.105, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09120119098401358;  // std dev = 0.025, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3369687055235754;  // std dev = 1.203, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09783475951334773;  // std dev = 0.000408, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15557286456405187;  // std dev = 2.110, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.15414913800173524;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08452483534421656;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.081725868580197;  // std dev = 9.13e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.010969017087329832;  // std dev = 0.469, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1207148772281425;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.020279766909796527;  // std dev = 1.713, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.252', 'seconds']
Parameter learned model CLL:-0.109124 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 172, 0], 'true,false,false': [0.235, 32, 2], 'false,true,true': [0.977, 1, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [7.45e-09, 51, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.71, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.26, 191, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.984, 30, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.94, 39, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.762, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false': [0.271, 242, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.641, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [9.2e-05, 198, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 45, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.139, 1, 73], 'true,false': [0.149, 0, 4], 'false,true,true': [0.05, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.088, 0, 23], 'false,false,true,false': [2.085, 241, 9], 'false,false,false': [2.28e-09, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.396, 168, 91], 'false,true': [0.113, 0, 13], 'false,false,true': [0.649, 0, 22], 'false,false,false,true': [0.04, 28, 0], 'false,false,false,false': [0.045, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.376, 5, 107], 'true,false': [1.809, 245, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.752, 23, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [1.414, 2, 80], 'true,false,true': [0.045, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.161, 166, 22], 'false,false,false': [0.219, 61, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.16, 2, 77], 'false,true,true,true': [1.105, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.025, 209, 0], 'false,false,true': [1.203, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.000408, 39, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [2.11, 4, 94], 'true,true,false': [0.005, 0, 9], 'true,false,true': [0.0, 174, 0], 'true,false,false,true': [9.13e-09, 20, 0], 'true,false,false,false': [0.469, 8, 2], 'false,true': [0.028, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.713, 41, 17]}]
{'': [0.22292766079066043, 0.2049164946519049], 'true': [0.03598567560485849, 0.009614478273164131], 'false': [0.04338842975206614, 5.659960517696876e-17], 'false,true': [0.04338842975206614, nan], 'true,false': [-1.8073398075293246e-16, 0.05536332179930797]}
{'': [0.03439668796554785, 0.09121279571224837], 'false': [0.06751909962913685, 0.13686185557237862], 'false,false': [0.031217481789802243, 0.16605226154420324], 'false,false,false': [0.0, 0.1543126106664538], 'false,true': [nan, 0.06751909962913685], 'false,false,true': [nan, 0.031217481789802243]}
{'': [0.04120740538224856, 0.08907027977772694], 'false': [nan, 0.0890702797777269], 'false,false': [0.05246913580246895, 0.07333032529345827], 'false,false,true': [-1.4802973661668753e-16, 0.09876543209876533], 'true': [0.042439008884466195, 0.01590080990477934], 'true,true': [0.04252676931903648, 0.0], 'true,false': [0.0031523686936761885, 0.0]}
{'': [0.053263374707973155, 5.543035473579207e-05], 'false': [8.461375133659277e-09, -1.973729821555834e-17], 'false,true': [nan, 8.461375133659277e-09], 'false,false': [nan, -1.973729821555834e-17], 'false,false,false': [nan, -1.973729821555834e-17]}
{'': [0.017084141597812536, 0.0549265636054244], 'false': [0.00014970412868476433, 0.051073154689938914], 'false,false': [0.05452234297952537, 5.28677630773884e-18], 'false,false,true': [0.0003385131776606535, 0.0173970049435362], 'true': [0.017532304723160884, 0.005533517808972904], 'false,true': [0.00014970412868476433, nan]}
{'': [0.04453857608115936, 0.0692894071864486], 'false': [0.0009878844212875336, 0.07300444804215808], 'false,false': [0.019127607823484386, 5.85588301623177e-05], 'true': [nan, 0.04453857608115875], 'true,false': [nan, 0.04453857608115936], 'false,false,false': [5.692263416496947e-05, 5.888458934586547e-05]}
{'': [0.047093888718913124, 0.0182457475502165], 'true': [0.050398757628634945, 0.012780645295988248], 'false': [nan, 0.0182457475502165], 'false,false': [nan, 0.0182457475502165], 'false,false,false': [nan, 0.0182457475502165]}
{'': [0.02389546322152251, 0.033612405838601075], 'false': [nan, 0.03361240583860133], 'false,false': [0.026065573232111103, 0.04789570707225929], 'true': [0.024390078877215088, 0.0010102453312538576], 'true,false': [0.0010102453312538576, nan]}
{'': [0.02570328645006923, 0.029913268968870595], 'false': [0.020081297118900363, 0.0662201030564991], 'false,false': [0.08034421052359018, 4.265076572545048e-09], 'false,true': [0.037002431623685626, 2.971481027504051e-06], 'false,true,true': [0.037002431623685626, nan], 'false,false,false': [nan, 4.265076572545048e-09]}
{'': [0.027774166818921576, 0.047924249746628116], 'false': [0.00020131806163581345, 0.05056469858329033], 'false,false': [nan, 0.05056469858329033], 'true': [0.04162450269937862, 0.0013313452524248098], 'true,true': [0.04544674112174889, 2.7167091243655386e-06], 'true,false': [-1.914177628664063e-17, 0.008459375898752595], 'true,false,false': [4.163336342344337e-18, 0.022040439674135333]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 14.375
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.8211118980624753;  // std dev = 1.388, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.13199884815171986;  // std dev = 0.099, 203.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=2 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( tweets(A, I) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7128108479886945;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5766162693538115;  // std dev = 0.350, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7320024275302001;  // std dev = 0.080, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1265295028856581;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | else return 3.88493574751798E-4;  // std dev = 0.306, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.09081521717137223;  // std dev = 0.186, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12466574962068086;  // std dev = 2.959, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5405888116367219;  // std dev = 1.384, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.4857442840296774;  // std dev = 0.960, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.7620016161561666;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6460930073442014;  // std dev = 0.132, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5567208170049958;  // std dev = 0.000627, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5856953852763414;  // std dev = 0.259, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11643672765749123;  // std dev = 0.076, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.060773695287549;  // std dev = 2.109, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | | else return 0.0946247445988186;  // std dev = 2.120, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(E, F) )
%   | | | then return 0.44751947568941786;  // std dev = 0.442, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 0.06602828377763832;  // std dev = 1.354, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return 0.4405227755048504;  // std dev = 0.329, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.6077267628083378;  // std dev = 1.037, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return 0.21880507566981972;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(I, A) )
%   | then return -0.10510127254118637;  // std dev = 0.081, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return -0.14894084720827813;  // std dev = 0.014, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.31477475707936176;  // std dev = 1.012, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.08320155361622193;  // std dev = 1.231, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( recursion_accounttype(D, B), follows(A, D) )
%   | | | then return 0.35669633049329197;  // std dev = 0.087, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5639748125283042;  // std dev = 0.185, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.07568173888137153;  // std dev = 0.909, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3400547508675734;  // std dev = 0.025, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.41719647465024684;  // std dev = 0.573, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07747765124376037;  // std dev = 1.867, 232.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=9 */
%   | | else return -0.09583775878577287;  // std dev = 1.05e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.2732063357591742;  // std dev = 0.246, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.1443910039838397;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.008870362637829218;  // std dev = 0.893, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then return -0.06313278135297958;  // std dev = 0.104, 174.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=15 */
%   | | else return -0.028958799760471998;  // std dev = 0.157, 31.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2831383645860091;  // std dev = 0.029, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.344882701301683;  // std dev = 1.008, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5179779603156999;  // std dev = 0.284, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11585659329176211;  // std dev = 0.013, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(C, A), follows(A, D) )
%   | | then return 0.19838466822986997;  // std dev = 0.130, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | else return 0.3018494964273732;  // std dev = 0.072, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.07169451346087605;  // std dev = 0.815, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(F, A) )
%   | | | then return 0.01016226644578988;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2886120798358741;  // std dev = 0.388, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.08698202466151876;  // std dev = 0.009, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.2327210335571377;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.07890674047350477;  // std dev = 1.276, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | | | else return -0.07899750921804251;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.18445466605282682;  // std dev = 0.095, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.04392386767586354;  // std dev = 0.857, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.19944000609945353;  // std dev = 0.033, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.24003775137687938;  // std dev = 0.054, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.24809816730755196;  // std dev = 0.077, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.0703263413287174;  // std dev = 0.457, 124.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=3 */
%   | | | else return -0.03426991564192341;  // std dev = 0.980, 80.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.02188623430306874;  // std dev = 1.375, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | | else return 0.002728811446397826;  // std dev = 1.224, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1637164511830594;  // std dev = 0.023, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(E, A) )
%   | | then return 0.24094912103414803;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.13602987034564734;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.2162322687802917;  // std dev = 0.214, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.15644979541796436;  // std dev = 0.056, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.07369032413645832;  // std dev = 0.078, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3114417728211397;  // std dev = 0.067, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4021902245519675;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.10874783719791703;  // std dev = 0.010, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.13409372968696726;  // std dev = 0.995, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | | | else return 0.17229135710096236;  // std dev = 0.243, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.14415061206911656;  // std dev = 0.024, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06585648908823877;  // std dev = 0.033, 210.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12082543583601879;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.26866413789343097;  // std dev = 0.120, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09594370083214752;  // std dev = 0.040, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06566780222702696;  // std dev = 0.481, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.013024155006205169;  // std dev = 0.785, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.668', 'seconds']
Refined model CLL: -0.10054


******************************************
Best model found
******************************************
Results 

CLL : -0.096412 

AUC ROC : 0.994863 

AUC PR : 0.394726 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 14.375 

Total Inference Time : 16.421335697174072 

Total revision time: 41.83808535385132
Best scored revision CLL: -0.10054


Results 

CLL : -0.096412 

AUC ROC : 0.994863 

AUC PR : 0.394726 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 41.86742728996277 

Total Inference Time : 16.421335697174072 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.541
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else return -0.07627729440868444;  // std dev = 0.248, 61.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048774;  // std dev = 3.73e-09, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7284404550561845;  // std dev = 0.199, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03902594269514785;  // std dev = 0.257, 187.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.059957671584067194;  // std dev = 1.789, 51.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.10593876690535979;  // std dev = 4.554, 146.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5729612882893466;  // std dev = 0.372, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7310413234238545;  // std dev = 0.225, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.4456483294117099;  // std dev = 0.974, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5600704534717168;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.002865235488907072;  // std dev = 0.299, 383.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5301173037056797;  // std dev = 2.093, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12302247546365139;  // std dev = 0.005, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13719593569267538;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.27934383134328855;  // std dev = 1.618, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.4716998320654755;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.25792363981838157;  // std dev = 0.983, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.5429119738395636;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5661119489997907;  // std dev = 1.010, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.09917361298900171;  // std dev = 1.643, 275.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=5 */
%   | | else return 0.0028786881572806984;  // std dev = 0.273, 73.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.029541964150787116;  // std dev = 3.269, 233.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2631691043549408;  // std dev = 0.189, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45009492163147635;  // std dev = 1.232, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11097248450692442;  // std dev = 0.029, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | | else return -0.11548832663045239;  // std dev = 0.042, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2608816388240931;  // std dev = 2.027, 124.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else return -0.08817311784391611;  // std dev = 1.756, 258.000 (wgt'ed) examples reached here.  /* #neg=251 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05436078032089955;  // std dev = 1.953, 76.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19279798114683278;  // std dev = 0.077, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2690726464596734;  // std dev = 0.030, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.045474281653743974;  // std dev = 0.146, 189.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=19 */
%   | | else return 0.016925926268772287;  // std dev = 0.203, 193.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14619307570895285;  // std dev = 0.177, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2651374328362242;  // std dev = 1.442, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09335401904774975;  // std dev = 0.095, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.31721872432026343;  // std dev = 1.213, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0999281375125129;  // std dev = 0.098, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16720210389755683;  // std dev = 1.554, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.16453524974923955;  // std dev = 0.396, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.082913965018621;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09822302663791094;  // std dev = 0.027, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.018127773190340552;  // std dev = 0.940, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.08437560101573312;  // std dev = 1.277, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01308482500799288;  // std dev = 2.136, 136.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.129', 'seconds']
Parameter learned model CLL:-0.107303 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 163, 0], 'true,false,false': [0.248, 57, 4], 'false,true,true': [2.6e-07, 0, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [3.73e-09, 120, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.199, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.257, 168, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.789, 47, 4], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [4.554, 106, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [0.372, 0, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.225, 0, 3], 'true,false,false': [0.0, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.974, 1, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false': [0.299, 326, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.093, 1, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.005, 230, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 98, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.618, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.983, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.01, 1, 39], 'false,false,true,false': [1.643, 270, 5], 'false,false,false': [0.273, 60, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.269, 151, 82], 'false,true': [0.189, 0, 22], 'false,false,true': [1.232, 1, 52], 'false,false,false,true': [0.029, 74, 0], 'false,false,false,false': [0.042, 69, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.027, 3, 121], 'true,false': [1.756, 251, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.953, 48, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.077, 0, 83], 'true,false,true': [0.03, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.146, 170, 19], 'false,false,false': [0.203, 141, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.177, 3, 78], 'false,true,true,true': [1.442, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.095, 194, 0], 'false,false,true': [1.213, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.098, 104, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.554, 2, 85], 'true,true,false': [0.396, 0, 19], 'true,false,true': [0.0, 166, 0], 'true,false,false,true': [0.027, 22, 0], 'true,false,false,false': [0.94, 14, 4], 'false,true': [1.277, 2, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.136, 96, 40]}]
{'': [0.21982274714542804, 0.20408163265306214], 'true': [0.02725128832212642, 0.017538265306122344], 'false': [5.921189464667501e-16, 1.4802973661668754e-17], 'true,false': [-1.5801947344358056e-16, 0.061273851115291475], 'false,true': [1.8243664837083652e-15, -1.6148698540002277e-16]}
{'': [0.0004638428447629608, 0.10774316169500785], 'false': [0.06603453085469027, 0.13801815702796574], 'false,false': [0.0627706072280104, 0.1532074162470266], 'false,false,false': [0.0, 0.14204781012621565], 'false,true': [nan, 0.06603453085469027], 'false,false,true': [nan, 0.0627706072280104]}
{'': [0.0033912108362120744, 0.1011300948953223], 'false': [nan, 0.10113009489532195], 'false,false': [0.0459299349497505, 0.08924132246771051], 'false,false,true': [0.13542457244069367, -5.921189464667501e-17], 'true': [0.0020605529164633013, 0.010706653344762819], 'true,false': [0.016812881069577568, -1.1102230246251565e-16], 'true,true': [0.0020605529164633013, nan]}
{'': [0.02789048418436192, 5.899664283461025e-05], 'false': [2.411323448144634e-05, -6.797283824235652e-18], 'false,true': [nan, 2.411323448142317e-05], 'false,false': [nan, -6.797283824235652e-18], 'false,false,false': [nan, -6.797283824235652e-18]}
{'': [0.03276414097758189, 0.06667177769371219], 'false': [0.04744974982212082, 0.0634865346078541], 'false,false': [0.06087477567037877, 0.07450578398594702], 'false,false,true': [0.02549605137130615, 0.009816977774507754], 'false,true': [0.0460175185125864, 0.0], 'true': [0.03271689235691481, 0.0]}
{'': [0.045861937276816, 0.06797131842848468], 'false': [0.0016297472372383296, 0.07035354885718066], 'false,false': [0.02865184445137958, 2.3386448416532875e-05], 'true': [nan, 0.045861937276816006], 'true,false': [nan, 0.045861937276816], 'false,false,false': [1.1562763070760728e-05, 2.5513989504712825e-05]}
{'': [0.04554531208465609, 0.05018277941951133], 'false': [nan, 0.050182779419511325], 'false,false': [nan, 0.05018277941951133], 'false,false,false': [nan, 0.05018277941951133], 'true': [0.033144387115120105, 0.011955541668448033]}
{'': [0.00021438398293579714, 0.032397924609183816], 'false': [nan, 0.03239792460918365], 'false,false': [0.021244636670726336, 0.041393549660418846], 'true': [7.200422225368434e-05, 0.00044220947250678266], 'true,false': [0.00044220947250678266, nan]}
{'': [0.0312868210411279, 0.03464907307138652], 'false': [0.026878628772985514, 0.04550859001711904], 'false,false': [0.03590447279331309, 9.15755875993834e-05], 'false,true': [0.053345404692696476, 4.6706184883274234e-05], 'false,true,true': [0.053345404692696476, nan], 'false,false,false': [nan, 9.15755875993834e-05]}
{'': [0.024831891268896504, 0.04301909684911103], 'false': [0.16299450883320143, 0.03354679081525928], 'false,false': [nan, 0.03354679081525931], 'true': [0.024252266573082538, 0.005160307109398533], 'true,true': [0.027740456935432114, 0.008274189194159565], 'true,false': [-2.942759824307644e-17, 0.025469495042281937], 'true,false,false': [3.2950429440042894e-05, 0.049112975383273645]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
0;false,true;follows(E, F), follows(A, F).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 23.664
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.8581489350995126;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.8105298874804645;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048804;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.08037115732173453;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else if ( recursion_accounttype(J, B) )
%   | then return 0.8581489350995121;  // std dev = 2.79e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else return -0.14185106490048763;  // std dev = 8.43e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7247370818086283;  // std dev = 0.180, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.584428122044126;  // std dev = 1.611, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | | else return -0.12544463852839136;  // std dev = 4.21e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else return -0.09147932140698016;  // std dev = 0.186, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.014747689426266806;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.08737193498284393;  // std dev = 1.184, 45.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14215297268936875;  // std dev = 4.420, 126.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5255662332936952;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | | else return 0.3027021726465141;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( follows(F, A) )
%   | | then return 0.7140078792385888;  // std dev = 0.199, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.41250929388914176;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5652402059490031;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(I, A) )
%   | | then return -0.053383565670365396;  // std dev = 0.210, 207.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.12151479026099461;  // std dev = 2.997, 60.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=19 */
%   | | | else return 0.08205771910171375;  // std dev = 3.258, 78.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.3718666377262125;  // std dev = 1.260, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0.4381511447761871;  // std dev = 0.188, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.2257647245575827;  // std dev = 1.044, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.41673603675642995;  // std dev = 0.022, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.6544953958129969;  // std dev = 0.303, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.6664134321438211;  // std dev = 0.067, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(I, A) )
%   | then return -0.11223865204249409;  // std dev = 0.183, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return -0.154491105867407;  // std dev = 0.023, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then return 0.3210062772622472;  // std dev = 0.124, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.2029566795263694;  // std dev = 0.749, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2501024799418777;  // std dev = 0.959, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.5137763016051473;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32595044767755355;  // std dev = 0.026, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3904635898809167;  // std dev = 1.447, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.10224521389814907;  // std dev = 0.173, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.02782029694628598;  // std dev = 2.137, 58.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=15 */
%   | | | else return 0.10332105324964029;  // std dev = 2.565, 68.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.24297322424320328;  // std dev = 0.998, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return 0.3337963138478871;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0.26362709997852485;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.11059701772290946;  // std dev = 0.691, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.04926599985290217;  // std dev = 0.129, 172.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=15 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26477071802354324;  // std dev = 0.035, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.42396221916992266;  // std dev = 1.217, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.40032831143125436;  // std dev = 1.360, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | else return -0.12921959389098858;  // std dev = 0.023, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.21750177874706078;  // std dev = 0.096, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else return 0.25368448800975074;  // std dev = 0.114, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(G, F) )
%   | | | then return 0.3456826730181268;  // std dev = 0.218, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.5170834908536266;  // std dev = 0.111, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08608628463653106;  // std dev = 0.101, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.22632131982784082;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.029959712887407872;  // std dev = 2.328, 95.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=29 */
%   | | | else return 0.07067057143205357;  // std dev = 1.331, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.1479609714859102;  // std dev = 1.393, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | | else return 0.10133144386090438;  // std dev = 0.958, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.1862141956794121;  // std dev = 0.013, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.26337513394912243;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04391565226857095;  // std dev = 0.112, 239.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.24017847797920788;  // std dev = 1.970, 36.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   | | | else return -0.14181991755896184;  // std dev = 0.685, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.16279612038366112;  // std dev = 0.673, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.04627026813793705;  // std dev = 1.336, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.14774862524594776;  // std dev = 0.124, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return -0.07661682121190674;  // std dev = 1.198, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.062437585385226466;  // std dev = 0.955, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.15567988860089163;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.18710479894112297;  // std dev = 0.220, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | else return -0.07546664836966573;  // std dev = 0.074, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.2692302049484281;  // std dev = 0.971, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.3411043845154272;  // std dev = 0.074, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.126683918537478;  // std dev = 0.016, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.13121232626114418;  // std dev = 0.184, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else return -0.06438928303284815;  // std dev = 0.053, 208.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=4 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.15540730189977497;  // std dev = 0.079, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.22635061528652484;  // std dev = 0.990, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return -0.10340178288347716;  // std dev = 0.014, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2789944874131876;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.13374993208409558;  // std dev = 5.81e-05, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.025855676794717425;  // std dev = 0.449, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.03259919024384095;  // std dev = 0.861, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.302', 'seconds']
Refined model CLL: -0.102906


******************************************
Best model found
******************************************
Results 

CLL : -0.104344 

AUC ROC : 0.992671 

AUC PR : 0.336012 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 23.664 

Total Inference Time : 17.68586778640747 

Total revision time: 53.07310493469238
Best scored revision CLL: -0.102906


Results 

CLL : -0.104344 

AUC ROC : 0.992671 

AUC PR : 0.336012 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 53.10244687080383 

Total Inference Time : 17.68586778640747 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.517
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.45e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7147929058546477;  // std dev = 1.005, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04547420400157385;  // std dev = 0.248, 234.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09877315541148639;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7285554015677008;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1085708111334827;  // std dev = 3.001, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5499362870107419;  // std dev = 1.470, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7341199476657734;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8177868295229165;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5643290406600241;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5634953481633147;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5634953481633147;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.03401112242173574;  // std dev = 0.261, 299.000 (wgt'ed) examples reached here.  /* #neg=267 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4761140466221079;  // std dev = 2.756, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11760065168363727;  // std dev = 0.002, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1338554440808395;  // std dev = 1.49e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3220875929200805;  // std dev = 1.146, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.19885358958046545;  // std dev = 0.848, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31340477748917583;  // std dev = 3.94e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5143083462790398;  // std dev = 1.613, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | | else return -0.07943935387807545;  // std dev = 2.105, 224.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=9 */
%   | | else return -0.1079132233515152;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0134359201680695;  // std dev = 3.800, 296.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2628140634210468;  // std dev = 0.158, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45038097141171546;  // std dev = 1.375, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1090604704378456;  // std dev = 0.024, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.10251254393797242;  // std dev = 0.038, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28175573407719495;  // std dev = 1.800, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07222366496057073;  // std dev = 1.850, 227.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0411488568389186;  // std dev = 0.619, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15072278354394722;  // std dev = 1.950, 84.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2450043743508709;  // std dev = 0.065, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0479029245187815;  // std dev = 0.160, 223.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=22 */
%   | | else return 5.29917530566581E-4;  // std dev = 0.205, 107.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17246228292429883;  // std dev = 0.157, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3025454397501395;  // std dev = 0.802, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0892133486700495;  // std dev = 0.020, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.42771575567129017;  // std dev = 0.466, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09472845681000315;  // std dev = 0.002, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16202166015952799;  // std dev = 1.992, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.13683594771675653;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08209020536034331;  // std dev = 5.58e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08547379098834665;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.045360162766820845;  // std dev = 0.508, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13650633859284392;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015001820474803883;  // std dev = 1.561, 70.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.579', 'seconds']
Parameter learned model CLL:-0.1069 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 164, 0], 'true,false,false': [0.271, 23, 2], 'false,true,true': [0.977, 1, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.45e-09, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.005, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.248, 212, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.982, 27, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [3.001, 45, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.47, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.083, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [2.11e-08, 0, 8], 'false,false,false': [0.261, 267, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.756, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.002, 191, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.49e-08, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.146, 1, 73], 'true,false': [0.848, 1, 4], 'false,true,true': [3.94e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.613, 3, 23], 'false,false,true,false': [2.105, 215, 9], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.8, 205, 91], 'false,true': [0.158, 0, 13], 'false,false,true': [1.375, 1, 22], 'false,false,false,true': [0.024, 22, 0], 'false,false,false,false': [0.038, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.8, 3, 107], 'true,false': [1.85, 216, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.619, 10, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [1.95, 4, 80], 'true,false,true': [0.065, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 201, 22], 'false,false,false': [0.205, 85, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.157, 2, 77], 'false,true,true,true': [0.802, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.02, 191, 0], 'false,false,true': [0.466, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.002, 35, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.992, 4, 94], 'true,true,false': [0.013, 0, 9], 'true,false,true': [5.58e-08, 182, 0], 'true,false,false,true': [0.0, 15, 0], 'true,false,false,false': [0.508, 19, 2], 'false,true': [0.049, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.561, 53, 17]}]
{'': [0.22924446997989323, 0.2292444699798909], 'true': [0.027500889996442155, 0.010470031634052633], 'false': [0.04338842975206614, 3.900783600034334e-17], 'false,true': [0.04338842975206614, nan], 'true,false': [-1.5705594006892458e-16, 0.07360000000000004]}
{'': [0.012178293027610353, 0.08523205457973357], 'false': [0.06162715111193063, 0.13394728137335682], 'false,false': [0.03443877551020407, 0.15829507510891005], 'false,false,false': [0.0, 0.14521184894066294], 'false,true': [nan, 0.06162715111193063], 'false,false,true': [nan, 0.03443877551020407]}
{'': [0.029606917681337556, 0.08266627811175553], 'false': [nan, 0.08266627811175561], 'false,false': [5.224578939412501e-17, 0.06815991908295568], 'true': [0.030067100978316535, 0.01542876022006238], 'true,true': [0.030019992468052575, 0.0], 'true,false': [0.003459046836676194, 0.0], 'false,false,true': [4.9343245538895844e-17, 5.551115123125783e-17]}
{'': [0.05797236538545864, 4.5046940575265184e-05], 'false': [4.61306985935916e-06, 4.827056628805028e-18], 'false,true': [nan, 4.61306985936381e-06], 'false,false': [nan, 4.827056628805028e-18], 'false,false,false': [nan, 4.827056628805028e-18]}
{'': [0.026618402026577528, 0.061945450552570135], 'false': [9.143013143971877e-17, 0.05913071700412907], 'false,false': [0.0609765551283852, -6.1679056923619804e-18], 'false,false,true': [0.10001007695383761, 0.01978210001797766], 'true': [0.01774192419571762, 0.14376483279856886], 'false,true': [9.143013143971877e-17, nan]}
{'': [0.04877741132453891, 0.0777887839292436], 'false': [0.0019155261387253225, 0.08312252092990809], 'false,false': [0.08222666854691943, 4.17308297418842e-05], 'true': [nan, 0.04877741132453846], 'true,false': [nan, 0.04877741132453891], 'false,false,false': [2.5709627767161507e-05, 3.532865999169022e-05]}
{'': [0.04732213525341752, 0.021259206823455182], 'true': [0.029450498642224508, 0.015082828047399228], 'false': [nan, 0.021259206823455182], 'false,false': [nan, 0.021259206823455182], 'false,false,false': [nan, 0.021259206823455182]}
{'': [0.04446964252780044, 0.0314803358506317], 'true': [0.04527123045972226, 0.002120652379325981], 'false': [nan, 0.03148033585063179], 'false,false': [0.02559320057785821, 0.04216463429510122], 'true,false': [0.002120652379325981, nan]}
{'': [0.024753070616973693, 0.03160765566834779], 'false': [0.021749359013944043, 0.0642382427873761], 'false,false': [0.012778327360776717, 7.35125247706771e-08], 'false,true': [0.02010157567618147, 2.1164590981271117e-06], 'false,true,true': [0.02010157567618147, nan], 'false,false,false': [nan, 7.35125247706771e-08]}
{'': [0.02568417175254391, 0.033701111208227455], 'false': [0.0005971241751268029, 0.03479474880346503], 'false,false': [nan, 0.03479474880346503], 'true': [0.03714526033511753, 0.001301845879265884], 'true,true': [0.04050147322800889, 1.8864973766371158e-05], 'true,false': [1.708035422500241e-17, 0.007548919536356866], 'true,false,false': [-2.7755575615628915e-18, 0.012270545265679413]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 11.613
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8364098046647294;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.14185106490048782;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7111361901291305;  // std dev = 0.110, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.4738400459245516;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.06103215685347829;  // std dev = 2.819, 155.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=12 */
%   | | | else return -0.06045094231767246;  // std dev = 1.406, 39.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.012191501691016274;  // std dev = 0.907, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.12749385215996262;  // std dev = 0.034, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09218576848022807;  // std dev = 3.002, 66.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5357161640413792;  // std dev = 0.164, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | else return 0.4764302695158641;  // std dev = 0.390, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.39075755652818595;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5574242231948526;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5574242231948526;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7316022492966866;  // std dev = 0.000177, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11940365247395078;  // std dev = 0.106, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13293359062879848;  // std dev = 2.067, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | | else return 0.12144445428430621;  // std dev = 1.968, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.37782662083582697;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return 0.42729581121434074;  // std dev = 0.073, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.24739927273999882;  // std dev = 0.719, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.5169799391827303;  // std dev = 0.275, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.427142125537062;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.5673788211030659;  // std dev = 0.000221, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.6730764714991033;  // std dev = 0.005, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(J, A) )
%   | then return -0.10806132048693416;  // std dev = 0.106, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return -0.15153012956997788;  // std dev = 0.004, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.3368115130609605;  // std dev = 0.038, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.2722043424526952;  // std dev = 0.972, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.3332206808303525;  // std dev = 0.015, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.41945007776497406;  // std dev = 0.332, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.3453672873944086;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.20883811248185424;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.06532069382535115;  // std dev = 2.090, 207.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=15 */
%   | | | else return 0.05342362855279829;  // std dev = 2.328, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
%   | | else return -0.09138750938461904;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.2521402776266827;  // std dev = 0.132, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.10586680055868625;  // std dev = 1.307, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.27757410470329613;  // std dev = 0.052, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.26875545669981993;  // std dev = 0.038, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.05096803507888944;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.05003752491734846;  // std dev = 0.152, 182.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=15 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.28157663714267567;  // std dev = 0.050, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.45475280660677114;  // std dev = 0.101, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.12308005824939144;  // std dev = 0.024, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then if ( follows(A, C), tweets(C, D) )
%   | | then return 0.22333058306368678;  // std dev = 0.028, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(A, E), tweets(C, D) )
%   | | | then return -0.01962532693176211;  // std dev = 0.879, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2186556663102537;  // std dev = 0.039, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.24413358340943492;  // std dev = 0.039, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.23152020512290727;  // std dev = 0.076, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4549088720199021;  // std dev = 0.000223, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.08774421139144668;  // std dev = 0.083, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.018757781998376268;  // std dev = 1.365, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
%   | | | else return 0.0914906831215961;  // std dev = 1.105, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, G) )
%   | | | then return 0.12885075003977112;  // std dev = 1.659, 51.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=48 */
%   | | | else return 0.1943691552335132;  // std dev = 0.092, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.19067873093627494;  // std dev = 0.011, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.2725000684655003;  // std dev = 0.076, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.04001796781130891;  // std dev = 0.122, 214.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.31474780807147357;  // std dev = 0.364, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.12740113698556296;  // std dev = 0.027, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.21896993936600628;  // std dev = 0.594, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.011833303247013153;  // std dev = 0.964, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.1444190994646617;  // std dev = 0.987, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.16286549528386193;  // std dev = 0.025, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.17263587960067822;  // std dev = 0.029, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.19018938592563198;  // std dev = 0.079, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16631685066318602;  // std dev = 0.086, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.3553173676856195;  // std dev = 0.000206, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07790152507143999;  // std dev = 0.073, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3332832553806239;  // std dev = 0.024, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12750745687724543;  // std dev = 0.016, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.09460731519626851;  // std dev = 1.944, 76.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=72 */
%   | | | else return 0.24586675568677085;  // std dev = 0.236, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.13764869595295764;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06906259435343227;  // std dev = 0.037, 206.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.09533189454605617;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2590942623610824;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11120259543079886;  // std dev = 0.070, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.019890622421249227;  // std dev = 0.466, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.007229275044051557;  // std dev = 0.785, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.734', 'seconds']
Refined model CLL: -0.106054


******************************************
Best model found
******************************************
Results 

CLL : -0.104154 

AUC ROC : 0.993757 

AUC PR : 0.321713 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 11.613 

Total Inference Time : 14.476109266281128 

Total revision time: 37.02613342285156
Best scored revision CLL: -0.106054


Results 

CLL : -0.104154 

AUC ROC : 0.993757 

AUC PR : 0.321713 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 37.05024683952331 

Total Inference Time : 14.476109266281128 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.676
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else return -0.05094197399139684;  // std dev = 0.287, 44.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6905471848302852;  // std dev = 1.720, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.029671493375082993;  // std dev = 0.268, 168.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05501651341728291;  // std dev = 1.780, 46.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.11219714696592828;  // std dev = 4.532, 142.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5476278644651152;  // std dev = 1.453, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.4882296067245218;  // std dev = 0.873, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.45006327353478476;  // std dev = 0.973, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5648397453422493;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.004525485595329993;  // std dev = 0.299, 382.000 (wgt'ed) examples reached here.  /* #neg=325 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5300297739397865;  // std dev = 2.196, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12385837905919084;  // std dev = 0.005, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1377411396592797;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29610871869471467;  // std dev = 1.516, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.17207993064864563;  // std dev = 0.514, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3089820382290004;  // std dev = 0.048, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5449537190389061;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5641439217703222;  // std dev = 0.970, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.09957478607947008;  // std dev = 1.640, 266.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=5 */
%   | | else return 0.019392013546695147;  // std dev = 0.279, 66.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.034710873373853326;  // std dev = 3.016, 241.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.22099304337274953;  // std dev = 1.041, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.43639340232587776;  // std dev = 1.398, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11116197407395993;  // std dev = 0.017, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | | else return -0.11916897677568059;  // std dev = 0.050, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2723163809451251;  // std dev = 1.732, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.0868933596884913;  // std dev = 1.604, 273.000 (wgt'ed) examples reached here.  /* #neg=266 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04222711684131321;  // std dev = 1.990, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17142186628668288;  // std dev = 1.399, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.33492855533837407;  // std dev = 0.053, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.051562864434144616;  // std dev = 0.138, 207.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=19 */
%   | | else return -0.0032799163268320405;  // std dev = 0.208, 218.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17010580167172046;  // std dev = 0.132, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27286081169654663;  // std dev = 1.188, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09353321377116249;  // std dev = 0.098, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3220877303983801;  // std dev = 1.218, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0982704465792911;  // std dev = 0.087, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18805511218260373;  // std dev = 0.734, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.04023240356029939;  // std dev = 1.572, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08342011390952553;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09914058237022409;  // std dev = 0.028, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.004683306348824526;  // std dev = 1.014, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.11561130247888962;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0022064639124361077;  // std dev = 2.112, 161.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.021', 'seconds']
Parameter learned model CLL:-0.106956 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 129, 0], 'true,false,false': [0.287, 40, 4], 'false,true,true': [2.6e-07, 0, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.33e-09, 79, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.72, 3, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.268, 149, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.78, 42, 4], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [4.532, 102, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.453, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.873, 1, 3], 'true,false,false': [0.0, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.973, 1, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false': [0.299, 325, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.196, 2, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.005, 227, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 93, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.516, 2, 77], 'true,false': [0.514, 1, 1], 'false,true,true': [0.048, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.97, 1, 39], 'false,false,true,false': [1.64, 261, 5], 'false,false,false': [0.279, 53, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.016, 159, 82], 'false,true': [1.041, 1, 22], 'false,false,true': [1.398, 2, 52], 'false,false,false,true': [0.017, 74, 0], 'false,false,false,false': [0.05, 80, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.732, 2, 121], 'true,false': [1.604, 266, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.99, 53, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [1.399, 2, 83], 'true,false,true': [0.053, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.138, 188, 19], 'false,false,false': [0.208, 166, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.132, 1, 78], 'false,true,true,true': [1.188, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.098, 211, 0], 'false,false,true': [1.218, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.087, 86, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.734, 0, 85], 'true,true,false': [1.572, 3, 19], 'true,false,true': [0.0, 143, 0], 'true,false,false,true': [0.028, 25, 0], 'true,false,false,false': [1.014, 20, 4], 'false,true': [0.0, 0, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.112, 121, 40]}]
{'': [0.2375653434087289, 0.23510447020894096], 'true': [0.009433106575965852, 0.022586788733335462], 'false': [5.921189464667501e-16, 7.307797124114954e-17], 'true,false': [-3.0982968129074136e-17, 0.0826446280991734], 'false,true': [1.8243664837083652e-15, -1.6148698540002277e-16]}
{'': [0.033603281620613, 0.11388676280872313], 'false': [0.07193167392373304, 0.1423558063565563], 'false,false': [0.06890241022207762, 0.1555311109879829], 'false,false,false': [0.0, 0.14462492244238373], 'false,true': [nan, 0.07193167392373304], 'false,false,true': [nan, 0.06890241022207762]}
{'': [0.03565968773176542, 0.10157887262637648], 'false': [nan, 0.10157887262637587], 'false,false': [0.045877108842576876, 0.08932560511155106], 'false,false,true': [0.1352031729827748, 0.0], 'true': [0.030602190637828427, 0.06455770970006931], 'true,false': [0.1906682264699609, -1.1102230246251565e-16], 'true,true': [0.030602190637828427, nan]}
{'': [0.030523524740649295, 5.5821687644747045e-05], 'false': [2.2678906796583645e-05, -6.446456272017038e-17], 'false,true': [nan, 2.2678906796579732e-05], 'false,false': [nan, -6.446456272017038e-17], 'false,false,false': [nan, -6.446456272017038e-17]}
{'': [0.03199663586871936, 0.0669690505711872], 'false': [0.0026347963913818397, 0.06487590780173084], 'false,false': [0.061927545634418824, 0.07769237478938291], 'false,false,true': [0.023546628325003472, 0.010114468598118943], 'true': [0.029083673020752595, 0.13205535872303711], 'false,true': [0.00011498220408181492, 0.0]}
{'': [0.03775067799594182, 0.06919427588429165], 'false': [0.047102407212659354, 0.06792524451081337], 'false,false': [0.036175571803388346, 3.4105358402527714e-05], 'true': [nan, 0.037750677995941805], 'true,false': [nan, 0.03775067799594182], 'false,false,false': [3.9162548689699775e-06, 3.122316990071261e-05]}
{'': [0.04170847633382794, 0.04888099839128067], 'false': [nan, 0.04888099839128067], 'false,false': [nan, 0.04888099839128067], 'false,false,false': [nan, 0.04888099839128067], 'true': [0.024400710480347816, 0.009428472029284443]}
{'': [0.023129980501448523, 0.031999594313276834], 'false': [nan, 0.03199959431327662], 'false,false': [0.018923596142789385, 0.04328034190004214], 'true': [0.023027134171971657, 0.0013810969065717882], 'true,false': [0.0013810969065717882, nan]}
{'': [0.017415624805698287, 0.03367273191589059], 'false': [0.023356485620465217, 0.05036748179535135], 'false,false': [0.036177529262862114, 8.725542508477156e-05], 'false,true': [0.03617052257136875, 4.585955954583133e-05], 'false,true,true': [0.03617052257136875, nan], 'false,false,false': [nan, 8.725542508477156e-05]}
{'': [0.027772169959504062, 0.026964067338368543], 'true': [0.031705229382636674, 0.006104647884517493], 'true,true': [0.006339438623459102, 0.11235071047856993], 'false': [-1.734723475976807e-18, 0.027695108254867967], 'false,false': [nan, 0.027695108254867862], 'true,false': [-2.5620531337503614e-17, 0.02322539547454461], 'true,false,false': [3.050814528257173e-05, 0.04283460532345306]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
0;false,true;follows(E, F), follows(A, F).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 11.37
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else return 0.8126943896449667;  // std dev = 0.208, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else if ( follows(F, A), follows(G, F) )
%   | | | then return -0.10548742853685135;  // std dev = 1.388, 55.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=2 */
%   | | | else return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.7470378239884012;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.43e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7087760972116284;  // std dev = 0.120, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | else return 0.6569734122109543;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.7285554015677008;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.047261536266072886;  // std dev = 2.935, 142.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=13 */
%   | | | else return -0.09381500741372129;  // std dev = 0.838, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.03717800127354091;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.09135337352820015;  // std dev = 1.186, 45.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.6265828697698385;  // std dev = 0.835, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.12221023354775702;  // std dev = 4.548, 137.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5584782247447295;  // std dev = 0.014, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.7149510026212162;  // std dev = 0.218, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5848801705397944;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5851026673280679;  // std dev = 0.148, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5707416375986883;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.11447870915266338;  // std dev = 0.856, 152.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=1 */
%   | | | else return 0.01370889333311371;  // std dev = 3.204, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08122953838004127;  // std dev = 3.911, 111.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=29 */
%   | | | else return 0.21321563026244167;  // std dev = 2.100, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(D, E), follows(F, D) )
%   | | | then return 0.4183837294050394;  // std dev = 0.039, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.4798078032650224;  // std dev = 0.173, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3665167322062166;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(G, I) )
%   | | | then return 0.4571881517133875;  // std dev = 0.317, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.11797247443812868;  // std dev = 0.839, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.7457091180287654;  // std dev = 0.125, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.6076372140907481;  // std dev = 1.663, 43.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   else if ( follows(K, A) )
%   | then return -0.11344064920805562;  // std dev = 0.122, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else return -0.15439558585280183;  // std dev = 0.075, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.30061776717075367;  // std dev = 0.144, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | else return 0.3208638877441903;  // std dev = 0.013, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then return 0.133686404819236;  // std dev = 0.885, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.25823823725114414;  // std dev = 0.315, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3417267920031741;  // std dev = 0.031, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5282887249377523;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.10425121093136228;  // std dev = 0.173, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | | else if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.04369938742777251;  // std dev = 2.206, 57.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
%   | | | else return 0.08288755114814457;  // std dev = 2.755, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.25932354737082025;  // std dev = 0.014, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.20010828782842222;  // std dev = 0.969, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.2577197081636746;  // std dev = 0.018, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, F) )
%   | | then return -0.0455017744300884;  // std dev = 0.155, 171.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=18 */
%   | | else return -0.10242374154319901;  // std dev = 0.147, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27526574201180043;  // std dev = 0.035, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(J, A) )
%   | | | then return 0.5753868989034377;  // std dev = 0.156, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.435676735413836;  // std dev = 1.650, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | | else return -0.1253913882424652;  // std dev = 0.024, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21722954575211328;  // std dev = 0.017, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.2626426503470839;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.43693687542426657;  // std dev = 0.169, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(F, D) )
%   | | | then return -0.08218344720381013;  // std dev = 0.832, 223.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=2 */
%   | | | else return -0.20885842454324358;  // std dev = 0.408, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3436535659617283;  // std dev = 1.079, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.13344229778377842;  // std dev = 0.597, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.031130072806766156;  // std dev = 0.640, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.05424298420647192;  // std dev = 1.492, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.16151739147686892;  // std dev = 0.993, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return -0.1676763858476258;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1814820691838428;  // std dev = 0.027, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.27391877230323536;  // std dev = 0.007, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.23733475180408142;  // std dev = 0.307, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return -0.08172519519260363;  // std dev = 0.109, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.16263584878176401;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.01805811351520978;  // std dev = 2.049, 73.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=19 */
%   | | | else return 0.02632997960855894;  // std dev = 1.843, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, D) )
%   | | then return 0.1609452641239338;  // std dev = 0.059, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0.2776786444887364;  // std dev = 0.225, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1493591328570711;  // std dev = 0.017, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16063869990886256;  // std dev = 0.076, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2947230712215786;  // std dev = 0.218, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07665995319481758;  // std dev = 0.113, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3405261049066477;  // std dev = 0.015, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.37214234107795446;  // std dev = 0.092, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.12124705922110678;  // std dev = 0.017, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.1382426041269767;  // std dev = 0.043, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.02537269203950366;  // std dev = 1.634, 27.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=24 */
%   | | else return 0.211080496994281;  // std dev = 0.040, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06666886825156441;  // std dev = 0.061, 212.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=4 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.12465509738973121;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.27382996764609685;  // std dev = 0.077, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09675686966818788;  // std dev = 0.029, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.020080166410332796;  // std dev = 1.183, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
%   | | | else return 0.007092866439984053;  // std dev = 1.108, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.144', 'seconds']
Refined model CLL: -0.104282


******************************************
Best model found
******************************************
Results 

CLL : -0.103444 

AUC ROC : 0.993228 

AUC PR : 0.385663 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 11.37 

Total Inference Time : 14.71710753440857 

Total revision time: 38.17545508956909
Best scored revision CLL: -0.104282


Results 

CLL : -0.103444 

AUC ROC : 0.993228 

AUC PR : 0.385663 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 38.199568506240844 

Total Inference Time : 14.71710753440857 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.317
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048838;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.72e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6692920818271627;  // std dev = 2.179, 87.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04336971888244709;  // std dev = 0.251, 228.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09602590266423366;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14004570322673351;  // std dev = 2.886, 54.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.574009797315207;  // std dev = 1.073, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7337089754046385;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8217507158908592;  // std dev = 0.077, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5746529501069518;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5746529501069518;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.028912527348793862;  // std dev = 0.266, 279.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4755653419667388;  // std dev = 2.784, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11847147998134643;  // std dev = 0.003, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1381527743719288;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31445730054464494;  // std dev = 1.405, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.1985335109790834;  // std dev = 0.850, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.32096133142638605;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6205887367947495;  // std dev = 0.115, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08383587551094906;  // std dev = 2.057, 243.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=9 */
%   | | else return -0.10858653289483952;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.037446069978062886;  // std dev = 3.384, 263.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26837407070244035;  // std dev = 0.163, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47982106707259625;  // std dev = 0.613, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11253174038299353;  // std dev = 0.024, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.10690441852528633;  // std dev = 0.038, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2693055202763438;  // std dev = 1.951, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07846056179759833;  // std dev = 1.904, 229.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0056672386393386565;  // std dev = 0.693, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18959338413591903;  // std dev = 0.991, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2514052102204328;  // std dev = 0.071, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04466736019428632;  // std dev = 0.166, 191.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=22 */
%   | | else return 0.019220887115031976;  // std dev = 0.206, 87.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1443020228083418;  // std dev = 0.219, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2543484426702072;  // std dev = 1.305, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09101263994519816;  // std dev = 0.031, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3525740239592001;  // std dev = 0.831, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0977724458838286;  // std dev = 0.001, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17710318239443357;  // std dev = 1.576, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.14446324829626597;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08369767510979645;  // std dev = 4.47e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08417892338970391;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.021991805277763832;  // std dev = 0.499, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13271126806155548;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.023217498211744982;  // std dev = 1.485, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.076', 'seconds']
Parameter learned model CLL:-0.108793 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 193, 0], 'true,false,false': [0.271, 23, 2], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.72e-09, 43, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [2.179, 5, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.251, 206, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.981, 25, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.886, 37, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.073, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.077, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false': [0.266, 247, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.784, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.003, 193, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 44, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.405, 2, 73], 'true,false': [0.85, 1, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.115, 0, 23], 'false,false,true,false': [2.057, 234, 9], 'false,false,false': [0.0, 23, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.384, 172, 91], 'false,true': [0.163, 0, 13], 'false,false,true': [0.613, 0, 22], 'false,false,false,true': [0.024, 23, 0], 'false,false,false,false': [0.038, 26, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.951, 3, 107], 'true,false': [1.904, 218, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.693, 17, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.991, 1, 80], 'true,false,true': [0.071, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.166, 169, 22], 'false,false,false': [0.206, 65, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.219, 4, 77], 'false,true,true,true': [1.305, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.031, 217, 0], 'false,false,true': [0.831, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.001, 35, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.576, 2, 94], 'true,true,false': [0.01, 0, 9], 'true,false,true': [4.47e-08, 166, 0], 'true,false,false,true': [1.05e-08, 18, 0], 'true,false,false,false': [0.499, 10, 2], 'false,true': [0.046, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.485, 44, 17]}]
{'': [0.21905006858710765, 0.2204589843750001], 'false': [0.0, 4.6474452193611206e-17], 'true': [0.027500889996442155, 0.009090143927278683], 'true,false': [-2.277970558298249e-16, 0.07360000000000004], 'false,true': [0.0, nan]}
{'': [0.05457761499308777, 0.08801014980837865], 'false': [0.06307619279940672, 0.14178387990653601], 'false,false': [0.03698224852071005, 0.16518014459915667], 'false,false,false': [0.0, 0.15426147155964343], 'false,true': [nan, 0.06307619279940672], 'false,false,true': [nan, 0.03698224852071005]}
{'': [0.016705626192052438, 0.08661936077358652], 'false': [nan, 0.08661936077358652], 'false,false': [5.224578939412501e-17, 0.07097510832667063], 'true': [0.01634601602674716, 0.016761002893550387], 'true,false': [0.0029759525637346185, 0.0], 'true,true': [0.01622202177844371, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.05917552177856363, 6.683079921911437e-05], 'false': [1.0153134443397485e-05, -2.5232341468753557e-17], 'false,true': [nan, 1.0153134443404388e-05], 'false,false': [nan, -2.5232341468753557e-17], 'false,false,false': [nan, -2.5232341468753557e-17]}
{'': [0.03448601897062696, 0.054905488255037924], 'false': [0.0, 0.051302203224187035], 'false,false': [0.055154150037677256, 0.0], 'false,false,true': [0.0005710639529645017, 0.017414725585830713], 'true': [0.02631620783013909, 0.1444347564024068], 'false,true': [0.0, nan]}
{'': [0.0435425134971087, 0.07259255578665776], 'false': [0.0020378711611152697, 0.07960812736602596], 'false,false': [0.01708478078148615, 4.922745971349719e-05], 'true': [nan, 0.0435425134971093], 'true,false': [nan, 0.0435425134971087], 'false,false,false': [2.5384377924621823e-05, 5.5455431381079556e-05]}
{'': [0.04843127887631511, 0.019212885403746934], 'true': [0.0346059326967695, 0.01582880210697023], 'false': [nan, 0.019212885403746934], 'false,false': [nan, 0.019212885403746934], 'false,false,false': [nan, 0.019212885403746934]}
{'': [0.01198411574714678, 0.03304592498823832], 'false': [nan, 0.03304592498823849], 'false,false': [0.02749602498130257, 0.042425849173104074], 'true': [0.012126410689268004, 0.002492533852007775], 'true,false': [0.002492533852007775, nan]}
{'': [0.04795078035985958, 0.02859994034310071], 'false': [0.02048553963208423, 0.058525218831952], 'false,false': [0.038391725229147515, 5.919315215604673e-08], 'false,true': [0.05163508289870463, 4.307700183016138e-06], 'false,true,true': [0.05163508289870463, nan], 'false,false,false': [nan, 5.919315215604673e-08]}
{'': [0.023937923427893512, 0.03466964751763371], 'false': [0.0005383995752286062, 0.036169984559212505], 'false,false': [nan, 0.036169984559212505], 'true': [0.023741276300754746, 0.001489917041640475], 'true,true': [0.025874655721325548, 1.1180875603777279e-05], 'true,false': [1.203856291762218e-17, 0.009230155726662283], 'true,false,false': [6.1679056923619804e-18, 0.02075504672121466]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 14.597
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else return 0.8146706742299468;  // std dev = 0.204, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.011995088945666036;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( tweets(A, I) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.7051876979252397;  // std dev = 0.119, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return 0.73002795731514;  // std dev = 0.132, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.020385065756885343;  // std dev = 3.197, 130.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=16 */
%   | | | else return -0.018743509932330746;  // std dev = 0.798, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.0338523235814823;  // std dev = 0.270, 45.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.05240841052554026;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return -0.13670548246927716;  // std dev = 0.141, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.5250555164636791;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.1428014097305117;  // std dev = 2.914, 54.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5737822092659145;  // std dev = 0.407, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.734813164031715;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.28480017520733947;  // std dev = 1.039, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.2749921951961907;  // std dev = 1.165, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5545623522679426;  // std dev = 0.003, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6701540890451746;  // std dev = 0.969, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.12313887262312731;  // std dev = 0.079, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.048787372938404;  // std dev = 2.080, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | | else return 0.13068353343674596;  // std dev = 2.097, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.41884004807738917;  // std dev = 0.915, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.21396587583134946;  // std dev = 0.702, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.3961470008675183;  // std dev = 0.878, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.4992977198264075;  // std dev = 0.809, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.536579743208967;  // std dev = 0.927, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.6611372100409714;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6792358464746181;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6720898334739293;  // std dev = 0.111, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.11912236179146805;  // std dev = 0.018, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.32039387156865856;  // std dev = 0.046, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.1269835809431371;  // std dev = 0.721, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.31235965779367936;  // std dev = 0.059, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4927671388627433;  // std dev = 0.054, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.485483498035338;  // std dev = 0.314, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.31832861912492466;  // std dev = 0.044, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.44802427853699883;  // std dev = 1.026, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.081838144048663;  // std dev = 1.854, 233.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=9 */
%   | | else return -0.08941345425295012;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2681702217224686;  // std dev = 0.038, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(A, F) )
%   | | | then return -0.054733826387906304;  // std dev = 1.694, 158.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=15 */
%   | | | else return -0.09239855933747762;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.05496670182477516;  // std dev = 0.116, 56.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.2884750466745202;  // std dev = 0.173, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.25570414685654025;  // std dev = 0.018, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.3625950918469858;  // std dev = 0.309, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.48782728334861375;  // std dev = 0.240, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11378672358470042;  // std dev = 0.020, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(C, E) )
%   | | then if ( recursion_accounttype(D, B), follows(C, D) )
%   | | | then return 0.20796433466707162;  // std dev = 0.033, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.13351926675972745;  // std dev = 1.314, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return 0.2204845005570354;  // std dev = 0.039, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.30295177012243507;  // std dev = 0.302, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.22404095417518305;  // std dev = 0.031, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.08019039925052361;  // std dev = 0.960, 155.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=3 */
%   | | | else return -0.0212872207722669;  // std dev = 1.452, 80.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=12 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.020005855978080453;  // std dev = 1.073, 37.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=8 */
%   | | | else return 0.03590694498531093;  // std dev = 1.367, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.13725788022760807;  // std dev = 1.388, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.17068293423060596;  // std dev = 0.020, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.18607114659825272;  // std dev = 0.027, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.25743037065710134;  // std dev = 0.062, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.23910888774501718;  // std dev = 0.313, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | else return -0.08198936716152731;  // std dev = 0.068, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.1603490261941843;  // std dev = 1.165, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.009882358248408803;  // std dev = 1.224, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.07995782926783798;  // std dev = 1.103, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.14267492263471845;  // std dev = 0.123, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else return 0.2297520774591805;  // std dev = 0.044, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(E, A) )
%   | | then return 0.028261315341970294;  // std dev = 0.758, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.0040031769195705055;  // std dev = 0.914, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16043989344816612;  // std dev = 0.097, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.26019104353165745;  // std dev = 0.978, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.07622173887068152;  // std dev = 0.068, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.358098588311782;  // std dev = 0.046, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12061182916462322;  // std dev = 0.061, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.14108550239264486;  // std dev = 0.132, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | | else return 0.24448258211949395;  // std dev = 0.180, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.02971550138403778;  // std dev = 0.303, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06724118850273048;  // std dev = 0.040, 210.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.20107087843041477;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.07365869781198263;  // std dev = 0.305, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0.008909757983574745;  // std dev = 0.756, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.016812366375045167;  // std dev = 0.703, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.018050490712171484;  // std dev = 0.822, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.364', 'seconds']
Refined model CLL: -0.103623


******************************************
Best model found
******************************************
Results 

CLL : -0.102403 

AUC ROC : 0.995035 

AUC PR : 0.460355 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 14.597 

Total Inference Time : 11.710843324661255 

Total revision time: 36.90010806465149
Best scored revision CLL: -0.103623


Results 

CLL : -0.102403 

AUC ROC : 0.995035 

AUC PR : 0.460355 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 64.54782744789124 

Total Inference Time : 11.710843324661255 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.582
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.821111898062474;  // std dev = 1.963, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else return -0.05296217601159886;  // std dev = 0.285, 45.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7070619492207857;  // std dev = 1.416, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04009015190220034;  // std dev = 0.257, 188.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05792493633741921;  // std dev = 1.788, 48.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6083623010998435;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.09381821542843775;  // std dev = 4.599, 154.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5651317824673089;  // std dev = 1.067, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.34240390223358486;  // std dev = 1.090, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.5826080038940759;  // std dev = 3.65e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5994111864759956;  // std dev = 0.175, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5675411677484947;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.0016795308913019917;  // std dev = 0.304, 370.000 (wgt'ed) examples reached here.  /* #neg=313 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5226395918359952;  // std dev = 2.577, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12379729183935397;  // std dev = 0.005, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13630162799036685;  // std dev = 2.11e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.301758131864404;  // std dev = 1.422, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.5697562508530827;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3044312169012568;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5059620795217069;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5949377858492748;  // std dev = 0.123, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.09371982755233203;  // std dev = 1.640, 197.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=5 */
%   | | else return 0.02227984287968611;  // std dev = 0.291, 63.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.038706738384759166;  // std dev = 3.082, 229.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.21680818039931588;  // std dev = 1.017, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.40321683004862535;  // std dev = 1.965, 56.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11137676758749793;  // std dev = 0.022, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return -0.11745841462736205;  // std dev = 0.050, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2812090459750342;  // std dev = 1.387, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.08652194505325587;  // std dev = 1.640, 262.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.007026036560720053;  // std dev = 2.317, 98.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1587780928554098;  // std dev = 1.707, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2928485525656107;  // std dev = 0.028, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05757597857785277;  // std dev = 0.154, 200.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=19 */
%   | | else return -0.004200657514504675;  // std dev = 0.221, 220.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1632396237590425;  // std dev = 0.151, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27380769357488216;  // std dev = 1.253, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09348906240132494;  // std dev = 0.085, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.33075273376603676;  // std dev = 1.246, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09684142267790177;  // std dev = 0.074, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.168536301725635;  // std dev = 1.411, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.12393062798535277;  // std dev = 1.088, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.0834278154488272;  // std dev = 9.77e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09717400501970919;  // std dev = 0.023, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.013553786961932312;  // std dev = 1.041, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12819851233521973;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.014790656843965204;  // std dev = 2.246, 137.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.439', 'seconds']
Parameter learned model CLL:-0.106479 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.963, 4, 104], 'true,false,true': [0.0, 143, 0], 'true,false,false': [0.285, 41, 4], 'false,true,true': [2.6e-07, 0, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.33e-09, 78, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.416, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.257, 169, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.788, 44, 4], 'false,false,false,true': [0.943, 1, 8], 'false,false,false,false': [4.599, 114, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.067, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [1.09, 2, 3], 'true,false,false': [3.65e-08, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.175, 0, 6], 'false,false,true,false': [4.21e-08, 0, 15], 'false,false,false': [0.304, 313, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.577, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.005, 216, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.11e-08, 78, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.422, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.123, 0, 39], 'false,false,true,false': [1.64, 192, 5], 'false,false,false': [0.291, 50, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.082, 147, 82], 'false,true': [1.017, 1, 22], 'false,false,true': [1.965, 4, 52], 'false,false,false,true': [0.022, 77, 0], 'false,false,false,false': [0.05, 78, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.387, 1, 121], 'true,false': [1.64, 255, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.317, 70, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [1.707, 3, 83], 'true,false,true': [0.028, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 181, 19], 'false,false,false': [0.221, 168, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.151, 2, 78], 'false,true,true,true': [1.253, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.085, 198, 0], 'false,false,true': [1.246, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.074, 94, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.411, 2, 85], 'true,true,false': [1.088, 1, 19], 'true,false,true': [9.77e-08, 144, 0], 'true,false,false,true': [0.023, 38, 0], 'true,false,false,false': [1.041, 23, 4], 'false,true': [0.0, 0, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.246, 97, 40]}]
{'': [0.23173849525201132, 0.2358276643990935], 'false': [5.921189464667501e-16, 7.401486830834377e-17], 'true': [0.035665294924556515, 0.020823902218198184], 'true,false': [-9.006004955001269e-17, 0.08098765432098749], 'false,true': [1.8243664837083652e-15, -1.6148698540002277e-16]}
{'': [0.0230306283855304, 0.10679911378807348], 'false': [0.06625045394201397, 0.13599089834457143], 'false,false': [0.06663466447925566, 0.14903162247145646], 'false,false,false': [0.09876543209876533, 0.13735084872286724], 'false,false,true': [nan, 0.06663466447925566], 'false,true': [nan, 0.06625045394201397]}
{'': [0.031694003019941894, 0.1043449471109826], 'false': [nan, 0.10434494711098344], 'false,false': [0.0016582826019450841, 0.0924177723688471], 'true': [0.016756449442714202, 0.10511800654790059], 'true,false': [0.23780034905252673, 1.6653345369377348e-16], 'true,true': [0.016756449442714202, nan], 'false,false,true': [0.005078490468456136, 1.1842378929335003e-16]}
{'': [0.04175557835036069, 4.810621392302305e-05], 'false': [2.399505547779202e-05, 5.693451408334136e-18], 'false,true': [nan, 2.3995055477804357e-05], 'false,false': [nan, 5.693451408334136e-18], 'false,false,false': [nan, 5.693451408334136e-18]}
{'': [0.02617336781931976, 0.07872454592730208], 'false': [0.0018500175282458837, 0.0784713899306727], 'false,false': [0.07687714631502977, 0.08443967052063009], 'false,false,true': [0.0003863338612228645, 0.013648289751536508], 'true': [0.025606888875460445, 0.0], 'false,true': [8.485614727571366e-06, 0.0]}
{'': [0.0414767474475946, 0.0713812223629393], 'false': [0.045007491124334775, 0.0705622121276913], 'false,false': [0.06894308019261408, 2.83288704439614e-05], 'true': [nan, 0.041476747447595115], 'true,false': [nan, 0.0414767474475946], 'false,false,false': [6.417546875643159e-06, 3.158537531562537e-05]}
{'': [0.04132524868380758, 0.0547628011157566], 'false': [nan, 0.054762801115756564], 'false,false': [nan, 0.0547628011157566], 'false,false,false': [nan, 0.0547628011157566], 'true': [0.015769728431876892, 0.010262694367065332]}
{'': [0.033503073889602546, 0.037444402130559905], 'false': [nan, 0.03744440213055998], 'false,false': [0.023567325227866833, 0.04870329568345118], 'true': [0.03386440887135601, 0.0003993016929104004], 'true,false': [0.0003993016929104004, nan]}
{'': [0.022841735644468918, 0.0352886021715737], 'false': [0.025205067268995164, 0.0502098650008427], 'false,false': [0.03788250877654414, 5.84886056284642e-05], 'false,true': [0.04027504156237929, 3.686823505569175e-05], 'false,true,true': [0.04027504156237929, nan], 'false,false,false': [nan, 5.84886056284642e-05]}
{'': [0.026582549061002, 0.03546490638508991], 'false': [0.0, 0.03682625855813875], 'false,false': [nan, 0.03682625855813877], 'true': [0.0299774260423393, 0.005809338800996444], 'true,true': [0.02289961266417569, 0.059148148318708536], 'true,false': [6.630498619289129e-17, 0.01837574838533975], 'true,false,false': [1.4474142146149815e-05, 0.04012971171872386]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
0;false,true;follows(E, F), follows(A, F).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 13.849
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.10814893509951232;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.14185106490048763;  // std dev = 7.88e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then if ( tweets(C, E), tweets(D, F) )
%   | | then return 0.7194734122109541;  // std dev = 1.69e-07, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.4278047540858882;  // std dev = 1.233, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.7254255086692784;  // std dev = 0.122, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11927168302003129;  // std dev = 0.842, 132.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=1 */
%   | | | else return 0.0075076448986864455;  // std dev = 3.149, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.09690221692933118;  // std dev = 2.809, 57.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
%   | | | else return 0.19238552092564923;  // std dev = 3.372, 67.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5592075248643947;  // std dev = 0.117, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.4085453920231905;  // std dev = 0.859, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(F, A) )
%   | | then return 0.7211652677952486;  // std dev = 0.143, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462847;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5620157155985432;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.620612091457177;  // std dev = 1.355, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.12043843059385276;  // std dev = 0.175, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03717545800015995;  // std dev = 3.240, 89.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=19 */
%   | | | else return 0.11007650443462756;  // std dev = 3.186, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.4237970004502706;  // std dev = 0.142, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.3621640611079492;  // std dev = 0.977, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return -0.23774949622367836;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.29303743898816753;  // std dev = 0.944, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4232757507563538;  // std dev = 0.181, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.5799804116497278;  // std dev = 0.029, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.6720442034417815;  // std dev = 0.183, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( follows(J, A) )
%   | then return -0.10850388197718447;  // std dev = 0.157, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else return -0.1529851658102605;  // std dev = 0.089, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.33333340796461347;  // std dev = 0.037, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.3264463263948803;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.004729227719117694;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.01034062704758626;  // std dev = 0.810, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3252273017523147;  // std dev = 0.038, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4603157815950512;  // std dev = 1.040, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.09423274885538936;  // std dev = 1.438, 240.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=5 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.07156117567517592;  // std dev = 0.699, 45.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=2 */
%   | | | else return 0.06698583151678866;  // std dev = 1.808, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25870278182457385;  // std dev = 0.022, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.2134735875814715;  // std dev = 1.394, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.08798806197628294;  // std dev = 0.059, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else return -0.0745944997411661;  // std dev = 0.084, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.3316887099743302;  // std dev = 0.294, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2508482838198099;  // std dev = 2.11e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.13112788937258235;  // std dev = 1.207, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.42387641705200285;  // std dev = 1.012, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.1171899965366718;  // std dev = 0.019, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B), follows(E, A) )
%   | | then return 0.21303368885718374;  // std dev = 0.016, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(C, F), follows(F, D) )
%   | | | then return 0.2643173658343654;  // std dev = 0.989, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.31511082780435823;  // std dev = 0.192, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.09024908349116739;  // std dev = 0.058, 269.000 (wgt'ed) examples reached here.  /* #neg=267 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2358738796394126;  // std dev = 0.076, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.08072497459265733;  // std dev = 0.042, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.4100337268720457;  // std dev = 0.072, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11387210890179185;  // std dev = 0.039, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.038861637419616624;  // std dev = 0.251, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.1758532826027985;  // std dev = 0.017, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.06953723628089152;  // std dev = 1.147, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.11097902112124897;  // std dev = 0.969, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0.3427063244596069;  // std dev = 0.087, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.04606266248396986;  // std dev = 0.105, 235.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=23 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.25632022755969736;  // std dev = 0.320, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.1005952784526956;  // std dev = 0.071, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.005926407911151577;  // std dev = 0.708, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 7.798633636384686E-4;  // std dev = 1.322, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.1574474995453304;  // std dev = 0.017, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else return 0.26108938131402043;  // std dev = 0.242, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.11327853509388564;  // std dev = 0.218, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1547538991804717;  // std dev = 0.072, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.20904166966346333;  // std dev = 0.954, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.07290668386652976;  // std dev = 0.102, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.16914747329307986;  // std dev = 1.002, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.34774719334865645;  // std dev = 0.169, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.10298072215456537;  // std dev = 0.020, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.0942402318358536;  // std dev = 1.385, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | | else return 0.17489041650347964;  // std dev = 0.174, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.07513043417698617;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.09501132926174412;  // std dev = 0.996, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return -0.06109327549950962;  // std dev = 0.055, 219.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=4 */
%   else if ( follows(A, I), recursion_accounttype(I, B) )
%   | then return 0.05123033439277802;  // std dev = 0.283, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.011719290914132128;  // std dev = 0.119, 92.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=25 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.014626216202518194;  // std dev = 0.650, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.0013045516630313446;  // std dev = 1.077, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.115', 'seconds']
Refined model CLL: -0.096238


******************************************
Best model found
******************************************
Results 

CLL : -0.096625 

AUC ROC : 0.994038 

AUC PR : 0.400858 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 13.849 

Total Inference Time : 17.90142035484314 

Total revision time: 43.926794773101804
Best scored revision CLL: -0.096238


Results 

CLL : -0.096625 

AUC ROC : 0.994038 

AUC PR : 0.400858 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 71.57451415634155 

Total Inference Time : 17.90142035484314 

