Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.33
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | | else return -0.06777699082641374;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 5.89e-09, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7212627711739759;  // std dev = 0.146, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03187552600552334;  // std dev = 0.267, 197.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08618010520218806;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.15570326970083126;  // std dev = 2.847, 51.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5019328418065279;  // std dev = 2.228, 75.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=70 */
%   | | else return 0.7258616629225616;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8173755656511148;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6040520610480189;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5549245385210755;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5549245385210755;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.02718485972698382;  // std dev = 0.269, 270.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48892169209740227;  // std dev = 2.334, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11965146511325303;  // std dev = 0.003, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14023582642568574;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28784731007593045;  // std dev = 1.919, 77.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=73 */
%   | else return 0.39422292714502943;  // std dev = 0.113, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.24951697272708248;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6096644758328692;  // std dev = 0.102, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08539361819509715;  // std dev = 2.037, 251.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=9 */
%   | | else return -0.10901972880279039;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.030217513893603713;  // std dev = 3.438, 274.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2633418670141609;  // std dev = 0.106, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4250453727328968;  // std dev = 1.313, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11158050681069703;  // std dev = 0.038, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.108043899648351;  // std dev = 0.047, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2708039731406385;  // std dev = 1.911, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07889523959196244;  // std dev = 1.806, 257.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.005642532768702715;  // std dev = 0.695, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1445950749152143;  // std dev = 2.168, 85.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22698681954550332;  // std dev = 0.035, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.042648081277970845;  // std dev = 0.150, 201.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=22 */
%   | | else return -0.006443859708388832;  // std dev = 0.209, 105.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17656569101483602;  // std dev = 0.157, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2869458432139497;  // std dev = 0.667, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09102789083757805;  // std dev = 0.024, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4028987856401827;  // std dev = 0.501, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09671380577564659;  // std dev = 0.000856, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1963365692833406;  // std dev = 0.751, 94.000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | | else return 0.1463330894906108;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08406845424213355;  // std dev = 1.49e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08243704614610495;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.037912879349751495;  // std dev = 0.498, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.050848960928041476;  // std dev = 0.871, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.051737278087119545;  // std dev = 1.419, 49.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.880', 'seconds']
Parameter learned model CLL:-0.108817 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [4.46e-07, 0, 103], 'true,false,true': [0.0, 206, 0], 'true,false,false': [0.262, 25, 2], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [5.89e-09, 36, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.146, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.267, 175, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.976, 20, 1], 'false,false,false,true': [0.894, 1, 4], 'false,false,false,false': [2.847, 34, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [2.228, 5, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.083, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false': [0.269, 238, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.334, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.003, 192, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.919, 4, 73], 'true,false': [0.113, 0, 4], 'false,true,true': [0.972, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.102, 0, 23], 'false,false,true,false': [2.037, 242, 9], 'false,false,false': [1.86e-09, 14, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.438, 183, 91], 'false,true': [0.106, 0, 13], 'false,false,true': [1.313, 1, 22], 'false,false,false,true': [0.038, 26, 0], 'false,false,false,false': [0.047, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.911, 3, 107], 'true,false': [1.806, 246, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.695, 17, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [2.168, 5, 80], 'true,false,true': [0.035, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.15, 179, 22], 'false,false,false': [0.209, 83, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.157, 2, 77], 'false,true,true,true': [0.667, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.024, 206, 0], 'false,false,true': [0.501, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.000856, 31, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.751, 0, 94], 'true,true,false': [0.01, 0, 9], 'true,false,true': [1.49e-08, 165, 0], 'true,false,false,true': [8.33e-09, 14, 0], 'true,false,false,false': [0.498, 15, 2], 'false,true': [0.871, 1, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.419, 32, 17]}]
{'': [0.21484375000000192, 0.23268698060941828], 'false': [0.0, 3.700743415417188e-17], 'true': [1.9315724855614373e-15, 0.008510011236161857], 'true,false': [-2.3713501496848003e-16, 0.0685871056241427], 'false,true': [0.0, nan]}
{'': [0.0002593462453829813, 0.09774494684715561], 'false': [0.07109027136046576, 0.15077444176346272], 'false,false': [0.0453514739229025, 0.16977851620101264], 'false,false,false': [0.16000000000000006, 0.15892213027941451], 'false,true': [nan, 0.07109027136046576], 'false,false,true': [nan, 0.0453514739229025]}
{'': [0.06393849253562119, 0.08694252086243405], 'false': [nan, 0.08694252086243412], 'false,false': [1.5673736818237505e-16, 0.07234534517229367], 'true': [0.0659762149322975, 0.01125347310559747], 'true,true': [0.06619610678587184, 0.0], 'true,false': [0.0034224742393608176, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.04222062746406653, 6.023636520050002e-05], 'false': [9.744912166149514e-06, -1.0408340855860843e-17], 'false,true': [nan, 9.744912166147202e-06], 'false,false': [nan, -1.0408340855860843e-17], 'false,false,false': [nan, -1.0408340855860843e-17]}
{'': [0.046146285999939265, 0.05459112050675761], 'false': [0.05246913580246912, 0.050093812363722866], 'false,true': [0.05246913580246912, nan], 'false,false': [0.05232672502051881, 3.96508223080413e-18], 'false,false,true': [0.0004567873487891638, 0.01652707441039413], 'true': [0.047819972303704356, 0.003170856296584146]}
{'': [0.043136728486292616, 0.07353163991988486], 'false': [0.0008601054342647779, 0.07807246291790829], 'false,false': [0.07495519982067335, 6.415063059619179e-05], 'true': [nan, 0.04313672848629199], 'true,false': [nan, 0.043136728486292616], 'false,false,false': [5.6617415671866844e-05, 6.449136859951841e-05]}
{'': [0.044502360439162156, 0.01929836357293089], 'true': [0.03318525270771193, 0.01269271827461424], 'false': [nan, 0.01929836357293089], 'false,false': [nan, 0.01929836357293089], 'false,false,false': [nan, 0.01929836357293089]}
{'': [0.05419839023454292, 0.029987792563051653], 'true': [0.05530290936667942, 0.0006239826983509694], 'false': [nan, 0.029987792563051462], 'false,false': [0.022361256666751927, 0.04372618128682751], 'true,false': [0.0006239826983509694, nan]}
{'': [0.0245047577227294, 0.027878480143561542], 'false': [0.018495920617771822, 0.06232904021515177], 'false,false': [0.01477960624751865, 2.3646895463252757e-08], 'false,true': [0.013890505394677385, 2.700570274618822e-06], 'false,true,true': [0.013890505394677385, nan], 'false,false,false': [nan, 2.3646895463252757e-08]}
{'': [0.01959215856487276, 0.05222143223559335], 'false': [0.1517318665046533, 0.04109286773094908], 'false,false': [nan, 0.04109286773094908], 'true': [0.0056783211391677095, 0.0014336398995339374], 'true,true': [0.0060024089166360334, 1.1533369850149263e-05], 'true,false': [1.345724878333523e-18, 0.008493124054777122], 'true,false,false': [4.956352788505163e-18, 0.014592183446983587]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 34.775
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8299799210150057;  // std dev = 1.394, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6829859926286511;  // std dev = 0.200, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | else return 0.7295848445419236;  // std dev = 0.126, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F), follows(G, A) )
%   | | then return 0.7555074953077093;  // std dev = 0.116, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(E, H), follows(H, E) )
%   | | | then return 0.22229845607515308;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.7350122940520397;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(J, I), follows(J, A) )
%   | | | then return -0.10666868184529454;  // std dev = 1.447, 135.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=3 */
%   | | | else return -4.7539019466106506E-4;  // std dev = 2.716, 78.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=12 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.11985415039593456;  // std dev = 2.135, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.08578487415644491;  // std dev = 2.070, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5210101505753838;  // std dev = 1.689, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   | | | else return 0.5795323486981327;  // std dev = 0.103, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.631852452646813;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6314858970853429;  // std dev = 0.082, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5562473396059535;  // std dev = 0.005, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7237535904293366;  // std dev = 0.032, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11771669362082732;  // std dev = 0.105, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10926849186202078;  // std dev = 1.983, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.1642029663221465;  // std dev = 2.004, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.43967989040293765;  // std dev = 0.038, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.3387144209611713;  // std dev = 0.896, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.42246051301711246;  // std dev = 0.044, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.5532852361334545;  // std dev = 0.110, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.4604559126800705;  // std dev = 0.185, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.6680838493223382;  // std dev = 0.027, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(G, A) )
%   | then return -0.10706134021303577;  // std dev = 0.115, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else return -0.1544624610958064;  // std dev = 0.024, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then return 0.33647995899434574;  // std dev = 0.052, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else return 0.36770602032218125;  // std dev = 0.126, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.2417039309268765;  // std dev = 0.305, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.3476541236370023;  // std dev = 0.158, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3202429577492704;  // std dev = 0.019, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.45431685758849444;  // std dev = 0.214, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07743058866469708;  // std dev = 1.792, 202.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=9 */
%   | | else return -0.09335870409852066;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.2691924257603396;  // std dev = 0.056, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.1947421934147052;  // std dev = 0.981, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return -0.02808634127617034;  // std dev = 0.781, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3067787096530754;  // std dev = 0.095, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.08905501921753298;  // std dev = 0.046, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | | else return -0.04445668240421407;  // std dev = 0.126, 41.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2628385199966237;  // std dev = 0.037, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.42301035531004805;  // std dev = 0.100, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.11333139566121256;  // std dev = 0.018, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), follows(F, C) )
%   | | then return 0.20195811123934182;  // std dev = 0.114, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | else return 0.23415785495408895;  // std dev = 0.030, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.09483723730297376;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(G, I), follows(I, A) )
%   | | | then return 0.02409958748641483;  // std dev = 0.855, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2684230151687388;  // std dev = 0.145, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.08462142712998574;  // std dev = 0.050, 214.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=1 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return -0.14585930180482307;  // std dev = 1.135, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.004965210285925695;  // std dev = 1.235, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | | | else return 0.017386570624425148;  // std dev = 1.204, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.1405527646787605;  // std dev = 1.383, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.1805735160262934;  // std dev = 0.018, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.1881939944953155;  // std dev = 0.010, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.25311779123383965;  // std dev = 0.038, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A), follows(G, H) )
%   | | then return 0.047241445161646835;  // std dev = 0.893, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.230635569946527;  // std dev = 0.049, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(I, A) )
%   | | then return -0.0556762124151689;  // std dev = 0.083, 202.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0233220363899753;  // std dev = 1.219, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.0051888444356545235;  // std dev = 1.401, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then return 0.16310734174236532;  // std dev = 0.038, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return 0.21297298910173396;  // std dev = 0.032, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.03529260633098177;  // std dev = 0.914, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.16094658904619677;  // std dev = 0.052, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.23857455602168026;  // std dev = 0.123, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07435658133674876;  // std dev = 0.088, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.19881093476124484;  // std dev = 0.944, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.41348411703633925;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.11239828371390753;  // std dev = 0.023, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.13111971627511865;  // std dev = 0.987, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | | | else return 0.17770066122180103;  // std dev = 0.178, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.14133943563881354;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06634990753637285;  // std dev = 0.027, 217.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1735368662839993;  // std dev = 0.068, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2691764685882307;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09970728257402577;  // std dev = 0.002, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10447082096860807;  // std dev = 0.600, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.04549840184223392;  // std dev = 0.763, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '44.006', 'seconds']
Refined model CLL: -0.100965


******************************************
Best model found
******************************************
Results 

CLL : -0.098904 

AUC ROC : 0.995254 

AUC PR : 0.442966 

Precision : 0.335498 

Recall : 0.99359 

F1 : 0.501618 

Total Learning Time : 34.775 

Total Inference Time : 38.33054518699646 

Total revision time: 98.30920002937316
Best scored revision CLL: -0.100965


Results 

CLL : -0.098904 

AUC ROC : 0.995254 

AUC PR : 0.442966 

Precision : 0.335498 

Recall : 0.99359 

F1 : 0.501618 

Total Learning Time : 103.0480637359619 

Total Inference Time : 38.33054518699646 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.787
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else return -0.06777699082641366;  // std dev = 0.262, 54.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7035630945753766;  // std dev = 1.417, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03434013508115559;  // std dev = 0.263, 177.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06237358018616543;  // std dev = 1.790, 52.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7247539622367456;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.11669629643278479;  // std dev = 4.539, 140.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5614479767103504;  // std dev = 1.067, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7331002209713549;  // std dev = 0.222, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5605545306994274;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5969637761294132;  // std dev = 0.181, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5639370196841743;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -1.185438973370636E-4;  // std dev = 0.302, 374.000 (wgt'ed) examples reached here.  /* #neg=317 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5220432162155313;  // std dev = 2.356, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12356557872804726;  // std dev = 0.004, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1388023195906665;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30655028970081444;  // std dev = 1.134, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.4772832647835389;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.25429153226806533;  // std dev = 0.981, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.5112998016254339;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5744407841622583;  // std dev = 0.780, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10191355117144893;  // std dev = 1.658, 296.000 (wgt'ed) examples reached here.  /* #neg=291 #pos=5 */
%   | | else return 0.0024661277306876426;  // std dev = 0.264, 76.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024503118457428415;  // std dev = 3.134, 254.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26096614864199985;  // std dev = 0.172, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4674509432817438;  // std dev = 0.905, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11192099320750551;  // std dev = 0.029, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | | else return -0.11670410965441726;  // std dev = 0.049, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24153288923742194;  // std dev = 2.440, 127.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=121 */
%   | else return -0.08667547827573444;  // std dev = 1.574, 274.000 (wgt'ed) examples reached here.  /* #neg=267 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04955603591417384;  // std dev = 1.959, 78.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17303592172488336;  // std dev = 1.397, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return -0.09052790774826562;  // std dev = 0.872, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04553022915288784;  // std dev = 0.157, 178.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=19 */
%   | | else return 0.010008273151161972;  // std dev = 0.216, 193.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15957217186019096;  // std dev = 0.165, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29731079491106405;  // std dev = 0.910, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09377958212470952;  // std dev = 0.110, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.34559088423345274;  // std dev = 0.579, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10007623366812449;  // std dev = 0.096, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19131987048529503;  // std dev = 0.746, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.11216520326868887;  // std dev = 1.074, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08292360282169219;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0978421017552396;  // std dev = 0.037, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | | else return -0.02071478046157752;  // std dev = 0.996, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.11667515278536378;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.021029102580200444;  // std dev = 2.086, 125.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.881', 'seconds']
Parameter learned model CLL:-0.107662 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 173, 0], 'true,false,false': [0.262, 50, 4], 'false,true,true': [0.987, 1, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.33e-09, 71, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.417, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.263, 158, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.79, 48, 4], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [4.539, 100, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.067, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.222, 0, 3], 'true,false,false': [2.98e-08, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.181, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false': [0.302, 317, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.356, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.004, 216, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 114, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.134, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.981, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.78, 1, 39], 'false,false,true,false': [1.658, 291, 5], 'false,false,false': [0.264, 63, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.134, 172, 82], 'false,true': [0.172, 0, 22], 'false,false,true': [0.905, 0, 52], 'false,false,false,true': [0.029, 79, 0], 'false,false,false,false': [0.049, 70, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.44, 6, 121], 'true,false': [1.574, 267, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.959, 50, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [1.397, 2, 83], 'true,false,true': [0.872, 1, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.157, 159, 19], 'false,false,false': [0.216, 141, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.165, 2, 78], 'false,true,true,true': [0.91, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.11, 223, 0], 'false,false,true': [0.579, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.096, 104, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.746, 0, 85], 'true,true,false': [1.074, 1, 19], 'true,false,true': [0.0, 158, 0], 'true,false,false,true': [0.037, 46, 0], 'true,false,false,false': [0.996, 25, 4], 'false,true': [3.73e-09, 0, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.086, 85, 40]}]
{'': [0.21913805697589697, 0.2400000000000004], 'false': [0.019991670137443407, 6.880255363874209e-17], 'true': [0.01851192595229848, 0.017310640610141755], 'false,true': [0.025623268698062793, -1.6148698540002277e-16], 'true,false': [-1.8225626531418756e-16, 0.06858710562414251]}
{'': [0.023069977107710023, 0.11170219180661675], 'false': [0.06902130666537001, 0.1416860301179242], 'false,false': [0.06161224230912907, 0.1581414731413345], 'false,false,false': [0.0, 0.14719250037411488], 'false,true': [nan, 0.06902130666537001], 'false,false,true': [nan, 0.06161224230912907]}
{'': [0.01609930865171157, 0.10294593428253074], 'false': [nan, 0.10294593428252935], 'false,false': [0.0017808434959890648, 0.09114088594333007], 'true': [0.016729502854061273, 0.01036914798091182], 'true,true': [0.016729502854061273, nan], 'true,false': [0.016367834549585902, 1.1102230246251565e-16], 'false,false,true': [0.00545383320646553, -5.921189464667501e-17]}
{'': [0.03490804310447845, 6.304153846000322e-05], 'false': [1.6113331169374543e-05, -6.622382953904442e-17], 'false,true': [nan, 1.611333116936632e-05], 'false,false': [nan, -6.622382953904442e-17], 'false,false,false': [nan, -6.622382953904442e-17]}
{'': [0.016632255589056573, 0.06334477068096549], 'false': [0.04661608765571001, 0.06017917684140282], 'false,false': [0.05796566108607468, 0.06950091251394315], 'false,false,true': [0.01522488365096657, 0.009282490996179173], 'false,true': [0.0458334808755069, 0.0], 'true': [0.016476505473290385, 0.0]}
{'': [0.03866649815323696, 0.06678922211921534], 'false': [0.0013500568483414107, 0.06897215610589633], 'false,false': [0.015761029790073124, 2.7075652747481166e-05], 'true': [nan, 0.03866649815323695], 'true,false': [nan, 0.03866649815323696], 'false,false,false': [1.0535902097989822e-05, 3.3611888855922256e-05]}
{'': [0.04433904879805834, 0.04922218588405363], 'false': [nan, 0.04922218588405357], 'false,false': [nan, 0.04922218588405363], 'false,false,false': [nan, 0.04922218588405363], 'true': [0.04689297488298193, 0.009039252272414767]}
{'': [0.03310202403465666, 0.03686155849766428], 'false': [nan, 0.03686155849766408], 'false,false': [0.024664664900894966, 0.04663060000865022], 'true': [0.022966718834473116, 0.25317126791610584], 'true,false': [0.25317126791610584, nan]}
{'': [0.027321891918264653, 0.030193562402313082], 'false': [0.02224548250828372, 0.04223599460046387], 'false,false': [0.008372363303042429, 8.847373786772549e-05], 'false,true': [0.021792756213265513, 5.380128167000701e-05], 'false,true,true': [0.021792756213265513, nan], 'false,false,false': [nan, 8.847373786772549e-05]}
{'': [0.022502121004139675, 0.03322558921024643], 'false': [1.734723475976807e-18, 0.034801761240312756], 'false,false': [nan, 0.03480176124031282], 'true': [0.017255957296130553, 0.0047660531698246016], 'true,true': [0.0065519993732325865, 0.05767573833430768], 'true,false': [-7.026728003956687e-18, 0.014655908798934447], 'true,false,false': [3.045637503389279e-05, 0.034206413102420834]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
0;false,true;follows(E, F), follows(A, F).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 82.983
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else return -0.0585177315671544;  // std dev = 0.276, 48.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=4 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.43e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7252405647031324;  // std dev = 0.200, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7284676497974121;  // std dev = 0.062, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.12544463852839124;  // std dev = 5.96e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | else return -0.09164791649881752;  // std dev = 0.166, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.03179075069479246;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.07975660447620782;  // std dev = 1.169, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.6469082235107435;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.08184464140412538;  // std dev = 4.680, 163.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5171961058931195;  // std dev = 0.201, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.48631991268821234;  // std dev = 0.855, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5101590351207702;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.44253317307101153;  // std dev = 0.368, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5568815050089204;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5451976283179942;  // std dev = 1.093, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11695956370450696;  // std dev = 0.111, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1155113724969848;  // std dev = 3.081, 64.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=19 */
%   | | | else return 0.19891065794607043;  // std dev = 2.998, 53.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.4152813088946521;  // std dev = 0.987, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | | | else return 0.29509572536801526;  // std dev = 1.856, 28.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=23 */
%   | | else return 0.6739885618474096;  // std dev = 0.278, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.4961960249622975;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5495721698588819;  // std dev = 0.131, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6734168047654041;  // std dev = 0.065, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(I, A) )
%   | then return -0.10605168536343453;  // std dev = 0.108, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | else return -0.15401419022099103;  // std dev = 0.054, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.2688362504392263;  // std dev = 1.663, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   | | | else return 0.33129602919399453;  // std dev = 0.007, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.26001209971177;  // std dev = 1.351, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.1251374731020235;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.5243270479352997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3342684048282239;  // std dev = 0.040, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(I, A) )
%   | | then return -0.06137248297158814;  // std dev = 0.132, 237.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02672192276740059;  // std dev = 2.821, 101.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=25 */
%   | | | else return 0.09331583792864623;  // std dev = 2.001, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.27155687972178205;  // std dev = 0.059, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.16686521429421788;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04198533886589256;  // std dev = 0.134, 138.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=14 */
%   | | else return -0.06244622352739467;  // std dev = 0.130, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H), follows(A, I) )
%   | | then return 0.31880871936919536;  // std dev = 0.156, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2522528398983062;  // std dev = 0.026, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.36484780179574233;  // std dev = 0.274, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.48350386029350223;  // std dev = 1.021, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.12618682783133714;  // std dev = 0.020, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.20730871639192708;  // std dev = 0.124, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else return 0.2912731687650263;  // std dev = 0.069, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(F, A), follows(F, E) )
%   | | then return -0.08109661626924064;  // std dev = 0.078, 104.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.3879125352973801;  // std dev = 0.198, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08386266629778515;  // std dev = 0.003, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return -0.019190035184099525;  // std dev = 1.216, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | | else return 0.023831192408095482;  // std dev = 2.010, 67.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=20 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.20963235460243895;  // std dev = 0.008, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.01026985262868431;  // std dev = 1.840, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(E, A) )
%   | | then return 0.18836002430750348;  // std dev = 0.016, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( follows(A, C), follows(A, E) )
%   | | | then return 0.055328453386933596;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.1855434470383756;  // std dev = 0.054, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.24522299535918518;  // std dev = 0.127, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.2361328103286902;  // std dev = 0.062, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.3372134882528352;  // std dev = 0.343, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08123900995991343;  // std dev = 0.093, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 4.8601129851699336E-4;  // std dev = 1.824, 60.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=15 */
%   | | | else return 0.02619264449542155;  // std dev = 2.074, 79.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=25 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.08876262766859555;  // std dev = 1.648, 40.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=37 */
%   | | | else return 0.16495787973923254;  // std dev = 0.076, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.004809603134324936;  // std dev = 0.414, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return 0.16642006241189444;  // std dev = 0.018, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.24246106130292516;  // std dev = 0.323, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1296544381844855;  // std dev = 0.841, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.07500151254121436;  // std dev = 0.083, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3747565328128112;  // std dev = 0.018, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.13038631185023297;  // std dev = 0.078, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.10675139238904763;  // std dev = 1.371, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.14161080665303463;  // std dev = 0.092, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.21294477221369582;  // std dev = 0.052, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.06723995074090036;  // std dev = 0.004, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else return -0.05965551982471997;  // std dev = 0.116, 60.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14980591928904913;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2983390666232951;  // std dev = 0.069, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.11059188713096234;  // std dev = 0.046, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.009525345288488868;  // std dev = 0.226, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '34.286', 'seconds']
Refined model CLL: -0.102922


******************************************
Best model found
******************************************
Results 

CLL : -0.101345 

AUC ROC : 0.992809 

AUC PR : 0.340075 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 82.983 

Total Inference Time : 42.675816774368286 

Total revision time: 154.64510681152345
Best scored revision CLL: -0.102922


Results 

CLL : -0.101345 

AUC ROC : 0.992809 

AUC PR : 0.340075 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 159.3839705181122 

Total Inference Time : 42.675816774368286 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.273
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004884;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | | else return -0.095339436993511;  // std dev = 0.211, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.45e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6933375043592481;  // std dev = 1.710, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.025951481498597613;  // std dev = 0.275, 187.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09063686803525972;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7285554015677008;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10483498405287585;  // std dev = 3.010, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5705196550154472;  // std dev = 1.075, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7320769313663688;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8240987619938247;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3643290406600241;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5709912910445932;  // std dev = 4.21e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5709912910445932;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.029010612286634974;  // std dev = 0.268, 282.000 (wgt'ed) examples reached here.  /* #neg=250 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4813520614665971;  // std dev = 2.637, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11943424005694622;  // std dev = 0.002, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13400213702004868;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31004863426713875;  // std dev = 1.515, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.21701850963028155;  // std dev = 0.866, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31724827570836384;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5913209214605989;  // std dev = 0.788, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.07987934796275842;  // std dev = 2.102, 217.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=9 */
%   | | else return -0.11642850615399043;  // std dev = 0.050, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02785056111144221;  // std dev = 3.534, 273.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.19336131669629938;  // std dev = 0.989, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45132785512153717;  // std dev = 1.317, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10749344888940951;  // std dev = 0.033, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.103134041326917;  // std dev = 0.050, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2757876268217155;  // std dev = 1.836, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07759085211968993;  // std dev = 1.865, 254.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.007035394954289482;  // std dev = 0.717, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.2019727807051051;  // std dev = 0.070, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.25604245541068665;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03784519212678354;  // std dev = 0.158, 185.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=22 */
%   | | else return 0.006632494064336743;  // std dev = 0.208, 102.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17851977215536646;  // std dev = 0.128, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29136434845126735;  // std dev = 0.710, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09165581622036828;  // std dev = 0.033, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4183536438912282;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09482266020278456;  // std dev = 0.001, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14384280410699474;  // std dev = 2.166, 99.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=94 */
%   | | else return 0.04569959594798212;  // std dev = 0.950, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0850703943475115;  // std dev = 1.13e-07, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08076696498352035;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.033829979173705324;  // std dev = 0.509, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1593991597908531;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.005802144662390245;  // std dev = 1.832, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.459', 'seconds']
Parameter learned model CLL:-0.108219 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 202, 0], 'true,false,false': [0.211, 41, 2], 'false,true,true': [0.977, 1, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.45e-09, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.71, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.275, 165, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.98, 24, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [3.01, 46, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.075, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.078, 0, 2], 'true,false,false': [0.894, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [4.21e-08, 0, 9], 'false,false,true,false': [2.98e-08, 0, 8], 'false,false,false': [0.268, 250, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.637, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.002, 238, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 39, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.515, 2, 73], 'true,false': [0.866, 1, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.788, 1, 23], 'false,false,true,false': [2.102, 208, 9], 'false,false,false': [0.05, 23, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.534, 182, 91], 'false,true': [0.989, 1, 13], 'false,false,true': [1.317, 1, 22], 'false,false,false,true': [0.033, 30, 0], 'false,false,false,false': [0.05, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.836, 3, 107], 'true,false': [1.865, 243, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.717, 18, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.07, 0, 80], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.158, 163, 22], 'false,false,false': [0.208, 80, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.128, 1, 77], 'false,true,true,true': [0.71, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.033, 199, 0], 'false,false,true': [0.499, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.001, 39, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [2.166, 5, 94], 'true,true,false': [0.95, 1, 9], 'true,false,true': [1.13e-07, 197, 0], 'true,false,false,true': [7.45e-09, 16, 0], 'true,false,false,false': [0.509, 15, 2], 'false,true': [0.052, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.832, 55, 17]}]
{'': [0.20931527634297697, 0.2292444699798909], 'false': [0.04338842975206614, 3.900783600034334e-17], 'true': [0.03598567560485849, 0.008096626405664178], 'false,true': [0.04338842975206614, nan], 'true,false': [-2.374338349693404e-16, 0.04434829637641966]}
{'': [0.03440248274983137, 0.09784756052420564], 'false': [0.07569846692727654, 0.13550837928634554], 'false,false': [0.03840000000000006, 0.15702724362913786], 'false,false,false': [0.0, 0.14377172530834717], 'false,true': [nan, 0.07569846692727654], 'false,false,true': [nan, 0.03840000000000006]}
{'': [0.029460647291522653, 0.08688306954051644], 'false': [nan, 0.08688306954051647], 'false,false': [5.224578939412501e-17, 0.07165234410790622], 'true': [0.016408527095899374, 0.15829731447986498], 'true,false': [0.0030490316399841566, 0.16], 'true,true': [0.016277122645474335, 0.0], 'false,false,true': [1.9737298215558337e-16, 1.1102230246251565e-16]}
{'': [0.053064139819488036, 2.898147682726412e-05], 'false': [3.850682230765265e-06, 0.0], 'false,true': [nan, 3.850682230761533e-06], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}
{'': [0.03856684040626459, 0.060132293121517987], 'false': [-6.530723674265627e-17, 0.05703988330840237], 'false,false': [0.061314871690661896, 0.0024871010997219133], 'false,false,true': [0.025878317152363477, 0.020370075322445193], 'true': [0.030595612122776217, 0.1500215733242642], 'false,true': [-6.530723674265627e-17, nan]}
{'': [0.045742734549095394, 0.07789559796021807], 'false': [0.06990484125362681, 0.0756744454781023], 'false,false': [0.07535754377984082, 5.473503582255991e-05], 'true': [nan, 0.04574273454909534], 'true,false': [nan, 0.045742734549095394], 'false,false,false': [3.6077896632415633e-05, 6.0356558423372474e-05]}
{'': [0.04515047745160166, 0.019790176635401682], 'true': [0.030632754113734784, 0.013700322143136573], 'false': [nan, 0.019790176635401682], 'false,false': [nan, 0.019790176635401682], 'false,false,false': [nan, 0.019790176635401682]}
{'': [0.00020704397045982387, 0.031850186870793676], 'false': [nan, 0.03185018687079344], 'false,false': [0.024958473787306132, 0.043074674598891326], 'true': [6.19293035698798e-05, 0.0031594065262848525], 'true,false': [0.0031594065262848525, nan]}
{'': [0.016446151017474025, 0.029139049740088827], 'false': [0.01969551360191163, 0.060115569440372184], 'false,false': [0.014623269986011888, 3.497523055361585e-08], 'false,true': [0.015761290191886643, 5.458648525297735e-06], 'false,true,true': [0.015761290191886643, nan], 'false,false,false': [nan, 3.497523055361585e-08]}
{'': [0.027810708929106014, 0.0455621628625256], 'false': [0.000679075769527155, 0.04661927449086482], 'false,false': [nan, 0.04661927449086482], 'true': [0.052139094865382145, 0.0013043236574545184], 'true,true': [0.04740823398979693, 0.0902262061440742], 'true,false': [6.424640853160804e-17, 0.00839585625337109], 'true,false,false': [3.469446951953614e-18, 0.015229678300679816]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 29.428
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8164822684328461;  // std dev = 1.696, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.6955305903449719;  // std dev = 0.175, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | | else return 0.6157687375961608;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.7308259971691815;  // std dev = 0.142, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(G, A), tweets(G, H) )
%   | | then if ( follows(I, A), follows(I, G) )
%   | | | then return -0.10320995298261888;  // std dev = 1.444, 114.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=3 */
%   | | | else return 0.0736527677467499;  // std dev = 3.281, 81.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=19 */
%   | | else return -0.12544463852839136;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(J, A), follows(K, J) )
%   | | then return -0.10353121862621191;  // std dev = 0.169, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.5489901331023448;  // std dev = 0.762, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.07612176762570362;  // std dev = 3.083, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5455804975424745;  // std dev = 0.204, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7970889053994982;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.521650779002704;  // std dev = 0.379, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5595704252731164;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.4414502470784885;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09612871973417456;  // std dev = 1.464, 135.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=3 */
%   | | | else return -0.024573644958475943;  // std dev = 2.711, 93.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1306084682236307;  // std dev = 2.024, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.11733122659623853;  // std dev = 2.103, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.4174983592113039;  // std dev = 0.877, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.2824244129330231;  // std dev = 0.906, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.44294700712073337;  // std dev = 0.222, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.6369100164566208;  // std dev = 0.211, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7191491000283724;  // std dev = 0.075, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.27408808304666016;  // std dev = 0.867, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.583305742027641;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   else if ( follows(J, A) )
%   | then return -0.11342829219481478;  // std dev = 0.162, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else return -0.14888100413836736;  // std dev = 0.005, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.32526564652833495;  // std dev = 0.124, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else return 0.1583058941712488;  // std dev = 0.456, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else return 0.47359551052068777;  // std dev = 0.274, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), tweets(A, G) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.3194725166912312;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.061848319642903826;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.33366505080541764;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.0542322409289487;  // std dev = 2.478, 201.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=15 */
%   | | | else return 0.1059345867528462;  // std dev = 2.278, 49.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=17 */
%   | | else return -0.100808565263417;  // std dev = 9.13e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.2398597293628;  // std dev = 1.328, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | | else return 0.08657513317295162;  // std dev = 0.915, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.41722519958224835;  // std dev = 0.040, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.042776707131614224;  // std dev = 0.179, 212.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=20 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.31366375977889466;  // std dev = 0.135, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.15644895723400076;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.35228387558728425;  // std dev = 0.261, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4698685931180383;  // std dev = 0.984, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.11994304777190122;  // std dev = 0.025, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.22491843221930952;  // std dev = 0.036, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( tweets(A, E), tweets(C, E) )
%   | | | then return 0.0872455149192611;  // std dev = 1.183, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.25266406988014956;  // std dev = 0.104, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.2900781544035424;  // std dev = 0.080, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4533303763445005;  // std dev = 0.139, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return -0.09814726432780875;  // std dev = 0.016, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.23796356591675036;  // std dev = 0.000601, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.08376798490848583;  // std dev = 0.015, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.07760727545927282;  // std dev = 1.235, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), tweets(F, E) )
%   | | | then return 0.1445306437805196;  // std dev = 1.627, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   | | | else return 0.2021068428012814;  // std dev = 0.038, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.05673714643664074;  // std dev = 0.327, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else return 0.2420539115249778;  // std dev = 0.067, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.06754605044140921;  // std dev = 0.082, 154.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=3 */
%   | | else return 0.03663067547939956;  // std dev = 0.222, 73.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=20 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.17963306627120113;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0051360419325890555;  // std dev = 1.044, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.06493054894307981;  // std dev = 1.213, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.17465025123089273;  // std dev = 0.013, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.6445903410494236;  // std dev = 0.111, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.26867787295181683;  // std dev = 0.075, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.20726204281434776;  // std dev = 0.235, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.1621596507424885;  // std dev = 0.050, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.303131068493948;  // std dev = 1.524, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return -0.0819493351010944;  // std dev = 0.012, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3419448709402418;  // std dev = 0.025, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13534016024049295;  // std dev = 0.013, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.11266290386728847;  // std dev = 0.185, 84.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.09504246408152922;  // std dev = 0.933, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.38934875832944366;  // std dev = 0.132, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07358463893923374;  // std dev = 0.037, 232.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12946125951796028;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2470162888819013;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10656088512928746;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return -5.122792954691577E-4;  // std dev = 0.698, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.03426321168469372;  // std dev = 0.825, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '29.857', 'seconds']
Refined model CLL: -0.105823


******************************************
Best model found
******************************************
Results 

CLL : -0.104212 

AUC ROC : 0.994846 

AUC PR : 0.380418 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 29.428 

Total Inference Time : 26.43288493156433 

Total revision time: 80.34059383964538
Best scored revision CLL: -0.105823


Results 

CLL : -0.104212 

AUC ROC : 0.994846 

AUC PR : 0.380418 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 80.46164372062682 

Total Inference Time : 26.43288493156433 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.662
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.08302753548872299;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.12e-09, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.701772440490635;  // std dev = 1.418, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.042077341192868996;  // std dev = 0.252, 193.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06846473802906507;  // std dev = 1.803, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6136428511256345;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.0935441428097129;  // std dev = 4.624, 155.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5597029539196066;  // std dev = 1.068, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5196176444627912;  // std dev = 0.777, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.587714206327369;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5959277696137272;  // std dev = 0.185, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5620786439090689;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.005240762778040796;  // std dev = 0.306, 363.000 (wgt'ed) examples reached here.  /* #neg=306 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.514691417348982;  // std dev = 2.573, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12261940003623444;  // std dev = 0.003, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13668906671286138;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31244911884115956;  // std dev = 1.000, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.5366705460224583;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3024649601539605;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.517651638315729;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5493869977444783;  // std dev = 1.377, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return -0.09939332772462149;  // std dev = 1.665, 265.000 (wgt'ed) examples reached here.  /* #neg=260 #pos=5 */
%   | | else return 9.769701426539579E-5;  // std dev = 0.261, 79.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.033797992992088674;  // std dev = 3.165, 232.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2572591772473705;  // std dev = 0.208, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4788430826566996;  // std dev = 0.886, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1104375707122463;  // std dev = 0.037, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return -0.11405451148740109;  // std dev = 0.045, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27911247577557285;  // std dev = 1.413, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.086890412372617;  // std dev = 1.688, 242.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06723626296899;  // std dev = 1.899, 70.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1765527709338364;  // std dev = 0.995, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2779687793163395;  // std dev = 0.008, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05373790848419132;  // std dev = 0.168, 179.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=19 */
%   | | else return 0.011102681285126014;  // std dev = 0.226, 189.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14252739206232268;  // std dev = 0.194, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28899410457560915;  // std dev = 0.930, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09331933612771866;  // std dev = 0.100, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3456859951181951;  // std dev = 0.580, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10154830194895266;  // std dev = 0.095, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18734756870370703;  // std dev = 0.756, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.15746422818286004;  // std dev = 0.385, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08310790003301388;  // std dev = 1.16e-07, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09812868639029679;  // std dev = 0.034, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.02115911849146294;  // std dev = 1.003, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.01107208749819482;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.012735210255435619;  // std dev = 2.030, 140.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.267', 'seconds']
Parameter learned model CLL:-0.107148 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 164, 0], 'true,false,false': [0.235, 64, 4], 'false,true,true': [0.987, 1, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.12e-09, 107, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.418, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.252, 174, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.803, 52, 4], 'false,false,false,true': [0.943, 1, 8], 'false,false,false,false': [4.624, 115, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.068, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.777, 1, 3], 'true,false,false': [0.0, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.185, 0, 6], 'false,false,true,false': [5.96e-08, 0, 15], 'false,false,false': [0.306, 306, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.573, 5, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.003, 229, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 96, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.0, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.377, 2, 39], 'false,false,true,false': [1.665, 260, 5], 'false,false,false': [0.261, 66, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.165, 150, 82], 'false,true': [0.208, 0, 22], 'false,false,true': [0.886, 0, 52], 'false,false,false,true': [0.037, 73, 0], 'false,false,false,false': [0.045, 77, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.413, 1, 121], 'true,false': [1.688, 235, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.899, 42, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.995, 1, 83], 'true,false,true': [0.008, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.168, 160, 19], 'false,false,false': [0.226, 137, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.194, 3, 78], 'false,true,true,true': [0.93, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.1, 207, 0], 'false,false,true': [0.58, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.095, 75, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.756, 0, 85], 'true,true,false': [0.385, 0, 19], 'true,false,true': [1.16e-07, 177, 0], 'true,false,false,true': [0.034, 34, 0], 'true,false,false,false': [1.003, 26, 4], 'false,true': [0.943, 1, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.03, 100, 40]}]
{'': [0.21777069446768257, 0.21301775147929078], 'true': [0.009433106575965852, 0.016944114149821533], 'false': [0.019991670137443407, 6.640586315514955e-17], 'false,true': [0.025623268698062793, -1.6148698540002277e-16], 'true,false': [-1.5705594006892458e-16, 0.055363321799307884]}
{'': [0.02309743037828868, 0.104113100128513], 'false': [0.06364834158500508, 0.13336042235045362], 'false,false': [0.058068314957381344, 0.14982746885711345], 'false,false,false': [0.09876543209876543, 0.137947702792543], 'false,true': [nan, 0.06364834158500508], 'false,false,true': [nan, 0.058068314957381344]}
{'': [0.021955598617232796, 0.10549484027574076], 'false': [nan, 0.10549484027574113], 'false,false': [0.0018706339770936016, 0.0939386321583821], 'true': [0.01676789600461311, 0.0513285917480224], 'true,false': [0.15089434741888325, 0.0], 'true,true': [0.01676789600461311, nan], 'false,false,true': [0.00572881655484873, 2.3684757858670006e-16]}
{'': [0.041115402879604315, 4.957920405970548e-05], 'false': [1.189048395714349e-05, -1.2721305490496585e-16], 'false,true': [nan, 1.189048395714349e-05], 'false,false': [nan, -1.2721305490496585e-16], 'false,false,false': [nan, -1.2721305490496585e-16]}
{'': [0.01327717069239136, 0.06678516419940911], 'false': [0.0021090596886048324, 0.06493000342215584], 'false,false': [0.06409012275680688, 0.0680577699508078], 'false,false,true': [0.04621640054987903, 0.010458261231107364], 'true': [0.012810995280014871, 0.0], 'false,true': [9.498079782832568e-06, 0.0]}
{'': [0.043187133332803135, 0.0681375187010042], 'false': [0.0019628242517664356, 0.07070366196022074], 'false,false': [0.015094272850565945, 2.5865504120775225e-05], 'true': [nan, 0.04318713333280318], 'true,false': [nan, 0.043187133332803135], 'false,false,false': [1.8396359113664656e-05, 2.657994145046797e-05]}
{'': [0.043161832039867135, 0.05150235645904775], 'false': [nan, 0.05150235645904787], 'false,false': [nan, 0.05150235645904775], 'false,false,false': [nan, 0.05150235645904775], 'true': [0.016354850668265874, 0.011778046133646075]}
{'': [0.011742696026182274, 0.04110289650195406], 'false': [nan, 0.04110289650195372], 'false,false': [0.028361749231262237, 0.05112488162518956], 'true': [0.011782306350388365, 3.3046508082182346e-05], 'true,false': [3.3046508082182346e-05, nan]}
{'': [0.03778228168445774, 0.03260767981180783], 'false': [0.02272832145389187, 0.04838080951637239], 'false,false': [0.008420660819684511, 0.00012123091756947406], 'false,true': [0.022782090027976102, 4.818336863587795e-05], 'false,true,true': [0.022782090027976102, nan], 'false,false,false': [nan, 0.00012123091756947406]}
{'': [0.019548671571186855, 0.03361186706357337], 'false': [0.09876543209876543, 0.02942325652457059], 'false,false': [nan, 0.029423256524570618], 'true': [0.0070557632867154045, 0.004655202231223193], 'true,true': [0.0067259834906574735, 0.007801226708499438], 'true,false': [7.652384689506728e-17, 0.017204044759977166], 'true,false,false': [3.418328609219377e-05, 0.033515929081325974]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
0;false,true;follows(E, F), follows(A, F).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 114.084
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7903523249300209;  // std dev = 1.931, 59.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=55 */
%   | | | else return 0.8268989350995123;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else return -0.0716756263039965;  // std dev = 0.255, 57.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=4 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.14185106490048763;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7350492129794177;  // std dev = 0.191, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else return 0.6606498827991895;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A) )
%   | | then return 0.755234667912482;  // std dev = 0.122, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5766162693538117;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6773142487955339;  // std dev = 0.989, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.1277027297021427;  // std dev = 0.053, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.10216788532305464;  // std dev = 2.808, 55.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=15 */
%   | | | else return 0.14535091286733434;  // std dev = 3.524, 78.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5534605058207285;  // std dev = 0.120, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.6928697102684573;  // std dev = 0.153, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.5903070371782126;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3021262322605524;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5701691101906123;  // std dev = 0.042, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10894421652374302;  // std dev = 0.686, 138.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=1 */
%   | | | else return 0.005346787176068624;  // std dev = 2.551, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09736367882202962;  // std dev = 3.526, 88.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=25 */
%   | | | else return 0.16651890256156948;  // std dev = 2.602, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F), follows(A, G) )
%   | | then if ( recursion_accounttype(G, B), recursion_accounttype(E, B) )
%   | | | then return 0.4117424813895802;  // std dev = 0.995, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.5529933980605399;  // std dev = 0.358, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, H), recursion_accounttype(E, B) )
%   | | | then return 0.4408850979470988;  // std dev = 0.128, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3418113976976747;  // std dev = 1.233, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(J, B) )
%   | | | then return 0.30111113292468544;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6693564091308216;  // std dev = 0.075, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.6592534627634971;  // std dev = 0.159, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(L, A) )
%   | then return -0.10691481085600806;  // std dev = 0.088, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return -0.1547430756372924;  // std dev = 0.058, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.31310993360546;  // std dev = 0.989, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return 0.3312395860286403;  // std dev = 0.010, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.37996789571029466;  // std dev = 0.038, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.44383806952543325;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33579534110819154;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.09083405591314593;  // std dev = 0.586, 126.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=1 */
%   | | | else return -0.018039828843408486;  // std dev = 2.072, 104.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.021022424949936704;  // std dev = 2.826, 105.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=25 */
%   | | | else return 0.04451649033521539;  // std dev = 2.126, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2658779611943125;  // std dev = 0.044, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.09467688822125675;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.044820097452959416;  // std dev = 1.842, 150.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=13 */
%   | | | else return -0.09120593664208304;  // std dev = 0.684, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then return 0.2692184520777572;  // std dev = 0.037, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.08525273154008069;  // std dev = 0.982, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.20160655690617307;  // std dev = 0.967, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.48477401528152075;  // std dev = 0.981, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.12446626135611961;  // std dev = 0.021, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B), follows(D, C) )
%   | | then if ( follows(E, A), follows(D, E) )
%   | | | then return 0.2197586475957242;  // std dev = 0.058, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | | else return -0.07098305781323216;  // std dev = 1.335, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.013610450470062124;  // std dev = 0.901, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3484312058354129;  // std dev = 1.376, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else return -0.09502399394800373;  // std dev = 0.032, 248.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.22501279552100273;  // std dev = 0.027, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(G, A) )
%   | | then return -0.04432689863480694;  // std dev = 0.140, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.013861898400174226;  // std dev = 0.599, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.05989353865799482;  // std dev = 1.557, 32.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.1463747728790738;  // std dev = 1.364, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | | else return 0.11040778248296497;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.18993863940727396;  // std dev = 0.023, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.23717746076068513;  // std dev = 0.029, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then return -0.07306474102543715;  // std dev = 0.063, 146.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=2 */
%   | | else return -0.025549818310394927;  // std dev = 0.189, 122.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=21 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2558572111072123;  // std dev = 0.027, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.01904269355383795;  // std dev = 1.754, 81.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=25 */
%   | | | else return 0.0444721083662727;  // std dev = 1.561, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.161207967445956;  // std dev = 0.048, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.08235252535319687;  // std dev = 0.706, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(F, A) )
%   | | then return 0.23659875422067947;  // std dev = 0.147, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.21039274140196762;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.12025107869946022;  // std dev = 0.984, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.38997666947466636;  // std dev = 0.185, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07573247902863774;  // std dev = 0.118, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3246660812283024;  // std dev = 0.026, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.12311958300928971;  // std dev = 0.015, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.14753464307165573;  // std dev = 0.122, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.06955477172872497;  // std dev = 0.861, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.2120872554645229;  // std dev = 0.075, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.06440575366959486;  // std dev = 0.049, 223.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.24162442565140288;  // std dev = 0.047, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.10752386092403446;  // std dev = 0.013, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.23769991902952875;  // std dev = 0.076, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.10687277864378546;  // std dev = 0.046, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.009188466261304842;  // std dev = 0.192, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '38.290', 'seconds']
Refined model CLL: -0.102235


******************************************
Best model found
******************************************
Results 

CLL : -0.102039 

AUC ROC : 0.993519 

AUC PR : 0.40572 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 114.084 

Total Inference Time : 44.690211057662964 

Total revision time: 188.08539409255982
Best scored revision CLL: -0.102235


Results 

CLL : -0.102039 

AUC ROC : 0.993519 

AUC PR : 0.40572 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 188.20644397354127 

Total Inference Time : 44.690211057662964 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.184
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else return -0.04661296966239256;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7212326259175977;  // std dev = 0.143, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03250365294706309;  // std dev = 0.264, 200.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10774624797574364;  // std dev = 0.998, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08646130905358426;  // std dev = 3.025, 67.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5302385941663684;  // std dev = 1.679, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7259866339762802;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8154532716525649;  // std dev = 0.086, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5549319838834985;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5549319838834985;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.03183202866845436;  // std dev = 0.264, 288.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.49667507297812075;  // std dev = 1.994, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11911821162723714;  // std dev = 0.002, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13156156444062536;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30550866064307025;  // std dev = 1.289, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.16056738275657081;  // std dev = 0.969, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30343607271193124;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6148562739946952;  // std dev = 0.065, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08021518030270361;  // std dev = 2.073, 225.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=9 */
%   | | else return -0.10858184004400621;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.040498042744879864;  // std dev = 3.197, 255.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25647531995357364;  // std dev = 0.164, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4865850725208672;  // std dev = 0.621, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10699297072071988;  // std dev = 0.025, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.10529856644656854;  // std dev = 0.030, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.22680715508990848;  // std dev = 2.736, 114.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=107 */
%   | else return -0.07771704386437499;  // std dev = 1.804, 244.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0067239808734874595;  // std dev = 0.667, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15193544456379884;  // std dev = 1.950, 84.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.25053020935368775;  // std dev = 0.075, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04763772758747828;  // std dev = 0.155, 209.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=22 */
%   | | else return 0.02356069846713301;  // std dev = 0.243, 77.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17329129513456068;  // std dev = 0.157, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26425766351131214;  // std dev = 1.017, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09176689467725999;  // std dev = 0.019, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3616371698011882;  // std dev = 0.824, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09452745420703289;  // std dev = 0.000407, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18550312100556354;  // std dev = 1.311, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.1413429802246551;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08454449774171746;  // std dev = 7.30e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08465847077970029;  // std dev = 5.27e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.023158265693064235;  // std dev = 0.493, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.06076324303342007;  // std dev = 0.863, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.006271486273783714;  // std dev = 1.712, 67.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.632', 'seconds']
Parameter learned model CLL:-0.108519 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [4.46e-07, 0, 103], 'true,false,true': [0.0, 177, 0], 'true,false,false': [0.294, 19, 2], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.97e-09, 42, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.143, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 178, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.998, 29, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [3.025, 50, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.679, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.086, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false': [0.264, 256, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.994, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.002, 217, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 38, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.289, 2, 73], 'true,false': [0.969, 1, 4], 'false,true,true': [1.49e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.065, 0, 23], 'false,false,true,false': [2.073, 216, 9], 'false,false,false': [0.0, 22, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.197, 164, 91], 'false,true': [0.164, 0, 13], 'false,false,true': [0.621, 0, 22], 'false,false,false,true': [0.025, 32, 0], 'false,false,false,false': [0.03, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.736, 7, 107], 'true,false': [1.804, 233, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.667, 16, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [1.95, 4, 80], 'true,false,true': [0.075, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 187, 22], 'false,false,false': [0.243, 55, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.157, 2, 77], 'false,true,true,true': [1.017, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.019, 228, 0], 'false,false,true': [0.824, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.000407, 35, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.311, 1, 94], 'true,true,false': [0.01, 0, 9], 'true,false,true': [7.3e-08, 185, 0], 'true,false,false,true': [5.27e-09, 19, 0], 'true,false,false,false': [0.493, 11, 2], 'false,true': [0.863, 1, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.712, 50, 17]}]
{'': [0.22714981070849338, 0.22222222222222235], 'true': [1.9315724855614373e-15, 0.009998979695949229], 'false': [0.0, 4.7580986769649563e-17], 'true,false': [-1.9068237259098733e-16, 0.08616780045351478], 'false,true': [0.0, nan]}
{'': [0.00025068146211776197, 0.0905422439571397], 'false': [0.06988948957034005, 0.12648449646397308], 'false,false': [0.03321332341928733, 0.1501997085645703], 'false,false,false': [0.0, 0.13659196392236345], 'false,true': [nan, 0.06988948957034005], 'false,false,true': [nan, 0.03321332341928733]}
{'': [0.03774571178246351, 0.08372779910513262], 'false': [nan, 0.08372779910513269], 'false,false': [-3.134747363647501e-16, 0.06948001876471903], 'true': [0.038594531238644175, 0.016251047978488014], 'true,true': [0.03860542216240046, 0.0], 'true,false': [0.0036563694744196074, 0.0], 'false,false,true': [-9.868649107779169e-17, 0.0]}
{'': [0.03105921861605307, 2.4595433057351004e-05], 'false': [5.828714040866977e-06, 0.0], 'false,true': [nan, 5.828714040858791e-06], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}
{'': [0.03371506960900532, 0.056665542068345794], 'false': [1.3061447348531253e-17, 0.05390917078553942], 'false,false': [0.057989292852968326, -1.0092936587501423e-17], 'false,false,true': [0.00018139004246843564, 0.0190926600139767], 'true': [0.02214229487189897, 0.18761171500743978], 'false,true': [1.3061447348531253e-17, nan]}
{'': [0.0400897532799889, 0.06628432683528795], 'false': [0.0020687172294250834, 0.06971366319235721], 'false,false': [0.01750126078057064, 2.3569011682223417e-05], 'true': [nan, 0.04008975327998948], 'true,false': [nan, 0.0400897532799889], 'false,false,false': [1.957048951005229e-05, 2.5853576710629537e-05]}
{'': [0.05013126749600035, 0.01853585146348712], 'true': [0.06566841307700394, 0.013341973551143433], 'false': [nan, 0.01853585146348712], 'false,false': [nan, 0.01853585146348712], 'false,false,false': [nan, 0.01853585146348712]}
{'': [0.044478850758049394, 0.034379961804827185], 'true': [0.045244951094649995, 0.00280777706159456], 'false': [nan, 0.03437996180482682], 'false,false': [0.023932129333275, 0.05903393724374909], 'true,false': [0.00280777706159456, nan]}
{'': [0.024753042429854728, 0.026583907616540087], 'false': [0.017965324100708013, 0.059483375924305894], 'false,false': [0.03773009510814264, 4.740901993205426e-09], 'false,true': [0.03135090728309112, 1.6342293476352955e-06], 'false,true,true': [0.03135090728309112, nan], 'false,false,false': [nan, 4.740901993205426e-09]}
{'': [0.021406414038377262, 0.05132930913044768], 'false': [0.14888037322263853, 0.04373731960394667], 'false,false': [nan, 0.04373731960394667], 'true': [0.01668863052759382, 0.0013327483506745269], 'true,true': [0.018099868857965776, 1.086810989625289e-05], 'true,false': [2.880578658486893e-17, 0.008510372139981806], 'true,false,false': [1.460819769243627e-18, 0.018702882429312236]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 25.654
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.8448156017661795;  // std dev = 0.993, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | | | else return 0.8105298874804645;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.7581489350995122;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( recursion_accounttype(J, B) )
%   | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7267683635062542;  // std dev = 0.129, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.7221566062145682;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.39564991361287233;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05896610952894335;  // std dev = 2.819, 153.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=12 */
%   | | | else return -0.061362547117796595;  // std dev = 1.423, 40.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.07550744112542926;  // std dev = 0.956, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return -0.12920562898287302;  // std dev = 0.040, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7580193346218546;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09414525518947532;  // std dev = 3.001, 65.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5596340548263656;  // std dev = 0.089, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.6442411958510053;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.29236150717383813;  // std dev = 1.001, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.5947969362557473;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5696067472502471;  // std dev = 0.009, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7352522515704517;  // std dev = 0.011, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12042683058080839;  // std dev = 0.122, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09904668050234719;  // std dev = 2.127, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0.19834877315835056;  // std dev = 1.832, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.4193381709166248;  // std dev = 0.022, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.3778121270279552;  // std dev = 1.015, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.1328030530348024;  // std dev = 1.495, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.5207258970057081;  // std dev = 0.328, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.42821206400188905;  // std dev = 0.009, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.5661645019616471;  // std dev = 0.957, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.6666526253811811;  // std dev = 0.033, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(J, A) )
%   | then return -0.10751277459334066;  // std dev = 0.080, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return -0.1545619175658448;  // std dev = 0.044, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then return 0.3240328283418664;  // std dev = 0.040, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else return 0.19916744271483255;  // std dev = 1.006, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(F, A) )
%   | | then if ( tweets(A, G), follows(A, F) )
%   | | | then return 0.3871259599124173;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5505535862058707;  // std dev = 0.210, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3248237362670011;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3280069525167721;  // std dev = 0.008, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.467259310121111;  // std dev = 0.244, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07872143880323691;  // std dev = 1.807, 215.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=9 */
%   | | else return -0.09120612121345627;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.1853890185231064;  // std dev = 1.667, 43.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | | else return 0.2585110365701768;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.26503994573156275;  // std dev = 0.011, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( tweets(A, G) )
%   | | then return -0.04641944138282922;  // std dev = 0.126, 156.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=17 */
%   | | else return -0.07051948181986452;  // std dev = 0.175, 49.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.28327625045037075;  // std dev = 0.070, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3203587769600007;  // std dev = 0.982, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.49951170364251907;  // std dev = 0.257, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11244756310393424;  // std dev = 0.018, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.21720513189573368;  // std dev = 0.050, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else return 0.2689179461935798;  // std dev = 0.203, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.07501327629838236;  // std dev = 0.883, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.338550904322241;  // std dev = 0.196, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.08574354268319166;  // std dev = 0.069, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.19468807300519364;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.006595442327604243;  // std dev = 1.290, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | | | else return 0.05033420848763967;  // std dev = 1.120, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(E, A), follows(C, E) )
%   | | then return 0.18340060339296835;  // std dev = 0.033, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.1125667030399736;  // std dev = 0.248, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.22098340157957316;  // std dev = 0.183, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(A, G) )
%   | | then return 0.25242006009101975;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(F, H), follows(H, F) )
%   | | | then return -0.2372303063943733;  // std dev = 1.101, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.16398161194350777;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(I, A) )
%   | | then return -0.05371367699358843;  // std dev = 0.093, 202.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0274908537242465;  // std dev = 1.249, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return -0.01289023664021766;  // std dev = 1.318, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.11408515465831973;  // std dev = 1.378, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.1572284823798071;  // std dev = 0.027, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.2541563623569434;  // std dev = 0.095, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.04697760781749609;  // std dev = 0.924, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.005309812140079822;  // std dev = 1.590, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return 0.28376098738511696;  // std dev = 0.083, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07599351382277929;  // std dev = 0.065, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.36722614117313357;  // std dev = 0.031, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11810114133501844;  // std dev = 0.034, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.11826154043794135;  // std dev = 1.383, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | | | else return 0.20378321402764282;  // std dev = 0.186, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.15321747543186637;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06632246640671048;  // std dev = 0.041, 223.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=2 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.23733985334197863;  // std dev = 0.041, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1020973738188118;  // std dev = 0.010, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.32298310821391274;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10170656796177564;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.009967470898972135;  // std dev = 0.182, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '36.501', 'seconds']
Refined model CLL: -0.102135


******************************************
Best model found
******************************************
Results 

CLL : -0.100221 

AUC ROC : 0.995008 

AUC PR : 0.419494 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 25.654 

Total Inference Time : 32.63614201545715 

Total revision time: 83.92578691291808
Best scored revision CLL: -0.102135


Results 

CLL : -0.100221 

AUC ROC : 0.995008 

AUC PR : 0.419494 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 83.97895973968505 

Total Inference Time : 32.63614201545715 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.582
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else return -0.0716756263039965;  // std dev = 0.255, 57.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.54e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.716761327213637;  // std dev = 1.017, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0353231616931201;  // std dev = 0.265, 176.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06186929532099177;  // std dev = 1.791, 52.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.09724300016099198;  // std dev = 4.593, 151.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.520901193794318;  // std dev = 1.926, 71.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7323315668354312;  // std dev = 0.222, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4442553256351735;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5958562661599365;  // std dev = 0.180, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5629460416598134;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.00447843723189212;  // std dev = 0.308, 359.000 (wgt'ed) examples reached here.  /* #neg=302 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5107266177552857;  // std dev = 2.910, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12384423337338094;  // std dev = 0.004, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13703596248010055;  // std dev = 9.66e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3205415353152307;  // std dev = 0.979, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.47797828463687053;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30391301090097234;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5120805022890251;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5710493117008054;  // std dev = 0.970, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10116146365748019;  // std dev = 1.657, 285.000 (wgt'ed) examples reached here.  /* #neg=280 #pos=5 */
%   | | else return 0.019949189123080063;  // std dev = 0.287, 65.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.033704768745441926;  // std dev = 3.145, 238.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2543180747465556;  // std dev = 0.181, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47095243187213576;  // std dev = 0.874, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11022468457594742;  // std dev = 0.025, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | | else return -0.11694259691666566;  // std dev = 0.041, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26490026066745975;  // std dev = 1.969, 124.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else return -0.08784553038816546;  // std dev = 1.707, 247.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.016427165121959953;  // std dev = 2.188, 92.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.196103854612473;  // std dev = 0.092, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.26240004288214364;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04480372678315442;  // std dev = 0.158, 173.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=19 */
%   | | else return 0.013661969894667616;  // std dev = 0.201, 200.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1437437792777658;  // std dev = 0.203, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29191167361559606;  // std dev = 0.925, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09355508294970469;  // std dev = 0.078, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3182020797028818;  // std dev = 1.223, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09943436276528557;  // std dev = 0.083, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18044650353095368;  // std dev = 1.145, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.11043005206833514;  // std dev = 1.079, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08392297330172366;  // std dev = 7.67e-08, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09672712354476229;  // std dev = 0.030, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.024624142511709825;  // std dev = 0.971, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.07275771966810755;  // std dev = 1.250, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01661107819983065;  // std dev = 2.046, 138.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.105', 'seconds']
Parameter learned model CLL:-0.107006 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 167, 0], 'true,false,false': [0.255, 53, 4], 'false,true,true': [2.6e-07, 0, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.54e-09, 103, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.017, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.265, 157, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.791, 48, 4], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [4.593, 111, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.926, 4, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.222, 0, 3], 'true,false,false': [0.943, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.18, 0, 6], 'false,false,true,false': [4.21e-08, 0, 15], 'false,false,false': [0.308, 302, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.91, 5, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.004, 206, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [9.66e-08, 112, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.979, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.97, 1, 39], 'false,false,true,false': [1.657, 280, 5], 'false,false,false': [0.287, 52, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.145, 156, 82], 'false,true': [0.181, 0, 22], 'false,false,true': [0.874, 0, 52], 'false,false,false,true': [0.025, 79, 0], 'false,false,false,false': [0.041, 58, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.969, 3, 121], 'true,false': [1.707, 240, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.188, 64, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.092, 0, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.158, 154, 19], 'false,false,false': [0.201, 148, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.203, 3, 78], 'false,true,true,true': [0.925, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.078, 186, 0], 'false,false,true': [1.223, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.083, 86, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.145, 1, 85], 'true,true,false': [1.079, 1, 19], 'true,false,true': [7.67e-08, 137, 0], 'true,false,false,true': [0.03, 30, 0], 'true,false,false,false': [0.971, 25, 4], 'false,true': [1.25, 2, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.046, 98, 40]}]
{'': [0.21982274714542804, 0.21683259506162092], 'true': [0.02725128832212642, 0.017538265306122344], 'false': [5.921189464667501e-16, 7.329627735389383e-17], 'true,false': [-1.6753066000331702e-16, 0.06525084641428117], 'false,true': [1.8243664837083652e-15, -1.6148698540002277e-16]}
{'': [0.012024413476741103, 0.10939196231910807], 'false': [0.07022859913759394, 0.13583936147950398], 'false,false': [0.06169573145245345, 0.15115158228414974], 'false,false,false': [0.0, 0.13967932706169725], 'false,true': [nan, 0.07022859913759394], 'false,false,true': [nan, 0.06169573145245345]}
{'': [0.058230577120519475, 0.10647693214286255], 'false': [nan, 0.10647693214286243], 'false,false': [0.001768298574120097, 0.09478085598574604], 'true': [0.05222335637354387, 0.09375498756118528], 'true,false': [0.016482713390393682, 0.09876543209876533], 'true,true': [0.05222335637354387, nan], 'false,false,true': [0.005415414383242408, 1.1842378929335003e-16]}
{'': [0.052602448202557495, 5.137613660190788e-05], 'false': [1.801812583414991e-05, 8.326672684688674e-17], 'false,true': [nan, 1.8018125834145596e-05], 'false,false': [nan, 8.326672684688674e-17], 'false,false,false': [nan, 8.326672684688674e-17]}
{'': [0.012432674405906619, 0.06598232919834696], 'false': [0.0019738466090365924, 0.06400352844971133], 'false,false': [0.06010872326610002, 0.08225022471867585], 'false,false,true': [0.023519358371583678, 0.009629632539406102], 'true': [0.012278316654394722, 0.0], 'false,true': [9.029202783905622e-06, 0.0]}
{'': [0.04156150952108938, 0.06871142320894164], 'false': [0.0014962687833856318, 0.07208051956215156], 'false,false': [0.01467317226494018, 2.7844809890903636e-05], 'true': [nan, 0.0415615095210888], 'true,false': [nan, 0.04156150952108938], 'false,false,false': [7.952135319407819e-06, 2.8915936309014086e-05]}
{'': [0.045986077398153434, 0.05204438934868217], 'false': [nan, 0.05204438934868217], 'false,false': [nan, 0.05204438934868217], 'false,false,false': [nan, 0.05204438934868217], 'true': [0.03125577239822791, 0.011792720713858907]}
{'': [0.00020226523670823749, 0.03406350218006106], 'false': [nan, 0.03406350218006153], 'false,false': [0.02481757929003317, 0.04047582301337216], 'true': [0.00010135971131850176, 9.807606903816657e-05], 'true,false': [9.807606903816657e-05, nan]}
{'': [0.04126409592257312, 0.034821399999826766], 'false': [0.024773802447008875, 0.04996527368911187], 'false,false': [0.0364921270792077, 7.963515922930196e-05], 'false,true': [0.02249629350214813, 3.278043835646212e-05], 'false,true,true': [0.02249629350214813, nan], 'false,false,false': [nan, 7.963515922930196e-05]}
{'': [0.02551050745189066, 0.03935835569241309], 'false': [0.15637335426711424, 0.030339360534989746], 'false,false': [nan, 0.030339360534989746], 'true': [0.024111560331224347, 0.005311231949917961], 'true,true': [0.015247766861685904, 0.05824853169471235], 'true,false': [4.295023379936737e-17, 0.017285934045616597], 'true,false,false': [3.0111683388358198e-05, 0.032493306863203994]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
0;false,true;follows(E, F), follows(A, F).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 119.917
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8121719236052591;  // std dev = 0.209, 87.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=83 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.12475704780647133;  // std dev = 0.130, 234.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=4 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.14185106490048763;  // std dev = 8.69e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7130337133814131;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return 0.741750463788981;  // std dev = 0.194, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5627867205773588;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.047773386050101896;  // std dev = 2.942, 140.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=13 */
%   | | | else return -0.07973284216980792;  // std dev = 0.833, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.015525110721815344;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return -0.08521293664430639;  // std dev = 1.260, 41.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.6302322013528495;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.1739698377302075;  // std dev = 4.351, 114.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.568269533358319;  // std dev = 1.46e-07, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.4389835537102373;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.6391565659112767;  // std dev = 0.088, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.4495529093097203;  // std dev = 0.367, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5612108333931508;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7536227863290745;  // std dev = 0.142, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1219473224950558;  // std dev = 0.061, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08958395476809977;  // std dev = 3.816, 103.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=29 */
%   | | | else return 0.15368078253976722;  // std dev = 2.249, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4184290192222054;  // std dev = 0.940, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | | else return 0.47221521600018374;  // std dev = 1.025, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | else return 0.6635318560989497;  // std dev = 0.263, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.4461035659888712;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6695297915552189;  // std dev = 0.038, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.6664899749767363;  // std dev = 0.071, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(J, A) )
%   | then return -0.10904184121446253;  // std dev = 0.039, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return -0.15931308437867198;  // std dev = 0.038, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.32424230477240007;  // std dev = 0.133, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.32917822051306617;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.02495459344560787;  // std dev = 0.772, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.4686213489781119;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.326584316306013;  // std dev = 0.044, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4170749012391506;  // std dev = 1.000, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09934116228823042;  // std dev = 0.053, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.07707017526465082;  // std dev = 2.889, 86.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=29 */
%   | | | else return 0.0433429138446409;  // std dev = 1.874, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.2671746458511719;  // std dev = 0.125, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.17816379019228978;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return -0.06249698044798894;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04909534214124962;  // std dev = 0.129, 147.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=14 */
%   | | else return -0.07278992456794485;  // std dev = 0.082, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.26266530605567273;  // std dev = 0.044, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.31873291849283086;  // std dev = 0.278, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.46718761793696345;  // std dev = 0.995, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.12753182577733554;  // std dev = 0.027, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.21224956245642254;  // std dev = 0.082, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(C, E), follows(F, C) )
%   | | then return 0.22717594733391822;  // std dev = 0.019, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.2862072626386939;  // std dev = 0.130, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(G, I), follows(I, A) )
%   | | | then return -0.0017142031735101575;  // std dev = 0.779, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3501304052504659;  // std dev = 0.238, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.08501490509835206;  // std dev = 0.053, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.22686012415622192;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.01626712080098901;  // std dev = 1.901, 66.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=19 */
%   | | | else return 0.030725550394135413;  // std dev = 1.903, 65.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18107466530510047;  // std dev = 0.013, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.27465103132437363;  // std dev = 0.047, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(A, G) )
%   | | | then return 0.27674840892233843;  // std dev = 0.218, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.18121238687160188;  // std dev = 0.972, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.07900849122051758;  // std dev = 0.055, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.29367146520899684;  // std dev = 1.220, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.13389289478859048;  // std dev = 0.007, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.20484377626869318;  // std dev = 0.414, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06998839184568949;  // std dev = 1.423, 32.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.13098687450642368;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return -0.09309505701846688;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.1660580505349291;  // std dev = 0.015, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.17074971744524067;  // std dev = 0.052, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1545986732267807;  // std dev = 0.122, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.24657154622490954;  // std dev = 0.086, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07289652774156327;  // std dev = 0.050, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.32376649766509696;  // std dev = 0.027, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.12516850328828974;  // std dev = 0.012, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.1267533329802898;  // std dev = 1.000, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | | else return 0.06465205765189491;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.1892169461593926;  // std dev = 0.028, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.0624299168389785;  // std dev = 0.042, 204.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12835358309659273;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.24538744458177855;  // std dev = 0.023, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11006267805438609;  // std dev = 0.085, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.008468674036499793;  // std dev = 0.984, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
%   | | | else return 0.024099952657500808;  // std dev = 1.198, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '41.066', 'seconds']
Refined model CLL: -0.104868


******************************************
Best model found
******************************************
Results 

CLL : -0.104849 

AUC ROC : 0.992554 

AUC PR : 0.329269 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 119.917 

Total Inference Time : 46.442572593688965 

Total revision time: 195.19518773460388
Best scored revision CLL: -0.104868


Results 

CLL : -0.104849 

AUC ROC : 0.992554 

AUC PR : 0.329269 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 195.24836056137084 

Total Inference Time : 46.442572593688965 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.243
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else return -0.08921948595311933;  // std dev = 0.223, 38.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.45e-09, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6766106543570672;  // std dev = 1.962, 86.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.033971090893975486;  // std dev = 0.264, 202.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08966682209984628;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5285554015677009;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.13348989952373735;  // std dev = 2.940, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5186740668596587;  // std dev = 2.093, 75.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=70 */
%   | | else return 0.7281858098264162;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.824661309013729;  // std dev = 0.076, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6127176490803974;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.568284605012881;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.568284605012881;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.03486014303220952;  // std dev = 0.260, 297.000 (wgt'ed) examples reached here.  /* #neg=265 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48203923288118106;  // std dev = 2.748, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1183618144256129;  // std dev = 0.003, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1366707593500189;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2845228596281732;  // std dev = 2.119, 78.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=73 */
%   | else return 0.40320814153295925;  // std dev = 0.116, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3152974475520792;  // std dev = 3.33e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6205807383239016;  // std dev = 0.071, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08386239738334864;  // std dev = 2.093, 248.000 (wgt'ed) examples reached here.  /* #neg=239 #pos=9 */
%   | | else return -0.10601501302826027;  // std dev = 1.86e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03278567107226137;  // std dev = 3.578, 267.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.18909567785761108;  // std dev = 0.981, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45900025771104797;  // std dev = 0.974, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11000930812267148;  // std dev = 0.035, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.10378389252291316;  // std dev = 0.047, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28472727789604174;  // std dev = 1.732, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.0770391160273617;  // std dev = 1.837, 252.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02858787735297798;  // std dev = 0.679, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.11733811467319505;  // std dev = 2.693, 88.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.23558124655771923;  // std dev = 0.055, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.040457070121816395;  // std dev = 0.152, 192.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=22 */
%   | | else return 0.009412197262168395;  // std dev = 0.243, 86.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15003343134786393;  // std dev = 0.230, 82.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26708822350737754;  // std dev = 0.983, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09121058160007069;  // std dev = 0.023, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4074439650734578;  // std dev = 0.513, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09637175303134336;  // std dev = 0.002, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.20537520079908786;  // std dev = 0.724, 94.000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | | else return 0.15699510758986393;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08402862440508405;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0835457564174634;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.010375834849456523;  // std dev = 0.484, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14351838950856066;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01995743281009712;  // std dev = 1.510, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.950', 'seconds']
Parameter learned model CLL:-0.108174 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 166, 0], 'true,false,false': [0.223, 36, 2], 'false,true,true': [0.977, 1, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.45e-09, 39, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.962, 4, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 180, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.979, 23, 1], 'false,false,false,true': [0.894, 1, 4], 'false,false,false,false': [2.94, 39, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [2.093, 5, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.076, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 9], 'false,false,true,false': [2.11e-08, 0, 8], 'false,false,false': [0.26, 265, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.748, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.003, 227, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.119, 5, 73], 'true,false': [0.116, 0, 4], 'false,true,true': [3.33e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.071, 0, 23], 'false,false,true,false': [2.093, 239, 9], 'false,false,false': [1.86e-09, 17, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.578, 176, 91], 'false,true': [0.981, 1, 13], 'false,false,true': [0.974, 1, 22], 'false,false,false,true': [0.035, 35, 0], 'false,false,false,false': [0.047, 33, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.732, 2, 107], 'true,false': [1.837, 241, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.679, 13, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [2.693, 8, 80], 'true,false,true': [0.055, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.152, 170, 22], 'false,false,false': [0.243, 64, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.23, 5, 77], 'false,true,true,true': [0.983, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.023, 199, 0], 'false,false,true': [0.513, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.002, 45, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.724, 0, 94], 'true,true,false': [0.014, 0, 9], 'true,false,true': [0.0, 171, 0], 'true,false,false,true': [9.13e-09, 16, 0], 'true,false,false,false': [0.484, 9, 2], 'false,true': [0.033, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.51, 47, 17]}]
{'': [0.2246900826446303, 0.22574576726686382], 'false': [0.04338842975206614, 4.2700885562506023e-17], 'true': [0.009522928994084868, 0.009707804690503488], 'false,true': [0.04338842975206614, nan], 'true,false': [-1.6318940843887844e-16, 0.049861495844875335]}
{'': [0.04475679191324463, 0.09522498706699192], 'false': [0.06985553331308243, 0.14403872820068367], 'false,false': [0.039930555555555504, 0.16656160251013344], 'false,false,false': [0.16000000000000006, 0.15435428357340067], 'false,true': [nan, 0.06985553331308243], 'false,false,true': [nan, 0.039930555555555504]}
{'': [0.056526809148590366, 0.08273795828819228], 'false': [nan, 0.08273795828819225], 'false,false': [1.0449157878825003e-16, 0.06777851127134406], 'true': [0.0582061780706885, 0.010950690017444606], 'true,true': [0.05840469241284633, 0.0], 'true,false': [0.0029053267283766226, 0.0], 'false,false,true': [9.868649107779169e-17, 5.551115123125783e-17]}
{'': [0.05762705297290161, 5.3738250858589455e-05], 'false': [8.144411686019287e-06, -3.8616453030440226e-17], 'false,true': [nan, 8.144411686021242e-06], 'false,false': [nan, -3.8616453030440226e-17], 'false,false,false': [nan, -3.8616453030440226e-17]}
{'': [0.05557705858348381, 0.055213113297004644], 'true': [0.05756632351385251, 0.0033873278195405143], 'false': [6.530723674265627e-17, 0.05186839382588448], 'false,false': [0.05472581529881181, 3.2653618371328133e-18], 'false,false,true': [0.0002197728496611262, 0.017664490052158983], 'false,true': [6.530723674265627e-17, nan]}
{'': [0.04793844910678512, 0.07337437891310528], 'false': [0.06868415440152224, 0.07097345380405687], 'false,false': [0.041253723661308014, 5.993304545467491e-05], 'true': [nan, 0.04793844910678565], 'true,false': [nan, 0.04793844910678512], 'false,false,false': [3.559208289750172e-05, 6.580137994255554e-05]}
{'': [0.04524905201854924, 0.021978892560751043], 'true': [0.027535647399949674, 0.013394551206855128], 'false': [nan, 0.021978892560751043], 'false,false': [nan, 0.021978892560751043], 'false,false,false': [nan, 0.021978892560751043]}
{'': [0.08090627260990933, 0.03485461479448321], 'true': [0.08239965073023034, 0.001526895705432109], 'false': [nan, 0.03485461479448351], 'false,false': [0.023225372494095318, 0.05909997285514072], 'true,false': [0.001526895705432109, nan]}
{'': [0.05306679672157249, 0.028314021916219418], 'false': [0.019827796540362323, 0.05476072471358107], 'false,false': [0.01548373661950336, 7.343290863406596e-08], 'false,true': [0.029262073816896366, 2.649806497062339e-06], 'false,true,true': [0.029262073816896366, nan], 'false,false,false': [nan, 7.343290863406596e-08]}
{'': [0.020548438283204296, 0.03441021478514084], 'false': [0.00027726206816470686, 0.03564544726993778], 'false,false': [nan, 0.03564544726993778], 'true': [0.0052740675761854166, 0.0014655501036276559], 'true,true': [0.00557255653785187, 2.0404146550205713e-05], 'true,false': [-5.1940258461995625e-18, 0.009954846409125721], 'true,false,false': [5.204170427930421e-18, 0.021261978605836472]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 22.523
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.7528857772047755;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.024815601766178853;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( tweets(A, E), tweets(C, E) )
%   | | | then return 0.4117811045186465;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.6194734122109544;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.7259318791307058;  // std dev = 0.132, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.7394202933295841;  // std dev = 0.126, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.7360709751083581;  // std dev = 0.032, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12599264258320492;  // std dev = 0.047, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.09986684166876733;  // std dev = 2.046, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.17252258176734667;  // std dev = 2.057, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5390451131800565;  // std dev = 0.160, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.5504355803917367;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.40556501932609185;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5504355803917367;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5686720924997867;  // std dev = 0.029, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09847372025088919;  // std dev = 1.182, 150.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=3 */
%   | | | else return -0.00582668613880014;  // std dev = 2.180, 75.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.043875045298199605;  // std dev = 2.093, 37.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=8 */
%   | | | else return 0.16524969341295367;  // std dev = 1.966, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, D), tweets(E, F) )
%   | | | then return 0.4175355665842255;  // std dev = 1.000, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.21766555654040642;  // std dev = 1.155, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.49393108072542047;  // std dev = 0.277, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.427946051271257;  // std dev = 0.122, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.6167235574150787;  // std dev = 0.262, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.5465889136775315;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(J, A) )
%   | then return -0.10620934743160983;  // std dev = 0.084, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return -0.15727994742948376;  // std dev = 0.073, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.30551261146829567;  // std dev = 1.000, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.23236438894716918;  // std dev = 1.270, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0.37191389109735057;  // std dev = 0.058, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), follows(A, G) )
%   | | | then return 0.18429946957517038;  // std dev = 0.922, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3593490107899048;  // std dev = 0.202, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07534414161875187;  // std dev = 1.064, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3281205359032242;  // std dev = 0.027, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then return -0.030672685316126283;  // std dev = 0.197, 251.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=32 */
%   | | else return -0.09342398466276841;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26524379449148794;  // std dev = 0.119, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3218305150618135;  // std dev = 1.082, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return -0.0929558615405441;  // std dev = 0.042, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | else return -0.06180074496023501;  // std dev = 0.118, 67.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2874104163346972;  // std dev = 0.176, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.13697992577571194;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.128772287458045;  // std dev = 0.908, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5365159865761825;  // std dev = 0.063, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12070653257375895;  // std dev = 0.020, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.22732471638450272;  // std dev = 0.028, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else return 0.16190090592318765;  // std dev = 0.248, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.07716677031853382;  // std dev = 0.070, 166.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.33676628862395164;  // std dev = 0.265, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.093363046901025;  // std dev = 0.039, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3570339859856519;  // std dev = 0.299, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11300942213410593;  // std dev = 0.047, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.15557452510683076;  // std dev = 0.647, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.023169233836229347;  // std dev = 1.220, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19187975585775308;  // std dev = 0.024, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(E, D) )
%   | | | then return -0.06562460019178269;  // std dev = 0.810, 125.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=3 */
%   | | | else return -0.07942640392585679;  // std dev = 0.005, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.22022707846344436;  // std dev = 0.987, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.08576032471096705;  // std dev = 0.032, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.1953672667310506;  // std dev = 1.111, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.10277233189543312;  // std dev = 0.045, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1289106387548362;  // std dev = 0.621, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.0558499938229878;  // std dev = 0.971, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.1598746834543207;  // std dev = 0.122, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.03024783032866561;  // std dev = 0.951, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.4461412405858043;  // std dev = 0.894, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.1850927480730807;  // std dev = 0.114, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.03951306479522112;  // std dev = 0.934, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2224155875235097;  // std dev = 0.076, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07474449615121169;  // std dev = 0.057, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.3209922582249734;  // std dev = 0.042, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11587846835087419;  // std dev = 0.022, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.10417027579472389;  // std dev = 1.633, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | | else return 0.20731424105351728;  // std dev = 0.340, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.13653805436799604;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06541730195991209;  // std dev = 0.041, 186.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.17301191589151285;  // std dev = 0.126, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.22237774145828254;  // std dev = 0.032, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08637165695928939;  // std dev = 0.036, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07854396156549845;  // std dev = 0.501, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.11116563219681967;  // std dev = 0.633, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '36.615', 'seconds']
Refined model CLL: -0.101318


******************************************
Best model found
******************************************
Results 

CLL : -0.101591 

AUC ROC : 0.99483 

AUC PR : 0.377669 

Precision : 0.337662 

Recall : 1.0 

F1 : 0.504854 

Total Learning Time : 22.523 

Total Inference Time : 30.796255111694336 

Total revision time: 78.71099301910401
Best scored revision CLL: -0.101318


Results 

CLL : -0.101591 

AUC ROC : 0.99483 

AUC PR : 0.377669 

Precision : 0.337662 

Recall : 1.0 

F1 : 0.504854 

Total Learning Time : 106.46025678253174 

Total Inference Time : 30.796255111694336 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.953
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.07518439823382105;  // std dev = 0.249, 60.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7229459676099409;  // std dev = 0.206, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03723890795670118;  // std dev = 0.258, 182.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06558238713052886;  // std dev = 1.790, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.11817235455785524;  // std dev = 4.515, 138.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5380173897205663;  // std dev = 1.459, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7296215584656484;  // std dev = 0.229, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4442553256351735;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5887439053017735;  // std dev = 0.188, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4920087787807488;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.0019240902408070753;  // std dev = 0.299, 379.000 (wgt'ed) examples reached here.  /* #neg=322 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5100216738541588;  // std dev = 2.648, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12272262137226975;  // std dev = 0.004, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1387629384964573;  // std dev = 8.16e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3218537973244118;  // std dev = 0.523, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else return 0.4781627001580241;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2611609772816606;  // std dev = 0.972, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.5133650284155367;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5916624277195859;  // std dev = 0.112, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.09668841448805955;  // std dev = 1.646, 221.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=5 */
%   | | else return 0.020415204885295794;  // std dev = 0.288, 64.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.020493413411420556;  // std dev = 3.126, 260.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.22130729964545734;  // std dev = 0.998, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4423789884492363;  // std dev = 1.504, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11202960350464934;  // std dev = 0.039, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | | else return -0.11676272589801881;  // std dev = 0.053, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27052343746918006;  // std dev = 1.556, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.0879911402204803;  // std dev = 1.586, 303.000 (wgt'ed) examples reached here.  /* #neg=296 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.050180298700143275;  // std dev = 1.997, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19359927966756074;  // std dev = 0.108, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2681727152744053;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04458550989279189;  // std dev = 0.150, 177.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=19 */
%   | | else return 0.007005942203144889;  // std dev = 0.210, 202.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14156025344530293;  // std dev = 0.192, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27185075173445056;  // std dev = 1.244, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09220067419456156;  // std dev = 0.090, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3433495325135588;  // std dev = 0.611, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10137947098892583;  // std dev = 0.094, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18623089705881912;  // std dev = 0.753, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.17240363148107588;  // std dev = 0.383, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08281431506096838;  // std dev = 6.50e-08, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10004042860726839;  // std dev = 1.49e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.012809082636486804;  // std dev = 0.979, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.017284238523436683;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.019612529471313752;  // std dev = 1.999, 132.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.111', 'seconds']
Parameter learned model CLL:-0.107446 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [4.62e-07, 0, 104], 'true,false,true': [0.0, 164, 0], 'true,false,false': [0.249, 56, 4], 'false,true,true': [2.6e-07, 0, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.93e-09, 90, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.206, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.258, 163, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.79, 51, 4], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [4.515, 98, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.459, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.229, 0, 3], 'true,false,false': [0.943, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.188, 0, 6], 'false,false,true,false': [0.968, 1, 15], 'false,false,false': [0.299, 322, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.648, 5, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.004, 188, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.16e-08, 98, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.523, 0, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.972, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.112, 0, 39], 'false,false,true,false': [1.646, 216, 5], 'false,false,false': [0.288, 51, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.126, 178, 82], 'false,true': [0.998, 1, 22], 'false,false,true': [1.504, 1, 52], 'false,false,false,true': [0.039, 92, 0], 'false,false,false,false': [0.053, 74, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.556, 2, 121], 'true,false': [1.586, 296, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.997, 51, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.108, 0, 83], 'true,false,true': [0.015, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.15, 158, 19], 'false,false,false': [0.21, 150, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.192, 3, 78], 'false,true,true,true': [1.244, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.09, 212, 0], 'false,false,true': [0.611, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.094, 78, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.753, 0, 85], 'true,true,false': [0.383, 0, 19], 'true,false,true': [6.5e-08, 154, 0], 'true,false,false,true': [1.49e-08, 30, 0], 'true,false,false,false': [0.979, 21, 4], 'false,true': [0.943, 1, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.999, 92, 40]}]
{'': [0.2208506841165995, 0.2268431001890366], 'false': [5.921189464667501e-16, 7.401486830834377e-17], 'true': [2.049642507000289e-15, 0.017538265306122344], 'true,false': [-1.5705594006892458e-16, 0.062222222222222096], 'false,true': [1.8243664837083652e-15, -1.6148698540002277e-16]}
{'': [0.0005004336014607702, 0.10950930129065045], 'false': [0.06674636303298599, 0.14031457433313432], 'false,false': [0.058248503220846196, 0.1583801020630547], 'false,false,false': [0.0, 0.14774988810800596], 'false,true': [nan, 0.06674636303298599], 'false,false,true': [nan, 0.058248503220846196]}
{'': [0.04024300036388546, 0.10087621143720812], 'false': [nan, 0.10087621143720588], 'false,false': [0.046067947722133844, 0.08920479247166126], 'false,false,true': [0.005860219439552727, 0.05859375000000017], 'true': [0.030867762584900038, 0.09372240948461412], 'true,false': [0.017517926512267874, 0.09876543209876533], 'true,true': [0.030867762584900038, nan]}
{'': [0.043556900653128325, 6.638490011525675e-05], 'false': [1.2826879480114092e-05, 6.797283824235652e-17], 'false,true': [nan, 1.2826879480114092e-05], 'false,false': [nan, 6.797283824235652e-17], 'false,false,false': [nan, 6.797283824235652e-17]}
{'': [0.0038098407267987055, 0.07563355724458669], 'false': [0.04567976704763533, 0.07325856512718912], 'false,false': [0.07088452776642103, 0.08274913819498284], 'false,false,true': [0.00032138338110995117, 0.01226281506863247], 'false,true': [0.04496377207679739, 0.0], 'true': [0.003546082343115948, 0.0]}
{'': [0.03758393629369755, 0.06836475383980176], 'false': [0.04328636074027265, 0.06716779397337058], 'false,false': [0.04268385963079139, 3.1607564049377915e-05], 'true': [nan, 0.037583936293697086], 'true,false': [nan, 0.03758393629369755], 'false,false,false': [1.6538305884526164e-05, 3.7926503116109276e-05]}
{'': [0.037985900878710906, 0.05050487710197098], 'false': [nan, 0.0505048771019711], 'false,false': [nan, 0.05050487710197098], 'false,false,false': [nan, 0.05050487710197098], 'true': [0.019693334835093196, 0.008300041082399116]}
{'': [0.000267226118066317, 0.03460764414746232], 'false': [nan, 0.034607644147462306], 'false,false': [0.022568287185191778, 0.043913928930416526], 'true': [0.00014022447503530096, 0.0001074487067803942], 'true,false': [0.0001074487067803942, nan]}
{'': [0.03697410882789528, 0.032823139606294384], 'false': [0.023586366548458016, 0.04755500888666096], 'false,false': [0.009329897486588967, 0.00011224484414083055], 'false,true': [0.039650770256925996, 3.827709902961216e-05], 'false,true,true': [0.039650770256925996, nan], 'false,false,false': [nan, 0.00011224484414083055]}
{'': [0.020814081325804656, 0.03465344436457807], 'false': [0.09876543209876544, 0.030281826456244425], 'false,false': [nan, 0.030281826456244457], 'true': [0.006885362130649344, 0.005176890588431863], 'true,true': [0.0066656275076182585, 0.00771212171117723], 'true,false': [2.739511359464672e-17, 0.01930165719866735], 'true,false,false': [7.401486830834377e-18, 0.03831311435350035]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
0;false,true;follows(E, F), follows(A, F).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 26.594
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.09837280403092254;  // std dev = 1.383, 46.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=2 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.69e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.7194734122109542;  // std dev = 1.49e-08, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then return 0.7548716394535296;  // std dev = 0.138, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7194734122109543;  // std dev = 1.49e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, G), follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.03336706063275563;  // std dev = 0.267, 167.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=18 */
%   | | else return -0.09984106123325968;  // std dev = 0.145, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( tweets(A, K) )
%   | | | then return -0.08008024524007895;  // std dev = 1.554, 55.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=3 */
%   | | | else return -0.013704030394972292;  // std dev = 0.814, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.6083623010998435;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.12848379352969935;  // std dev = 4.470, 133.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return 0.5591900985500823;  // std dev = 0.026, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( tweets(A, E), tweets(C, F) )
%   | | then return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5548799203927123;  // std dev = 0.002, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.10875901975605276;  // std dev = 0.103, 141.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=2 */
%   | | else if ( follows(G, I), recursion_accounttype(I, B) )
%   | | | then return 0.7476622730692741;  // std dev = 0.173, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.12223323196868766;  // std dev = 0.051, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.5826080038940759;  // std dev = 3.65e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.08826117702435449;  // std dev = 3.830, 105.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=29 */
%   | | | else return 0.20579522613596538;  // std dev = 2.133, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.4161755494536719;  // std dev = 0.014, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.4273324053297354;  // std dev = 0.110, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.47533058318177457;  // std dev = 0.198, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return 0.6578358337738005;  // std dev = 0.154, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2567935421804148;  // std dev = 1.154, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.5164807408506256;  // std dev = 0.817, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.6409251746343917;  // std dev = 1.025, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   else if ( follows(J, A) )
%   | then return -0.1101010180727718;  // std dev = 0.004, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return -0.15494000448126258;  // std dev = 0.007, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.31080970432876304;  // std dev = 0.167, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.23329500959301125;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.04281881911682076;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.22480604624575107;  // std dev = 0.747, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3282393573036961;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4935340036384687;  // std dev = 0.306, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.09683129984751498;  // std dev = 1.474, 267.000 (wgt'ed) examples reached here.  /* #neg=262 #pos=5 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.07792412101220127;  // std dev = 0.694, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   | | | else return 0.0540818096749059;  // std dev = 1.753, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.25863911934429795;  // std dev = 0.131, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.130280560731653;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.255280560731653;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.05769826320759872;  // std dev = 0.113, 189.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=15 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then return 0.2717133528228011;  // std dev = 0.057, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.001866831870514979;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.4040494458226279;  // std dev = 0.384, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.3498154230659545;  // std dev = 1.591, 32.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=29 */
%   | | else return -0.12010678464917722;  // std dev = 0.021, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.21415429766626595;  // std dev = 0.014, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else return 0.27655450406893084;  // std dev = 0.176, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.12871238577973315;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.2960179005042317;  // std dev = 1.035, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, F), tweets(A, I) )
%   | | | then return -0.0804527394219039;  // std dev = 0.767, 194.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=2 */
%   | | | else return -0.10819226140630313;  // std dev = 0.715, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1411953515090005;  // std dev = 0.319, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.0028845615830884793;  // std dev = 1.809, 94.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=25 */
%   | | | else return 0.07549506975244462;  // std dev = 1.646, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.15924457254321292;  // std dev = 0.996, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return 0.006906337540012446;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.18242018986501984;  // std dev = 0.013, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.30952007925622316;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.04152585307772915;  // std dev = 0.124, 224.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.262744129912928;  // std dev = 0.994, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.11840952893962244;  // std dev = 0.625, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.21530447579600015;  // std dev = 0.751, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 4.557962841236052E-4;  // std dev = 1.473, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.16455875202201414;  // std dev = 0.122, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.16058590579530826;  // std dev = 0.008, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.18254497254589225;  // std dev = 0.798, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.22756219067739814;  // std dev = 1.075, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.11888318182808631;  // std dev = 0.885, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.0761316898269599;  // std dev = 0.003, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.18706450446343403;  // std dev = 1.348, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.31754581629856105;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.11232618452188713;  // std dev = 0.023, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.11418807662493759;  // std dev = 0.152, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.2606794041055575;  // std dev = 0.254, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.006121791627071345;  // std dev = 0.652, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.06605991672007343;  // std dev = 0.069, 207.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=4 */
%   else if ( follows(A, G), follows(G, H) )
%   | then return 0.002366611226000918;  // std dev = 0.137, 106.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=33 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3473139556374834;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11142929364192575;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.0014650207093354678;  // std dev = 0.713, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.027096414810549183;  // std dev = 0.920, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '26.231', 'seconds']
Refined model CLL: -0.100157


******************************************
Best model found
******************************************
Results 

CLL : -0.099111 

AUC ROC : 0.993826 

AUC PR : 0.390208 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 26.594 

Total Inference Time : 32.50310301780701 

Total revision time: 88.08004600715637
Best scored revision CLL: -0.100157


Results 

CLL : -0.099111 

AUC ROC : 0.993826 

AUC PR : 0.390208 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 115.8293097705841 

Total Inference Time : 32.50310301780701 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.37
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048838;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | else return -0.09423201728144012;  // std dev = 0.213, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7030557847643105;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04038517634986731;  // std dev = 0.255, 220.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10482594243831757;  // std dev = 0.999, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7366846563336449;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1269733590214522;  // std dev = 2.990, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5389893300048184;  // std dev = 1.764, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7331254485567327;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8238247503885714;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5725157817997065;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5663801253583779;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5663801253583779;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.03312372404069977;  // std dev = 0.264, 294.000 (wgt'ed) examples reached here.  /* #neg=262 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4988536479164554;  // std dev = 2.173, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11752701250781918;  // std dev = 0.002, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13610772283834263;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29529469466501196;  // std dev = 1.810, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.38525030960757567;  // std dev = 0.142, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3104242578805022;  // std dev = 2.58e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5827302699271643;  // std dev = 0.972, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08219984622084849;  // std dev = 2.114, 239.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=9 */
%   | | else return -0.10435844748899456;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.028869622598709066;  // std dev = 3.420, 281.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25779102693183326;  // std dev = 0.121, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49667956570179855;  // std dev = 0.650, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10979070578848242;  // std dev = 0.041, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.10219611692219073;  // std dev = 0.042, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2717198639795882;  // std dev = 1.961, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07896081368085245;  // std dev = 1.942, 245.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02382282234135647;  // std dev = 0.645, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18877413938012316;  // std dev = 0.994, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22815569264507757;  // std dev = 0.045, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.045661272885111556;  // std dev = 0.146, 221.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=22 */
%   | | else return -0.0011917969554560673;  // std dev = 0.194, 110.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16569820840678706;  // std dev = 0.174, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2879662082199588;  // std dev = 0.742, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0897122955554015;  // std dev = 0.033, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4128546623730318;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09512533679586013;  // std dev = 0.002, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15752927967872538;  // std dev = 1.955, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.13527403307569616;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08313064516072323;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08140979354593035;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.027983834927582083;  // std dev = 0.482, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.06902925986356608;  // std dev = 0.862, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03715246467556598;  // std dev = 1.477, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.413', 'seconds']
Parameter learned model CLL:-0.107715 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 193, 0], 'true,false,false': [0.213, 40, 2], 'false,true,true': [1.351, 2, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.97e-09, 45, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.255, 198, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.999, 32, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.99, 41, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.764, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.08, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false': [0.264, 262, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.173, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.002, 216, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.81, 3, 73], 'true,false': [0.142, 0, 4], 'false,true,true': [2.58e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.972, 1, 23], 'false,false,true,false': [2.114, 230, 9], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.42, 190, 91], 'false,true': [0.121, 0, 13], 'false,false,true': [0.65, 0, 22], 'false,false,false,true': [0.041, 31, 0], 'false,false,false,false': [0.042, 25, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.961, 3, 107], 'true,false': [1.942, 234, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.645, 13, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.994, 1, 80], 'true,false,true': [0.045, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.146, 199, 22], 'false,false,false': [0.194, 88, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.174, 2, 77], 'false,true,true,true': [0.742, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.033, 217, 0], 'false,false,true': [0.492, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.002, 50, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.955, 4, 94], 'true,true,false': [0.012, 0, 9], 'true,false,true': [0.0, 184, 0], 'true,false,false,true': [0.0, 14, 0], 'true,false,false,false': [0.482, 13, 2], 'false,true': [0.862, 1, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.477, 39, 17]}]
{'': [0.2131044624659249, 0.21345155709342578], 'false': [0.07939508506616269, 4.9343245538895844e-17], 'true': [0.027500889996442155, 0.008438207333634968], 'false,true': [0.07939508506616269, nan], 'true,false': [-2.277970558298249e-16, 0.04535147392290247]}
{'': [0.023568526841714628, 0.08913798370980294], 'false': [0.06511600895489683, 0.1359268319151679], 'false,false': [0.030259441413661086, 0.16663254832060007], 'false,false,false': [0.0, 0.15414071490993322], 'false,true': [nan, 0.06511600895489683], 'false,false,true': [nan, 0.030259441413661086]}
{'': [0.04141117228304445, 0.08447874332068038], 'false': [nan, 0.08447874332068038], 'false,false': [1.0449157878825003e-16, 0.06971764349398428], 'true': [0.042557228066385684, 0.015112904531186558], 'true,true': [0.04263089524566836, 0.0], 'true,false': [0.003234581798093661, 0.0], 'false,false,true': [0.0, -5.551115123125783e-17]}
{'': [0.03661551612864227, 4.486956547303289e-05], 'false': [3.027426901422745e-06, 0.0], 'false,true': [nan, 3.027426901422745e-06], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}
{'': [0.041611643675696405, 0.05867845892270464], 'false': [3.918434204559376e-17, 0.05575904923350573], 'false,false': [0.05725257643470488, -1.734723475976807e-18], 'false,false,true': [0.039365082556017304, 0.018702158324864607], 'true': [0.043130271129970636, 0.005070310017776025], 'false,true': [3.918434204559376e-17, nan]}
{'': [0.04163235683436507, 0.07258292159992193], 'false': [0.0011178733995281115, 0.07911209910644633], 'false,false': [0.019175793741263426, 7.496388031211816e-05], 'true': [nan, 0.04163235683436505], 'true,false': [nan, 0.04163235683436507], 'false,false,false': [5.324305637241063e-05, 6.996893089935562e-05]}
{'': [0.04775639950650863, 0.01980290525347735], 'true': [0.03495409373167646, 0.015398843541150703], 'false': [nan, 0.01980290525347735], 'false,false': [nan, 0.01980290525347735], 'false,false,false': [nan, 0.01980290525347735]}
{'': [0.011971695632442136, 0.027159475989260603], 'false': [nan, 0.027159475989260377], 'false,false': [0.02131720601739108, 0.037576779810614636], 'true': [0.01220497240484021, 0.0010104508594488762], 'true,false': [0.0010104508594488762, nan]}
{'': [0.030421662761828713, 0.026400673428430544], 'false': [0.01819309471543256, 0.05247814889633504], 'false,false': [0.014255421738261187, 1.0669059267387482e-07], 'false,true': [0.017220823099537264, 5.090970711065513e-06], 'false,true,true': [0.017220823099537264, nan], 'false,false,false': [nan, 1.0669059267387482e-07]}
{'': [0.02507895223003815, 0.048785199689454224], 'false': [0.14869815857634547, 0.038940255639158254], 'false,false': [nan, 0.038940255639158254], 'true': [0.03574667355161459, 0.0012869741625655738], 'true,true': [0.038986481978359445, 1.5123981472369029e-05], 'true,false': [-3.8616453030440226e-17, 0.008708211761785151], 'true,false,false': [0.0, 0.015457922184506947]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 49.655
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8364098046647294;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.7581489350995123;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( recursion_accounttype(J, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6948442950820807;  // std dev = 0.165, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else return 0.7327759414011285;  // std dev = 0.109, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.7213448266596387;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.053390334287565976;  // std dev = 2.868, 144.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=12 */
%   | | | else return -0.07034128739321666;  // std dev = 1.415, 46.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.023937365911308732;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.13517401976134671;  // std dev = 0.072, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12582302800369333;  // std dev = 2.922, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5502406462610221;  // std dev = 0.118, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | else if ( follows(E, A) )
%   | | then return 0.7712223619590013;  // std dev = 0.092, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5736235076035793;  // std dev = 0.035, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.44096809886093563;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7461837359633812;  // std dev = 0.025, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12197616617210645;  // std dev = 0.178, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09445550923663054;  // std dev = 2.119, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0.05055826008735578;  // std dev = 2.070, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), follows(A, D) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.3935062398056433;  // std dev = 1.387, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return 0.20453253262068652;  // std dev = 1.573, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4323199802233943;  // std dev = 0.043, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.5311395637135276;  // std dev = 0.382, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.47866259377015596;  // std dev = 0.053, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.6774646854719995;  // std dev = 0.020, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(G, A) )
%   | then return -0.10926507423819093;  // std dev = 0.170, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else return -0.14944387843844362;  // std dev = 0.018, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then return 0.3002671809792237;  // std dev = 0.177, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | else return 0.4088740158734364;  // std dev = 0.199, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.13253538187016506;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.32397715700124974;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.31533204964206496;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3468970181461194;  // std dev = 0.025, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.06031240739109023;  // std dev = 2.123, 219.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=15 */
%   | | | else return 0.0523794199838611;  // std dev = 2.259, 60.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
%   | | else return -0.09044065756166215;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.2771626366162549;  // std dev = 0.012, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.13786688513493967;  // std dev = 1.590, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return 0.25949884185140326;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, G) )
%   | | then return -0.04061378707914998;  // std dev = 0.171, 156.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=17 */
%   | | else return -0.04246304616072215;  // std dev = 0.144, 47.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26697488401106295;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3117254599642073;  // std dev = 0.189, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4478632410972656;  // std dev = 0.966, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.12523535433851932;  // std dev = 0.022, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | then if ( follows(E, D), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1951852963689535;  // std dev = 1.337, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return 0.3198211226019403;  // std dev = 1.113, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else return -0.20727674196512105;  // std dev = 1.083, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.08929204040340445;  // std dev = 0.109, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.24752260909111756;  // std dev = 0.033, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.37308843390917373;  // std dev = 0.237, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08797577909743065;  // std dev = 0.026, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.02959498355160499;  // std dev = 1.543, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
%   | | | else return 0.011964130264669593;  // std dev = 1.481, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.17366466368209132;  // std dev = 0.996, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.19228045256424273;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.20730181546875937;  // std dev = 0.028, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.23357789976284554;  // std dev = 0.095, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.2266792578825841;  // std dev = 0.070, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3476730789241863;  // std dev = 0.988, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.08252804723005454;  // std dev = 0.098, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0012712985907281631;  // std dev = 1.258, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.0469982295806259;  // std dev = 1.257, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.12378685550561483;  // std dev = 1.715, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   | | | else return 0.06282234590680283;  // std dev = 0.804, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.2699563576979368;  // std dev = 0.172, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.0239140256249152;  // std dev = 0.884, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.1511642511814936;  // std dev = 0.064, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.3303813874960262;  // std dev = 0.134, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07647127147138914;  // std dev = 0.105, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3817535141877468;  // std dev = 0.034, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12771655514715635;  // std dev = 0.024, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1116914982589783;  // std dev = 1.676, 75.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=72 */
%   | | | else return 0.23006127864060033;  // std dev = 0.252, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.127157998995154;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06707076552341165;  // std dev = 0.034, 214.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.2617383405784062;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.11650874705685242;  // std dev = 0.011, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.028729612755892003;  // std dev = 0.969, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.1088782559172965;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.01489857932073685;  // std dev = 0.172, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1', 'minutes', 'and', '59.655', 'seconds']
Refined model CLL: -0.103199


******************************************
Best model found
******************************************
Results 

CLL : -0.101353 

AUC ROC : 0.994501 

AUC PR : 0.417973 

Precision : 0.337662 

Recall : 1.0 

F1 : 0.504854 

Total Learning Time : 49.655 

Total Inference Time : 91.93653607368469 

Total revision time: 166.8526391029358
Best scored revision CLL: -0.103199


Results 

CLL : -0.101353 

AUC ROC : 0.994501 

AUC PR : 0.417973 

Precision : 0.337662 

Recall : 1.0 

F1 : 0.504854 

Total Learning Time : 166.93317999839783 

Total Inference Time : 91.93653607368469 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.748
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else return -0.07042249347191629;  // std dev = 0.258, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7266361220487613;  // std dev = 0.200, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03635349427335969;  // std dev = 0.260, 181.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07496373360629037;  // std dev = 1.811, 61.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6136428511256345;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.14108151401586222;  // std dev = 4.476, 128.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.54174971111843;  // std dev = 1.459, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7305239271638427;  // std dev = 0.227, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3149869336000963;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.44398626653084133;  // std dev = 0.974, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5582549537997323;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.0010450540453906347;  // std dev = 0.305, 367.000 (wgt'ed) examples reached here.  /* #neg=310 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5388141548727451;  // std dev = 1.906, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12295123370044898;  // std dev = 0.004, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14188460502772612;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29912434177159747;  // std dev = 1.481, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.46865323872191267;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3028120599585722;  // std dev = 0.047, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5401597915889189;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5860477701004758;  // std dev = 0.123, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10025306665186534;  // std dev = 1.639, 251.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=5 */
%   | | else return -0.008512427717992594;  // std dev = 0.257, 84.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.037505881127799255;  // std dev = 2.956, 233.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2531994586281018;  // std dev = 0.199, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47366245270270413;  // std dev = 0.806, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11373157795681804;  // std dev = 0.046, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | | else return -0.11496537334549933;  // std dev = 0.063, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26838183301587154;  // std dev = 1.559, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.09265461844824907;  // std dev = 1.851, 259.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05160736077723871;  // std dev = 1.961, 77.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14266889392510074;  // std dev = 1.953, 87.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2678445354123727;  // std dev = 0.030, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.054758527070812316;  // std dev = 0.162, 184.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=19 */
%   | | else return -0.004845152409729984;  // std dev = 0.204, 222.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18507981962363754;  // std dev = 0.057, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28967118716269746;  // std dev = 0.894, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09256842066284245;  // std dev = 0.083, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.33998169974541886;  // std dev = 0.642, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10020120244524174;  // std dev = 0.089, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17265991766044225;  // std dev = 1.262, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.1618647162092215;  // std dev = 0.394, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08295642726251463;  // std dev = 8.16e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09557812791775255;  // std dev = 0.026, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.011997587336264074;  // std dev = 0.956, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1517835471826433;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.012836646674424548;  // std dev = 2.021, 139.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.957', 'seconds']
Parameter learned model CLL:-0.106836 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 156, 0], 'true,false,false': [0.258, 52, 4], 'false,true,true': [0.987, 1, 37], 'false,true,false': [0.957, 1, 11], 'false,false': [8.93e-09, 90, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.2, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.26, 162, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.811, 57, 4], 'false,false,false,true': [0.943, 1, 8], 'false,false,false,false': [4.476, 88, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.459, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.227, 0, 3], 'true,false,false': [1.477, 3, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.974, 1, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false': [0.305, 310, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.906, 1, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.004, 216, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 79, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.481, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.047, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.123, 0, 39], 'false,false,true,false': [1.639, 246, 5], 'false,false,false': [0.257, 71, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.956, 151, 82], 'false,true': [0.199, 0, 22], 'false,false,true': [0.806, 0, 52], 'false,false,false,true': [0.046, 86, 0], 'false,false,false,false': [0.063, 74, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.559, 2, 121], 'true,false': [1.851, 252, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.961, 49, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [1.953, 4, 83], 'true,false,true': [0.03, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.162, 165, 19], 'false,false,false': [0.204, 170, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.057, 0, 78], 'false,true,true,true': [0.894, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.083, 197, 0], 'false,false,true': [0.642, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.089, 91, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.262, 1, 85], 'true,true,false': [0.394, 0, 19], 'true,false,true': [8.16e-08, 175, 0], 'true,false,false,true': [0.026, 40, 0], 'true,false,false,false': [0.956, 21, 4], 'false,true': [0.0, 0, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.021, 99, 40]}]
{'': [0.22427910288359082, 0.22530612244898032], 'false': [0.0384000000000006, 7.401486830834377e-17], 'true': [0.01851192595229848, 0.01851192595229609], 'false,true': [0.025623268698062793, 0.07638888888888877], 'true,false': [-1.3664283380001927e-16, 0.06632653061224474]}
{'': [0.0004714194244401677, 0.11229895530710693], 'false': [0.06767534639561378, 0.14472511641916125], 'false,false': [0.05376432080849616, 0.16641659467559172], 'false,false,false': [0.09876543209876543, 0.15650303999333412], 'false,true': [nan, 0.06767534639561378], 'false,false,true': [nan, 0.05376432080849616]}
{'': [0.06012524532715437, 0.1048451224038191], 'false': [nan, 0.10484512240382003], 'false,false': [0.04595297492799919, 0.0930327621255427], 'true': [0.03086253086028459, 0.18858124220730224], 'true,false': [0.017103003750399193, 0.19834710743801665], 'false,false,true': [0.13552090851743742, -1.1842378929335003e-16], 'true,true': [0.03086253086028459, nan]}
{'': [0.023130763564105795, 8.259470238474138e-05], 'false': [1.680521633650055e-05, -2.2485529612661398e-17], 'false,true': [nan, 1.6805216336498492e-05], 'false,false': [nan, -2.2485529612661398e-17], 'false,false,false': [nan, -2.2485529612661398e-17]}
{'': [0.027755826124097528, 0.06645941910786164], 'false': [0.0026610110072732233, 0.06452264166191687], 'false,false': [0.06414477082092657, 0.06582695692078441], 'false,false,true': [0.00038749692056510134, 0.010708711574775154], 'true': [0.027747915109023778, 0.0], 'false,true': [0.00011149271430016539, 0.0]}
{'': [0.037497305980947325, 0.06520018862531204], 'false': [0.0018057420237696067, 0.06709156874231835], 'false,false': [0.012501441239994159, 3.842142562109352e-05], 'true': [nan, 0.03749730598094738], 'true,false': [nan, 0.037497305980947325], 'false,false,false': [2.4629234566067647e-05, 5.363197825328161e-05]}
{'': [0.043781022517217355, 0.0499566952492535], 'false': [nan, 0.04995669524925358], 'false,false': [nan, 0.0499566952492535], 'false,false,false': [nan, 0.0499566952492535], 'true': [0.019748616964473994, 0.013223623507871481]}
{'': [0.04319507044297961, 0.03532408256169327], 'true': [0.04382576248441257, 0.00044313645758635445], 'false': [nan, 0.0353240825616932], 'false,false': [0.026128978948297975, 0.041816167071059444], 'true,false': [0.00044313645758635445, nan]}
{'': [0.0032221575409385693, 0.03174681925197188], 'false': [0.023235616419899973, 0.04430513383676392], 'false,false': [0.010302621826026547, 8.763269335713838e-05], 'false,true': [0.021029581330390373, 3.531421812281428e-05], 'false,true,true': [0.021029581330390373, nan], 'false,false,false': [nan, 8.763269335713838e-05]}
{'': [0.021147850230643913, 0.02878171015807511], 'false': [-3.469446951953614e-18, 0.029387531671070707], 'false,false': [nan, 0.029387531671070746], 'true': [0.016663839091249993, 0.004334345145568997], 'true,true': [0.018523111012522322, 0.008152738397107442], 'true,false': [3.8064789415719653e-17, 0.01572576855341666], 'true,false,false': [1.6629241410405504e-05, 0.036561494982538065]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 22.059
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.10814893509951232;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return -0.14185106490048774;  // std dev = 1.83e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else return -0.14185106490048766;  // std dev = 7.88e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7038484122109542;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return 0.7308365054495727;  // std dev = 0.169, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.22533230172869045;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.6939039811117339;  // std dev = 0.998, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.1289927427307329;  // std dev = 0.141, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.681011873749416;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.12544463852839155;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1504469698762931;  // std dev = 2.774, 49.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
%   | | | else return 0.09360818944106855;  // std dev = 1.924, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5592213758713979;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.43172741755558924;  // std dev = 0.838, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.5995104271815319;  // std dev = 0.068, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.4567403595890237;  // std dev = 0.330, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5610077480736354;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10509554007605452;  // std dev = 0.793, 116.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=1 */
%   | | | else return 4.702832229249582E-5;  // std dev = 2.573, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09700124132652563;  // std dev = 3.161, 84.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=25 */
%   | | | else return 0.17065069148739523;  // std dev = 2.353, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, D) )
%   | | then return 0.42251570210464345;  // std dev = 0.095, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else return 0.20049262089415623;  // std dev = 0.964, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.56725882592299;  // std dev = 0.315, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.5065308109032505;  // std dev = 0.257, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.24956036760301906;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6564654682921369;  // std dev = 0.121, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(I, A) )
%   | then return -0.10719320972331302;  // std dev = 0.130, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return -0.14070883354581737;  // std dev = 0.161, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3068237936551441;  // std dev = 0.163, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.5401661406957345;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.3171089220866767;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.19828957405105338;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0.5497137484970314;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.45447978680894097;  // std dev = 0.279, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.09403754738441908;  // std dev = 1.324, 253.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=5 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return -0.07433915709470794;  // std dev = 0.519, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | | else return 0.08748492536469946;  // std dev = 1.636, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.26184140221096097;  // std dev = 0.042, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.22685753864981587;  // std dev = 0.988, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return 0.12407786773064348;  // std dev = 0.845, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.048058089425348886;  // std dev = 0.123, 149.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=14 */
%   | | else return -0.06958176662769493;  // std dev = 0.089, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.28152998046175487;  // std dev = 0.042, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.28783499038106664;  // std dev = 1.314, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.4574496313311387;  // std dev = 0.271, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.1123924932217956;  // std dev = 0.019, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then return 0.2157275772702274;  // std dev = 0.067, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( tweets(C, F), follows(G, C) )
%   | | then return 0.23205901703273504;  // std dev = 0.018, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.29671292679785716;  // std dev = 0.116, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.23470341090235114;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3510074599223378;  // std dev = 0.226, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.08455791116434916;  // std dev = 0.089, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.2374996134893477;  // std dev = 0.080, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 4.0343663502824046E-4;  // std dev = 1.696, 97.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=25 */
%   | | | else return 0.04239257261404735;  // std dev = 1.464, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), follows(F, A) )
%   | | | then return 0.15875553557811342;  // std dev = 0.991, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.1801837264459703;  // std dev = 0.052, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.18938634612920607;  // std dev = 0.039, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.28032018259818664;  // std dev = 0.004, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.20513288098831026;  // std dev = 0.057, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.2794839157899413;  // std dev = 0.203, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.07802884762318364;  // std dev = 0.089, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.0032004686568441643;  // std dev = 1.504, 67.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=19 */
%   | | | else return 0.02185731547830171;  // std dev = 1.796, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.162105992714662;  // std dev = 0.013, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else if ( tweets(A, E) )
%   | | then return 0.13210274744966;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.05488830492944848;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16171638309158679;  // std dev = 0.086, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.22736239931446453;  // std dev = 0.182, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07337869493944951;  // std dev = 0.083, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.26197444085243765;  // std dev = 0.071, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.3420538365338178;  // std dev = 0.093, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.11178661843014612;  // std dev = 0.020, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.08382856778999861;  // std dev = 0.231, 72.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=68 */
%   | | else return 0.15782195745744076;  // std dev = 0.029, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.06343833216530399;  // std dev = 0.044, 194.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=4 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.11767892564058158;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.21039425481941276;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.1927757537476403;  // std dev = 0.963, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.09203030273596727;  // std dev = 0.107, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.015001649373024449;  // std dev = 0.704, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.0436730639781867;  // std dev = 0.957, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '28.804', 'seconds']
Refined model CLL: -0.098959


******************************************
Best model found
******************************************
Results 

CLL : -0.09954 

AUC ROC : 0.993234 

AUC PR : 0.351651 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 22.059 

Total Inference Time : 37.09310007095337 

Total revision time: 88.41804321479798
Best scored revision CLL: -0.098959


Results 

CLL : -0.09954 

AUC ROC : 0.993234 

AUC PR : 0.351651 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 88.49858411026001 

Total Inference Time : 37.09310007095337 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.177
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else return -0.095339436993511;  // std dev = 0.211, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7030572826462276;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0250882344370123;  // std dev = 0.279, 182.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0830178204162121;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07967557051535165;  // std dev = 3.032, 70.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5661326155207888;  // std dev = 1.077, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.23012191087588796;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8228274565308122;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.4663797574880106;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5663797574880106;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.022049417716474923;  // std dev = 0.276, 261.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.47869867785798126;  // std dev = 2.700, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12021114340206013;  // std dev = 0.000401, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1319043446904621;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32100726226184945;  // std dev = 1.140, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.4367961168348299;  // std dev = 0.184, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.32637903309980343;  // std dev = 0.045, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5414143605545428;  // std dev = 1.344, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.08021155234820203;  // std dev = 2.085, 216.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=9 */
%   | | else return -0.10710897005534312;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03814527356681809;  // std dev = 3.326, 261.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1913881495960956;  // std dev = 0.984, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.498744384031902;  // std dev = 0.596, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10643582194019618;  // std dev = 0.024, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.10649395804978035;  // std dev = 0.032, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27232496043019105;  // std dev = 1.870, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.0811285208273919;  // std dev = 1.828, 267.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03933890522398858;  // std dev = 0.653, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19861136946042682;  // std dev = 0.067, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2393537723865024;  // std dev = 0.039, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03751824373774271;  // std dev = 0.169, 175.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=22 */
%   | | else return 0.03491792332453599;  // std dev = 0.217, 79.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12852107380695627;  // std dev = 0.236, 82.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29614745651003327;  // std dev = 0.721, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09348768112219315;  // std dev = 0.021, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4011103268426065;  // std dev = 0.469, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09543464272568382;  // std dev = 1.63e-05, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1459951911901417;  // std dev = 2.280, 99.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=94 */
%   | | else return 0.04926333891065228;  // std dev = 0.875, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08600650000896286;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0867918117036741;  // std dev = 7.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.03785615345350722;  // std dev = 0.494, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.06270181844608244;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.038885015881467415;  // std dev = 1.432, 54.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.828', 'seconds']
Parameter learned model CLL:-0.109741 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 176, 0], 'true,false,false': [0.211, 41, 2], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.97e-09, 44, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.279, 160, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.976, 20, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [3.032, 53, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.077, 1, 70], 'true,true,false': [0.707, 1, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.894, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.949, 1, 9], 'false,false,true,false': [2.98e-08, 0, 8], 'false,false,false': [0.276, 229, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.7, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.000401, 197, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.14, 1, 73], 'true,false': [0.184, 0, 4], 'false,true,true': [0.045, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.344, 2, 23], 'false,false,true,false': [2.085, 207, 9], 'false,false,false': [0.0, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.326, 170, 91], 'false,true': [0.984, 1, 13], 'false,false,true': [0.596, 0, 22], 'false,false,false,true': [0.024, 24, 0], 'false,false,false,false': [0.032, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.87, 3, 107], 'true,false': [1.828, 256, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.653, 11, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.067, 0, 80], 'true,false,true': [0.039, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.169, 153, 22], 'false,false,false': [0.217, 57, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.236, 5, 77], 'false,true,true,true': [0.721, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.021, 196, 0], 'false,false,true': [0.469, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.63e-05, 43, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [2.28, 5, 94], 'true,true,false': [0.875, 1, 9], 'true,false,true': [0.0, 160, 0], 'true,false,false,true': [7.45e-09, 18, 0], 'true,false,false,false': [0.494, 14, 2], 'false,true': [0.899, 1, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.432, 37, 17]}]
{'': [0.21869822485207302, 0.21869822485207113], 'true': [0.027500889996442155, 0.009049018994599613], 'false': [0.0, 4.794144879063176e-17], 'true,false': [-1.8924256101565169e-16, 0.04434829637641966], 'false,true': [0.0, nan]}
{'': [0.023569024868540418, 0.09766100827796759], 'false': [0.07775393575420916, 0.12977638881727055], 'false,false': [0.04535147392290255, 0.14513183176643757], 'false,false,false': [0.0, 0.1312985237154969], 'false,true': [nan, 0.07775393575420916], 'false,false,true': [nan, 0.04535147392290255]}
{'': [0.03785489708533198, 0.09179874729127244], 'false': [nan, 0.09179874729127252], 'false,false': [0.05246913580246905, 0.07619150238612768], 'false,false,true': [0.09000000000000012, 1.1102230246251565e-16], 'true': [0.025760062069385813, 0.15976733373441956], 'true,false': [0.0031000930576178254, 0.16], 'true,true': [0.01635020591770207, 0.24999999999999997]}
{'': [0.055641809065637884, 1.9315542919289753e-05], 'false': [1.6052590607027935e-07, -2.4980018054066023e-17], 'false,true': [nan, 1.6052590607027935e-07], 'false,false': [nan, -2.4980018054066023e-17], 'false,false,false': [nan, -2.4980018054066023e-17]}
{'': [0.01775626718331325, 0.060838566328310695], 'false': [0.00012010896801949901, 0.05734049349270842], 'false,false': [0.0614591505248547, -8.326672684688674e-18], 'false,false,true': [0.07220423354754431, 0.020130571429084216], 'true': [0.017571436426677738, 0.008456118816892039], 'false,true': [0.00012010896801949901, nan]}
{'': [0.04238424989268085, 0.07705378777350926], 'false': [0.06921536786570723, 0.07564954786517324], 'false,false': [0.01613496612284303, 2.603044769397226e-05], 'true': [nan, 0.04238424989268032], 'true,false': [nan, 0.04238424989268085], 'false,false,false': [2.4163087837943593e-05, 2.7240378380905134e-05]}
{'': [0.04395547191197679, 0.022410970243649995], 'true': [0.031801451271739785, 0.01251120793665156], 'false': [nan, 0.022410970243649995], 'false,false': [nan, 0.022410970243649995], 'false,false,false': [nan, 0.022410970243649995]}
{'': [0.00011296636820210321, 0.03548539190170234], 'false': [nan, 0.03548539190170232], 'false,false': [0.028664368404493396, 0.04698019619611899], 'true': [5.615732184126032e-05, 0.0007658712507418938], 'true,false': [0.0007658712507418938, nan]}
{'': [0.05578541237439568, 0.028664522996028213], 'false': [0.020597181390769045, 0.05372708421428717], 'false,false': [0.012925886550975192, 6.211690077035718e-12], 'false,true': [0.016233271249614697, 2.2122382856013036e-06], 'false,true,true': [0.016233271249614697, nan], 'false,false,false': [nan, 6.211690077035718e-12]}
{'': [0.03195279743199421, 0.04924598167185065], 'false': [0.16157465638306448, 0.0379706119401635], 'false,false': [nan, 0.0379706119401635], 'true': [0.05549622760612604, 0.001435403646723888], 'true,true': [0.05251644273967737, 0.0764974916069344], 'true,false': [-2.2204460492503132e-17, 0.007782193672864579], 'true,false,false': [3.0839528461809902e-18, 0.015269379917461112]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 30.675
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.92e-07, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.6581489350995123;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.691304398126447;  // std dev = 0.165, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else return 0.7528089048964931;  // std dev = 0.114, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(A, G) )
%   | | | then return -0.03510748844934163;  // std dev = 3.292, 159.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=17 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.03555973951356734;  // std dev = 0.261, 47.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.062169920952293393;  // std dev = 0.948, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return -0.13336251316940534;  // std dev = 0.058, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.5243782526377279;  // std dev = 0.872, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.07163120499725856;  // std dev = 3.111, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.5660395041095961;  // std dev = 0.155, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( tweets(A, F), tweets(D, G) )
%   | | | then return 0.4373110496341504;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.5623110496341505;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.6958068795507479;  // std dev = 0.074, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.574614894768563;  // std dev = 0.021, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6651197812127837;  // std dev = 0.951, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.12256065591110953;  // std dev = 0.102, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.09594190452162113;  // std dev = 2.084, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.10986337834750341;  // std dev = 2.119, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.36987739065372294;  // std dev = 1.693, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   | | | else return 0.15525138551509873;  // std dev = 1.240, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.4291107941711091;  // std dev = 0.079, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.40318035848312395;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.515080865626119;  // std dev = 0.293, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5858713351784233;  // std dev = 0.966, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.6586851384337982;  // std dev = 0.169, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(J, A) )
%   | then return -0.10913531078841454;  // std dev = 0.110, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return -0.14568987408131245;  // std dev = 0.006, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.3354420479034633;  // std dev = 0.073, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.23915409376633684;  // std dev = 0.903, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.22622640231173075;  // std dev = 0.442, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else return 0.4054180452767273;  // std dev = 0.330, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.33216714375858464;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.364600865084395;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.05997426417812738;  // std dev = 1.968, 200.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=15 */
%   | | | else return 0.048740364447592714;  // std dev = 2.441, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return -0.09055232990008887;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.2638692789981964;  // std dev = 0.127, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | else return 0.05365134266620308;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.04502091921399855;  // std dev = 1.804, 144.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=14 */
%   | | | else return 0.04135621927239118;  // std dev = 0.468, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.053197802903994944;  // std dev = 0.166, 44.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2926303588679786;  // std dev = 0.049, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.1154648216467871;  // std dev = 1.005, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5372342744048993;  // std dev = 0.088, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11588150000393325;  // std dev = 0.021, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.2398216717317216;  // std dev = 0.429, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.038231444630666855;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.35848879074356854;  // std dev = 0.102, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return -0.09323333839368163;  // std dev = 0.012, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.21812192867838603;  // std dev = 0.020, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1190889012381002;  // std dev = 0.521, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.019332830031707774;  // std dev = 0.992, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.022638814107006678;  // std dev = 0.776, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.04561380712036622;  // std dev = 0.949, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.1156254233494445;  // std dev = 1.661, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | | | else return 0.18557890682090222;  // std dev = 0.063, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.17740384461966438;  // std dev = 0.012, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.07313508062971297;  // std dev = 0.856, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A), follows(A, H) )
%   | | then return 0.31904333068452584;  // std dev = 0.027, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.12509296922775281;  // std dev = 0.772, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(I, A) )
%   | | then return -0.04926587066670057;  // std dev = 0.121, 207.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.023760162944843892;  // std dev = 1.150, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.008902033374226216;  // std dev = 1.198, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.10906077705792665;  // std dev = 1.684, 58.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=55 */
%   | | | else return -0.4248601843668663;  // std dev = 0.758, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.20789939171205277;  // std dev = 0.048, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.25606688883173084;  // std dev = 0.220, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2107841716743568;  // std dev = 0.265, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | else return -0.07965907960362593;  // std dev = 0.086, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.22823305984830872;  // std dev = 0.964, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.37781178557559597;  // std dev = 0.042, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.11935267536497783;  // std dev = 0.046, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.1692858096158285;  // std dev = 0.138, 93.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=91 */
%   | | else if ( follows(A, F), tweets(A, G) )
%   | | | then return -0.10478343969812481;  // std dev = 0.774, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.12253006483017824;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07014957114352119;  // std dev = 0.038, 216.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=2 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( recursion_accounttype(I, B) )
%   | | then return 0.26058474993887176;  // std dev = 0.062, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1047092334545435;  // std dev = 0.022, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, J) )
%   | | then if ( tweets(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.26754514748866554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10184675061169755;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.03599924424427415;  // std dev = 0.188, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '35.397', 'seconds']
Refined model CLL: -0.103351


******************************************
Best model found
******************************************
Results 

CLL : -0.100626 

AUC ROC : 0.995005 

AUC PR : 0.447811 

Precision : 0.338395 

Recall : 1.0 

F1 : 0.505673 

Total Learning Time : 30.675 

Total Inference Time : 28.594693899154663 

Total revision time: 84.12648606491089
Best scored revision CLL: -0.103351


Results 

CLL : -0.100626 

AUC ROC : 0.995005 

AUC PR : 0.447811 

Precision : 0.338395 

Recall : 1.0 

F1 : 0.505673 

Total Learning Time : 84.26919579696656 

Total Inference Time : 28.594693899154663 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.792
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else return -0.0812450042944271;  // std dev = 0.239, 66.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8068668838174602;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 7.68e-09, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7149980224135406;  // std dev = 1.018, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02562535042127241;  // std dev = 0.279, 157.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07820752593864119;  // std dev = 1.814, 66.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7297063270878138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.08509937905904318;  // std dev = 4.685, 161.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5326009135128111;  // std dev = 1.666, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7333542226738001;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5654784850994425;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5946801669956097;  // std dev = 0.184, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5611230063467564;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.0031222687483415386;  // std dev = 0.299, 390.000 (wgt'ed) examples reached here.  /* #neg=333 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5294014588394483;  // std dev = 2.374, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12306207614271321;  // std dev = 0.003, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1347177442470392;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30865251582267966;  // std dev = 1.136, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return -0.11038528491999794;  // std dev = 0.829, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29877245938570096;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.51053977748671;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6010210269930452;  // std dev = 0.056, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.09682096442818608;  // std dev = 1.671, 237.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=5 */
%   | | else return 0.017781852675025876;  // std dev = 0.283, 67.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.030891951237704784;  // std dev = 3.091, 240.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.21335855219949953;  // std dev = 1.035, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4506328677188555;  // std dev = 1.455, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10979788940994267;  // std dev = 0.030, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | | else return -0.11354521241101698;  // std dev = 0.049, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2734651966118875;  // std dev = 1.553, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.08492788905631768;  // std dev = 1.602, 247.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05446252411866062;  // std dev = 1.962, 76.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19199563323893473;  // std dev = 0.082, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.3308797788228868;  // std dev = 0.075, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0502141920120792;  // std dev = 0.145, 189.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=19 */
%   | | else return 0.004231528517640434;  // std dev = 0.212, 208.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15857346518892262;  // std dev = 0.141, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2500807923826105;  // std dev = 1.342, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09310057895392257;  // std dev = 0.082, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3513432846340666;  // std dev = 0.602, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09864231518876507;  // std dev = 0.108, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1854805875785663;  // std dev = 0.747, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.11464006051808177;  // std dev = 1.082, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08410525247932735;  // std dev = 3.33e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09579781840407972;  // std dev = 0.038, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.023206269921385646;  // std dev = 1.011, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.005285104799981393;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03386000032548547;  // std dev = 1.977, 119.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.687', 'seconds']
Parameter learned model CLL:-0.107272 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 165, 0], 'true,false,false': [0.239, 62, 4], 'false,true,true': [1.377, 2, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [7.68e-09, 109, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.018, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.279, 138, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.814, 62, 4], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [4.685, 121, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.666, 3, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.226, 0, 3], 'true,false,false': [0.0, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.184, 0, 6], 'false,false,true,false': [2.98e-08, 0, 15], 'false,false,false': [0.299, 333, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.374, 2, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.003, 217, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 102, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.136, 1, 77], 'true,false': [0.829, 1, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.056, 0, 39], 'false,false,true,false': [1.671, 232, 5], 'false,false,false': [0.283, 54, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.091, 158, 82], 'false,true': [1.035, 1, 22], 'false,false,true': [1.455, 1, 52], 'false,false,false,true': [0.03, 68, 0], 'false,false,false,false': [0.049, 65, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.553, 2, 121], 'true,false': [1.602, 240, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.962, 48, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.082, 0, 83], 'true,false,true': [0.075, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.145, 170, 19], 'false,false,false': [0.212, 156, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.141, 2, 78], 'false,true,true,true': [1.342, 2, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.082, 204, 0], 'false,false,true': [0.602, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.108, 112, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.747, 0, 85], 'true,true,false': [1.082, 1, 19], 'true,false,true': [3.33e-08, 177, 0], 'true,false,false,true': [0.038, 32, 0], 'true,false,false,false': [1.011, 27, 4], 'false,true': [0.943, 1, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.977, 79, 40]}]
{'': [0.21777069446768257, 0.2107511569953729], 'true': [0.01851192595229848, 0.0170161728603286], 'false': [0.0384000000000006, 6.111319401606367e-17], 'false,true': [0.04865220249835817, -1.6148698540002277e-16], 'true,false': [-1.6417843515668981e-16, 0.05693296602387503]}
{'': [0.012045060666990801, 0.10991974905774941], 'false': [0.07764465965451675, 0.12846444597153103], 'false,false': [0.04987799146417709, 0.14860441708772165], 'false,false,false': [-2.220446049250313e-16, 0.13631899081813767], 'false,true': [nan, 0.07764465965451675], 'false,false,true': [nan, 0.04987799146417709]}
{'': [0.036391280470928565, 0.10067523419064169], 'false': [nan, 0.10067523419064281], 'false,false': [0.0018385029074497118, 0.08917246409718206], 'true': [0.03966270909340344, 0.010225712951009491], 'true,true': [0.03966270909340344, nan], 'true,false': [0.016998089354088492, 0.0], 'false,false,true': [0.005630415154064779, 5.921189464667501e-17]}
{'': [0.035679118058276914, 3.653149275701357e-05], 'false': [1.0263576284083804e-05, -8.054559198260939e-17], 'false,true': [nan, 1.0263576284077665e-05], 'false,false': [nan, -8.054559198260939e-17], 'false,false,false': [nan, -8.054559198260939e-17]}
{'': [0.02900346026174273, 0.07235746753971627], 'false': [0.0020425710393547057, 0.07133269292588819], 'false,false': [0.06921432886992544, 0.07985323017331387], 'false,false,true': [8.075568414170128e-05, 0.011777861550814216], 'true': [0.016543975392401638, 0.343720508676068], 'false,true': [9.204495337011842e-06, 0.0]}
{'': [0.03981367658861612, 0.07525394327088993], 'false': [0.04660079542341666, 0.07580924696848602], 'false,false': [0.03991960615328935, 2.859210804815293e-05], 'true': [nan, 0.03981367658861563], 'true,false': [nan, 0.03981367658861612], 'false,false,false': [1.3034860654371304e-05, 3.768779414059167e-05]}
{'': [0.04196067356404705, 0.0506253598437497], 'false': [nan, 0.05062535984374962], 'false,false': [nan, 0.0506253598437497], 'false,false,false': [nan, 0.0506253598437497], 'true': [0.0196006892369271, 0.010395918076743033]}
{'': [0.0005884239063411838, 0.03425889742207138], 'false': [nan, 0.034258897422071936], 'false,false': [0.020939723537150956, 0.044950182762221444], 'true': [8.096176205066876e-05, 0.002813151256155777], 'true,false': [0.002813151256155777, nan]}
{'': [0.020016286191089343, 0.03128495460835611], 'false': [0.023551453828970514, 0.04172421170304599], 'false,false': [0.009059014873163828, 0.00010429025750044849], 'false,true': [0.04503036243556707, 3.277957549615965e-05], 'false,true,true': [0.04503036243556707, nan], 'false,false,false': [nan, 0.00010429025750044849]}
{'': [0.021741603708690254, 0.03754139199459414], 'false': [0.09876543209876544, 0.03285359051712876], 'false,false': [nan, 0.032853590517128745], 'true': [0.017233669975004456, 0.00472474382244703], 'true,true': [0.006559127510789446, 0.058537977130702544], 'true,false': [6.272446466808794e-18, 0.01757326473846361], 'true,false,false': [4.523845018688556e-05, 0.032990123084259595]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
0;false,true;follows(E, F), follows(A, F).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 25.924
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.018148935099512268;  // std dev = 1.833, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   | | | else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.14185106490048763;  // std dev = 8.69e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7234285389428464;  // std dev = 0.190, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then return 0.6480448407823832;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.7194734122109546;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.02979353844469163;  // std dev = 0.268, 159.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=18 */
%   | | else return -0.10260901553543607;  // std dev = 0.137, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.019074715538760965;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return -0.07683946360315748;  // std dev = 1.161, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7580193346218546;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1277912008360126;  // std dev = 4.537, 134.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5583210586929146;  // std dev = 0.111, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.7183467105287292;  // std dev = 0.217, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.48368582514463615;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.43852903464081644;  // std dev = 0.367, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5545198159817326;  // std dev = 0.001, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6798849541280388;  // std dev = 0.976, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12291963325542747;  // std dev = 0.130, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.06989387763787702;  // std dev = 2.818, 60.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=15 */
%   | | | else return 0.1746288142317501;  // std dev = 3.340, 67.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(D, F) )
%   | | | then return 0.41902754036713497;  // std dev = 0.072, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.620087621133411;  // std dev = 0.138, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.3322000550410223;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.1417238645648319;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.38234928122633577;  // std dev = 0.836, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.5567766168792264;  // std dev = 0.318, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.6725065749956591;  // std dev = 0.096, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(J, A) )
%   | then return -0.10993305382188104;  // std dev = 0.091, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else return -0.157150867482787;  // std dev = 0.058, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.32129909095101045;  // std dev = 0.041, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.07195472571778339;  // std dev = 0.769, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.35523250354199176;  // std dev = 0.052, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.4155307340274159;  // std dev = 0.074, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.33432100471481235;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4866851730323313;  // std dev = 0.239, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.09763107024235922;  // std dev = 1.466, 247.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=5 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.06430566740791999;  // std dev = 0.743, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | | else return 0.0815774116603799;  // std dev = 1.862, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.23886166770450998;  // std dev = 0.996, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.3304375744494683;  // std dev = 0.179, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.020249742567585678;  // std dev = 0.672, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return -0.05354571514259523;  // std dev = 0.118, 154.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=14 */
%   | | else return -0.07192800365735773;  // std dev = 0.073, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2815578038848816;  // std dev = 0.062, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.19428350516907855;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4222129652234333;  // std dev = 0.077, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return -0.12065787846223397;  // std dev = 0.020, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), tweets(C, D) )
%   | | | then return 0.16878074304680624;  // std dev = 0.980, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return -0.2890297390036387;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2083338506817633;  // std dev = 0.064, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.1229545149839464;  // std dev = 1.297, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | else return 0.23069285354092792;  // std dev = 0.032, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(G, A) )
%   | then return -0.04629607972393594;  // std dev = 0.146, 222.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=23 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.11581242538234503;  // std dev = 0.317, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.015029159358117406;  // std dev = 1.908, 100.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=25 */
%   | | | else return 0.03549779278906308;  // std dev = 1.783, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18794625926348804;  // std dev = 0.020, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return -0.04576618294786169;  // std dev = 0.749, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.3379451684030743;  // std dev = 0.096, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.4326836416841793;  // std dev = 0.164, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08202575372907397;  // std dev = 0.056, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.27912281924158955;  // std dev = 0.240, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.12162473886390869;  // std dev = 0.653, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.0999038787641098;  // std dev = 0.837, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06234262895110909;  // std dev = 1.345, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.13956142214727127;  // std dev = 0.139, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.03444782874489981;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.16112440386909238;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return -0.03580513319237656;  // std dev = 1.177, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.18186518569902566;  // std dev = 0.147, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1470368856017383;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(I, A) )
%   | then return -0.03417631655662278;  // std dev = 0.108, 273.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=38 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.2488090496321264;  // std dev = 0.211, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | else return -0.1165085646546792;  // std dev = 0.023, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14969877382344565;  // std dev = 0.022, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else return 0.19146719121116104;  // std dev = 0.270, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else return -0.06728364712030374;  // std dev = 0.051, 245.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=4 */
%   else if ( follows(A, F) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.19143822133720312;  // std dev = 0.027, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(H, F), recursion_accounttype(H, B) )
%   | | | then return -0.038929453761482234;  // std dev = 1.320, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.09122864472212631;  // std dev = 0.072, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.33547715983358717;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1353652448295176;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.007239782503759178;  // std dev = 0.202, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.783', 'seconds']
Refined model CLL: -0.100552


******************************************
Best model found
******************************************
Results 

CLL : -0.101875 

AUC ROC : 0.992852 

AUC PR : 0.336238 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 25.924 

Total Inference Time : 28.73455786705017 

Total revision time: 83.64961067771912
Best scored revision CLL: -0.100552


Results 

CLL : -0.101875 

AUC ROC : 0.992852 

AUC PR : 0.336238 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 83.79232040977479 

Total Inference Time : 28.73455786705017 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.308
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6974208360735366;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.023604223241070955;  // std dev = 0.277, 181.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0984602247114046;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7366846563336449;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11857538352239567;  // std dev = 3.010, 60.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5466446408088536;  // std dev = 1.465, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7242127141427623;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.4011175367185475;  // std dev = 1.032, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5725157817997065;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5608051189906194;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.44969400787950825;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.03081105114134098;  // std dev = 0.266, 286.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5002986849275236;  // std dev = 2.140, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11959826190730218;  // std dev = 0.002, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13539378144045275;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2765765626080511;  // std dev = 2.069, 77.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=73 */
%   | else return 0.1810927309967753;  // std dev = 1.037, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31781605421070414;  // std dev = 0.050, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5373273070976978;  // std dev = 1.351, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.08161437973370689;  // std dev = 2.113, 229.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=9 */
%   | | else return -0.1067807946972379;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03422774044088315;  // std dev = 3.379, 266.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2778529479892462;  // std dev = 0.258, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5097284951736023;  // std dev = 0.634, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10902872945953496;  // std dev = 0.040, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.10281272308282115;  // std dev = 0.042, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2754229358381629;  // std dev = 1.789, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07767209754274015;  // std dev = 1.824, 243.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0012055450294866448;  // std dev = 0.717, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17486091033937934;  // std dev = 1.389, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2891801773212722;  // std dev = 0.139, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05090760358126523;  // std dev = 0.149, 225.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=22 */
%   | | else return 0.007581526842126938;  // std dev = 0.226, 95.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16012660964810044;  // std dev = 0.184, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2895439577398969;  // std dev = 0.727, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09118450134726641;  // std dev = 0.029, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.412707338671472;  // std dev = 0.472, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09559970915173055;  // std dev = 0.002, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17162294067454875;  // std dev = 1.669, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.04553832663890937;  // std dev = 0.948, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08447705690451947;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08195734819302715;  // std dev = 9.86e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.033408117467438485;  // std dev = 0.734, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13454297710217117;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024667874477738595;  // std dev = 1.499, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.578', 'seconds']
Parameter learned model CLL:-0.108599 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [4.46e-07, 0, 103], 'true,false,true': [0.0, 172, 0], 'true,false,false': [0.249, 28, 2], 'false,true,true': [1.351, 2, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.97e-09, 42, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.277, 159, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 28, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [3.01, 43, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.465, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [1.032, 1, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false': [0.266, 254, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.14, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.002, 211, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.069, 4, 73], 'true,false': [1.037, 1, 4], 'false,true,true': [0.05, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.351, 2, 23], 'false,false,true,false': [2.113, 220, 9], 'false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.379, 175, 91], 'false,true': [0.258, 0, 13], 'false,false,true': [0.634, 0, 22], 'false,false,false,true': [0.04, 32, 0], 'false,false,false,false': [0.042, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.789, 3, 107], 'true,false': [1.824, 232, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.717, 19, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [1.389, 2, 80], 'true,false,true': [0.139, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 203, 22], 'false,false,false': [0.226, 73, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.184, 3, 77], 'false,true,true,true': [0.727, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.029, 212, 0], 'false,false,true': [0.472, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.002, 42, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.669, 2, 94], 'true,true,false': [0.948, 1, 9], 'true,false,true': [0.0, 184, 0], 'true,false,false,true': [9.86e-09, 17, 0], 'true,false,false,false': [0.734, 10, 2], 'false,true': [0.046, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.499, 45, 17]}]
{'': [0.22574576726686596, 0.21869822485207113], 'true': [1.9315724855614373e-15, 0.009802960494069042], 'false': [0.07939508506616269, 4.7580986769649563e-17], 'false,true': [0.07939508506616269, nan], 'true,false': [-1.8073398075293246e-16, 0.062222222222222255]}
{'': [0.023582504365519594, 0.09943700457735008], 'false': [0.07653214133465995, 0.137265031669202], 'false,false': [0.033293697978596916, 0.16399414629554773], 'false,false,false': [0.0, 0.1510483973109645], 'false,true': [nan, 0.07653214133465995], 'false,false,true': [nan, 0.033293697978596916]}
{'': [0.04136047808893308, 0.08565467860987806], 'false': [nan, 0.08565467860987798], 'false,false': [0.0524691358024691, 0.07072848418969951], 'false,false,true': [0.0, 0.09876543209876545], 'true': [0.029820183174917105, 0.15942640348889925], 'true,false': [0.35520787952158356, 0.0], 'true,true': [0.029802428814891996, 0.0]}
{'': [0.0357658519377419, 3.0288304942294542e-05], 'false': [2.777701854908199e-06, -7.162729191130042e-18], 'false,true': [nan, 2.777701854908199e-06], 'false,false': [nan, -7.162729191130042e-18], 'false,false,false': [nan, -7.162729191130042e-18]}
{'': [0.06583039940692914, 0.058642991878210676], 'true': [0.05558488257815997, 0.2150501209890455], 'false': [0.00014481886034788198, 0.05532977273826742], 'false,false': [0.05876036116153763, -3.0839528461809902e-18], 'false,false,true': [0.07296776833037914, 0.019503742475510087], 'false,true': [0.00014481886034788198, nan]}
{'': [0.04291446311056419, 0.07211062634468539], 'false': [0.0051314263067194265, 0.07506454887748616], 'false,false': [0.018284200691188968, 5.9877489006724886e-05], 'true': [nan, 0.04291446311056476], 'true,false': [nan, 0.04291446311056419], 'false,false,false': [5.0856602711570054e-05, 4.9670835151023015e-05]}
{'': [0.04523615745579487, 0.019058331530559518], 'true': [0.02910976042182547, 0.013685262415954264], 'false': [nan, 0.019058331530559518], 'false,false': [nan, 0.019058331530559518], 'false,false,false': [nan, 0.019058331530559518]}
{'': [0.02350220249836738, 0.031400018761435625], 'false': [nan, 0.03140001876143564], 'false,false': [0.022137498658452513, 0.050932190951954594], 'true': [0.023528701638890186, 0.009658007095637938], 'true,false': [0.009658007095637938, nan]}
{'': [0.0339745531422115, 0.027433892314564234], 'false': [0.018686987423673092, 0.05677465579024063], 'false,false': [0.01311255702433689, 7.220967137857475e-08], 'false,true': [0.016517436229942548, 4.085267648785318e-06], 'false,true,true': [0.016517436229942548, nan], 'false,false,false': [nan, 7.220967137857475e-08]}
{'': [0.026683186880271843, 0.03478421780797004], 'false': [0.0005216625925584528, 0.036263036260814535], 'false,false': [nan, 0.036263036260814535], 'true': [0.03611395269164451, 0.0026699538991465516], 'true,true': [0.02900920145638894, 0.08992198275702676], 'true,false': [-4.4650273816446514e-17, 0.019168777882411135], 'true,false,false': [5.714383214982423e-18, 0.044942840595064044]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 48.36
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8364098046647294;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.039967116917694;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7233409607754019;  // std dev = 0.132, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7202439946310009;  // std dev = 0.007, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12544463852839105;  // std dev = 8.16e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else return -0.0011919840078993378;  // std dev = 0.299, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return -0.05199684275779866;  // std dev = 0.950, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return -0.12822832326061573;  // std dev = 0.034, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09249138835490281;  // std dev = 3.012, 65.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.532494347350989;  // std dev = 0.165, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7197139290876657;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6365473265326543;  // std dev = 0.120, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.55441120199621;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.44330009088509886;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10037138371459772;  // std dev = 1.149, 145.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=3 */
%   | | | else return 0.013039335648254931;  // std dev = 2.256, 64.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.055224680979353916;  // std dev = 2.078, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return 0.048672157608575475;  // std dev = 2.241, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.4138031995595759;  // std dev = 0.995, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | | | else return 0.5318737805801294;  // std dev = 0.473, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.19209706358557813;  // std dev = 0.989, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4380746674826523;  // std dev = 0.180, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.5776073928870766;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.6901215288829256;  // std dev = 4.21e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(J, A) )
%   | then return -0.11017229849418632;  // std dev = 0.167, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | else return -0.14217775038077712;  // std dev = 0.002, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.30098192693177345;  // std dev = 0.172, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.7071941054586369;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.37438782285967237;  // std dev = 0.387, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.29896226774337276;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.12277510679824777;  // std dev = 0.959, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.3339657965139193;  // std dev = 0.017, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return -0.05118966830440234;  // std dev = 2.804, 252.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=23 */
%   | | | else return 0.10127727682368214;  // std dev = 1.582, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else return -0.09274051485124811;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(E, F), follows(A, E) )
%   | | | then return 0.23068742418664168;  // std dev = 1.390, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return -0.06577189357797737;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2702487937269239;  // std dev = 0.018, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(G, A), tweets(G, H) )
%   | | then return -0.045427181825795075;  // std dev = 0.176, 197.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=22 */
%   | | else return -0.09835669877295877;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2769724407168575;  // std dev = 0.042, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.3595601781785855;  // std dev = 1.314, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.4794780605569816;  // std dev = 0.217, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11687203325256122;  // std dev = 0.020, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then return 0.2228607740990434;  // std dev = 0.126, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else if ( follows(C, A), tweets(C, E) )
%   | | then return -0.008248671678276753;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.20001882719478353;  // std dev = 0.062, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), follows(A, G) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.21289937571062112;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.48472841780431075;  // std dev = 0.268, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.09016325758397022;  // std dev = 0.021, 201.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=1 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.2227812621911887;  // std dev = 1.67e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.028259855705597844;  // std dev = 1.928, 65.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=17 */
%   | | | else return -0.07654554068695339;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(A, C) )
%   | | | then return 0.15741365401246832;  // std dev = 0.984, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.02941878792847502;  // std dev = 0.922, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.1828689886784652;  // std dev = 0.028, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.19926711517023676;  // std dev = 0.034, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(F, A) )
%   | then return -0.04634121545243098;  // std dev = 0.135, 246.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3598266939571603;  // std dev = 0.438, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1150801960010136;  // std dev = 0.030, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.021140065462574836;  // std dev = 1.007, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.02118715025937623;  // std dev = 0.970, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.14022199454829154;  // std dev = 1.396, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | | | else return 0.21918097541406714;  // std dev = 0.177, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.32189896516196376;  // std dev = 0.246, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.08160474490441534;  // std dev = 0.915, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.22765993216606503;  // std dev = 0.223, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return -0.07996424962148668;  // std dev = 0.008, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.41319844396162403;  // std dev = 0.113, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.24284223662911525;  // std dev = 0.924, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.1102324615909444;  // std dev = 0.011, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.09785341767756695;  // std dev = 1.694, 64.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=61 */
%   | | | else return 0.13666148381178797;  // std dev = 0.085, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2976669446946231;  // std dev = 0.081, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.0737134844276076;  // std dev = 0.056, 234.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13187405260821605;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3183534559595275;  // std dev = 0.102, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09355780179573167;  // std dev = 0.026, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.024672858601909962;  // std dev = 0.564, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return -0.03660540870628537;  // std dev = 1.066, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1', 'minutes', 'and', '1.790', 'seconds']
Refined model CLL: -0.103003


******************************************
Best model found
******************************************
Results 

CLL : -0.098538 

AUC ROC : 0.994606 

AUC PR : 0.35864 

Precision : 0.340659 

Recall : 0.99359 

F1 : 0.507365 

Total Learning Time : 48.36 

Total Inference Time : 55.447752952575684 

Total revision time: 128.20331813621522
Best scored revision CLL: -0.103003


Results 

CLL : -0.098538 

AUC ROC : 0.994606 

AUC PR : 0.35864 

Precision : 0.340659 

Recall : 0.99359 

F1 : 0.507365 

Total Learning Time : 128.30067827033997 

Total Inference Time : 55.447752952575684 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.743
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8122773754664835;  // std dev = 2.184, 109.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048804;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else return -0.07288554765910842;  // std dev = 0.253, 58.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048768;  // std dev = 6.18e-09, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7202228388624656;  // std dev = 1.016, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.039903946829241546;  // std dev = 0.258, 188.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03521629580955013;  // std dev = 1.767, 38.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.18158655569453092;  // std dev = 4.265, 110.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5667710470255924;  // std dev = 0.913, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7324272294740116;  // std dev = 0.218, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4442553256351735;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5987319920202342;  // std dev = 0.177, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5039790033326091;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.0025181258164465856;  // std dev = 0.301, 368.000 (wgt'ed) examples reached here.  /* #neg=311 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5059972799331485;  // std dev = 2.865, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12319668660025217;  // std dev = 0.006, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14644217683938454;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2836154092157552;  // std dev = 1.798, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   | else return 0.05305067585100459;  // std dev = 0.602, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3173767813147747;  // std dev = 0.039, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5119810653096724;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5431205895020039;  // std dev = 1.266, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return -0.09961915823622831;  // std dev = 1.629, 236.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=5 */
%   | | else return -0.014734801056142102;  // std dev = 0.258, 82.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04269109191996729;  // std dev = 3.075, 231.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2678159599116954;  // std dev = 0.245, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.42260919591416385;  // std dev = 1.770, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11714532295921808;  // std dev = 0.035, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return -0.11747654558258736;  // std dev = 0.059, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25685673898413564;  // std dev = 2.253, 126.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=121 */
%   | else return -0.0891823441976085;  // std dev = 1.577, 281.000 (wgt'ed) examples reached here.  /* #neg=274 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.041813981856648814;  // std dev = 2.015, 82.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19799181891979664;  // std dev = 0.093, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.3055610306942715;  // std dev = 0.049, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04583317549713298;  // std dev = 0.157, 182.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=19 */
%   | | else return 0.0038697062042669823;  // std dev = 0.210, 204.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.154185053571701;  // std dev = 0.174, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29967141302135447;  // std dev = 0.960, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09420555396885703;  // std dev = 0.097, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.2995067953005107;  // std dev = 1.485, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10423031763805368;  // std dev = 0.100, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19241298317114788;  // std dev = 0.792, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.16482627624180124;  // std dev = 0.415, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08366057838634154;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09845149386305517;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.02921688195728104;  // std dev = 1.002, 34.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.03408420749656027;  // std dev = 0.865, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01819456125274737;  // std dev = 2.074, 136.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.280', 'seconds']
Parameter learned model CLL:-0.108031 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [2.184, 5, 104], 'true,false,true': [0.0, 148, 0], 'true,false,false': [0.253, 54, 4], 'false,true,true': [2.6e-07, 0, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [6.18e-09, 115, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.016, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.258, 169, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.767, 34, 4], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [4.265, 70, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [0.913, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.218, 0, 3], 'true,false,false': [0.943, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.177, 0, 6], 'false,false,true,false': [0.968, 1, 15], 'false,false,false': [0.301, 311, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.865, 5, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.006, 197, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 101, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.798, 4, 77], 'true,false': [0.602, 1, 1], 'false,true,true': [0.039, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.266, 2, 39], 'false,false,true,false': [1.629, 231, 5], 'false,false,false': [0.258, 69, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.075, 149, 82], 'false,true': [0.245, 0, 22], 'false,false,true': [1.77, 2, 52], 'false,false,false,true': [0.035, 59, 0], 'false,false,false,false': [0.059, 81, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.253, 5, 121], 'true,false': [1.577, 274, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.015, 54, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.093, 0, 83], 'true,false,true': [0.049, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.157, 163, 19], 'false,false,false': [0.21, 152, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.174, 3, 78], 'false,true,true,true': [0.96, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.097, 213, 0], 'false,false,true': [1.485, 2, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.1, 118, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.792, 0, 85], 'true,true,false': [0.415, 0, 19], 'true,false,true': [0.0, 165, 0], 'true,false,false,true': [0.0, 19, 0], 'true,false,false,false': [1.002, 30, 4], 'false,true': [0.865, 1, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.074, 96, 40]}]
{'': [0.225306122448982, 0.207760924385563], 'true': [0.04376735964986345, 0.019040437364501738], 'false': [5.921189464667501e-16, 3.8616453030440226e-17], 'true,false': [-1.0802169969325848e-16, 0.06420927467300819], 'false,true': [1.8243664837083652e-15, -1.6148698540002277e-16]}
{'': [0.012000966709423126, 0.11946970553773412], 'false': [0.06651775495486033, 0.16223231730763898], 'false,false': [0.08212277881742353, 0.17240510137264622], 'false,false,false': [0.0, 0.1653285850191962], 'false,false,true': [nan, 0.08212277881742353], 'false,true': [nan, 0.06651775495486033]}
{'': [0.024782012542455822, 0.10341836663253587], 'false': [nan, 0.10341836663253597], 'false,false': [0.045812952180558184, 0.09087636754506391], 'false,false,true': [0.005201276396420429, 0.058593750000000056], 'true': [0.012255783285809438, 0.09359860500350096], 'true,false': [0.01581583909613271, 0.09876543209876533], 'true,true': [0.012255783285809438, nan]}
{'': [0.050995636506515604, 0.00014205773201722354], 'false': [3.174964816209138e-05, -4.3969228698026e-18], 'false,true': [nan, 3.174964816209138e-05], 'false,false': [nan, -4.3969228698026e-18], 'false,false,false': [nan, -4.3969228698026e-18]}
{'': [0.04455760671840676, 0.06945067680093174], 'false': [0.0017914063748365777, 0.06726309784075767], 'false,false': [0.06745962086971238, 0.0665181620884383], 'false,false,true': [0.03907368080677573, 0.011244182276205342], 'true': [0.03990598941681926, 0.18106897733636104], 'false,true': [7.760396266569547e-05, 0.0]}
{'': [0.040924481857696246, 0.07244400407543278], 'false': [0.002723715131827302, 0.07473242555630272], 'false,false': [0.058005268486603916, 3.350474154030543e-05], 'true': [nan, 0.04092448185769631], 'true,false': [nan, 0.040924481857696246], 'false,false,false': [2.0289072932437943e-05, 4.308473502645927e-05]}
{'': [0.04417258734898376, 0.049516785620421805], 'false': [nan, 0.04951678562042178], 'false,false': [nan, 0.049516785620421805], 'false,false,false': [nan, 0.049516785620421805], 'true': [0.04026805732517299, 0.008853043979294038]}
{'': [0.00039438530436322844, 0.03563401957170117], 'false': [nan, 0.0356340195717013], 'false,false': [0.02474256020291543, 0.04418612089703044], 'true': [0.00010311829094288736, 0.0011830930470960732], 'true,false': [0.0011830930470960732, nan]}
{'': [0.030207409760700393, 0.03242691469445029], 'false': [0.023640574247475545, 0.04540463672046647], 'false,false': [0.05251683310886711, 8.471719346070195e-05], 'false,true': [0.024252015206393373, 4.430174142078299e-05], 'false,true,true': [0.024252015206393373, nan], 'false,false,false': [nan, 8.471719346070195e-05]}
{'': [0.021150466823715443, 0.034846271787256446], 'false': [0.08307677881089787, 0.03163887583209709], 'false,false': [nan, 0.03163887583209708], 'true': [0.007798859008170216, 0.0050382440482673], 'true,true': [0.007373620560055497, 0.009079248809089975], 'true,false': [-6.7286243916676156e-18, 0.020059130612557027], 'true,false,false': [-4.382459307730881e-18, 0.02955024481181052]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
0;false,true;follows(E, F), follows(A, F).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 23.442
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.8444503049625265;  // std dev = 0.116, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.7936328060672536;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.12243358917233295;  // std dev = 0.138, 206.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=4 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.14185106490048766;  // std dev = 7.88e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6646344014842905;  // std dev = 0.237, 67.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=63 */
%   | else return 0.743212560894685;  // std dev = 0.192, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5555632291034541;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05295637294812914;  // std dev = 2.938, 144.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=13 */
%   | | | else return -0.10047945346161603;  // std dev = 0.881, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.06180265344221385;  // std dev = 1.616, 44.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=3 */
%   | | | else return -0.028183502153421285;  // std dev = 0.843, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7580193346218546;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.10072311906794215;  // std dev = 4.632, 151.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5764553163577214;  // std dev = 0.277, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(A, D) )
%   | | | then return 0.5986844084033235;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7565703690577507;  // std dev = 0.197, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.12188978139754562;  // std dev = 0.068, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6816999135743235;  // std dev = 0.278, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.13691794701579763;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.10183081534273943;  // std dev = 1.412, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.19031093738985114;  // std dev = 1.812, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A), tweets(E, F) )
%   | | | then return 0.3631447627801377;  // std dev = 1.927, 57.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=53 */
%   | | | else return 0.22031686906635137;  // std dev = 1.598, 17.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   | | else if ( follows(D, G), follows(G, D) )
%   | | | then return 0.43113393603186473;  // std dev = 0.028, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.6152590982718517;  // std dev = 0.249, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(J, H) )
%   | | | then return 0.4205297590320998;  // std dev = 0.021, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.4783041640654481;  // std dev = 0.194, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(K, A), tweets(A, L) )
%   | | | then return 0.5207152885010846;  // std dev = 0.951, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.5866353236642344;  // std dev = 0.382, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.11569449979032823;  // std dev = 0.013, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.3481364133505008;  // std dev = 0.101, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.48546945673838365;  // std dev = 0.239, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3624121767673598;  // std dev = 0.029, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3211254444319717;  // std dev = 0.026, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.531075282553096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.399180196045809;  // std dev = 1.021, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09804049572533996;  // std dev = 0.034, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.007837275213683317;  // std dev = 2.249, 109.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=25 */
%   | | | else return 0.06296078153693262;  // std dev = 2.077, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.2704733172584327;  // std dev = 0.124, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | else return -0.0902148242310681;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.2788574670599049;  // std dev = 0.038, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.06876963560399274;  // std dev = 0.090, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2840732337561126;  // std dev = 0.067, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1393437068768412;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.21029265211359993;  // std dev = 0.988, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.41202507125414056;  // std dev = 1.098, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.11194568986824081;  // std dev = 0.021, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.19250226326683345;  // std dev = 0.160, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.07427321565776683;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.22036947433594725;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.228233278216535;  // std dev = 0.026, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(G, A) )
%   | then return -0.05193031911523444;  // std dev = 0.137, 225.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=23 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( follows(H, J), recursion_accounttype(J, B) )
%   | | | then return 0.23705651139851067;  // std dev = 0.966, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.09863610688576438;  // std dev = 0.908, 46.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.042750237526107376;  // std dev = 1.369, 35.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=14 */
%   | | | else return 0.062295209333536716;  // std dev = 1.560, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.1749765845306346;  // std dev = 0.121, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.11754329356278255;  // std dev = 0.963, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.17842447569454264;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.27605254670351537;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.22972049301454556;  // std dev = 0.059, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.037307400015274626;  // std dev = 0.912, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(I, A) )
%   | | then return -0.04981425088627836;  // std dev = 0.117, 208.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.017706158859468375;  // std dev = 1.802, 110.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=25 */
%   | | | else return 0.010355527275385492;  // std dev = 1.788, 50.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1669216831110757;  // std dev = 0.112, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(E, A) )
%   | | then return 0.2540168259452155;  // std dev = 0.271, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1792069494407588;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16497148887602725;  // std dev = 0.083, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.32273934292146267;  // std dev = 0.221, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.0750053267133719;  // std dev = 0.018, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.28356555104694225;  // std dev = 0.108, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.40812878954794374;  // std dev = 0.014, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.10542725933881611;  // std dev = 0.201, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.14430174739193613;  // std dev = 0.089, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.09256491926736068;  // std dev = 0.983, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.22794478237309698;  // std dev = 0.042, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.0643645578170985;  // std dev = 0.049, 261.000 (wgt'ed) examples reached here.  /* #neg=257 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.15437785701178697;  // std dev = 0.038, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.22972163848703153;  // std dev = 0.094, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.08918222608073267;  // std dev = 0.054, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.01911734179276196;  // std dev = 0.711, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.015022327398367497;  // std dev = 0.979, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '32.784', 'seconds']
Refined model CLL: -0.099041


******************************************
Best model found
******************************************
Results 

CLL : -0.099462 

AUC ROC : 0.99319 

AUC PR : 0.37307 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 23.442 

Total Inference Time : 38.69702911376953 

Total revision time: 91.46981006622315
Best scored revision CLL: -0.099041


Results 

CLL : -0.099462 

AUC ROC : 0.99319 

AUC PR : 0.37307 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 91.5671702003479 

Total Inference Time : 38.69702911376953 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.045
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | else return -0.0862955093449322;  // std dev = 0.229, 36.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6933253800962518;  // std dev = 1.710, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.030790170579737104;  // std dev = 0.271, 195.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08873624652607284;  // std dev = 0.992, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.12209646613897619;  // std dev = 2.930, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5567190387166391;  // std dev = 1.464, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7330249268849323;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8227111978967485;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6040520610480189;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5709942610043691;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5709942610043691;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.036203213860072754;  // std dev = 0.259, 300.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.47814227386532177;  // std dev = 2.763, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11875278704259629;  // std dev = 0.003, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13517489787798287;  // std dev = 2.36e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2817089569436366;  // std dev = 2.072, 78.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=73 */
%   | else return 0.40112500950848395;  // std dev = 0.122, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31794591413777695;  // std dev = 2.11e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6226777383901014;  // std dev = 0.103, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08308576323143467;  // std dev = 2.070, 243.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=9 */
%   | | else return -0.10621615397147989;  // std dev = 2.28e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02535085723309325;  // std dev = 3.510, 290.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2626795312472657;  // std dev = 0.117, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4865491018001991;  // std dev = 0.604, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10956942438599035;  // std dev = 0.037, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.1022527614683646;  // std dev = 0.046, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29364606453898473;  // std dev = 1.321, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else return -0.07670961299243861;  // std dev = 1.791, 247.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.036165922701111006;  // std dev = 0.635, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.2035830803602856;  // std dev = 0.076, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22704025314328297;  // std dev = 0.041, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04471070143028571;  // std dev = 0.147, 213.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=22 */
%   | | else return 0.028530268076271438;  // std dev = 0.221, 78.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14708213621935248;  // std dev = 0.209, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28348861516690227;  // std dev = 0.720, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0908763521243296;  // std dev = 0.067, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3893522357243653;  // std dev = 0.509, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09732628493762356;  // std dev = 0.002, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14636236194162178;  // std dev = 2.260, 99.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=94 */
%   | | else return 0.13539399860992285;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0833536904723613;  // std dev = 7.15e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08590936899167173;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.06912801233349647;  // std dev = 0.761, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13496842647428348;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02497570403390858;  // std dev = 1.448, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.295', 'seconds']
Parameter learned model CLL:-0.108184 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 175, 0], 'true,false,false': [0.229, 34, 2], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.97e-09, 45, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.71, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.271, 173, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.992, 19, 1], 'false,false,false,true': [0.894, 1, 4], 'false,false,false,false': [2.93, 41, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.464, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.078, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false': [0.259, 268, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.763, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.003, 188, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.36e-08, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.072, 5, 73], 'true,false': [0.122, 0, 4], 'false,true,true': [2.11e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.103, 0, 23], 'false,false,true,false': [2.07, 234, 9], 'false,false,false': [2.28e-09, 14, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.51, 199, 91], 'false,true': [0.117, 0, 13], 'false,false,true': [0.604, 0, 22], 'false,false,false,true': [0.037, 40, 0], 'false,false,false,false': [0.046, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.321, 1, 107], 'true,false': [1.791, 236, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.635, 11, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.076, 0, 80], 'true,false,true': [0.041, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.147, 191, 22], 'false,false,false': [0.221, 56, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.209, 4, 77], 'false,true,true,true': [0.72, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.067, 211, 0], 'false,false,true': [0.509, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.002, 47, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [2.26, 5, 94], 'true,true,false': [0.013, 0, 9], 'true,false,true': [7.15e-08, 178, 0], 'true,false,false,true': [0.0, 25, 0], 'true,false,false,false': [0.761, 14, 2], 'false,true': [0.033, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.448, 42, 17]}]
{'': [0.22116411534354072, 0.21694214876033072], 'true': [0.03598567560485849, 0.009388827744210437], 'false': [0.0, 4.9343245538895844e-17], 'true,false': [-1.9032394707859825e-16, 0.05246913580246913], 'false,true': [0.0, nan]}
{'': [0.034398226735636014, 0.09780521288495347], 'false': [0.07323792105803856, 0.14438362678142677], 'false,false': [0.04915627668336904, 0.1604594734939027], 'false,false,false': [0.16000000000000006, 0.14796666762155097], 'false,true': [nan, 0.07323792105803856], 'false,false,true': [nan, 0.04915627668336904]}
{'': [0.029371498534243715, 0.0821165790697124], 'false': [nan, 0.08211657906971244], 'false,false': [1.5673736818237505e-16, 0.06699789873164413], 'true': [0.029774099717290607, 0.011649355623820487], 'true,true': [0.029761823863553923, 0.0], 'true,false': [0.0030735214531738553, 0.0], 'false,false,true': [4.9343245538895844e-17, 0.0]}
{'': [0.058283702538456994, 4.607455510161261e-05], 'false': [1.1554993702212622e-05, 1.5419764230904953e-17], 'false,true': [nan, 1.155499370221026e-05], 'false,false': [nan, 1.5419764230904953e-17], 'false,false,false': [nan, 1.5419764230904953e-17]}
{'': [0.05320562407437917, 0.056407159495318285], 'false': [2.6122894697062506e-17, 0.0530499785729842], 'true': [0.055048316724379376, 0.0037085429897000532], 'false,false': [0.05548797904923239, 5.9476233462061954e-18], 'false,false,true': [0.00045884974652171917, 0.017627517140731044], 'false,true': [2.6122894697062506e-17, nan]}
{'': [0.042485399182453976, 0.06181109329744344], 'false': [0.0010593142219483052, 0.06299890449079108], 'false,false': [0.01657832924973469, 5.6721393838025934e-05], 'true': [nan, 0.04248539918245401], 'true,false': [nan, 0.042485399182453976], 'false,false,false': [3.3839211383310255e-05, 5.2836798167667234e-05]}
{'': [0.04298664801735049, 0.021194411561569523], 'true': [0.016153184115981392, 0.012990936908927928], 'false': [nan, 0.021194411561569523], 'false,false': [nan, 0.021194411561569523], 'false,false,false': [nan, 0.021194411561569523]}
{'': [0.00010455320179276587, 0.02987004172874396], 'false': [nan, 0.029870041728743735], 'false,false': [0.021483892514260555, 0.04884427777641344], 'true': [7.235575576364784e-05, 0.0008556325503025694], 'true,false': [0.0008556325503025694, nan]}
{'': [0.043728307677385045, 0.025752410749614676], 'false': [0.01817507019039003, 0.05024367305332725], 'false,false': [0.015211276059632114, 9.523837413976867e-08], 'false,true': [0.016183144166953947, 2.1310892899183794e-05], 'false,true,true': [0.016183144166953947, nan], 'false,false,false': [nan, 9.523837413976867e-08]}
{'': [0.028899266417108122, 0.03400573614194282], 'false': [0.0002643319015625846, 0.03552513665498352], 'false,false': [nan, 0.03552513665498352], 'true': [0.0472824559251996, 0.0026563553535171747], 'true,true': [0.05156916569731144, 1.836885397450848e-05], 'true,false': [2.8691156816155733e-17, 0.0141758649149712], 'true,false,false': [0.0, 0.03615393803285219]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 26.1
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8364098046647294;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.024815601766178853;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.6817132209614597;  // std dev = 0.202, 71.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=68 */
%   | else if ( tweets(A, E), tweets(C, E) )
%   | | then if ( follows(A, C) )
%   | | | then return 0.3905067125912182;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6083623010998434;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G) )
%   | | then return 0.7359987129282407;  // std dev = 0.126, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return -0.06416226890405738;  // std dev = 0.221, 203.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.08093856324204948;  // std dev = 2.091, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.2202036549558862;  // std dev = 1.948, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5280726113662877;  // std dev = 0.195, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.6159463602843243;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7438638280751627;  // std dev = 0.007, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.37714781907832357;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5731115070884171;  // std dev = 0.009, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7322392278246388;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.1198100431698695;  // std dev = 0.069, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1566895311332138;  // std dev = 1.913, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return 0.08774926500565282;  // std dev = 2.084, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(A, F) )
%   | | then if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.43921323276830554;  // std dev = 0.074, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.3707608174673823;  // std dev = 1.377, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0.3482038408833167;  // std dev = 0.952, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.17603375960566758;  // std dev = 0.858, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.4613609801302167;  // std dev = 0.171, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.608349464850607;  // std dev = 0.215, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.5526387309225748;  // std dev = 0.949, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(J, A) )
%   | then return -0.10770816772004224;  // std dev = 0.059, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return -0.1591048603260466;  // std dev = 0.032, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then return 0.32250603448607595;  // std dev = 0.133, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | else if ( follows(F, D), follows(A, F) )
%   | | | then return 0.007104087093646072;  // std dev = 0.829, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2836233957701072;  // std dev = 0.706, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.10215669978475017;  // std dev = 1.177, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.36776436137719387;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3587471446090545;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then if ( follows(A, J), follows(J, A) )
%   | | then return 0.16876164887055442;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.3536234920347045;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.037693020566605964;  // std dev = 0.186, 278.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=32 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.2428940958397157;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.2897013571783853;  // std dev = 0.121, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.1410212583812692;  // std dev = 0.869, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.40083773818426477;  // std dev = 0.197, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.0935343349687265;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else return -0.04383675962150213;  // std dev = 0.147, 48.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2888624334218625;  // std dev = 0.040, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4837140777006189;  // std dev = 0.091, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.11804314081191164;  // std dev = 0.019, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.2294097491434695;  // std dev = 0.022, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.17766184106164445;  // std dev = 0.249, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07783448682843956;  // std dev = 0.059, 150.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.314898601854506;  // std dev = 0.328, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.08781652533670375;  // std dev = 0.028, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.35867745334399886;  // std dev = 0.326, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11721581076679151;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1358564078315717;  // std dev = 0.737, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.06450488450342606;  // std dev = 0.991, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), follows(F, A) )
%   | | | then return 0.1534277523081334;  // std dev = 1.394, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.04186817518468463;  // std dev = 0.925, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.19972032818386862;  // std dev = 0.023, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.28837806747997663;  // std dev = 0.024, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04810372400140654;  // std dev = 0.104, 242.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=23 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.21207278944805333;  // std dev = 1.090, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.1127933588401062;  // std dev = 0.076, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.16312473167934508;  // std dev = 0.491, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.08107205701645402;  // std dev = 0.934, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16713486048697454;  // std dev = 0.014, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.062232587763520905;  // std dev = 0.335, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return 0.07194898200836038;  // std dev = 0.311, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.16817253408237645;  // std dev = 0.132, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.11751880278651944;  // std dev = 0.990, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.31495155576993505;  // std dev = 0.187, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07761961614169499;  // std dev = 0.040, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3227313813977448;  // std dev = 0.036, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11572883992680895;  // std dev = 0.020, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.09913460035516149;  // std dev = 1.902, 76.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=72 */
%   | | | else return 0.22849316220876362;  // std dev = 0.234, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.1485387534356158;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07231061790773727;  // std dev = 0.054, 228.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.07974262083991532;  // std dev = 0.916, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.23081911058225413;  // std dev = 0.026, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09044994017213298;  // std dev = 0.038, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.031607749601548996;  // std dev = 0.568, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return -0.008268163679808408;  // std dev = 0.819, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '39.838', 'seconds']
Refined model CLL: -0.103439


******************************************
Best model found
******************************************
Results 

CLL : -0.101923 

AUC ROC : 0.994497 

AUC PR : 0.35008 

Precision : 0.338395 

Recall : 1.0 

F1 : 0.505673 

Total Learning Time : 26.1 

Total Inference Time : 34.29537105560303 

Total revision time: 85.13306309700013
Best scored revision CLL: -0.103439


Results 

CLL : -0.101923 

AUC ROC : 0.994497 

AUC PR : 0.35008 

Precision : 0.338395 

Recall : 1.0 

F1 : 0.505673 

Total Learning Time : 112.90294768333436 

Total Inference Time : 34.29537105560303 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.92
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else return -0.06185106490048773;  // std dev = 0.271, 50.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7149458943692801;  // std dev = 1.017, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.043525625787982525;  // std dev = 0.252, 195.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0601773140531175;  // std dev = 1.788, 50.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6083623010998435;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.105668136909893;  // std dev = 4.556, 146.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5445239927058815;  // std dev = 1.458, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7308151589821138;  // std dev = 0.223, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5826080038940759;  // std dev = 3.65e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.594104066269778;  // std dev = 0.181, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.561135843565401;  // std dev = 6.66e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.005322064453004052;  // std dev = 0.308, 357.000 (wgt'ed) examples reached here.  /* #neg=300 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5166602186068364;  // std dev = 2.515, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12372392639076826;  // std dev = 0.005, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13813575176532925;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31069619394962955;  // std dev = 1.126, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.047207915808452544;  // std dev = 0.605, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.210735699987408;  // std dev = 1.346, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.5090342380856308;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5670403501086917;  // std dev = 1.009, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.09951457151072778;  // std dev = 1.647, 261.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=5 */
%   | | else return 0.0370052906208078;  // std dev = 0.291, 59.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.031613959094464204;  // std dev = 3.085, 243.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27207604135545965;  // std dev = 0.236, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4665630508269022;  // std dev = 0.867, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11155677305007555;  // std dev = 0.024, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | | else return -0.12004957454204898;  // std dev = 0.054, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27224535832748936;  // std dev = 1.614, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.08463271664597943;  // std dev = 1.564, 239.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04348745729973865;  // std dev = 1.973, 80.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17046987463555555;  // std dev = 1.394, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.29956823743241084;  // std dev = 0.048, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04640022566467569;  // std dev = 0.145, 189.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=19 */
%   | | else return 0.006093040634638004;  // std dev = 0.204, 203.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12183454416817913;  // std dev = 0.243, 83.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2952521162608342;  // std dev = 0.889, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09463561860494421;  // std dev = 0.117, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.29324445803220545;  // std dev = 1.487, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09924335937053708;  // std dev = 0.096, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17185687233671212;  // std dev = 1.422, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.16697212157964328;  // std dev = 0.370, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08337516937169379;  // std dev = 3.94e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10034328491521957;  // std dev = 0.036, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.033165949306727394;  // std dev = 1.142, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1252954475006639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015119317690324836;  // std dev = 2.137, 135.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.891', 'seconds']
Parameter learned model CLL:-0.107525 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 169, 0], 'true,false,false': [0.271, 46, 4], 'false,true,true': [2.6e-07, 0, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.33e-09, 81, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.017, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.252, 176, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.788, 46, 4], 'false,false,false,true': [0.943, 1, 8], 'false,false,false,false': [4.556, 106, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.458, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.223, 0, 3], 'true,false,false': [3.65e-08, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.181, 0, 6], 'false,false,true,false': [6.66e-08, 0, 15], 'false,false,false': [0.308, 300, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.515, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.005, 213, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 98, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.126, 1, 77], 'true,false': [0.605, 1, 1], 'false,true,true': [1.346, 2, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.009, 1, 39], 'false,false,true,false': [1.647, 256, 5], 'false,false,false': [0.291, 46, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.085, 161, 82], 'false,true': [0.236, 0, 22], 'false,false,true': [0.867, 0, 52], 'false,false,false,true': [0.024, 67, 0], 'false,false,false,false': [0.054, 66, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.614, 2, 121], 'true,false': [1.564, 232, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.973, 52, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [1.394, 2, 83], 'true,false,true': [0.048, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.145, 170, 19], 'false,false,false': [0.204, 151, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.243, 5, 78], 'false,true,true,true': [0.889, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.117, 212, 0], 'false,false,true': [1.487, 2, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.096, 99, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.422, 2, 85], 'true,true,false': [0.37, 0, 19], 'true,false,true': [3.94e-08, 171, 0], 'true,false,false,true': [0.036, 29, 0], 'true,false,false,false': [1.142, 21, 4], 'false,true': [0.0, 0, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.137, 95, 40]}]
{'': [0.22187928994083064, 0.23363980530016282], 'false': [5.921189464667501e-16, 7.401486830834377e-17], 'true': [0.01851192595229848, 0.017931235795750608], 'true,false': [-1.708035422500241e-16, 0.07359999999999985], 'false,true': [1.8243664837083652e-15, -1.6148698540002277e-16]}
{'': [0.012029249047501986, 0.10633127227825129], 'false': [0.06359063554497249, 0.13864486046741278], 'false,false': [0.06390762550798876, 0.1534760075310738], 'false,false,false': [0.09876543209876533, 0.1421755914146918], 'false,false,true': [nan, 0.06390762550798876], 'false,true': [nan, 0.06359063554497249]}
{'': [0.028534519464618224, 0.10624185946658772], 'false': [nan, 0.10624185946658758], 'false,false': [0.0017745366665887932, 0.09463762660188524], 'true': [0.030822435396241372, 0.008867544960049045], 'true,true': [0.030822435396241372, nan], 'true,false': [0.01653952365160542, 1.6653345369377348e-16], 'false,false,true': [0.005434518541426921, 2.9605947323337506e-16]}
{'': [0.039528520570314196, 6.070144142619668e-05], 'false': [2.3180705622586503e-05, -1.3594567648471304e-17], 'false,true': [nan, 2.3180705622586503e-05], 'false,false': [nan, -1.3594567648471304e-17], 'false,false,false': [nan, -1.3594567648471304e-17]}
{'': [0.022099649252025965, 0.07119523160888527], 'false': [0.08248648907130073, 0.06738530033836558], 'false,true': [0.08236709155419814, 0.0], 'false,false': [0.06358569424373094, 0.0848480534309838], 'false,false,true': [0.025452300788198913, 0.01038730595817551], 'true': [0.016240854337919216, 0.18290223000233083]}
{'': [0.03916907220360407, 0.06994991296794195], 'false': [0.0025381958229044673, 0.07262590867323908], 'false,false': [0.014472148737703049, 4.440286474252465e-05], 'true': [nan, 0.03916907220360355], 'true,false': [nan, 0.03916907220360407], 'false,false,false': [8.866099153718811e-06, 4.414307090141254e-05]}
{'': [0.04253178894200344, 0.04867030077385603], 'false': [nan, 0.04867030077385591], 'false,false': [nan, 0.04867030077385603], 'false,false,false': [nan, 0.04867030077385603], 'true': [0.02118914656489033, 0.01024073904139943]}
{'': [0.022725397329162626, 0.03236249546099514], 'false': [nan, 0.0323624954609954], 'false,false': [0.021049710723027623, 0.04156652276980424], 'true': [0.022849780501553868, 0.001155860565403427], 'true,false': [0.001155860565403427, nan]}
{'': [0.059042692884028324, 0.032528361443059914], 'false': [0.022812106283064782, 0.04795697648108341], 'false,false': [0.052620629003651484, 9.221009432000297e-05], 'false,true': [0.02081426705637737, 6.431777926573507e-05], 'false,true,true': [0.02081426705637737, nan], 'false,false,false': [nan, 9.221009432000297e-05]}
{'': [0.024383247890634525, 0.03258016833624312], 'false': [0.0, 0.03383175241447566], 'false,false': [nan, 0.03383175241447564], 'true': [0.020357048312641637, 0.006110167314810548], 'true,true': [0.023226238991710713, 0.0071995913473105015], 'true,false': [9.089545230849234e-18, 0.025307237475613892], 'true,false,false': [4.462165266902367e-05, 0.052188334086448046]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
0;false,true;follows(E, F), follows(A, F).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 33.98
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8436561814763244;  // std dev = 0.120, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( follows(F, A), follows(G, F) )
%   | | | then return -0.10263537862597792;  // std dev = 1.386, 51.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7242966526213451;  // std dev = 0.121, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(A, E), follows(F, C) )
%   | | then return 0.5528067455442878;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.7272855388125042;  // std dev = 0.121, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.7345215564669979;  // std dev = 0.202, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2571524361148121;  // std dev = 0.931, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.12686667589698714;  // std dev = 0.064, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.09009568053776831;  // std dev = 3.646, 98.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=25 */
%   | | | else return 0.1666437447190458;  // std dev = 2.716, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5428614370507614;  // std dev = 0.120, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.6817295201737484;  // std dev = 0.154, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.0553664367462845;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5717069510480466;  // std dev = 0.039, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.577378946033269;  // std dev = 0.243, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1132930375237632;  // std dev = 0.051, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.08792730408798058;  // std dev = 2.779, 55.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=15 */
%   | | | else return 0.17596076013819834;  // std dev = 3.328, 66.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(D, F), tweets(E, G) )
%   | | | then return 0.40320928678081425;  // std dev = 0.991, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return -0.07770737381229079;  // std dev = 1.001, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.42930625683223017;  // std dev = 0.341, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5514285797751007;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6667652800023606;  // std dev = 0.106, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(K, A) )
%   | then return -0.10233390664637819;  // std dev = 0.040, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return -0.15554126098328086;  // std dev = 0.073, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3320892597263211;  // std dev = 0.024, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then return 0.03666377819355033;  // std dev = 0.451, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.36096228593204827;  // std dev = 0.064, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3229001162432322;  // std dev = 0.017, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.43194825720443053;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.2802403318133948;  // std dev = 1.025, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09386837837818127;  // std dev = 0.058, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06178279650225981;  // std dev = 2.704, 83.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=25 */
%   | | | else return 0.10264351510594534;  // std dev = 1.966, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.26866836047886894;  // std dev = 0.024, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return -0.07668720448280453;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2549830708451771;  // std dev = 2.36e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, G) )
%   | | then return -0.052354771493768076;  // std dev = 0.100, 147.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=14 */
%   | | else return -0.07131195053058419;  // std dev = 0.066, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26193348768429553;  // std dev = 0.029, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.15065223601542013;  // std dev = 0.924, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.4503023091630706;  // std dev = 0.601, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return -0.1270684304513377;  // std dev = 0.028, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.21572934317199113;  // std dev = 0.024, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else return 0.27623706945205617;  // std dev = 0.148, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(G, A), follows(G, E) )
%   | | | then return 0.21076672233166965;  // std dev = 0.095, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.24647019258286795;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.040179183346721326;  // std dev = 0.875, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.2771433243439502;  // std dev = 0.170, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.0804862900862389;  // std dev = 0.036, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.02834813951602896;  // std dev = 1.861, 63.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=19 */
%   | | | else return -0.012273843714065114;  // std dev = 2.042, 86.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.16058058512376033;  // std dev = 0.999, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return 0.17948282570126523;  // std dev = 0.086, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.19109145505407188;  // std dev = 0.023, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.23601451829452413;  // std dev = 0.010, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04744809830951178;  // std dev = 0.103, 232.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=23 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return -0.010419861536433022;  // std dev = 1.412, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.009356058992419867;  // std dev = 2.151, 72.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=21 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.01579359520875327;  // std dev = 0.802, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.05030558243282492;  // std dev = 1.103, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.1332156426170586;  // std dev = 0.988, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.20049219579169134;  // std dev = 0.082, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G), recursion_accounttype(D, B) )
%   | | | then return -0.06907161794222184;  // std dev = 1.246, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.10216687775339861;  // std dev = 0.925, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.17677673041624606;  // std dev = 0.056, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(H, A) )
%   | then return -0.03083623386398685;  // std dev = 0.097, 248.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=38 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.3268669760929502;  // std dev = 0.967, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.37342774937075135;  // std dev = 0.041, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.13231675250298697;  // std dev = 0.097, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1637834475510848;  // std dev = 0.036, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.07138457555963619;  // std dev = 0.023, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else if ( follows(E, C), follows(E, A) )
%   | | | then return -0.06755699419718506;  // std dev = 1.05e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.017563487202210085;  // std dev = 0.636, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.13669681524857813;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3061966102957536;  // std dev = 0.049, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.11233624647841997;  // std dev = 0.022, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.07108351725938411;  // std dev = 0.968, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return -0.019321746043136134;  // std dev = 1.172, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.737', 'seconds']
Refined model CLL: -0.104161


******************************************
Best model found
******************************************
Results 

CLL : -0.103205 

AUC ROC : 0.992583 

AUC PR : 0.335167 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 33.98 

Total Inference Time : 27.965665578842163 

Total revision time: 90.75870337486268
Best scored revision CLL: -0.104161


Results 

CLL : -0.103205 

AUC ROC : 0.992583 

AUC PR : 0.335167 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 118.5285879611969 

Total Inference Time : 27.965665578842163 

