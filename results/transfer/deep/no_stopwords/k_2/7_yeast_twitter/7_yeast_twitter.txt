Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.488
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else return -0.07042249347191638;  // std dev = 0.258, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.28672036367094095;  // std dev = 0.495, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7165893903699841;  // std dev = 1.005, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03175112964520567;  // std dev = 0.269, 197.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09901008546647395;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.744491744227212;  // std dev = 0.087, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12665936451852242;  // std dev = 3.161, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.527117238151516;  // std dev = 1.937, 74.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=70 */
%   | | else return 0.7332129438649404;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8188802528927108;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.4028116327231002;  // std dev = 0.813, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5652863435247415;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4541752324136304;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04584356140673519;  // std dev = 3.676, 221.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=21 */
%   | | | else return 0.025760205815124452;  // std dev = 2.775, 62.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4979159362883805;  // std dev = 2.507, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11753537403170766;  // std dev = 0.036, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | | else return -0.12481995607060653;  // std dev = 0.000763, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15425737048296384;  // std dev = 0.228, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.26486509132769154;  // std dev = 2.331, 79.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=73 */
%   | else return 0.06079915350684686;  // std dev = 1.269, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2664757176953656;  // std dev = 0.961, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6326796423902263;  // std dev = 0.158, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08917925299690234;  // std dev = 2.298, 261.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=9 */
%   | | else return -0.10594838049784325;  // std dev = 2.63e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.025821253226321977;  // std dev = 3.440, 293.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.28382506368399435;  // std dev = 0.171, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45473625371317516;  // std dev = 1.497, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1251421650596729;  // std dev = 0.134, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.1146077051599107;  // std dev = 0.171, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.279864183319642;  // std dev = 1.970, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07620023241933975;  // std dev = 2.060, 244.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.015267433391339494;  // std dev = 0.860, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19628839028329292;  // std dev = 0.998, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2574485600682256;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0413918519163991;  // std dev = 0.151, 200.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.010472850405188715;  // std dev = 1.420, 55.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=13 */
%   | | | else return 0.007622335625772945;  // std dev = 1.790, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16569761632260901;  // std dev = 0.191, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2545163772695475;  // std dev = 1.268, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09008457260754522;  // std dev = 0.044, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3348999409796869;  // std dev = 1.405, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11187885764366766;  // std dev = 0.169, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1323791728843471;  // std dev = 2.535, 101.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=94 */
%   | | else return 0.15699289429210317;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08373123481678307;  // std dev = 0.028, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0795668551273966;  // std dev = 6.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.05979398380284805;  // std dev = 0.715, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.056377205496746054;  // std dev = 1.024, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.32200020494140424;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09513600782336076;  // std dev = 1.362, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.091', 'seconds']
Parameter learned model CLL:-0.110452 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 165, 0], 'true,false,false': [0.258, 26, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 18, 0], 'false,false': [0.495, 12, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.005, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.269, 175, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 28, 1], 'false,false,false,true': [0.087, 0, 4], 'false,false,false,false': [3.161, 40, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.937, 4, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.083, 0, 2], 'true,false,false': [0.813, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.676, 200, 21], 'false,false,false,false': [2.775, 51, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.507, 4, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.036, 177, 0], 'false,true,false,false': [0.000763, 44, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.228, 53, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.331, 6, 73], 'true,false': [1.269, 2, 4], 'false,true,true': [0.961, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.158, 0, 23], 'false,false,true,false': [2.298, 252, 9], 'false,false,false': [2.63e-09, 16, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.44, 202, 91], 'false,true': [0.171, 0, 13], 'false,false,true': [1.497, 2, 22], 'false,false,false,true': [0.134, 25, 0], 'false,false,false,false': [0.171, 38, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.97, 3, 107], 'true,false': [2.06, 233, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.86, 22, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.998, 1, 80], 'true,false,true': [0.078, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.151, 178, 22], 'false,false,false,true': [1.42, 42, 13], 'false,false,false,false': [1.79, 32, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.191, 3, 77], 'false,true,true,true': [1.268, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.044, 210, 0], 'false,false,true': [1.405, 3, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.169, 46, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.535, 7, 94], 'true,true,false': [0.006, 0, 9], 'true,false,true': [0.028, 180, 0], 'true,false,false,true': [6.45e-09, 14, 0], 'true,false,false,false': [0.715, 13, 2], 'false,true': [1.024, 18, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.362, 13, 8]}]
{'': [0.2275000000000023, 0.24221453287197225], 'false': [0.23999999999999952, 0.2448979591836735], 'false,true': [-1.4802973661668753e-16, -3.0839528461809902e-18], 'true': [0.03598567560485849, 0.010255308867351978], 'true,false': [-1.6417843515668981e-16, 0.06632653061224494], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.01217535305955297, 0.10059735052527384], 'false': [0.07258442449129278, 0.15312584305825735], 'false,false': [0.03329369797859694, 0.18726467854665524], 'false,false,false': [0.0018777508106269103, 0.1752436744340951], 'false,true': [nan, 0.07258442449129278], 'false,false,true': [nan, 0.03329369797859694]}
{'': [0.05745045540119862, 0.09082367721647355], 'false': [nan, 0.09082367721647364], 'false,false': [0.052469135802469195, 0.07583259254775965], 'false,false,false': [0.06112971920218337, 0.12423737372708579], 'true': [0.05060856182636864, 0.13069530550308017], 'true,false': [0.0034421572381568843, 0.13213568004052278], 'false,false,true': [0.0, 0.09876543209876545], 'true,true': [0.05072612211166192, 0.0]}
{'': [0.04836362769705491, 0.00039546255762363554], 'false': [1.4475363851642096e-05, 0.0009806617109610585], 'false,false': [nan, 0.0009806617109610585], 'false,false,false': [nan, 0.0009806617109610585], 'false,true': [nan, 1.4475363851642096e-05], 'false,true,false': [7.505469492757846e-06, 1.3216844924057725e-08]}
{'': [0.08558176821628884, 0.05934086001951258], 'true': [0.0687660683908859, 0.2682850749215373], 'false': [0.051268930860600866, 0.05468976774856606], 'false,false': [0.05746904236669778, 6.938893903907228e-18], 'false,false,true': [0.001079074046575812, 0.020238110997307764], 'false,true': [0.051268930860600866, nan]}
{'': [0.04039883633409878, 0.08712514929340937], 'false': [0.0022426344103482635, 0.09204369780497466], 'false,false': [0.09343084724907817, 0.000775915698387192], 'true': [nan, 0.04039883633409867], 'true,false': [nan, 0.04039883633409878], 'false,false,false': [0.0007196703479087274, 0.0007688815813833659]}
{'': [0.05009750660685432, 0.02467313044419015], 'true': [0.03526733854369181, 0.01738774235619279], 'false': [nan, 0.02467313044419015], 'false,false': [nan, 0.02467313044419015], 'false,false,false': [nan, 0.02467313044419015]}
{'': [0.01216914987663788, 0.03367150551262025], 'false': [nan, 0.03367150551262028], 'false,false': [0.022898985923123196, 0.054381046219863054], 'false,false,false': [0.03663604866748565, 0.07818065603229672], 'true': [0.012304068679956188, 0.003054506103477614], 'true,false': [0.003054506103477614, nan]}
{'': [0.03651626974763461, 0.032407404459888295], 'false': [0.02056602836934792, 0.07249652348902341], 'false,false': [0.09869382978165504, 0.0006181191366993346], 'false,true': [0.04876010675238089, 9.012297998242789e-06], 'false,true,true': [0.04876010675238089, nan], 'false,false,false': [nan, 0.0006181191366993346]}
{'': [0.03234809172399783, 0.05734826414530507], 'false': [0.034951173339435274, 0.08650055284613284], 'false,false': [0.0, 0.08828020115782256], 'false,false,false': [nan, 0.08828020115782256], 'true': [0.05847467293657518, 0.002490011847535321], 'true,true': [0.0636353412012787, 4.239914580345117e-06], 'true,false': [4.4804809316345565e-06, 0.017739065501251716], 'true,false,false': [2.9738116731030977e-18, 0.03410678421624161]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 23.18
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.8242506300147667;  // std dev = 1.390, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.13259180564122916;  // std dev = 0.096, 216.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6829939884371349;  // std dev = 0.200, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | else return 0.7447827818995771;  // std dev = 0.139, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.045696417195983496;  // std dev = 3.227, 168.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=16 */
%   | | | else return -0.005615784422148472;  // std dev = 0.783, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.015156431746268269;  // std dev = 0.286, 38.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.015352872749887812;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.12646398386099889;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.747906431966103;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08377375009177018;  // std dev = 3.188, 69.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5478507491688597;  // std dev = 0.186, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7225222562306985;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6648939886077885;  // std dev = 0.311, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5575788387561093;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.46532969868496604;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6640831270861683;  // std dev = 0.973, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.12198720187604814;  // std dev = 0.051, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.12488906429429476;  // std dev = 2.086, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | | else return 0.06830126124126874;  // std dev = 2.321, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), follows(A, E) )
%   | | | then return 0.4096488059190085;  // std dev = 0.986, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.4365253600239256;  // std dev = 0.091, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.24075804682265764;  // std dev = 0.715, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.6279224960348602;  // std dev = 0.174, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.21726800201332486;  // std dev = 0.942, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.5780241827561275;  // std dev = 0.014, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.7175194353733841;  // std dev = 0.249, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(I, A) )
%   | then return -0.10952562915784515;  // std dev = 0.002, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return -0.16214081062028118;  // std dev = 0.115, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.3367221332532715;  // std dev = 0.028, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 3.3929801347136007E-4;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3594760136232688;  // std dev = 0.225, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return 0.49427296685344224;  // std dev = 0.180, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3910529251374306;  // std dev = 0.153, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.3384388882369168;  // std dev = 0.021, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.4178605162190358;  // std dev = 1.017, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.0833194011429091;  // std dev = 2.125, 243.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=9 */
%   | | else return -0.09190708175063869;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.1979697739047926;  // std dev = 1.674, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.28708832512398036;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.26497823900202455;  // std dev = 0.016, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( tweets(A, G) )
%   | | then return -0.05453693558732297;  // std dev = 0.147, 166.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=17 */
%   | | else return -0.056229252673994146;  // std dev = 0.122, 56.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2856350636899062;  // std dev = 0.059, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.30377858262667723;  // std dev = 0.981, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.4880949458192126;  // std dev = 1.189, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return -0.11232202535516185;  // std dev = 0.023, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(D, A), follows(D, C) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.2031392111878767;  // std dev = 0.985, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.11014256184295637;  // std dev = 1.332, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.21473556016103967;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12745859398050438;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.3257049666461428;  // std dev = 0.079, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.21829722698017798;  // std dev = 0.015, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(G, A) )
%   | | then return -0.055728904085677454;  // std dev = 0.112, 211.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=15 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.006822766771743751;  // std dev = 1.102, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return 0.04931177703929314;  // std dev = 1.630, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.1984390266167487;  // std dev = 0.015, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(D, A) )
%   | | then return 0.29956511743028447;  // std dev = 0.035, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.17169694253955628;  // std dev = 0.064, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.17556652648463084;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.08104715294976567;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.36110582508417916;  // std dev = 0.013, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.08290947296689694;  // std dev = 0.041, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.0077268880702205615;  // std dev = 1.263, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.04698323126246213;  // std dev = 1.606, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | | then return 0.1384093730514052;  // std dev = 0.984, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.16927899398392668;  // std dev = 0.030, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.1934833793690233;  // std dev = 0.036, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(F, A) )
%   | | then if ( tweets(A, G), follows(A, F) )
%   | | | then return -0.06184405120983594;  // std dev = 1.213, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.2524736824259531;  // std dev = 0.082, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.04135065246510046;  // std dev = 0.852, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(H, A) )
%   | then return -0.04026194070834722;  // std dev = 0.115, 240.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=32 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4133919917294812;  // std dev = 0.096, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1201119059539844;  // std dev = 0.019, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.09595223425288679;  // std dev = 1.975, 76.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=72 */
%   | | | else return 0.268998933344974;  // std dev = 0.167, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.18135650303700132;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06991723901704223;  // std dev = 0.034, 179.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.0038011733153696767;  // std dev = 0.144, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else return 0.11917003461097415;  // std dev = 0.196, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.20476904970942655;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.0045631545558584286;  // std dev = 0.528, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return -0.002394277324436425;  // std dev = 1.167, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '31.912', 'seconds']
Refined model CLL: -0.106433


******************************************
Best model found
******************************************
Results 

CLL : -0.104068 

AUC ROC : 0.99406 

AUC PR : 0.348097 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 23.18 

Total Inference Time : 26.958274602890015 

Total revision time: 75.75905277061463
Best scored revision CLL: -0.106433


Results 

CLL : -0.104068 

AUC ROC : 0.99406 

AUC PR : 0.348097 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 75.83509089279175 

Total Inference Time : 26.958274602890015 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.884
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.06637936678728018;  // std dev = 0.264, 53.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0.1568502338008104;  // std dev = 0.458, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7149581321608243;  // std dev = 1.017, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.030027495864718413;  // std dev = 0.268, 169.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06642569057010703;  // std dev = 1.794, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7490958269337267;  // std dev = 0.145, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13359394216129689;  // std dev = 4.903, 135.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5587874263330317;  // std dev = 1.068, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5170055975197452;  // std dev = 0.776, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.41271451704132023;  // std dev = 1.129, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5942390941300145;  // std dev = 0.181, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5611328298551247;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01834822660428704;  // std dev = 4.576, 262.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=34 */
%   | | | else return 0.06638979395181378;  // std dev = 4.076, 101.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5251380306256087;  // std dev = 3.011, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1216533331592106;  // std dev = 0.058, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | | else return -0.13048152277090924;  // std dev = 0.011, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1638604466230728;  // std dev = 0.270, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28965059235976187;  // std dev = 1.717, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.07081802941716406;  // std dev = 0.646, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2996961341011466;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5080103420444975;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6330630638698093;  // std dev = 0.358, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10212884249052441;  // std dev = 1.796, 229.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=5 */
%   | | else return 0.01581795632591989;  // std dev = 0.311, 69.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.026352777547593773;  // std dev = 3.341, 233.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2159448743708299;  // std dev = 1.037, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4676386415389561;  // std dev = 2.078, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12382337440638673;  // std dev = 0.204, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | | else return -0.12972128791731252;  // std dev = 0.184, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24211871460265333;  // std dev = 2.764, 129.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=121 */
%   | else return -0.08781274039848676;  // std dev = 1.723, 260.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.049509280392986785;  // std dev = 2.244, 82.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18480883268511247;  // std dev = 0.996, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.33935968865665167;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.052176903201847716;  // std dev = 0.146, 201.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.0023911871723295256;  // std dev = 2.071, 116.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=28 */
%   | | | else return 0.055450213977159137;  // std dev = 2.502, 77.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11629480206413521;  // std dev = 0.271, 84.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2883844543100407;  // std dev = 0.898, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09261112643185367;  // std dev = 0.104, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4026449523743601;  // std dev = 0.796, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10924756434419006;  // std dev = 0.229, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1422426733151848;  // std dev = 2.157, 90.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=85 */
%   | | else return 0.16092725878663558;  // std dev = 0.371, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08460660316559664;  // std dev = 0.337, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09698291475571841;  // std dev = 0.023, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.017102657594111528;  // std dev = 1.036, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.021803391301305246;  // std dev = 1.296, 72.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22882609999861858;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06047508181704291;  // std dev = 1.910, 56.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.666', 'seconds']
Parameter learned model CLL:-0.112238 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 164, 0], 'true,false,false': [0.264, 49, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.77e-08, 55, 0], 'false,false': [0.458, 54, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.017, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.268, 150, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.794, 51, 4], 'false,false,false,true': [0.145, 0, 8], 'false,false,false,false': [4.903, 95, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.068, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.776, 1, 3], 'true,false,false': [1.129, 2, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.181, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.576, 228, 34], 'false,false,false,false': [4.076, 78, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.011, 5, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.058, 199, 0], 'false,true,false,false': [0.011, 36, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.27, 106, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.717, 3, 77], 'true,false': [0.646, 1, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.358, 0, 39], 'false,false,true,false': [1.796, 224, 5], 'false,false,false': [0.311, 56, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.341, 151, 82], 'false,true': [1.037, 1, 22], 'false,false,true': [2.078, 3, 52], 'false,false,false,true': [0.204, 92, 0], 'false,false,false,false': [0.184, 63, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.764, 8, 121], 'true,false': [1.723, 253, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.244, 54, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.996, 1, 83], 'true,false,true': [0.081, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.146, 182, 19], 'false,false,false,true': [2.071, 88, 28], 'false,false,false,false': [2.502, 53, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.271, 6, 78], 'false,true,true,true': [0.898, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.104, 227, 0], 'false,false,true': [0.796, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.229, 92, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.157, 5, 85], 'true,true,false': [0.371, 0, 19], 'true,false,true': [0.337, 189, 0], 'true,false,false,true': [0.023, 25, 0], 'true,false,false,false': [1.036, 25, 4], 'false,true': [1.296, 47, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.91, 35, 21]}]
{'': [0.2225651544632867, 0.21226013225688753], 'true': [0.01851192595229848, 0.018093397608783264], 'false': [0.2148437500000011, 0.2094788328554572], 'false,true': [7.105427357601002e-16, 6.055761952500853e-17], 'true,false': [-1.5705594006892458e-16, 0.06977572089711626], 'false,true,true': [0.0, 0.0]}
{'': [0.012032940544478074, 0.12557624826563332], 'false': [0.07187708774289156, 0.16327343542457445], 'false,false': [0.05852397267858041, 0.18829270364881268], 'false,false,false': [0.0026324623620238574, 0.17810080208243095], 'false,true': [nan, 0.07187708774289156], 'false,false,true': [nan, 0.05852397267858041]}
{'': [0.03909376734940174, 0.11577121176590909], 'false': [nan, 0.11577121176591093], 'false,false': [0.0017894281375328955, 0.10488515843674506], 'false,false,false': [0.07990572292138076, 0.16450065506711364], 'true': [0.01677820897747803, 0.13627192985087264], 'true,false': [0.15050887343829228, 0.12746954399665983], 'true,true': [0.01677820897747803, nan], 'false,false,true': [0.005480123671194252, -1.7763568394002506e-16]}
{'': [0.056322456562963086, 0.0005879891916981678], 'false': [2.5033642701124544e-05, 0.0006857864432046601], 'false,false': [nan, 0.0006857864432046601], 'false,false,false': [nan, 0.0006857864432046601], 'false,true': [nan, 2.5033642701113208e-05], 'false,true,false': [1.6998724339700787e-05, 3.451228707315426e-06]}
{'': [0.04218507657471418, 0.08349346492258447], 'false': [0.0019765820458730425, 0.0832049771631313], 'false,false': [0.0797231015110957, 0.09663325852199423], 'false,false,true': [0.0032786903532664104, 0.014086129038717931], 'true': [0.03686249323846574, 0.2083687118743827], 'false,true': [8.991660973078908e-06, 0.0]}
{'': [0.04790688464039323, 0.08801408729238473], 'false': [0.04676598313447696, 0.089093474251594], 'false,false': [0.07847518325559465, 0.0004956199982063643], 'true': [nan, 0.04790688464039341], 'true,false': [nan, 0.04790688464039323], 'false,false,false': [0.00045280800416041373, 0.0005374922921839764]}
{'': [0.05140196611348937, 0.06143088474310306], 'false': [nan, 0.06143088474310319], 'false,false': [nan, 0.06143088474310306], 'false,false,false': [nan, 0.06143088474310306], 'true': [0.05922081670890997, 0.011424246518859111]}
{'': [0.012152520892949582, 0.03940329834506027], 'false': [nan, 0.03940329834505988], 'false,false': [0.021281472392558436, 0.05535002885330374], 'false,false,false': [0.036981982114613565, 0.0813292984286118], 'true': [0.011808336852826092, 0.003277771103148086], 'true,false': [0.003277771103148086, nan]}
{'': [0.07322812639681439, 0.035650402278367785], 'false': [0.02091174849019773, 0.06054634004551514], 'false,false': [0.01585691232982476, 0.0005722991384193057], 'false,true': [0.021204930465974423, 4.761282686150571e-05], 'false,true,true': [0.021204930465974423, nan], 'false,false,false': [nan, 0.0005722991384193057]}
{'': [0.028012925884032914, 0.04191135780936652], 'false': [0.0233390758143856, 0.06387098903104196], 'false,false': [0.0, 0.06517478318481361], 'false,false,false': [nan, 0.0651747831848136], 'true': [0.04399994204081614, 0.005398050790808922], 'true,true': [0.05169654178040777, 0.007254105280341112], 'true,false': [0.0005999146853459059, 0.021466938846096777], 'true,false,false': [2.196214009558828e-05, 0.03699988796937483]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 25.614
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8158954139727522;  // std dev = 0.201, 71.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=68 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.1207984333215408;  // std dev = 0.144, 190.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.1273797043302816;  // std dev = 2.262, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7304503848017668;  // std dev = 0.292, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | else return -0.12777255708697152;  // std dev = 1.93e-07, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(E, B), follows(G, F) )
%   | | | then return 0.5944734122109545;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.6945529011800252;  // std dev = 1.003, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else return -0.12762094748839461;  // std dev = 0.070, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1219248619849087;  // std dev = 0.449, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.5688965072619941;  // std dev = 0.284, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else if ( tweets(A, E) )
%   | | then return 0.5819031646063983;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.25264818908211356;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5883457358951062;  // std dev = 0.195, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.552654221744059;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10946741414671653;  // std dev = 0.664, 141.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=1 */
%   | | | else return -0.017880338445021505;  // std dev = 2.529, 113.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05973994938652589;  // std dev = 2.907, 98.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=25 */
%   | | | else return 0.14882346739431943;  // std dev = 2.729, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(E, F) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.3928501626492971;  // std dev = 1.394, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | | else return 0.5743109612614256;  // std dev = 0.187, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.36325717514611117;  // std dev = 0.768, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.2058596195972382;  // std dev = 0.765, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(J, H) )
%   | | | then return 0.41347181234086067;  // std dev = 0.015, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.4709970528248506;  // std dev = 0.202, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.5510324670605441;  // std dev = 0.042, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.6770826726308639;  // std dev = 0.492, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.11501510051394656;  // std dev = 0.021, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.33002047180288596;  // std dev = 1.26e-07, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.438255984019795;  // std dev = 0.180, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.38858136359389395;  // std dev = 0.045, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31601533394432046;  // std dev = 0.026, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.532704554329802;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.37420636354128184;  // std dev = 1.004, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09683955505577156;  // std dev = 0.057, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.017842762883581834;  // std dev = 1.721, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.055945847961837734;  // std dev = 2.681, 83.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.21868495606277066;  // std dev = 0.202, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | | else return 0.26151426740022327;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.04611986778583758;  // std dev = 0.139, 168.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=19 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(A, H) )
%   | | then return 0.29324747144476765;  // std dev = 0.192, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1838336799016243;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.242303820110347;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.20894900556421514;  // std dev = 0.999, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4439240720090445;  // std dev = 0.679, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.11494931365553615;  // std dev = 0.032, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.22152560896810647;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.054858942301439735;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.21422776394468324;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.22113265675021682;  // std dev = 0.029, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2809120833653447;  // std dev = 0.201, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.08342238463716496;  // std dev = 0.055, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.25996414300846094;  // std dev = 0.037, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.008413709290649784;  // std dev = 1.477, 69.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=19 */
%   | | | else return 0.0747417408448033;  // std dev = 1.963, 53.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(C, A) )
%   | then if ( tweets(A, D) )
%   | | then return 0.16587799922375893;  // std dev = 0.152, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else if ( follows(C, E), follows(E, A) )
%   | | | then return 0.07756354533389277;  // std dev = 0.918, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.17934965272951864;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.21300972577955762;  // std dev = 0.036, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(F, A), follows(A, F) )
%   | then return -0.04967310667511167;  // std dev = 0.097, 186.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=15 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return 0.18354898626701924;  // std dev = 0.025, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.022558678780089325;  // std dev = 0.923, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.05477313770067653;  // std dev = 0.544, 51.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=3 */
%   | | | else return 0.014300511625896746;  // std dev = 2.503, 141.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=40 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.16908906618946082;  // std dev = 0.080, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( follows(A, E), tweets(A, F) )
%   | | | then return -0.12448785097770242;  // std dev = 1.178, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.16053639191757293;  // std dev = 0.103, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, G) )
%   | | then return -0.03547977442245149;  // std dev = 0.408, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return -0.08938798044679104;  // std dev = 0.728, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.19626425767232772;  // std dev = 0.159, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return -0.07392933884251457;  // std dev = 0.054, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3344865628438837;  // std dev = 0.095, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.12086241451153641;  // std dev = 0.032, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.11847677437405953;  // std dev = 0.165, 70.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=68 */
%   | | else return 0.18310141207315433;  // std dev = 0.058, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.06287404341605157;  // std dev = 0.044, 225.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.175868970400894;  // std dev = 0.068, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.011595739718438145;  // std dev = 1.078, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.006560743606059554;  // std dev = 0.525, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.11057155775960877;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.014429321673265844;  // std dev = 0.934, 45.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=12 */
%   | | | else return 0.03822509906886317;  // std dev = 1.420, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.992', 'seconds']
Refined model CLL: -0.101982


******************************************
Best model found
******************************************
Results 

CLL : -0.102198 

AUC ROC : 0.993904 

AUC PR : 0.408702 

Precision : 0.339674 

Recall : 0.992063 

F1 : 0.506073 

Total Learning Time : 25.614 

Total Inference Time : 28.418220043182373 

Total revision time: 85.42599711227417
Best scored revision CLL: -0.101982


Results 

CLL : -0.102198 

AUC ROC : 0.993904 

AUC PR : 0.408702 

Precision : 0.339674 

Recall : 0.992063 

F1 : 0.506073 

Total Learning Time : 85.5020352344513 

Total Inference Time : 28.418220043182373 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.352
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else return -0.08124500429442717;  // std dev = 0.239, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.1308762078267851;  // std dev = 0.445, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7148199119498669;  // std dev = 1.006, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03383135035502938;  // std dev = 0.266, 201.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0979500984833961;  // std dev = 0.995, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5682676333026502;  // std dev = 0.819, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.10523114194005197;  // std dev = 3.243, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5497403038056851;  // std dev = 1.468, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7318412184191296;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8205467800245939;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.4603031712820386;  // std dev = 0.779, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.563488705507493;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.45237759439638187;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04496542657910385;  // std dev = 3.672, 223.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=21 */
%   | | | else return 0.011650727989990244;  // std dev = 2.869, 68.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5102515593044634;  // std dev = 2.229, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11712412019142199;  // std dev = 0.022, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | | else return -0.12300528512564929;  // std dev = 0.000516, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14816531474635436;  // std dev = 0.130, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2939694251241345;  // std dev = 1.628, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.24561406103977576;  // std dev = 0.909, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31744055287624606;  // std dev = 0.050, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5248533585157525;  // std dev = 1.576, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | | else return -0.07874698778912367;  // std dev = 2.319, 229.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=9 */
%   | | else return -0.10514845262082623;  // std dev = 2.95e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03335180883037444;  // std dev = 3.355, 271.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26800734953207317;  // std dev = 0.141, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5610403791783167;  // std dev = 0.693, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12151669726550827;  // std dev = 0.089, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.11490352468543;  // std dev = 0.128, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2580739294995428;  // std dev = 2.283, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | else return -0.08020898516466704;  // std dev = 2.156, 265.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0031815162800391435;  // std dev = 0.716, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1749021078467142;  // std dev = 1.399, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2376095053818495;  // std dev = 0.062, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04726392337873247;  // std dev = 0.164, 206.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.0021210951320023283;  // std dev = 1.388, 59.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=13 */
%   | | | else return 0.06575282297477618;  // std dev = 1.761, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14378215127408916;  // std dev = 0.229, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23962110617952082;  // std dev = 1.559, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0902131043828571;  // std dev = 0.037, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4566278547027528;  // std dev = 0.588, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10771397958321136;  // std dev = 0.117, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16237786422811454;  // std dev = 2.011, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.052749529247858716;  // std dev = 0.948, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08400399718023686;  // std dev = 0.021, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07971342356963197;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.04039632946178647;  // std dev = 0.494, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.03544797287929242;  // std dev = 0.959, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.3088120379318193;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08728299168511068;  // std dev = 1.306, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.865', 'seconds']
Parameter learned model CLL:-0.109673 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 180, 0], 'true,false,false': [0.239, 31, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.98e-08, 32, 0], 'false,false': [0.445, 24, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.006, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.266, 179, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.995, 24, 1], 'false,false,false,true': [0.819, 1, 4], 'false,false,false,false': [3.243, 47, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.468, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.779, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.672, 202, 21], 'false,false,false,false': [2.869, 57, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.229, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.022, 168, 0], 'false,true,false,false': [0.000516, 29, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.13, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.628, 3, 73], 'true,false': [0.909, 1, 4], 'false,true,true': [0.05, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.576, 3, 23], 'false,false,true,false': [2.319, 220, 9], 'false,false,false': [2.95e-09, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.355, 180, 91], 'false,true': [0.141, 0, 13], 'false,false,true': [0.693, 0, 22], 'false,false,false,true': [0.089, 23, 0], 'false,false,false,false': [0.128, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.283, 5, 107], 'true,false': [2.156, 254, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.716, 19, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.399, 2, 80], 'true,false,true': [0.062, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.164, 184, 22], 'false,false,false,true': [1.388, 46, 13], 'false,false,false,false': [1.761, 22, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.229, 4, 77], 'false,true,true,true': [1.559, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.037, 199, 0], 'false,false,true': [0.588, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.117, 38, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.011, 4, 94], 'true,true,false': [0.948, 1, 9], 'true,false,true': [0.021, 163, 0], 'true,false,false,true': [3.73e-09, 14, 0], 'true,false,false,false': [0.494, 16, 2], 'false,true': [0.959, 21, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.306, 14, 8]}]
{'': [0.22081150932086174, 0.19834710743801678], 'true': [0.027500889996442155, 0.009301505433225164], 'false': [0.19834710743801603, 0.19834710743801665], 'false,true': [-1.4802973661668753e-16, 2.7755575615628914e-17], 'true,false': [-1.9984014443252818e-16, 0.05693296602387513], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.012186493531204724, 0.09914437897910415], 'false': [0.07101939631314043, 0.15109126699748113], 'false,false': [0.039637232545012877, 0.17656803713659722], 'false,false,false': [0.13429478136290057, 0.1643342010168603], 'false,true': [nan, 0.07101939631314043], 'false,false,true': [nan, 0.039637232545012877]}
{'': [0.037366995656413146, 0.089839258883732], 'false': [nan, 0.08983925888373198], 'false,false': [0.05246913580246915, 0.07518524263880587], 'false,false,false': [0.060453436127622405, 0.12104053886723826], 'false,false,true': [9.868649107779169e-17, 0.09876543209876552], 'true': [0.029988391265981434, 0.11420498483704199], 'true,false': [0.003369634554049261, 0.12146042276742217], 'true,true': [0.029950639945395017, 0.0]}
{'': [0.03881583576136716, 0.0002050942652712835], 'false': [6.8739791995609935e-06, 0.00042445256612707596], 'false,false': [nan, 0.00042445256612707596], 'false,false,false': [nan, 0.00042445256612707596], 'false,true': [nan, 6.8739791995609935e-06], 'false,true,false': [2.9673216881303824e-06, 9.198700035400828e-09]}
{'': [0.04305156423979679, 0.06275032669312096], 'false': [0.00014463653834873678, 0.059846514995239554], 'false,false': [0.06418657002902525, 1.057355261547768e-17], 'false,false,true': [0.09550994943280326, 0.023482486829907032], 'true': [0.03487498979100787, 0.1651415905044063], 'false,true': [0.00014463653834873678, nan]}
{'': [0.04154065837131555, 0.08890069874960012], 'false': [0.0015187246948416512, 0.09732652557866528], 'false,false': [0.021854180062379127, 0.00042401636934431385], 'true': [nan, 0.04154065837131519], 'true,false': [nan, 0.04154065837131555], 'false,false,false': [0.0003447720069833298, 0.0004575958444011143]}
{'': [0.0500511050137533, 0.018960798819183583], 'true': [0.04654984113169033, 0.01753418154904194], 'false': [nan, 0.018960798819183583], 'false,false': [nan, 0.018960798819183583], 'false,false,false': [nan, 0.018960798819183583]}
{'': [0.02344399970794783, 0.03694477161574667], 'false': [nan, 0.036944771615747066], 'false,false': [0.02673275148867368, 0.056780718182789965], 'false,false,false': [0.032667699714662504, 0.100018894863806], 'true': [0.02387477682703684, 0.0019435443507554023], 'true,false': [0.0019435443507554023, nan]}
{'': [0.05225920618109105, 0.035477717371421885], 'false': [0.023992138253933624, 0.07455768274162962], 'false,false': [0.020366129196650345, 0.0003614724721778963], 'false,true': [0.0714609312833191, 6.868090478536631e-06], 'false,true,true': [0.0714609312833191, nan], 'false,false,false': [nan, 0.0003614724721778963]}
{'': [0.029915609280918135, 0.048628158778234266], 'false': [0.02789237790785231, 0.07615308246478736], 'false,false': [0.0, 0.07748088541618782], 'false,false,false': [nan, 0.07748088541618782], 'true': [0.04677396074963105, 0.0014107951708214994], 'true,true': [0.04125747695097735, 0.08992994235242582], 'true,false': [2.7359574752702973e-06, 0.008000225487439751], 'true,false,false': [9.912705577010326e-19, 0.013546320762307022]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 27.448
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.8087662190501296;  // std dev = 1.950, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.039967116917694;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 7.45e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( tweets(A, I) )
%   | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then return 0.6819028844756068;  // std dev = 0.210, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | else return 0.7275391599182277;  // std dev = 0.013, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.7288604924647415;  // std dev = 0.129, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.5610218589498439;  // std dev = 0.922, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7329278490591179;  // std dev = 0.125, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.12616983794892264;  // std dev = 0.055, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7479064319661028;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.08295817741826028;  // std dev = 2.226, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0.14089779892385604;  // std dev = 2.353, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5736879451140697;  // std dev = 0.093, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.5520416447710854;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6368816633988608;  // std dev = 0.219, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.558457189477383;  // std dev = 0.018, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5530472539188699;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5601604194795307;  // std dev = 0.022, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11326693428467495;  // std dev = 0.060, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05838203181056732;  // std dev = 2.203, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | | else return 0.10899165424111841;  // std dev = 2.373, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.40240099343117114;  // std dev = 1.396, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | | | else return 0.3173626878573801;  // std dev = 1.592, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | else return -0.0703301965961491;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.49109417313303727;  // std dev = 0.939, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.6900837475026751;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.795536666566743;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7555639326652384;  // std dev = 0.219, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(K, A) )
%   | then return -0.1019623653215257;  // std dev = 0.003, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return -0.1668586674654559;  // std dev = 0.031, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then return 0.31871276806131643;  // std dev = 0.127, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | else return 0.35409583468004713;  // std dev = 0.137, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.15510709589812632;  // std dev = 1.306, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.03210758684614756;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3658358633350672;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3255045492528046;  // std dev = 0.006, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.06627346221950649;  // std dev = 1.746, 222.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=15 */
%   | | | else return 0.13086968359050416;  // std dev = 2.429, 46.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=17 */
%   | | else return -0.09251970509157158;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.24707775980718644;  // std dev = 0.987, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.2603346513718918;  // std dev = 0.024, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.3262276923027773;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.34196355457863026;  // std dev = 0.152, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.08710364155571958;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | else return -0.03930862773702614;  // std dev = 0.133, 43.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26573251612428817;  // std dev = 0.036, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.5133242672410713;  // std dev = 0.118, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.13591840610201003;  // std dev = 0.044, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.17168162363481013;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.2200596627679268;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2119881692531756;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.218814055209326;  // std dev = 0.026, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.21370470415715914;  // std dev = 0.284, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return -0.08118985154459438;  // std dev = 0.003, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18815071534079497;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.016767933665993;  // std dev = 1.407, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.010536603592485658;  // std dev = 1.523, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, G) )
%   | | | then return 0.17330959232040824;  // std dev = 0.973, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.08196365726607019;  // std dev = 0.949, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.1801754206306867;  // std dev = 0.011, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.25953347140820787;  // std dev = 0.032, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.17183782194274103;  // std dev = 0.283, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return -0.07509866058140041;  // std dev = 0.034, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.16108221989349583;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.011947920576244983;  // std dev = 1.447, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
%   | | | else return 0.004019925541225368;  // std dev = 1.544, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1660297939620176;  // std dev = 0.011, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.06527239328262241;  // std dev = 0.337, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.1835586796036835;  // std dev = 0.193, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15938029733041081;  // std dev = 0.060, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.22894340882318717;  // std dev = 0.111, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07025759026024862;  // std dev = 0.003, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.4393917975428596;  // std dev = 0.086, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.33815063247571314;  // std dev = 0.916, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.1418959474058288;  // std dev = 0.027, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.1028202665361891;  // std dev = 0.223, 96.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=91 */
%   | | else return 0.13369092840887967;  // std dev = 0.005, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.06287434556396806;  // std dev = 0.032, 218.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.13207774765601954;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.0024986411988925385;  // std dev = 0.819, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.03668267077739182;  // std dev = 0.640, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.12523250933822305;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.040139622371875114;  // std dev = 0.726, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.040967362091513984;  // std dev = 1.009, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '41.186', 'seconds']
Refined model CLL: -0.105375


******************************************
Best model found
******************************************
Results 

CLL : -0.10885 

AUC ROC : 0.994035 

AUC PR : 0.346649 

Precision : 0.336933 

Recall : 1.0 

F1 : 0.504039 

Total Learning Time : 27.448 

Total Inference Time : 35.685096979141235 

Total revision time: 88.77502493858337
Best scored revision CLL: -0.105375


Results 

CLL : -0.10885 

AUC ROC : 0.994035 

AUC PR : 0.346649 

Precision : 0.336933 

Recall : 1.0 

F1 : 0.504039 

Total Learning Time : 88.83977990150451 

Total Inference Time : 35.685096979141235 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.911
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else return -0.06021841183926325;  // std dev = 0.274, 49.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0.23519811542738034;  // std dev = 0.485, 61.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6941932885019249;  // std dev = 1.719, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03795372037586601;  // std dev = 0.260, 183.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06825706563140645;  // std dev = 1.798, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6322662789909201;  // std dev = 0.977, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.10681311522902504;  // std dev = 4.984, 146.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5561535622250907;  // std dev = 1.234, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7346656298416302;  // std dev = 0.218, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4190255626828134;  // std dev = 1.237, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6008130648945301;  // std dev = 0.177, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5684905205252085;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02159664747251872;  // std dev = 4.615, 271.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=34 */
%   | | | else return 0.059200701045888315;  // std dev = 4.074, 102.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5559822847384234;  // std dev = 2.106, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12063876151348603;  // std dev = 0.039, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | | else return -0.12991474223258112;  // std dev = 0.016, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16891983049000514;  // std dev = 0.302, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30374042573604493;  // std dev = 1.313, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.4688845625095519;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2980044639109603;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5023074270455561;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5827202969683887;  // std dev = 1.308, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return -0.1036325293465037;  // std dev = 1.790, 265.000 (wgt'ed) examples reached here.  /* #neg=260 #pos=5 */
%   | | else return 0.026151000076043165;  // std dev = 0.316, 64.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03019434976041919;  // std dev = 3.083, 243.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2501385465846477;  // std dev = 0.177, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5000362926602424;  // std dev = 1.569, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12562146365628882;  // std dev = 0.223, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | | else return -0.12910815369655898;  // std dev = 0.209, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2644802454809673;  // std dev = 2.201, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.08599380550230089;  // std dev = 1.663, 226.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06144139520071717;  // std dev = 2.118, 75.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.189796384118944;  // std dev = 0.084, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2578256499724133;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04275099115755297;  // std dev = 0.147, 177.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.004817989322945403;  // std dev = 2.053, 124.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=28 */
%   | | | else return 0.04490726452986094;  // std dev = 2.429, 77.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16779638209068876;  // std dev = 0.127, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26128214140157663;  // std dev = 1.253, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09355756560801687;  // std dev = 0.120, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39014041415336226;  // std dev = 0.737, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11817239367801906;  // std dev = 0.274, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18448223018577672;  // std dev = 0.759, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.15700836575181537;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08303047168625313;  // std dev = 0.029, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09718793756825342;  // std dev = 0.041, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.028344181049590973;  // std dev = 0.963, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 7.708762145708006E-4;  // std dev = 1.553, 83.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21024772328252228;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05313262603442724;  // std dev = 1.910, 54.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.388', 'seconds']
Parameter learned model CLL:-0.112878 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 163, 0], 'true,false,false': [0.274, 45, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.16e-08, 49, 0], 'false,false': [0.485, 38, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.719, 3, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.26, 164, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.798, 52, 4], 'false,false,false,true': [0.977, 1, 8], 'false,false,false,false': [4.984, 106, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.234, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.218, 0, 3], 'true,false,false': [1.237, 2, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.177, 0, 6], 'false,false,true,false': [5.16e-08, 0, 15], 'false,false,false,true': [4.615, 237, 34], 'false,false,false,false': [4.074, 79, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.106, 1, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.039, 162, 0], 'false,true,false,false': [0.016, 33, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.302, 93, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.313, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.308, 2, 39], 'false,false,true,false': [1.79, 260, 5], 'false,false,false': [0.316, 51, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.083, 161, 82], 'false,true': [0.177, 0, 22], 'false,false,true': [1.569, 1, 52], 'false,false,false,true': [0.223, 78, 0], 'false,false,false,false': [0.209, 70, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.201, 4, 121], 'true,false': [1.663, 219, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.118, 47, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.084, 0, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.147, 158, 19], 'false,false,false,true': [2.053, 96, 28], 'false,false,false,false': [2.429, 53, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.127, 1, 78], 'false,true,true,true': [1.253, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.12, 209, 0], 'false,false,true': [0.737, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.274, 79, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.759, 0, 85], 'true,true,false': [0.365, 0, 19], 'true,false,true': [0.029, 161, 0], 'true,false,false,true': [0.041, 27, 0], 'true,false,false,false': [0.963, 27, 4], 'false,true': [1.553, 58, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.91, 33, 21]}]
{'': [0.22393647861165122, 0.22913580246913645], 'false': [0.22370343316289376, 0.23488309594195214], 'true': [0.02725128832212642, 0.018511925952296088], 'false,true': [7.105427357601002e-16, 5.437827059388522e-17], 'true,false': [-1.5801947344358056e-16, 0.0749687630154101], 'false,true,true': [0.0, 0.0]}
{'': [0.03358274189161521, 0.1190347340763322], 'false': [0.06757674201785101, 0.15689586704400652], 'false,false': [0.05770305624603371, 0.18151647329256576], 'false,false,false': [0.1060773277422315, 0.17013515902658302], 'false,true': [nan, 0.06757674201785101], 'false,false,true': [nan, 0.05770305624603371]}
{'': [0.04113712739661229, 0.11432417530742393], 'false': [nan, 0.11432417530742398], 'false,false': [0.001705709182868022, 0.10290568495449261], 'false,false,false': [0.07860405727199016, 0.1627287572350037], 'true': [0.02205199567400093, 0.13895741231031375], 'true,false': [0.01584783077332889, 0.15289905938771167], 'true,true': [0.02205199567400093, nan], 'false,false,true': [0.0052237343725338725, 1.7763568394002506e-16]}
{'': [0.028244236560128564, 0.0008091808235397414], 'false': [2.126893252186763e-05, 0.0009838959616728785], 'false,false': [nan, 0.0009838959616728785], 'false,false,false': [nan, 0.0009838959616728785], 'false,true': [nan, 2.1268932521869907e-05], 'false,true,false': [9.437268795377932e-06, 7.869088618710428e-06]}
{'': [0.02187401676100841, 0.076940662652404], 'false': [0.0019010678002490387, 0.07594256513334945], 'false,false': [0.0707237437416406, 0.09971203833509334], 'false,false,true': [0.041716780938709536, 0.012093024275940285], 'true': [0.021809995725239093, 0.0], 'false,true': [8.516392853097354e-06, 0.0]}
{'': [0.039125354223197836, 0.08446085068176908], 'false': [0.0014305123844676243, 0.08911481757991367], 'false,false': [0.04644145257463696, 0.0006341227018476818], 'true': [nan, 0.03912535422319755], 'true,false': [nan, 0.039125354223197836], 'false,false,false': [0.0006384457829433273, 0.000622898482854084]}
{'': [0.04984130122904372, 0.05982252638574027], 'false': [nan, 0.059822526385740316], 'false,false': [nan, 0.05982252638574027], 'false,false,false': [nan, 0.05982252638574027], 'true': [0.03873823739551582, 0.012238765100150886]}
{'': [0.0001908348201455363, 0.038043750649269625], 'false': [nan, 0.03804375064926964], 'false,false': [0.021711535831374855, 0.05090545491202556], 'false,false,false': [0.03398566848142032, 0.07662751757809204], 'true': [8.43164252448734e-05, 9.226086684560597e-05], 'true,false': [9.226086684560597e-05, nan]}
{'': [0.01608608660684283, 0.0377653078017792], 'false': [0.023072408827997326, 0.06285794611628628], 'false,false': [0.01359555490017721, 0.0009498666221412882], 'false,true': [0.04023915406066498, 6.849049330329985e-05], 'false,true,true': [0.04023915406066498, nan], 'false,false,false': [nan, 0.0009498666221412882]}
{'': [0.01975622900634292, 0.044743891196413144], 'false': [0.029062262168344184, 0.06597945574802973], 'false,false': [0.0, 0.06754152665913597], 'false,false,false': [nan, 0.06754152665913597], 'true': [0.00693996213602555, 0.004658957671775373], 'true,true': [0.006784963484607305, 0.0070164624988979475], 'true,false': [5.215453235821987e-06, 0.017200339023460208], 'true,false,false': [6.110692485091198e-05, 0.029921755649217882]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 27.445
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.12518439823382174;  // std dev = 0.128, 240.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return 0.17633075328133055;  // std dev = 0.466, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then return 0.6837591264966687;  // std dev = 0.186, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | else return 0.7293599950926704;  // std dev = 0.210, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then if ( follows(G, A), follows(G, F) )
%   | | | then return 0.3961200539106921;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7248109605279701;  // std dev = 0.017, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.43722075709981906;  // std dev = 0.886, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.12153463405958947;  // std dev = 0.854, 149.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=1 */
%   | | | else return 0.03885140176040175;  // std dev = 3.143, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.12471494519995341;  // std dev = 3.573, 85.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=25 */
%   | | | else return 0.23565594226434616;  // std dev = 2.749, 36.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.550012366263415;  // std dev = 0.126, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.43885590019532383;  // std dev = 0.874, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.398386311974259;  // std dev = 1.180, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.08756864187740379;  // std dev = 0.963, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5182576066930089;  // std dev = 0.215, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7384283070680698;  // std dev = 0.153, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12141299724931176;  // std dev = 0.130, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0679787920494747;  // std dev = 3.641, 101.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=25 */
%   | | | else return 0.1173706621345397;  // std dev = 2.918, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(D, G) )
%   | | | then return 0.40596321820922;  // std dev = 0.989, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return 0.5505856476266955;  // std dev = 0.277, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(D, H), recursion_accounttype(H, B) )
%   | | | then return 0.35390103684408847;  // std dev = 1.364, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return -0.10751744090175451;  // std dev = 0.780, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(J, A) )
%   | | | then return 0.38793676792999743;  // std dev = 0.834, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.5452761704311723;  // std dev = 0.338, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.6933605347790895;  // std dev = 0.274, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(K, A) )
%   | then return -0.10880930018097101;  // std dev = 0.008, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return -0.16210228521396242;  // std dev = 0.245, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then return 0.3349016786442086;  // std dev = 0.109, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0.4270913394221121;  // std dev = 0.093, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.0026699055426190332;  // std dev = 0.737, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.32740344386764325;  // std dev = 0.059, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.4960516474907236;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.44436647999765705;  // std dev = 0.237, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.0981457217795016;  // std dev = 0.099, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07680315879532461;  // std dev = 2.687, 79.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=25 */
%   | | | else return 0.006310856270303592;  // std dev = 2.453, 63.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26343533609857916;  // std dev = 0.043, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.12350256657183507;  // std dev = 0.887, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.05186575809344024;  // std dev = 1.413, 144.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=13 */
%   | | | else return -0.08091854434579068;  // std dev = 0.404, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.31306908681058526;  // std dev = 0.259, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.26112685312999;  // std dev = 0.039, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.15466587833759868;  // std dev = 1.338, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.4872683886300301;  // std dev = 1.252, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.12635025087713964;  // std dev = 0.031, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.18449873034655073;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return -0.11853157268375243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.20974103242091316;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.22314743756450148;  // std dev = 0.040, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then return -0.04917953498498347;  // std dev = 0.131, 238.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=23 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.27364368978387393;  // std dev = 0.148, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.08257542895670827;  // std dev = 0.585, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.01730455863936271;  // std dev = 2.301, 103.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=29 */
%   | | | else return -0.007981212552918015;  // std dev = 1.977, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.16303312169248593;  // std dev = 0.994, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.17823647807710974;  // std dev = 0.071, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.18218719556136767;  // std dev = 0.037, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.008210092551431125;  // std dev = 0.822, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.27147831885965484;  // std dev = 0.081, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3413850468605646;  // std dev = 0.141, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.0806819838976736;  // std dev = 0.089, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.007350764497724409;  // std dev = 2.361, 122.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=29 */
%   | | | else return 0.1213677681298334;  // std dev = 1.561, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.13581102709244064;  // std dev = 1.344, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | | else return -0.22669897104294057;  // std dev = 1.040, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.347431415833346;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.1571305602756856;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.23104110745313616;  // std dev = 0.098, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2074078538972536;  // std dev = 0.062, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07494762987680437;  // std dev = 0.088, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.39250482547398535;  // std dev = 0.049, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.1361455469581656;  // std dev = 0.023, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.13239248986268415;  // std dev = 0.156, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else return -0.0624622520280944;  // std dev = 0.052, 220.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.19559366427418107;  // std dev = 0.978, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.11036693954216031;  // std dev = 7.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.008550150616861993;  // std dev = 0.464, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.035867758462138;  // std dev = 0.658, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2087530543641799;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.009457250820240598;  // std dev = 1.193, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | | | else return 0.005659449613771858;  // std dev = 1.329, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.612', 'seconds']
Refined model CLL: -0.10529


******************************************
Best model found
******************************************
Results 

CLL : -0.101759 

AUC ROC : 0.993576 

AUC PR : 0.401753 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 27.445 

Total Inference Time : 27.539222955703735 

Total revision time: 84.8211608467102
Best scored revision CLL: -0.10529


Results 

CLL : -0.101759 

AUC ROC : 0.993576 

AUC PR : 0.401753 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 84.88591580963134 

Total Inference Time : 27.539222955703735 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.449
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | else return -0.07288554765910848;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.21814893509951236;  // std dev = 0.480, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7250515798793623;  // std dev = 0.143, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.032547029277241256;  // std dev = 0.265, 201.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09987486021250373;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5726268547014802;  // std dev = 0.835, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.12262625099848742;  // std dev = 3.218, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5733538092602659;  // std dev = 0.401, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7297679777392235;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8185111796009539;  // std dev = 0.084, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6405091952063066;  // std dev = 0.107, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5586899809653638;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.44757886985425277;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03431825021076907;  // std dev = 3.665, 197.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=21 */
%   | | | else return 0.030407902325740865;  // std dev = 2.797, 60.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4879992434749294;  // std dev = 2.573, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11844895270105346;  // std dev = 0.025, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | | else return -0.12521542567764335;  // std dev = 0.000177, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15946053834332738;  // std dev = 0.207, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3136147769374505;  // std dev = 0.994, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.20925016328730028;  // std dev = 0.983, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31908085998921676;  // std dev = 0.050, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5540216101338818;  // std dev = 1.403, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.08279089071662504;  // std dev = 2.322, 232.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=9 */
%   | | else return -0.10664031900346038;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03255010592579014;  // std dev = 3.301, 267.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.19807667610202098;  // std dev = 0.979, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5114116936666999;  // std dev = 1.170, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11924077296462739;  // std dev = 0.131, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.11908333009605782;  // std dev = 0.181, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2595663464077044;  // std dev = 2.180, 111.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=107 */
%   | else return -0.07586091902472175;  // std dev = 2.059, 235.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.033205381279093546;  // std dev = 0.702, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17100176435224296;  // std dev = 1.404, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.24946236216747936;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04745143176672325;  // std dev = 0.167, 198.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.013916144020235608;  // std dev = 1.436, 54.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=13 */
%   | | | else return 0.050651453765429094;  // std dev = 1.725, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15712966094820086;  // std dev = 0.175, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2972485547374895;  // std dev = 0.723, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09171627219218029;  // std dev = 0.041, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4623306538850964;  // std dev = 0.565, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11709112019054808;  // std dev = 0.150, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1696586957932862;  // std dev = 1.684, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.1520552803597617;  // std dev = 0.000248, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0847429381291591;  // std dev = 0.026, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0834900082115489;  // std dev = 1.29e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.07126626077748374;  // std dev = 0.775, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.05081913729303409;  // std dev = 0.981, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.27450866912340477;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.059963973734662314;  // std dev = 1.329, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.720', 'seconds']
Parameter learned model CLL:-0.111845 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 175, 0], 'true,false,false': [0.253, 27, 2], 'false,true,true,true': [0.961, 1, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.83e-08, 25, 0], 'false,false': [0.48, 16, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.143, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.265, 179, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 29, 1], 'false,false,false,true': [0.835, 1, 4], 'false,false,false,false': [3.218, 42, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.401, 0, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.084, 0, 2], 'true,false,false': [0.107, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.665, 176, 21], 'false,false,false,false': [2.797, 49, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.573, 4, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.025, 189, 0], 'false,true,false,false': [0.000177, 34, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.207, 53, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.994, 1, 73], 'true,false': [0.983, 1, 4], 'false,true,true': [0.05, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.403, 2, 23], 'false,false,true,false': [2.322, 223, 9], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.301, 176, 91], 'false,true': [0.979, 1, 13], 'false,false,true': [1.17, 1, 22], 'false,false,false,true': [0.131, 31, 0], 'false,false,false,false': [0.181, 43, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.18, 4, 107], 'true,false': [2.059, 224, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.702, 13, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.404, 2, 80], 'true,false,true': [0.078, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.167, 176, 22], 'false,false,false,true': [1.436, 41, 13], 'false,false,false,false': [1.725, 24, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.175, 3, 77], 'false,true,true,true': [0.723, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.041, 211, 0], 'false,false,true': [0.565, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.15, 41, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.684, 2, 94], 'true,true,false': [0.000248, 0, 9], 'true,false,true': [0.026, 193, 0], 'true,false,false,true': [1.29e-08, 24, 0], 'true,false,false,false': [0.775, 18, 2], 'false,true': [0.981, 18, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.329, 16, 8]}]
{'': [0.22433782637383573, 0.22222222222222235], 'true': [0.01868480725623786, 0.009707804690503488], 'false': [0.21606648199445933, 0.23040000000000005], 'false,true': [0.07100591715976314, 1.3322676295501878e-17], 'false,true,true': [0.07100591715976314, nan], 'true,false': [-1.9032394707859825e-16, 0.06420927467300835]}
{'': [0.00024802829419110276, 0.09888472433190082], 'false': [0.0702165399554402, 0.15222400477828574], 'false,false': [0.03222222222222227, 0.18728739138633335], 'false,false,false': [0.1394179674694458, 0.17552376727885238], 'false,true': [nan, 0.0702165399554402], 'false,false,true': [nan, 0.03222222222222227]}
{'': [0.004296249409343356, 0.09811800058124584], 'false': [nan, 0.09811800058124587], 'false,false': [0.052469135802469445, 0.0834565362983238], 'false,false,false': [0.06818260060878521, 0.13039457116391975], 'false,false,true': [9.868649107779169e-17, 0.09876543209876543], 'true': [0.00260105556022789, 0.010112613099863665], 'true,false': [0.003527899028636483, 0.0028434013193331387], 'true,true': [0.0022936305094650626, 0.0]}
{'': [0.05092803641906817, 0.0004110074342707388], 'false': [8.802765705488384e-06, 0.000811846131704827], 'false,false': [nan, 0.000811846131704827], 'false,false,false': [nan, 0.000811846131704827], 'false,true': [nan, 8.802765705488384e-06], 'false,true,false': [3.4054700642883216e-06, 9.196808804708379e-10]}
{'': [0.025381171721801318, 0.06370771399738338], 'false': [0.0001454310379022171, 0.06068800326158791], 'false,false': [0.06424568149281219, 0.0], 'false,false,true': [0.07871639709837798, 0.023237877874223822], 'true': [0.013360899302464535, 0.19307859629895277], 'false,true': [0.0001454310379022171, nan]}
{'': [0.04081744215435953, 0.0873774267694834], 'false': [0.06851881214569908, 0.08655172043087664], 'false,false': [0.05952384761123393, 0.0006742917265774929], 'true': [nan, 0.04081744215435906], 'true,false': [nan, 0.04081744215435953], 'false,false,false': [0.0005543088983302433, 0.0007607805905790208]}
{'': [0.050511658704697426, 0.023467029769264187], 'true': [0.042831271110750184, 0.01804470239387648], 'false': [nan, 0.023467029769264187], 'false,false': [nan, 0.023467029769264187], 'false,false,false': [nan, 0.023467029769264187]}
{'': [0.02367061832222959, 0.038233095699582706], 'false': [nan, 0.038233095699582255], 'false,false': [0.02772678016798781, 0.05820462672433304], 'false,false,false': [0.038162501325471124, 0.09016322179566516], 'true': [0.024027273898448446, 0.0030382472736735014], 'true,false': [0.0030382472736735014, nan]}
{'': [0.030668368722872867, 0.031598816395936855], 'false': [0.019458428596669464, 0.0754452631914778], 'false,false': [0.018747995682570122, 0.0005503851214714116], 'false,true': [0.01633907153659235, 8.064589376978597e-06], 'false,true,true': [0.01633907153659235, nan], 'false,false,false': [nan, 0.0005503851214714116]}
{'': [0.023542152126642454, 0.050509830147151435], 'false': [0.032090476649023425, 0.0724416544135114], 'false,false': [0.0, 0.07361887962796311], 'false,false,false': [nan, 0.07361887962796311], 'true': [0.02704692252810944, 0.0025499877097844054], 'true,true': [0.029556009709231498, 6.85754311360556e-09], 'true,false': [3.5345776696075143e-06, 0.013681900047300332], 'true,false,false': [6.938893903907228e-18, 0.03001867828515246]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 25.597
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.8364098046647294;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.7781489350995119;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.1320471433318609;  // std dev = 0.099, 204.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.14386322081379807;  // std dev = 0.452, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.7084300961834756;  // std dev = 0.130, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else return 0.7353330076073378;  // std dev = 4.21e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.5650553752192362;  // std dev = 0.891, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7354670831742189;  // std dev = 0.153, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.12652416540887024;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7438191550040489;  // std dev = 0.132, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.13954768688967142;  // std dev = 0.143, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1817982890131889;  // std dev = 1.348, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.10058829495228912;  // std dev = 2.106, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5640527812203694;  // std dev = 0.031, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.34611807662213945;  // std dev = 1.222, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.592195916451928;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6690615663593581;  // std dev = 0.297, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5665369779749525;  // std dev = 0.006, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10007199879033764;  // std dev = 1.140, 152.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=3 */
%   | | | else return -0.02396866342944275;  // std dev = 2.211, 87.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04363404139190277;  // std dev = 1.801, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.07343164978877066;  // std dev = 2.406, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4269605908497762;  // std dev = 0.213, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, G) )
%   | | | then return 0.4887155876110299;  // std dev = 0.209, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5609071509667714;  // std dev = 0.283, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6652148583979007;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7971041966402819;  // std dev = 0.097, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.1053017026603218;  // std dev = 0.040, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.10886435106265627;  // std dev = 0.022, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return -0.14359903696637125;  // std dev = 0.188, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.30414887145586844;  // std dev = 0.136, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else return 0.34628086734911545;  // std dev = 0.054, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.2175970628817381;  // std dev = 0.904, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.11384982554378731;  // std dev = 0.955, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.36971950377952467;  // std dev = 0.267, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3261594367307033;  // std dev = 0.006, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.059461905885279435;  // std dev = 1.967, 214.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=15 */
%   | | | else return 0.06685830901793625;  // std dev = 2.322, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
%   | | else return -0.09415336578270211;  // std dev = 1.29e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.22514881778315718;  // std dev = 1.389, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return 0.07763021759736936;  // std dev = 1.278, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return 0.34868407713765776;  // std dev = 0.038, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04406886014007297;  // std dev = 0.156, 148.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=15 */
%   | | else return -0.0319944412247701;  // std dev = 0.163, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27421635125277255;  // std dev = 0.050, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.29668899446646513;  // std dev = 1.021, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.4803380883901825;  // std dev = 0.914, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return -0.1240387132399837;  // std dev = 0.034, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(C, E) )
%   | | then return 0.20015078686212756;  // std dev = 0.142, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | else return 0.039572289296407104;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.23171619366695145;  // std dev = 0.034, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), tweets(A, H) )
%   | | | then return -0.1613505388242172;  // std dev = 1.307, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.37597339480904557;  // std dev = 0.982, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.08622366296271375;  // std dev = 0.036, 223.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2004742866403346;  // std dev = 0.137, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.010064012663760481;  // std dev = 1.157, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0.06803066282265312;  // std dev = 1.554, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.11006613895145503;  // std dev = 1.665, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | | | else return 0.19586493883234404;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1960547274756008;  // std dev = 0.020, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.19326596263681226;  // std dev = 0.030, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2896772329694335;  // std dev = 0.219, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.08062765527481305;  // std dev = 0.004, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17104280678199457;  // std dev = 0.122, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.005780854338537564;  // std dev = 1.176, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | | else return 0.01053390939778495;  // std dev = 1.569, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.16664173963980503;  // std dev = 0.046, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return -0.010561564324275104;  // std dev = 1.562, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else return 0.19678999404380598;  // std dev = 0.033, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.19838734641241662;  // std dev = 0.062, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1607667265174009;  // std dev = 0.079, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2382039537325635;  // std dev = 0.964, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.0744231434061093;  // std dev = 0.003, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.404211660491883;  // std dev = 0.079, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13360796963484226;  // std dev = 0.030, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13927426561648493;  // std dev = 0.176, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.030298659975393726;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06948156772056455;  // std dev = 0.054, 227.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.15147451603559742;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.0011904584754011244;  // std dev = 0.616, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return -0.05730855189007631;  // std dev = 0.967, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.20906355656436804;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.05838547485561577;  // std dev = 0.608, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.026731415431077526;  // std dev = 1.046, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '35.746', 'seconds']
Refined model CLL: -0.104677


******************************************
Best model found
******************************************
Results 

CLL : -0.105388 

AUC ROC : 0.994109 

AUC PR : 0.33987 

Precision : 0.33913 

Recall : 1.0 

F1 : 0.506494 

Total Learning Time : 25.597 

Total Inference Time : 30.394126892089844 

Total revision time: 81.88016891098022
Best scored revision CLL: -0.104677


Results 

CLL : -0.105388 

AUC ROC : 0.994109 

AUC PR : 0.33987 

Precision : 0.33913 

Recall : 1.0 

F1 : 0.506494 

Total Learning Time : 81.94268083190917 

Total Inference Time : 30.394126892089844 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.722
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004879;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else return -0.06021841183926325;  // std dev = 0.274, 49.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0.1867203636709402;  // std dev = 0.470, 70.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7167304053841276;  // std dev = 1.017, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03148942852364409;  // std dev = 0.267, 172.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06714317033150624;  // std dev = 1.805, 53.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7480716149172368;  // std dev = 0.140, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.12480017953577106;  // std dev = 4.967, 137.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5510497401396053;  // std dev = 1.231, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return -0.2686706006516619;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(F, A) )
%   | | then return 0.5167968283822849;  // std dev = 0.776, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.47172800760800293;  // std dev = 0.998, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5955146188981487;  // std dev = 0.178, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5629536495837807;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015525891975151203;  // std dev = 4.605, 258.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=34 */
%   | | | else return 0.05646614574462004;  // std dev = 4.099, 104.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5468067715807726;  // std dev = 2.408, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12242190269807476;  // std dev = 0.070, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | | else return -0.1290273390559893;  // std dev = 0.011, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16402698850267147;  // std dev = 0.278, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2981400031732917;  // std dev = 1.431, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.5199604879000943;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29635789926523953;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5002916539609754;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6055925627326906;  // std dev = 0.974, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.09881569853055533;  // std dev = 1.775, 207.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=5 */
%   | | else return 0.016307884264931728;  // std dev = 0.319, 68.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.022755567327404202;  // std dev = 3.139, 252.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25241269817359835;  // std dev = 0.197, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.42430519145843637;  // std dev = 2.677, 57.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1233669812106027;  // std dev = 0.201, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | | else return -0.13228800994769535;  // std dev = 0.193, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.254210830709853;  // std dev = 2.519, 127.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=121 */
%   | else return -0.08643551716753725;  // std dev = 1.724, 254.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05416155694187679;  // std dev = 2.289, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19186812133135023;  // std dev = 0.074, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2736808640055278;  // std dev = 0.008, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04398815946358379;  // std dev = 0.147, 179.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.00846887917754727;  // std dev = 2.216, 131.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=28 */
%   | | | else return 0.05176397668547985;  // std dev = 2.635, 74.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1570019314047502;  // std dev = 0.154, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2844809656098865;  // std dev = 0.925, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09330846093146711;  // std dev = 0.101, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3869858416648934;  // std dev = 1.381, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12015159112204271;  // std dev = 0.261, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18624757262582642;  // std dev = 0.735, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.12014225984333164;  // std dev = 0.806, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08329063204066571;  // std dev = 0.027, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10281241840400426;  // std dev = 0.252, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.014135722573678053;  // std dev = 1.004, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.04384203406979201;  // std dev = 1.329, 62.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.207715911146777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.024188951829876928;  // std dev = 2.093, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.353', 'seconds']
Parameter learned model CLL:-0.112575 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 134, 0], 'true,false,false': [0.274, 45, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.894, 1, 4], 'false,true,false': [5.16e-08, 49, 0], 'false,false': [0.47, 47, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.017, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.267, 153, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.805, 49, 4], 'false,false,false,true': [0.14, 0, 8], 'false,false,false,false': [4.967, 97, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.231, 2, 67], 'true,true,false': [0.0, 2, 0], 'true,false,true': [0.776, 1, 3], 'true,false,false': [0.998, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.178, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.605, 224, 34], 'false,false,false,false': [4.099, 81, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.408, 2, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.07, 185, 0], 'false,true,false,false': [0.011, 32, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.278, 103, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.431, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.974, 1, 39], 'false,false,true,false': [1.775, 202, 5], 'false,false,false': [0.319, 55, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.139, 170, 82], 'false,true': [0.197, 0, 22], 'false,false,true': [2.677, 5, 52], 'false,false,false,true': [0.201, 87, 0], 'false,false,false,false': [0.193, 56, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.519, 6, 121], 'true,false': [1.724, 247, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.289, 51, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.074, 0, 83], 'true,false,true': [0.008, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.147, 160, 19], 'false,false,false,true': [2.216, 103, 28], 'false,false,false,false': [2.635, 50, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.154, 3, 78], 'false,true,true,true': [0.925, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.101, 207, 0], 'false,false,true': [1.381, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.261, 88, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.735, 0, 85], 'true,true,false': [0.806, 1, 19], 'true,false,true': [0.027, 180, 0], 'true,false,false,true': [0.252, 38, 0], 'true,false,false,false': [1.004, 23, 4], 'false,true': [1.329, 37, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.093, 47, 21]}]
{'': [0.23372175980975288, 0.22145065398335392], 'true': [0.02725128832212642, 0.02138015467765525], 'false': [0.22222222222222338, 0.22061224489796016], 'false,true': [0.03698224852071082, 5.437827059388522e-17], 'false,true,true': [0.0, 0.15999999999999986], 'true,false': [-5.633967587650048e-17, 0.0749687630154101]}
{'': [0.012015183845163683, 0.12609420154848444], 'false': [0.07108526144823757, 0.16601222229114226], 'false,false': [0.06144077500843174, 0.19052298523505637], 'false,false,false': [0.00245357159408921, 0.18007246313958455], 'false,true': [nan, 0.07108526144823757], 'false,false,true': [nan, 0.06144077500843174]}
{'': [0.05290426721001924, 0.11698789904470014], 'false': [nan, 0.11698789904470004], 'false,false': [0.0017309660778629758, 0.10604052965261956], 'false,false,false': [0.08217750062811152, 0.16154534089873768], 'true': [0.039735200847347316, 0.12331069591691862], 'true,false': [0.15046084293250228, 0.11061897972353583], 'true,true': [0.02195901799361477, 0.0], 'false,false,true': [0.005301083613455937, -1.1842378929335003e-16]}
{'': [0.03669899004007222, 0.0006210858616035791], 'false': [2.8302821792341057e-05, 0.0007504564403689816], 'false,false': [nan, 0.0007504564403689816], 'false,false,false': [nan, 0.0007504564403689816], 'false,true': [nan, 2.8302821792341057e-05], 'false,true,false': [2.6141073618266982e-05, 3.602819882222996e-06]}
{'': [0.026204667733589194, 0.08741390112919419], 'false': [0.0018942990071044506, 0.08783776713498855], 'false,false': [0.08394017966066232, 0.10199431699720414], 'false,false,true': [0.023708803322406036, 0.015224275386075776], 'true': [0.025921318295389337, 0.0], 'false,true': [8.586514397790346e-06, 0.0]}
{'': [0.039106762707306855, 0.09300134512276163], 'false': [0.00176415990799339, 0.0981450279595432], 'false,false': [0.12575592630383509, 0.0005609440064278104], 'true': [nan, 0.039106762707306945], 'true,false': [nan, 0.039106762707306855], 'false,false,false': [0.0004644641139849393, 0.0006624137144346588]}
{'': [0.050238562361492475, 0.06633253147322682], 'false': [nan, 0.06633253147322697], 'false,false': [nan, 0.06633253147322682], 'false,false,false': [nan, 0.06633253147322682], 'true': [0.04996450754202372, 0.011695611663825285]}
{'': [0.00021941377930218976, 0.04219430836826751], 'false': [nan, 0.042194308368267784], 'false,false': [0.0215849018355111, 0.058661383120957464], 'false,false,false': [0.037477893877421106, 0.0938435058263096], 'true': [6.638109037359371e-05, 3.4435502764579295e-05], 'true,false': [3.4435502764579295e-05, nan]}
{'': [0.023727051553641285, 0.04037816101350936], 'false': [0.0222357304397807, 0.0710764021884235], 'false,false': [0.04652811176132048, 0.0007716319648213843], 'false,true': [0.02250477977400977, 4.942410545836239e-05], 'false,true,true': [0.02250477977400977, nan], 'false,false,false': [nan, 0.0007716319648213843]}
{'': [0.0204381861589157, 0.04710914995451869], 'false': [0.028498858920473817, 0.06349502628097256], 'false,false': [0.0, 0.06440018005976773], 'false,false,false': [nan, 0.06440018005976784], 'true': [0.012010882901182065, 0.004945211142056435], 'true,true': [0.006359811474301883, 0.032490388349841234], 'true,false': [3.949137971956704e-06, 0.018408485016395866], 'true,false,false': [0.0016708751482857347, 0.03736796508755251]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 26.508
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | else return -0.05674468192176434;  // std dev = 0.279, 47.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.733148935099512;  // std dev = 1.620, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return 0.19148226843284566;  // std dev = 0.471, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.6913740735838261;  // std dev = 0.173, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else return 0.6005335643196855;  // std dev = 0.334, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.12544463852839108;  // std dev = 7.74e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else return -0.1092399672490569;  // std dev = 0.151, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.010082937179503933;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return -0.09871854071040219;  // std dev = 1.194, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7411807024447614;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13256852730114732;  // std dev = 4.726, 135.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5617769262610843;  // std dev = 0.002, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.730230631056996;  // std dev = 0.218, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5771389117134792;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6168209672452807;  // std dev = 0.177, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5220105240371703;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6061622707905214;  // std dev = 0.393, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11635940001955003;  // std dev = 0.111, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07466069233015142;  // std dev = 3.687, 99.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=25 */
%   | | | else return 0.12362110943394905;  // std dev = 3.023, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then return 0.43026278495480236;  // std dev = 0.344, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else return 0.6559171402598986;  // std dev = 0.275, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, G), follows(G, H) )
%   | | | then return 0.2905195080592251;  // std dev = 0.922, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.4940081738656237;  // std dev = 0.139, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6445363720155032;  // std dev = 0.968, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.692186376904477;  // std dev = 0.949, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10375383939322226;  // std dev = 0.078, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else return -0.10500028409680404;  // std dev = 0.022, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return -0.16120146194780396;  // std dev = 0.203, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.32220652195746324;  // std dev = 0.013, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0.3727961529587832;  // std dev = 0.086, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.48528719949918087;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3441197301715489;  // std dev = 0.016, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.4987134474247008;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.09138821268684762;  // std dev = 0.403, 144.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=1 */
%   | | | else return -0.030543802347205065;  // std dev = 1.762, 111.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=16 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.033998525320992574;  // std dev = 2.304, 62.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=15 */
%   | | | else return 0.09874178558883867;  // std dev = 2.941, 73.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.23792405856540866;  // std dev = 0.134, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return -0.07674352649527878;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.25658980683805455;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.05228117260487486;  // std dev = 0.131, 160.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=15 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then return 0.2816271804622351;  // std dev = 0.034, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.01297650572156439;  // std dev = 0.850, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.10931636458273969;  // std dev = 1.374, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.5016916749695646;  // std dev = 1.459, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | else return -0.13377639302326763;  // std dev = 0.028, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.20627870741896107;  // std dev = 0.109, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return -0.04728474623188831;  // std dev = 0.872, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.031805708566187044;  // std dev = 1.156, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.3568168261887384;  // std dev = 0.271, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.0843327458383699;  // std dev = 0.005, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.29086951892804586;  // std dev = 1.497, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return -0.12234841151811035;  // std dev = 0.033, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.07774108406923529;  // std dev = 1.601, 39.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=16 */
%   | | | else return 0.1468072310001686;  // std dev = 1.334, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.18234459579566833;  // std dev = 0.012, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else return 0.1970826142286675;  // std dev = 0.015, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.3190205737975791;  // std dev = 0.006, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(G, F) )
%   | | then return 0.21307269654074298;  // std dev = 0.013, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.28368944813682734;  // std dev = 0.255, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.22679424293149777;  // std dev = 0.981, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.0775609633335214;  // std dev = 0.066, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.009634341351043083;  // std dev = 2.265, 105.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=29 */
%   | | | else return 0.07903349937491619;  // std dev = 1.494, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.1319246843936543;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.06899669220172903;  // std dev = 0.963, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.18962355626555713;  // std dev = 0.071, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.1620569132698397;  // std dev = 0.017, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.16918375571733582;  // std dev = 0.749, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.2010037584005918;  // std dev = 0.053, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07267449133301805;  // std dev = 0.005, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3715012102160081;  // std dev = 0.056, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.14443955340962475;  // std dev = 0.041, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.13995947496140712;  // std dev = 0.095, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else return -0.06082341880392881;  // std dev = 0.049, 220.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.18171918534592227;  // std dev = 0.972, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.09511210638442204;  // std dev = 2.69e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.10960908891976298;  // std dev = 0.941, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.0033727447182072038;  // std dev = 0.533, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.23075305446342276;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0638246069796326;  // std dev = 1.015, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | | else return 0.0034135971793736574;  // std dev = 1.370, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '33.046', 'seconds']
Refined model CLL: -0.10644


******************************************
Best model found
******************************************
Results 

CLL : -0.103158 

AUC ROC : 0.993153 

AUC PR : 0.375034 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 26.508 

Total Inference Time : 35.601970911026 

Total revision time: 92.32795188903809
Best scored revision CLL: -0.10644


Results 

CLL : -0.103158 

AUC ROC : 0.993153 

AUC PR : 0.375034 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 92.39046380996704 

Total Inference Time : 35.601970911026 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.282
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.15814893509951236;  // std dev = 0.458, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6993159800942124;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02686896664264393;  // std dev = 0.272, 189.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10323744112577209;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7490517228539606;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08020755969454613;  // std dev = 3.315, 69.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5486006282888645;  // std dev = 1.465, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7267778016885067;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8194378194775236;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5884051924240863;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5627057337373825;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5627057337373825;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.037324607969301114;  // std dev = 3.650, 203.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=21 */
%   | | | else return 0.04089694686604894;  // std dev = 2.803, 58.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.508818995157496;  // std dev = 1.989, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11887924888810997;  // std dev = 0.029, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | | else return -0.12700785372252377;  // std dev = 0.000559, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1466007425111025;  // std dev = 0.150, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.299988335293599;  // std dev = 1.513, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.4079785576321477;  // std dev = 0.139, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30589650337953345;  // std dev = 3.65e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6298784455791131;  // std dev = 0.200, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08336357280300186;  // std dev = 2.330, 240.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=9 */
%   | | else return -0.1070444759954299;  // std dev = 1.32e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03291717855945504;  // std dev = 3.311, 261.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.18184552917198257;  // std dev = 0.978, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.504179443985727;  // std dev = 1.081, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10927033738939927;  // std dev = 0.085, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.11986657979118255;  // std dev = 0.126, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2742418427017571;  // std dev = 1.617, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07842907389988514;  // std dev = 2.087, 257.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.02176228571270418;  // std dev = 1.048, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1727870095313305;  // std dev = 1.401, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22792282546033937;  // std dev = 0.050, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05408591798003401;  // std dev = 0.144, 229.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.009448875594215372;  // std dev = 1.604, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.13167981581837349;  // std dev = 1.600, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13924767032662141;  // std dev = 0.220, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2550609398641445;  // std dev = 1.093, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09112029528368924;  // std dev = 0.050, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.45075606072772456;  // std dev = 0.606, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1078658221826484;  // std dev = 0.178, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18070708403105065;  // std dev = 1.286, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.15357984508182493;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0846548590861553;  // std dev = 0.033, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07794978303171382;  // std dev = 5.27e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.019551471161455506;  // std dev = 0.478, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.017841308344475535;  // std dev = 1.011, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.2873593767199938;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11954531998724185;  // std dev = 1.221, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.843', 'seconds']
Parameter learned model CLL:-0.111623 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 164, 0], 'true,false,false': [0.271, 23, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 24, 0], 'false,false': [0.458, 21, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.272, 167, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.984, 31, 1], 'false,false,false,true': [0.102, 0, 4], 'false,false,false,false': [3.315, 52, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.465, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.14, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 9], 'false,false,true,false': [2.11e-08, 0, 8], 'false,false,false,true': [3.65, 182, 21], 'false,false,false,false': [2.803, 47, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.989, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.029, 170, 0], 'false,true,false,false': [0.000559, 50, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.15, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.513, 2, 73], 'true,false': [0.139, 0, 4], 'false,true,true': [3.65e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.2, 0, 23], 'false,false,true,false': [2.33, 231, 9], 'false,false,false': [1.32e-09, 19, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.311, 170, 91], 'false,true': [0.978, 1, 13], 'false,false,true': [1.081, 1, 22], 'false,false,false,true': [0.085, 36, 0], 'false,false,false,false': [0.126, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.617, 2, 107], 'true,false': [2.087, 246, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.048, 18, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.401, 2, 80], 'true,false,true': [0.05, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.144, 207, 22], 'false,false,false,true': [1.604, 45, 13], 'false,false,false,false': [1.6, 14, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.22, 4, 77], 'false,true,true,true': [1.093, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.05, 192, 0], 'false,false,true': [0.606, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.178, 51, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.286, 1, 94], 'true,true,false': [0.007, 0, 9], 'true,false,true': [0.033, 188, 0], 'true,false,false,true': [5.27e-09, 15, 0], 'true,false,false,false': [0.478, 10, 2], 'false,true': [1.011, 27, 12], 'false,false,true': [0.707, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.221, 10, 8]}]
{'': [0.22993861314634073, 0.21694214876033072], 'true': [0.009522928994084868, 0.010470031634052633], 'false': [0.22222222222222174, 0.21000000000000008], 'false,true': [-1.4802973661668753e-16, 9.25185853854297e-18], 'true,false': [-1.5705594006892458e-16, 0.07360000000000004], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.02356858712493668, 0.0988928338579041], 'false': [0.07376210162046863, 0.1403512964450643], 'false,false': [0.030273437499999997, 0.17384152116834625], 'false,false,false': [0.002624629381482446, 0.1592546715305176], 'false,true': [nan, 0.07376210162046863], 'false,false,true': [nan, 0.030273437499999997]}
{'': [0.02972644214295132, 0.0966521637225244], 'false': [nan, 0.09665216372252435], 'false,false': [5.224578939412501e-17, 0.08218804313578482], 'false,false,false': [0.06561529276613134, 0.1354337492644588], 'true': [0.029842539536725315, 0.0162258981348485], 'true,true': [0.02982212740154486, 0.0], 'true,false': [0.0033229197077371264, 0.00488536242733334], 'false,false,true': [9.868649107779169e-17, 5.551115123125783e-17]}
{'': [0.03090932617816533, 0.00018914958152433037], 'false': [1.555423016363305e-05, 0.0005363097000577889], 'false,false': [nan, 0.0005363097000577889], 'false,false,false': [nan, 0.0005363097000577889], 'false,true': [nan, 1.555423016363305e-05], 'false,true,false': [5.110300672946998e-06, 6.2412765311492535e-09]}
{'': [0.029795708857634422, 0.060370208172890086], 'false': [7.836868409118753e-17, 0.057716804839943854], 'false,false': [0.06138750241526221, 1.460819769243627e-18], 'false,false,true': [0.0017374645260615326, 0.022615652341342295], 'true': [0.03053559548645666, 0.0048514217943741444], 'false,true': [7.836868409118753e-17, nan]}
{'': [0.042013514710680835, 0.08585027407340667], 'false': [0.06838604949650774, 0.0860034947859992], 'false,false': [0.050806326310311054, 0.0003719236590088901], 'true': [nan, 0.04201351471068027], 'true,false': [nan, 0.042013514710680835], 'false,false,false': [0.0002006680832858222, 0.0005104713598535572]}
{'': [0.04505046732189125, 0.04227858080226062], 'true': [0.023988894828948584, 0.016942025690701756], 'false': [nan, 0.04227858080226062], 'false,false': [nan, 0.04227858080226062], 'false,false,false': [nan, 0.04227858080226062]}
{'': [0.023465811181559486, 0.034239152482419946], 'false': [nan, 0.034239152482420376], 'false,false': [0.02062604653410494, 0.0674246888865626], 'false,false,false': [0.044369597222789874, 0.11130183992159823], 'true': [0.02393554339215555, 0.0012392123060619292], 'true,false': [0.0012392123060619292, nan]}
{'': [0.048419579650911544, 0.03147025645110842], 'false': [0.020320286705147565, 0.06436752110515508], 'false,false': [0.021568022427302463, 0.0006194186478566857], 'false,true': [0.0362081651294306, 1.2811957596893289e-05], 'false,true,true': [0.0362081651294306, nan], 'false,false,false': [nan, 0.0006194186478566857]}
{'': [0.020801750135988253, 0.05694980876778848], 'false': [0.02620870083963082, 0.11443423295896737], 'false,false': [0.25, 0.08281422673416744], 'false,false,false': [nan, 0.08281422673416744], 'true': [0.015957234329992416, 0.00129017949744013], 'true,true': [0.017404766439169033, 5.524177014308111e-06], 'true,false': [5.768239648174203e-06, 0.009300773302949213], 'true,false,false': [1.8503717077085942e-18, 0.019032093915360194]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 59.866
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.7867203636709413;  // std dev = 2.155, 70.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=65 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.13304049221326378;  // std dev = 0.093, 227.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.31968739663797385;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, C) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then return 0.6594459736341483;  // std dev = 0.258, 56.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=52 */
%   | | else return 0.7283409599845493;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7297030733288881;  // std dev = 0.150, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.1125490637007217;  // std dev = 0.112, 176.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=3 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.7342730585501192;  // std dev = 0.146, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.1264144253832662;  // std dev = 3.33e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7432600073969047;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.11218856324204984;  // std dev = 2.149, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0.20933817112071332;  // std dev = 2.086, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5381082317672113;  // std dev = 0.198, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.5517089624334138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.643705019472757;  // std dev = 0.243, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.397894888163008;  // std dev = 0.907, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5528389704375372;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.552838970437537;  // std dev = 3.65e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(I, A) )
%   | | then return -0.061495445265817975;  // std dev = 0.188, 203.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08998530851385853;  // std dev = 2.011, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.13269290358143307;  // std dev = 2.274, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.4203694969522319;  // std dev = 1.262, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | | | else return 0.22807328132096924;  // std dev = 1.152, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(A, D), tweets(A, G) )
%   | | | then return 0.593477665156336;  // std dev = 0.371, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.40827306694767684;  // std dev = 0.714, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.45198418863115897;  // std dev = 0.213, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6688250148973629;  // std dev = 0.030, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.6675155509496316;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7183566487239778;  // std dev = 0.214, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.11861749825230289;  // std dev = 0.029, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3520261923414484;  // std dev = 0.189, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.34521533838650476;  // std dev = 0.040, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.07465126091693204;  // std dev = 0.599, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.35972225225138;  // std dev = 0.253, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32672052882141495;  // std dev = 0.046, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4896166838248142;  // std dev = 0.333, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08577282559018898;  // std dev = 2.042, 245.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=9 */
%   | | else return -0.09746602321931473;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2747395705753468;  // std dev = 0.081, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.2956930489932279;  // std dev = 0.871, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.08992212351998186;  // std dev = 0.006, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else return -0.048084753575295666;  // std dev = 0.134, 45.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.29130038129945596;  // std dev = 0.165, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.14321242808948537;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.35515576882974753;  // std dev = 0.286, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5506040425130341;  // std dev = 0.326, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.12944117070852731;  // std dev = 0.042, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.20873988490478654;  // std dev = 0.130, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else if ( follows(C, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.220909161122246;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.054263290660575274;  // std dev = 1.215, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.22711302765346886;  // std dev = 0.079, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, G) )
%   | | then return 0.24142494526493563;  // std dev = 0.063, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.08096057869399301;  // std dev = 0.869, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(I, A) )
%   | | then return -0.05700940877689585;  // std dev = 0.100, 232.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.020955109799786126;  // std dev = 1.055, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
%   | | | else return 0.026744767091123226;  // std dev = 1.519, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19117897771798464;  // std dev = 0.157, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else return -0.07615969559682371;  // std dev = 0.888, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.07133935532853658;  // std dev = 0.093, 141.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.1692667831306154;  // std dev = 1.373, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return -0.07784002289505973;  // std dev = 0.016, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.30316436182023154;  // std dev = 0.298, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11192148011686764;  // std dev = 0.016, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.07684843502471257;  // std dev = 1.029, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.02952552923549984;  // std dev = 1.258, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.06897217903077633;  // std dev = 2.035, 51.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=46 */
%   | | | else return 0.1930563574538608;  // std dev = 0.211, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.01870546684322258;  // std dev = 0.648, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.15759795480647257;  // std dev = 0.091, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.11779165910139833;  // std dev = 0.994, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.3043396027965038;  // std dev = 0.379, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07347156306543368;  // std dev = 0.027, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.345953146059264;  // std dev = 0.087, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12760722877128705;  // std dev = 0.039, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.12257946138134847;  // std dev = 1.391, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | | | else return 0.1465364761150901;  // std dev = 1.264, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.05257009946617548;  // std dev = 0.307, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06502923303702457;  // std dev = 0.035, 204.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12308895269726369;  // std dev = 0.051, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.21573717798664652;  // std dev = 0.067, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0907911581739075;  // std dev = 0.022, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05678203728820652;  // std dev = 0.512, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return -0.018790502481671856;  // std dev = 1.076, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '41.153', 'seconds']
Refined model CLL: -0.101913


******************************************
Best model found
******************************************
Results 

CLL : -0.100204 

AUC ROC : 0.994444 

AUC PR : 0.337597 

Precision : 0.345982 

Recall : 0.99359 

F1 : 0.513245 

Total Learning Time : 59.866 

Total Inference Time : 35.85755634307861 

Total revision time: 121.57799935150146
Best scored revision CLL: -0.101913


Results 

CLL : -0.100204 

AUC ROC : 0.994444 

AUC PR : 0.337597 

Precision : 0.345982 

Recall : 0.99359 

F1 : 0.513245 

Total Learning Time : 146.93712138938903 

Total Inference Time : 35.85755634307861 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.927
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else return -0.07288554765910842;  // std dev = 0.253, 58.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return 0.1607805140468801;  // std dev = 0.459, 76.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7053661026565674;  // std dev = 1.416, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03635212045732456;  // std dev = 0.269, 173.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06563344968718066;  // std dev = 1.795, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6345745883333382;  // std dev = 0.981, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.13633272153218878;  // std dev = 4.896, 133.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.565736138943727;  // std dev = 0.913, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7342111194819599;  // std dev = 0.221, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6151579659031499;  // std dev = 0.191, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5985724399542733;  // std dev = 0.180, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.565747657721749;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.018894930794948462;  // std dev = 4.590, 261.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=34 */
%   | | | else return 0.0636059735811722;  // std dev = 4.076, 103.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5422223442307978;  // std dev = 2.543, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12110907888027173;  // std dev = 0.064, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | | else return -0.12941452449186613;  // std dev = 0.011, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1631423741340416;  // std dev = 0.277, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29675779298239274;  // std dev = 1.420, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.47279837940698866;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.251557177126028;  // std dev = 0.974, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.5066807675879097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6300940243967512;  // std dev = 0.356, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10442579406328649;  // std dev = 1.794, 282.000 (wgt'ed) examples reached here.  /* #neg=277 #pos=5 */
%   | | else return 0.036785818610813;  // std dev = 0.323, 61.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01836765606098415;  // std dev = 3.212, 258.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25872333543104603;  // std dev = 0.171, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5162190499971545;  // std dev = 1.060, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1201268294164716;  // std dev = 0.163, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return -0.12740433155242048;  // std dev = 0.186, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2797530054359055;  // std dev = 1.527, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.08797003439512115;  // std dev = 1.668, 264.000 (wgt'ed) examples reached here.  /* #neg=257 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04310276060831363;  // std dev = 2.196, 83.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1679000147827717;  // std dev = 1.400, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2556545646311051;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05248162291923805;  // std dev = 0.153, 192.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.01854601707265062;  // std dev = 2.315, 118.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=28 */
%   | | | else return 0.09778518760832287;  // std dev = 2.273, 60.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1130120764628297;  // std dev = 0.253, 84.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28619985719384466;  // std dev = 0.867, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09063655772925712;  // std dev = 0.105, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.36009090491865064;  // std dev = 1.080, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11704768778827332;  // std dev = 0.332, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18003965946147266;  // std dev = 1.115, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.16158249463830637;  // std dev = 0.344, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08138064827762719;  // std dev = 0.027, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09772023142320942;  // std dev = 0.025, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.02569486822423376;  // std dev = 0.974, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.04034014957604878;  // std dev = 1.213, 59.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18903962796161933;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.029456608426702943;  // std dev = 1.912, 63.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.268', 'seconds']
Parameter learned model CLL:-0.112915 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 179, 0], 'true,false,false': [0.253, 54, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.34e-08, 41, 0], 'false,false': [0.459, 53, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.416, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.269, 154, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.795, 51, 4], 'false,false,false,true': [0.981, 1, 8], 'false,false,false,false': [4.896, 93, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.913, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.221, 0, 3], 'true,false,false': [0.191, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.18, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.59, 227, 34], 'false,false,false,false': [4.076, 80, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.543, 2, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.064, 177, 0], 'false,true,false,false': [0.011, 38, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.277, 111, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.42, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.974, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.356, 0, 39], 'false,false,true,false': [1.794, 277, 5], 'false,false,false': [0.323, 48, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.212, 176, 82], 'false,true': [0.171, 0, 22], 'false,false,true': [1.06, 0, 52], 'false,false,false,true': [0.163, 65, 0], 'false,false,false,false': [0.186, 69, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.527, 2, 121], 'true,false': [1.668, 257, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.196, 55, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.4, 2, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 173, 19], 'false,false,false,true': [2.315, 90, 28], 'false,false,false,false': [2.273, 36, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.253, 6, 78], 'false,true,true,true': [0.867, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.105, 221, 0], 'false,false,true': [1.08, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.332, 106, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.115, 1, 85], 'true,true,false': [0.344, 0, 19], 'true,false,true': [0.027, 177, 0], 'true,false,false,true': [0.025, 33, 0], 'true,false,false,false': [0.974, 25, 4], 'false,true': [1.213, 34, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.912, 42, 21]}]
{'': [0.21538669551108913, 0.22376512596707077], 'false': [0.2353076216712593, 0.21104570637119213], 'false,true': [7.105427357601002e-16, 4.603363760640893e-17], 'true': [0.02725128832212642, 0.016592782495682565], 'true,false': [-1.9847562451399445e-16, 0.06420927467300819], 'false,true,true': [0.0, 0.0]}
{'': [0.023060735208291928, 0.12615389478604627], 'false': [0.07215904115154662, 0.16452893486016967], 'false,false': [0.05858595421038, 0.19033538776881098], 'false,false,false': [0.10699517882435927, 0.18024111542444582], 'false,true': [nan, 0.07215904115154662], 'false,false,true': [nan, 0.05858595421038]}
{'': [0.012821850726832403, 0.11608049494530456], 'false': [nan, 0.11608049494530427], 'false,false': [0.0017591286997757176, 0.10491207653088142], 'false,false,false': [0.08072037032571813, 0.16133297768330715], 'true': [0.012254903331834498, 0.010554264805823282], 'true,true': [0.012254903331834498, nan], 'true,false': [0.016261750426178168, 0.004548415868083022], 'false,false,true': [0.0053873316430632645, -5.921189464667501e-17]}
{'': [0.04091557247961386, 0.0006242301050528335], 'false': [2.9407923746369217e-05, 0.0006911090374461264], 'false,false': [nan, 0.0006911090374461264], 'false,false,false': [nan, 0.0006911090374461264], 'false,true': [nan, 2.9407923746375414e-05], 'false,true,false': [2.280413507151386e-05, 3.3791388401666942e-06]}
{'': [0.025595507583750066, 0.07640351102645446], 'false': [0.045973807240154964, 0.07418503591473238], 'false,false': [0.06800825476985234, 0.10441941507648472], 'false,false,true': [0.0032524566677875665, 0.011414762296762807], 'false,true': [0.04520448859225456, 0.0], 'true': [0.025532122749774032, 0.0]}
{'': [0.03998211967192687, 0.08356299208312551], 'false': [0.0013234373136899306, 0.08890379051580069], 'false,false': [0.021615035307668267, 0.0004706449551978654], 'true': [nan, 0.03998211967192645], 'true,false': [nan, 0.03998211967192687], 'false,false,false': [0.0004108532025561487, 0.0005012799787805408]}
{'': [0.04253366290934357, 0.058118084635262926], 'false': [nan, 0.05811808463526303], 'false,false': [nan, 0.058118084635262926], 'false,false,false': [nan, 0.058118084635262926], 'true': [0.0189611886692308, 0.01053931934895959]}
{'': [0.022691295786929425, 0.0434129242185712], 'false': [nan, 0.043412924218570896], 'false,false': [0.02346481250296997, 0.06215341725524515], 'false,false,false': [0.0454302417563656, 0.08607104815095433], 'true': [0.02304597335837586, 9.366926916704044e-05], 'true,false': [9.366926916704044e-05, nan]}
{'': [0.06381216679163908, 0.033549649928611064], 'false': [0.02072156475219285, 0.054467463500534094], 'false,false': [0.028438523138613683, 0.0010379094688885333], 'false,true': [0.019775072396257615, 4.949932115338353e-05], 'false,true,true': [0.019775072396257615, nan], 'false,false,false': [nan, 0.0010379094688885333]}
{'': [0.020643307374748385, 0.041744078244234206], 'false': [0.024931657930539163, 0.05698760594546014], 'false,false': [0.0, 0.05801314428912337], 'false,false,false': [nan, 0.05801314428912332], 'true': [0.013006323030867527, 0.0043712041099302065], 'true,true': [0.014445353265380633, 0.006213795318245986], 'true,false': [4.151169576282655e-06, 0.016615510628747297], 'true,false,false': [1.8359615596028476e-05, 0.032740753735283894]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 32.723
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8356770249871524;  // std dev = 0.148, 89.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=87 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.12497342776968672;  // std dev = 0.129, 237.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.7470378239884012;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return 0.20814893509951235;  // std dev = 0.477, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.7011429282856229;  // std dev = 0.154, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else return 0.7834687047167714;  // std dev = 0.163, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.5239865013536971;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.74570733784099;  // std dev = 0.205, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.12730799023861653;  // std dev = 0.000, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.17837265288495502;  // std dev = 2.744, 45.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
%   | | | else return 0.12372353046887723;  // std dev = 3.295, 72.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=21 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.29701438684128156;  // std dev = 1.195, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.14905819374879312;  // std dev = 2.185, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.5672647879765979;  // std dev = 0.090, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return 0.22842432850273045;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.6902036174090548;  // std dev = 0.163, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5941196596215973;  // std dev = 0.180, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5752265845472847;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.11070507073480974;  // std dev = 0.715, 132.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=1 */
%   | | | else return -0.015140134675103297;  // std dev = 2.567, 112.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1458525085649195;  // std dev = 3.425, 73.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=25 */
%   | | | else return 0.07579258829594666;  // std dev = 3.038, 55.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( follows(E, A), tweets(E, F) )
%   | | | then return 0.4235023684336601;  // std dev = 0.028, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.3330549463780306;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( tweets(D, G), follows(H, D) )
%   | | | then return 0.4332459251185408;  // std dev = 0.118, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.547535544409991;  // std dev = 0.184, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J), recursion_accounttype(I, B) )
%   | | | then return 0.4991344258933842;  // std dev = 0.133, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.6070931787769285;  // std dev = 0.991, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.6636995991041903;  // std dev = 0.121, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7613730405482786;  // std dev = 0.180, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1250167132789112;  // std dev = 0.029, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.281910055659111;  // std dev = 1.383, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.33981503022642184;  // std dev = 0.109, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.04883074176961192;  // std dev = 1.214, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.30802468595256566;  // std dev = 0.965, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.47595994049597035;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.33483547663378904;  // std dev = 0.039, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(I, A) )
%   | | then return -0.059169508124914394;  // std dev = 0.140, 236.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.032642719123945035;  // std dev = 2.876, 94.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=25 */
%   | | | else return 0.1459928667270429;  // std dev = 2.183, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.27269215194180163;  // std dev = 0.176, 70.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=68 */
%   | | else return -0.0899858000332524;  // std dev = 0.045, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.27238116019052466;  // std dev = 0.056, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.06969629235908202;  // std dev = 0.103, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.29637283889045174;  // std dev = 0.167, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.18970215688263245;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.24572059150624273;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.4697150785503358;  // std dev = 0.177, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else return -0.13594727459777783;  // std dev = 0.034, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, C) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.18146916345720746;  // std dev = 0.186, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0.21510017647845064;  // std dev = 0.102, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return 0.2362756613931689;  // std dev = 0.032, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.3419157133138121;  // std dev = 0.044, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.08076757204591575;  // std dev = 0.056, 242.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.361030535255297;  // std dev = 0.413, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.13235409790506478;  // std dev = 0.024, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.2009067683201187;  // std dev = 0.411, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.08427446599313346;  // std dev = 1.646, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18425352390038213;  // std dev = 0.095, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.27229017262057925;  // std dev = 0.033, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return -0.2550826845462634;  // std dev = 1.002, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.28791190259875116;  // std dev = 0.308, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.07630383892146977;  // std dev = 0.053, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.22049439854751016;  // std dev = 1.117, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.12042165604064867;  // std dev = 0.061, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.027039235480355285;  // std dev = 1.585, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | | | else return 0.0068429822894127915;  // std dev = 1.674, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, D), follows(A, E) )
%   | | | then return 0.15869986211613973;  // std dev = 0.031, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return -0.04517407789516956;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.1637786616382608;  // std dev = 0.018, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(F, A) )
%   | | then return 0.05967289056551382;  // std dev = 0.327, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.041693203822061486;  // std dev = 0.392, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.1774047345457753;  // std dev = 0.167, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return -0.0716334741221625;  // std dev = 0.047, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.32776633286412443;  // std dev = 0.073, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.12530574286917318;  // std dev = 0.028, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.12683927295576128;  // std dev = 0.109, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.19490138392713413;  // std dev = 1.344, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.15859922926412623;  // std dev = 0.861, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return -0.05972351244749814;  // std dev = 0.049, 195.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then return 0.009913917282665512;  // std dev = 0.140, 56.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=21 */
%   | | else return -0.00795625155871164;  // std dev = 0.191, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.19172119434661716;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.009910183581403104;  // std dev = 1.039, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | | | else return -0.036507846993540864;  // std dev = 1.413, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '33.653', 'seconds']
Refined model CLL: -0.104796


******************************************
Best model found
******************************************
Results 

CLL : -0.101487 

AUC ROC : 0.993358 

AUC PR : 0.377283 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 32.723 

Total Inference Time : 40.91047716140747 

Total revision time: 104.16778411865235
Best scored revision CLL: -0.104796


Results 

CLL : -0.101487 

AUC ROC : 0.993358 

AUC PR : 0.377283 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 129.52690615653992 

Total Inference Time : 40.91047716140747 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.376
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else return -0.0877970108464337;  // std dev = 0.226, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6933273986071264;  // std dev = 1.710, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.034687466018286796;  // std dev = 0.264, 205.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09578157125132447;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7593516840964301;  // std dev = 0.085, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09398532427428526;  // std dev = 3.289, 67.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5706664284367171;  // std dev = 1.077, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7337869322068022;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8233008109699813;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.59846877852863;  // std dev = 0.118, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5709937665502479;  // std dev = 3.65e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4598826554391368;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03989744128453095;  // std dev = 3.706, 211.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=21 */
%   | | | else return 0.00636504529725228;  // std dev = 2.856, 72.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4972622387107113;  // std dev = 2.551, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11736160620748376;  // std dev = 0.004, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | | else return -0.12234511851517603;  // std dev = 0.000741, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15115283863969162;  // std dev = 0.159, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3187304306445001;  // std dev = 1.139, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.4138576755831058;  // std dev = 0.131, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.325298922907155;  // std dev = 0.050, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6004837133680947;  // std dev = 1.001, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08297706737923494;  // std dev = 2.358, 236.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=9 */
%   | | else return -0.10519052116166791;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.012045264519136354;  // std dev = 3.627, 302.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.19914592663344816;  // std dev = 0.971, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4572397164565462;  // std dev = 1.673, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10863763034098553;  // std dev = 0.077, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.11959930970060068;  // std dev = 0.160, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26349439898059146;  // std dev = 2.299, 111.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=107 */
%   | else return -0.0710930504401437;  // std dev = 2.106, 232.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.055535370995108996;  // std dev = 0.671, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16664052655945813;  // std dev = 1.704, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2344648701020161;  // std dev = 0.048, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.042312774700703305;  // std dev = 0.160, 196.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -2.8408359622422057E-4;  // std dev = 1.494, 63.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=13 */
%   | | | else return 0.01791592221199607;  // std dev = 1.849, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11214758273718684;  // std dev = 0.278, 84.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27449253427715;  // std dev = 1.017, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09010978961518606;  // std dev = 0.027, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.48490017594519974;  // std dev = 0.602, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10735489466807634;  // std dev = 0.134, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18254615434398727;  // std dev = 1.547, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.055671695813331826;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08328132342298943;  // std dev = 0.019, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08313564691669308;  // std dev = 1.05e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.006156566445058864;  // std dev = 0.489, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.04079119907932194;  // std dev = 1.026, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2356581648523911;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0674705243610854;  // std dev = 1.386, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.434', 'seconds']
Parameter learned model CLL:-0.109476 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 161, 0], 'true,false,false': [0.226, 35, 2], 'false,true,true,true': [0.961, 1, 12], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [1.05e-08, 21, 0], 'false,false': [0.471, 18, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.71, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 183, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.982, 27, 1], 'false,false,false,true': [0.085, 0, 4], 'false,false,false,false': [3.289, 50, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.077, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.118, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.65e-08, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.706, 190, 21], 'false,false,false,false': [2.856, 61, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.551, 4, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.004, 167, 0], 'false,true,false,false': [0.000741, 30, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.159, 43, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.139, 1, 73], 'true,false': [0.131, 0, 4], 'false,true,true': [0.05, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.001, 1, 23], 'false,false,true,false': [2.358, 227, 9], 'false,false,false': [0.0, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.627, 211, 91], 'false,true': [0.971, 1, 13], 'false,false,true': [1.673, 2, 22], 'false,false,false,true': [0.077, 35, 0], 'false,false,false,false': [0.16, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.299, 4, 107], 'true,false': [2.106, 221, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.671, 10, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.704, 3, 80], 'true,false,true': [0.048, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 174, 22], 'false,false,false,true': [1.494, 50, 13], 'false,false,false,false': [1.849, 32, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.278, 7, 77], 'false,true,true,true': [1.017, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.027, 223, 0], 'false,false,true': [0.602, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.134, 50, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.547, 2, 94], 'true,true,false': [0.949, 1, 9], 'true,false,true': [0.019, 199, 0], 'true,false,false,true': [1.05e-08, 20, 0], 'true,false,false,false': [0.489, 8, 2], 'false,true': [1.026, 21, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.386, 17, 8]}]
{'': [0.22574576726686596, 0.2239854318418315], 'true': [0.03598567560485849, 0.009998979695949227], 'false': [0.2253061224489791, 0.2222222222222223], 'false,true': [0.1224489795918365, 5.28677630773884e-18], 'false,true,true': [0.07100591715976314, 0.0], 'true,false': [-1.5170749404815803e-16, 0.05113221329437545]}
{'': [0.03439893358571495, 0.09705646776482076], 'false': [0.06984462552434635, 0.14640420054165024], 'false,false': [0.03443877551020408, 0.17595330338152224], 'false,false,false': [0.001818128276117159, 0.16140788998318273], 'false,true': [nan, 0.06984462552434635], 'false,false,true': [nan, 0.03443877551020408]}
{'': [0.017033697034175288, 0.09286937857084196], 'false': [nan, 0.09286937857084199], 'false,false': [0.05246913580246905, 0.07777008210227007], 'false,false,false': [0.06510667797063009, 0.11328518144218228], 'false,false,true': [1.4802973661668753e-16, 0.09876543209876558], 'true': [0.016461678056738913, 0.014578179374740078], 'true,true': [0.016323972972392273, 0.0], 'true,false': [0.003109324071205233, 0.0034627927559380822]}
{'': [0.05005262645237865, 0.0002689943199898829], 'false': [3.273351457489647e-06, 0.0005907277313059965], 'false,false': [nan, 0.0005907277313059965], 'false,false,false': [nan, 0.0005907277313059965], 'false,true': [nan, 3.273351457489647e-06], 'false,true,false': [7.60474605124511e-08, 1.8321955656356675e-08]}
{'': [0.017288177050504422, 0.06348322019419322], 'false': [0.00014839632227209624, 0.06026537171510082], 'false,false': [0.06438142273223584, -2.7755575615628915e-18], 'false,false,true': [0.04172427913375457, 0.023566895447024956], 'true': [0.017527877976736734, 0.004268578351219021], 'false,true': [0.00014839632227209624, nan]}
{'': [0.04356387170672234, 0.08878959111402814], 'false': [0.06728545235429614, 0.08797587383849269], 'false,false': [0.11667912988757201, 0.00044493201642863497], 'true': [nan, 0.04356387170672167], 'true,false': [nan, 0.04356387170672234], 'false,false,false': [0.00016728142166478412, 0.0006266147049498813]}
{'': [0.052840888195424596, 0.024980778440354297], 'true': [0.047597070936843504, 0.019121467179465924], 'false': [nan, 0.024980778440354297], 'false,false': [nan, 0.024980778440354297], 'false,false,false': [nan, 0.024980778440354297]}
{'': [0.03431141177764038, 0.03617019254283517], 'false': [nan, 0.03617019254283511], 'false,false': [0.025652422197924643, 0.05441042209686267], 'false,false,false': [0.035438798860504495, 0.08336128560026827], 'true': [0.035002152212555954, 0.0011537807770060013], 'true,false': [0.0011537807770060013, nan]}
{'': [0.07753961751232023, 0.031207299507685794], 'false': [0.01896860275394064, 0.07210427493763236], 'false,false': [0.02135160838396675, 0.0003598357846648215], 'false,true': [0.03133030677173436, 3.1586947137039688e-06], 'false,true,true': [0.03133030677173436, nan], 'false,false,false': [nan, 0.0003598357846648215]}
{'': [0.024718923968410644, 0.051112681267041965], 'false': [0.03187393047983847, 0.07491651533191176], 'false,false': [0.0, 0.07682521123695624], 'false,false,false': [nan, 0.07682521123695624], 'true': [0.0324353013146224, 0.0012954031416244486], 'true,true': [0.024916074940287688, 0.09004134328337851], 'true,false': [1.797775192326219e-06, 0.009297639669026846], 'true,false,false': [5.551115123125783e-18, 0.023942399786908326]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 22.429
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return -0.1328012911448323;  // std dev = 0.095, 221.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.25814893509951237;  // std dev = 0.490, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6974982424985461;  // std dev = 0.154, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.059165330855500554;  // std dev = 2.860, 151.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=12 */
%   | | | else return -0.0507037230714877;  // std dev = 1.420, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.07355915636870895;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.12644084363129096;  // std dev = 1.67e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7455384727792423;  // std dev = 0.090, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12674305610062286;  // std dev = 3.078, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5607860534865127;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.33565639851530443;  // std dev = 1.228, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6626504228309732;  // std dev = 0.305, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5607860534865124;  // std dev = 1.29e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7430384425881205;  // std dev = 0.003, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12043722949817094;  // std dev = 0.061, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10993845497854146;  // std dev = 1.989, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.12394037327799266;  // std dev = 2.307, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.40113707858811076;  // std dev = 0.990, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.3358309561391316;  // std dev = 1.656, 35.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | | else return 0.16126253913227498;  // std dev = 0.917, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.5027838396235238;  // std dev = 0.320, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.28092344006466285;  // std dev = 0.846, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.5790280532068642;  // std dev = 0.003, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.7024290426919794;  // std dev = 0.218, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(I, A) )
%   | then return -0.10810971960240648;  // std dev = 0.004, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else return -0.17088943720785463;  // std dev = 0.189, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, F) )
%   | | | then return 0.31167757766445253;  // std dev = 0.980, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.3370227714771865;  // std dev = 0.028, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.17330018528315833;  // std dev = 0.396, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else return 0.4338358751485802;  // std dev = 0.382, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33885938109833774;  // std dev = 0.054, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.061891595734047594;  // std dev = 1.999, 214.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=15 */
%   | | | else return 0.07372853926232419;  // std dev = 2.408, 51.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
%   | | else return -0.09213932563982631;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then return 0.041618424460283535;  // std dev = 0.200, 208.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=72 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.17580662577369957;  // std dev = 0.964, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.2814815878333461;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.0435039966339899;  // std dev = 0.148, 48.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.31542992489386557;  // std dev = 0.200, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.15111384949438664;  // std dev = 0.311, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.19517324543407236;  // std dev = 0.706, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5237085746435638;  // std dev = 0.272, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13430522687063975;  // std dev = 0.040, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then return 0.28073588672258176;  // std dev = 0.117, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | else return -0.09383400933949604;  // std dev = 0.083, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return 0.23461318027842626;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, H), follows(H, F) )
%   | | | then return -0.10800185912540823;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.24643807391603098;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.38210939628985285;  // std dev = 0.213, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08887761108143542;  // std dev = 0.021, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 9.513397142028746E-4;  // std dev = 1.455, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
%   | | | else return 0.05388940261168016;  // std dev = 1.660, 24.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.16336614530099058;  // std dev = 1.371, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.2024097760510425;  // std dev = 0.065, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.19440499598334018;  // std dev = 0.018, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.026252798737178378;  // std dev = 0.692, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.057462428098869804;  // std dev = 0.150, 251.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.30730868162195263;  // std dev = 0.262, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1261227435606243;  // std dev = 1.67e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03862040883483338;  // std dev = 0.756, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return -0.0038857713651342545;  // std dev = 1.338, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.17666791243276547;  // std dev = 0.046, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.11846699258192629;  // std dev = 0.961, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.2004495884283845;  // std dev = 0.050, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.25736321488683306;  // std dev = 0.094, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.338704766851171;  // std dev = 0.369, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.022506781579130584;  // std dev = 1.210, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return -0.08096080069397721;  // std dev = 0.079, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3564921886030202;  // std dev = 0.085, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1468616382495738;  // std dev = 0.036, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.1429351379608154;  // std dev = 0.111, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | | else return 0.2822867577909927;  // std dev = 0.047, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.07149438382607277;  // std dev = 0.041, 222.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.17961122476603758;  // std dev = 0.152, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0989747316114201;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.13128590783906569;  // std dev = 0.438, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2528183205517657;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.061047029511426154;  // std dev = 0.392, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.03577582842426146;  // std dev = 1.009, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '50.786', 'seconds']
Refined model CLL: -0.109584


******************************************
Best model found
******************************************
Results 

CLL : -0.109328 

AUC ROC : 0.994529 

AUC PR : 0.380746 

Precision : 0.342169 

Recall : 0.910256 

F1 : 0.497373 

Total Learning Time : 22.429 

Total Inference Time : 41.14418268203735 

Total revision time: 88.55385058403016
Best scored revision CLL: -0.109476


Results 

CLL : -0.109328 

AUC ROC : 0.994529 

AUC PR : 0.380746 

Precision : 0.342169 

Recall : 0.910256 

F1 : 0.497373 

Total Learning Time : 88.59251230239869 

Total Inference Time : 41.14418268203735 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.883
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | else return -0.0585177315671544;  // std dev = 0.276, 48.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return 0.1867203636709402;  // std dev = 0.470, 70.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7053277642099918;  // std dev = 1.416, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02867639828398101;  // std dev = 0.270, 167.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06733026435645406;  // std dev = 1.805, 53.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6464932380415532;  // std dev = 0.873, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.09572533852256904;  // std dev = 5.088, 154.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5780719452510551;  // std dev = 0.355, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7328797716189864;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.611100105462724;  // std dev = 0.185, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5981464129975786;  // std dev = 0.177, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5657570765819574;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.006650433285929025;  // std dev = 4.610, 242.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=34 */
%   | | | else return 0.04209283203185431;  // std dev = 4.156, 112.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5169601536062862;  // std dev = 3.216, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12316697694188926;  // std dev = 0.052, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | | else return -0.1278123320433528;  // std dev = 0.011, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16083059522418752;  // std dev = 0.229, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2993853839386791;  // std dev = 1.418, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.04699151491327819;  // std dev = 0.607, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3044459251736157;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5095196996450762;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6389564363173271;  // std dev = 0.361, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.1031332339134401;  // std dev = 1.807, 264.000 (wgt'ed) examples reached here.  /* #neg=259 #pos=5 */
%   | | else return 0.01783875856500007;  // std dev = 0.313, 73.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01694321755823892;  // std dev = 3.306, 253.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.18307220145679234;  // std dev = 1.273, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5178365885699794;  // std dev = 1.370, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12148363914697571;  // std dev = 0.189, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | | else return -0.12302848143463858;  // std dev = 0.146, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27247009384553356;  // std dev = 2.069, 124.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else return -0.09029855863260534;  // std dev = 1.846, 261.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06332370209538117;  // std dev = 2.324, 76.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1949472439292823;  // std dev = 0.079, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.31903427552071684;  // std dev = 0.050, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.050701129188472006;  // std dev = 0.153, 186.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 8.849031421540366E-4;  // std dev = 2.317, 104.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=28 */
%   | | | else return 0.05723534544128179;  // std dev = 2.454, 75.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16869013406401093;  // std dev = 0.123, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2648419388188494;  // std dev = 1.231, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09324588355693482;  // std dev = 0.123, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4023105162559079;  // std dev = 0.840, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11697249294161016;  // std dev = 0.271, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1727336384697703;  // std dev = 1.270, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.16571711348463114;  // std dev = 0.358, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.0843573296842986;  // std dev = 0.375, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10715091563988058;  // std dev = 0.265, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.010372661405058565;  // std dev = 0.969, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -0.012795215409132525;  // std dev = 1.948, 77.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.13368641251503213;  // std dev = 0.783, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.017674435601301948;  // std dev = 2.038, 70.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.286', 'seconds']
Parameter learned model CLL:-0.110634 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 184, 0], 'true,false,false': [0.276, 44, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [1.155, 2, 4], 'false,true,false': [4.94e-08, 47, 0], 'false,false': [0.47, 47, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.416, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.27, 148, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.805, 49, 4], 'false,false,false,true': [0.873, 1, 8], 'false,false,false,false': [5.088, 114, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.355, 0, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.22, 0, 3], 'true,false,false': [0.185, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.177, 0, 6], 'false,false,true,false': [5.96e-08, 0, 15], 'false,false,false,true': [4.61, 208, 34], 'false,false,false,false': [4.156, 89, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.216, 7, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.052, 175, 0], 'false,true,false,false': [0.011, 34, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.229, 82, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.418, 2, 77], 'true,false': [0.607, 1, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.361, 0, 39], 'false,false,true,false': [1.807, 259, 5], 'false,false,false': [0.313, 60, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.306, 171, 82], 'false,true': [1.273, 2, 22], 'false,false,true': [1.37, 1, 52], 'false,false,false,true': [0.189, 91, 0], 'false,false,false,false': [0.146, 60, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.069, 3, 121], 'true,false': [1.846, 254, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.324, 48, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.079, 0, 83], 'true,false,true': [0.05, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 167, 19], 'false,false,false,true': [2.317, 76, 28], 'false,false,false,false': [2.454, 51, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.123, 1, 78], 'false,true,true,true': [1.231, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.123, 221, 0], 'false,false,true': [0.84, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.271, 96, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.27, 1, 85], 'true,true,false': [0.358, 0, 19], 'true,false,true': [0.375, 161, 0], 'true,false,false,true': [0.265, 32, 0], 'true,false,false,false': [0.969, 21, 4], 'false,true': [1.948, 52, 25], 'false,false,true': [0.783, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.038, 49, 21]}]
{'': [0.21708826063121833, 0.22222222222222296], 'false': [0.22370343316289376, 0.22061224489796016], 'false,true': [0.06858710562414343, 5.196788625904988e-17], 'true': [0.02725128832212642, 0.016944114149821533], 'false,true,true': [0.0, 0.22222222222222213], 'true,false': [-2.0756343503861623e-16, 0.07638888888888874]}
{'': [0.023048420054900723, 0.12338012352814047], 'false': [0.07294135070315627, 0.15735273886774406], 'false,false': [0.061451080161842586, 0.179351486808208], 'false,false,false': [0.08472628571766662, 0.16813240518566858], 'false,true': [nan, 0.07294135070315627], 'false,false,true': [nan, 0.061451080161842586]}
{'': [0.0036196995230662345, 0.1202523424558564], 'false': [nan, 0.12025234245585714], 'false,false': [0.0017127658995007302, 0.10932919742674622], 'false,false,false': [0.08780944807107481, 0.15420302041688244], 'true': [0.0018805342801808942, 0.01044375218672109], 'true,false': [0.016081730808667222, 0.004284886451910164], 'true,true': [0.0018805342801808942, nan], 'false,false,true': [0.005245345567221523, 2.3684757858670006e-16]}
{'': [0.06347033497154243, 0.0004677457553089852], 'false': [1.6609910779568422e-05, 0.0006392463602699262], 'false,false': [nan, 0.0006392463602699262], 'false,false,false': [nan, 0.0006392463602699262], 'false,true': [nan, 1.6609910779570546e-05], 'false,true,false': [1.561089562202562e-05, 3.6830885834341287e-06]}
{'': [0.03090352293518766, 0.07896083021617431], 'false': [0.0019156143556157083, 0.0779521733853777], 'false,false': [0.07296816546104462, 0.0981170425932633], 'false,false,true': [0.003349357581945593, 0.012370959875373152], 'true': [0.025456656039278595, 0.1839250055136294], 'false,true': [8.763979302639502e-06, 0.0]}
{'': [0.043197444742442456, 0.08787185225119958], 'false': [0.06751753932607064, 0.08823525328914612], 'false,false': [0.035425167212121994, 0.000377480543279664], 'true': [nan, 0.043197444742442095], 'true,false': [nan, 0.043197444742442456], 'false,false,false': [0.0003907305447929894, 0.0003559464630807659]}
{'': [0.048707179826216224, 0.07104592156532342], 'false': [nan, 0.07104592156532333], 'false,false': [nan, 0.07104592156532342], 'false,false,false': [nan, 0.07104592156532342], 'true': [0.03453090788085258, 0.013056459588823288]}
{'': [0.00045684395893869664, 0.04484220269451026], 'false': [nan, 0.044842202694510176], 'false,false': [0.02326140606253845, 0.06438545887455839], 'false,false,false': [0.05160346849848997, 0.08026490978941063], 'true': [7.51950413712215e-05, 0.001259978897266728], 'true,false': [0.001259978897266728, nan]}
{'': [0.01522874864449471, 0.03707180916198212], 'false': [0.022237279750131057, 0.061710090453315054], 'false,false': [0.017631875101889793, 0.0007657653866355562], 'false,true': [0.03886741362766143, 6.851696225696125e-05], 'false,true,true': [0.03886741362766143, nan], 'false,false,false': [nan, 0.0007657653866355562]}
{'': [0.023198287086852967, 0.05766313882102839], 'false': [0.04927918602915271, 0.06620463058030825], 'false,false': [0.20426764328016792, 0.05934613310218806], 'false,false,false': [nan, 0.05934613310218815], 'true': [0.016597181537249654, 0.005949268031923458], 'true,true': [0.01876873445587528, 0.006727724230505564], 'true,false': [0.000873426732982304, 0.020001042023913684], 'true,false,false': [0.0022019781821324604, 0.03752572135950461]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 24.417
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else if ( tweets(A, E), follows(A, F) )
%   | | | then return 0.0399671169176941;  // std dev = 1.809, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return -0.1418510649004877;  // std dev = 2.79e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.23314893509951232;  // std dev = 0.484, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(C, D), follows(E, C) )
%   | | then return 0.704321897059439;  // std dev = 0.122, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | else return 0.772969558736395;  // std dev = 0.147, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.6569734122109546;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.11430248734998504;  // std dev = 0.099, 144.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=2 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.7322105899551069;  // std dev = 0.180, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.12928132759752434;  // std dev = 0.077, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.12017107389583705;  // std dev = 3.558, 86.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=25 */
%   | | | else return 0.14276075539879057;  // std dev = 3.020, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5461831742645673;  // std dev = 0.123, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( tweets(A, E) )
%   | | then return 0.5951449167185996;  // std dev = 0.073, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.22203310341295093;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5845077410894786;  // std dev = 0.158, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5082416375986885;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10729546324464556;  // std dev = 0.853, 133.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=1 */
%   | | | else return 0.016212987169562553;  // std dev = 2.445, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06294875699813433;  // std dev = 3.158, 78.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=19 */
%   | | | else return 0.11160022733022905;  // std dev = 3.480, 69.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.4273072260964284;  // std dev = 0.247, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.31646338011863095;  // std dev = 1.319, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.16269384847581228;  // std dev = 0.690, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return 0.44542880395558954;  // std dev = 0.264, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.022967266352547255;  // std dev = 1.048, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6059730850507843;  // std dev = 1.025, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.7057741125106264;  // std dev = 0.354, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(K, A) )
%   | then return -0.10883166815226758;  // std dev = 0.008, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else return -0.160367742099143;  // std dev = 0.236, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.32571743032970357;  // std dev = 0.024, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.3772510400442199;  // std dev = 0.093, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.3035012137343476;  // std dev = 0.968, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.3628157101617508;  // std dev = 0.063, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4938124051860875;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.32617322937521226;  // std dev = 1.257, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.09818273201963602;  // std dev = 0.100, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.06267613109117516;  // std dev = 3.007, 98.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=29 */
%   | | | else return 0.03421478824036578;  // std dev = 2.234, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2565310197710252;  // std dev = 0.018, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.2013668920139172;  // std dev = 1.451, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | | else return -0.08829741343378342;  // std dev = 0.047, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else return -0.0757960434645655;  // std dev = 0.070, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2889206402063097;  // std dev = 0.062, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.3035810762150984;  // std dev = 0.039, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.20347160402007153;  // std dev = 0.871, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5035672940112742;  // std dev = 1.098, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.13025035779634195;  // std dev = 0.034, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, C) )
%   | then if ( follows(C, D), follows(D, A) )
%   | | then return 0.21106181390962353;  // std dev = 0.003, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return 0.1572128783641002;  // std dev = 0.217, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else return 0.25246807219626805;  // std dev = 0.026, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.2944985913079939;  // std dev = 0.312, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.04548114438347506;  // std dev = 0.640, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.08249822274233204;  // std dev = 0.080, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.31324198503938283;  // std dev = 1.026, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.12060613077224672;  // std dev = 0.004, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.011892435338662207;  // std dev = 0.258, 83.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18301733524534353;  // std dev = 0.085, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.2676969241538621;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.23750874890223192;  // std dev = 0.263, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.13521420666203282;  // std dev = 0.964, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.0761092468617837;  // std dev = 0.074, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2003963420261171;  // std dev = 1.583, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return -0.10853266871090127;  // std dev = 0.006, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.05218603041463992;  // std dev = 1.652, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | | | else return 0.10935419831139923;  // std dev = 1.397, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.1528670793878728;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.07284327870190568;  // std dev = 0.960, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.01462183067775565;  // std dev = 0.824, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.14530844019436673;  // std dev = 0.108, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.1813182224328153;  // std dev = 0.066, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(H, A) )
%   | then return -0.035339748559256576;  // std dev = 0.121, 234.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=38 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.23329086895663442;  // std dev = 0.974, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.40845923086958424;  // std dev = 0.318, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.12859026365325402;  // std dev = 0.036, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.15789444822831003;  // std dev = 0.038, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | | else return 0.06340137300504652;  // std dev = 0.255, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | else return -0.06340591436985628;  // std dev = 0.042, 217.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=4 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( recursion_accounttype(F, B), tweets(G, H) )
%   | | | then return 0.03730134191841403;  // std dev = 0.799, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.23250497497129832;  // std dev = 0.879, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else return -0.10441088011985791;  // std dev = 0.024, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.23966029858844007;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08704400170325893;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.058489895416166;  // std dev = 0.275, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '30.158', 'seconds']
Refined model CLL: -0.101478


******************************************
Best model found
******************************************
Results 

CLL : -0.100835 

AUC ROC : 0.993388 

AUC PR : 0.352577 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 24.417 

Total Inference Time : 37.09585404396057 

Total revision time: 92.20527939796447
Best scored revision CLL: -0.101478


Results 

CLL : -0.100835 

AUC ROC : 0.993388 

AUC PR : 0.352577 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 92.243941116333 

Total Inference Time : 37.09585404396057 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.338
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8118526388032147;  // std dev = 2.184, 108.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else return -0.095339436993511;  // std dev = 0.211, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0.23314893509951237;  // std dev = 0.484, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7065866135588351;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03707578109042059;  // std dev = 0.261, 211.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09063686803525972;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7578838710930699;  // std dev = 0.080, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08691821491042008;  // std dev = 3.301, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5722164195783872;  // std dev = 0.928, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.23598875483363504;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8229173663775997;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.596613689572131;  // std dev = 0.110, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5699288204098446;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5699288204098446;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.035662816951582;  // std dev = 3.696, 204.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=21 */
%   | | | else return 0.013561489924175812;  // std dev = 2.843, 66.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48123211004453575;  // std dev = 2.893, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11758416861853084;  // std dev = 0.003, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | | else return -0.12288756506046108;  // std dev = 2.24e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15452801938895347;  // std dev = 0.178, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3079374651560707;  // std dev = 1.518, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.44679327197098306;  // std dev = 0.193, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31656560109483356;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6461365020644181;  // std dev = 0.158, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08194653454501735;  // std dev = 2.349, 234.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=9 */
%   | | else return -0.10534256846196294;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03590942232715315;  // std dev = 3.376, 263.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.12638763573950249;  // std dev = 1.332, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4561050489141029;  // std dev = 1.658, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11239499156875345;  // std dev = 0.093, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.11231153595792656;  // std dev = 0.138, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29237405526876037;  // std dev = 1.314, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else return -0.07816290645026854;  // std dev = 2.223, 242.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01873607443352787;  // std dev = 0.729, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19945360645590932;  // std dev = 0.095, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.23411812121231274;  // std dev = 0.055, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04977670192508413;  // std dev = 0.149, 219.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.016297271122219698;  // std dev = 1.520, 77.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=13 */
%   | | | else return 0.1115294215060881;  // std dev = 1.742, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1640809776887657;  // std dev = 0.159, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23030673064174925;  // std dev = 1.513, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09076878921471816;  // std dev = 0.034, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4039135325007764;  // std dev = 1.294, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1073822577053361;  // std dev = 0.169, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15241788045551444;  // std dev = 2.049, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.16111342145556415;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08413211159740074;  // std dev = 0.018, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07978973131592162;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.03660294269688144;  // std dev = 0.502, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.02699580843566138;  // std dev = 1.108, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2027451820402173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04757343098512529;  // std dev = 1.460, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.547', 'seconds']
Parameter learned model CLL:-0.110944 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.184, 5, 103], 'true,false,true': [0.0, 157, 0], 'true,false,false': [0.211, 41, 2], 'false,true,true,true': [0.961, 1, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.58e-08, 29, 0], 'false,false': [0.484, 15, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.261, 189, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.98, 24, 1], 'false,false,false,true': [0.08, 0, 4], 'false,false,false,false': [3.301, 51, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.928, 1, 70], 'true,true,false': [0.707, 1, 1], 'true,false,true': [0.08, 0, 2], 'true,false,false': [0.11, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.696, 183, 21], 'false,false,false,false': [2.843, 55, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.893, 6, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.003, 153, 0], 'false,true,false,false': [2.24e-08, 32, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.178, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.518, 2, 73], 'true,false': [0.193, 0, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.158, 0, 23], 'false,false,true,false': [2.349, 225, 9], 'false,false,false': [0.0, 25, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.376, 172, 91], 'false,true': [1.332, 2, 13], 'false,false,true': [1.658, 2, 22], 'false,false,false,true': [0.093, 29, 0], 'false,false,false,false': [0.138, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.314, 1, 107], 'true,false': [2.223, 231, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.729, 16, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.095, 0, 80], 'true,false,true': [0.055, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 197, 22], 'false,false,false,true': [1.52, 64, 13], 'false,false,false,false': [1.742, 14, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.159, 2, 77], 'false,true,true,true': [1.513, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.034, 184, 0], 'false,false,true': [1.294, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.169, 41, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.049, 4, 94], 'true,true,false': [0.013, 0, 9], 'true,false,true': [0.018, 170, 0], 'true,false,false,true': [0.0, 16, 0], 'true,false,false,false': [0.502, 15, 2], 'false,true': [1.108, 27, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.46, 16, 8]}]
{'': [0.2246900826446303, 0.21694214876033072], 'true': [0.04415294924554408, 0.00989999999999984], 'false': [0.2040816326530607, 0.23437500000000003], 'false,true': [0.07100591715976314, 2.2970131543968756e-17], 'false,true,true': [0.07100591715976314, nan], 'true,false': [-1.3860109097231253e-16, 0.04434829637641966]}
{'': [0.02355503160862369, 0.09607442369476563], 'false': [0.06836381461927614, 0.14866911294243323], 'false,false': [0.03840000000000006, 0.17506206684149234], 'false,false,false': [0.0016077845442346028, 0.1602544314857676], 'false,true': [nan, 0.06836381461927614], 'false,false,true': [nan, 0.03840000000000006]}
{'': [0.0219381970306512, 0.0958210417419988], 'false': [nan, 0.09582104174199883], 'false,false': [-1.5673736818237505e-16, 0.08098554438256748], 'false,false,false': [0.06696110165005441, 0.12250308633783609], 'true': [0.021649911097074467, 0.014458256574882311], 'true,true': [0.012120280184385704, 0.24999999999999994], 'true,false': [0.003180896029921443, 0.003025818802138147], 'false,false,true': [-4.9343245538895844e-17, 0.0]}
{'': [0.06340283310840197, 0.0003357374427023484], 'false': [4.07359736653605e-06, 0.0007698216541255733], 'false,false': [nan, 0.0007698216541255733], 'false,false,false': [nan, 0.0007698216541255733], 'false,true': [nan, 4.07359736653605e-06], 'false,true,false': [6.055135860545126e-08, 1.5612511283791264e-17]}
{'': [0.030564431274754104, 0.06249946304645849], 'false': [-3.918434204559376e-17, 0.05964796999229492], 'false,false': [0.06475508660494024, -8.881784197001253e-18], 'false,false,true': [0.0010837743162948345, 0.0235720826974989], 'true': [0.03072115430675737, 0.009321189216256354], 'false,true': [-3.918434204559376e-17, nan]}
{'': [0.04333990080597301, 0.10195226624027272], 'false': [0.11828605498639223, 0.09815175967475283], 'false,false': [0.11456657766154547, 0.00045322966400954443], 'true': [nan, 0.04333990080597264], 'true,false': [nan, 0.04333990080597301], 'false,false,false': [0.0002964415538313828, 0.0005953155777055717]}
{'': [0.04834968337738435, 0.022157964775554758], 'true': [0.015998369520126215, 0.020421330895273024], 'false': [nan, 0.022157964775554758], 'false,false': [nan, 0.022157964775554758], 'false,false,false': [nan, 0.022157964775554758]}
{'': [0.00017588084526545743, 0.033712913136976504], 'false': [nan, 0.033712913136976434], 'false,false': [0.022140010510847765, 0.05634317793277979], 'false,false,false': [0.029998420044823896, 0.13195930486644755], 'true': [0.00011375002448251182, 0.001488793107513195], 'true,false': [0.001488793107513195, nan]}
{'': [0.025294144463381327, 0.038232021309788145], 'false': [0.024073694199293484, 0.08427001713700781], 'false,false': [0.09296078595251236, 0.0006982706827103796], 'false,true': [0.06731049319314215, 6.108435719267268e-06], 'false,true,true': [0.06731049319314215, nan], 'false,false,false': [nan, 0.0006982706827103796]}
{'': [0.026738252213090896, 0.05299125975263697], 'false': [0.03145047491522194, 0.08615771296318674], 'false,false': [0.0, 0.08878448677696603], 'false,false,false': [nan, 0.08878448677696603], 'true': [0.039241580597902045, 0.001415983043409229], 'true,true': [0.042837403163249, 1.7815710690951806e-05], 'true,false': [1.9521648564505492e-06, 0.00810828670288936], 'true,false,false': [-2.6020852139652106e-18, 0.014835325080201649]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 23.925
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(E, A) )
%   | | | then return 0.8211118980624753;  // std dev = 1.388, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.7217852987358758;  // std dev = 1.610, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.13254873931909306;  // std dev = 0.096, 215.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7128117415383288;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return 0.7408194692214101;  // std dev = 0.041, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.036969208599387876;  // std dev = 3.239, 151.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=16 */
%   | | | else return -0.04956490935401858;  // std dev = 0.807, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else return -0.010709933101502556;  // std dev = 0.293, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.015357630399404779;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.12646874151051588;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.5422198280150733;  // std dev = 0.925, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.10933097840256638;  // std dev = 3.137, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5686798804382416;  // std dev = 0.039, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.3468118909491167;  // std dev = 1.761, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | else return 0.5936894907322817;  // std dev = 0.060, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(F, A) )
%   | | then return 0.7671309944564975;  // std dev = 0.116, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.4276576945021442;  // std dev = 0.935, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.555789379744394;  // std dev = 0.003, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then return -0.06402349530919205;  // std dev = 0.217, 215.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.07750059827488752;  // std dev = 2.034, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.13918283626669528;  // std dev = 2.284, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.38903168146031203;  // std dev = 1.648, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | | | else return 0.23800396560093526;  // std dev = 0.917, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(D, G), follows(H, D) )
%   | | | then return 0.41775613541193585;  // std dev = 0.011, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.4779869075828877;  // std dev = 0.202, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.6069170624167732;  // std dev = 0.169, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7385413400906623;  // std dev = 0.009, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.5549140942280271;  // std dev = 0.964, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.6469822325572088;  // std dev = 0.916, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.12333148954389728;  // std dev = 0.020, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.30769265409059954;  // std dev = 1.378, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | | | else return 0.07839399237552608;  // std dev = 0.827, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3757250319596173;  // std dev = 0.051, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return 0.46964461927689083;  // std dev = 0.186, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4051799282267825;  // std dev = 0.128, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.3201808203401015;  // std dev = 0.015, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.5628891462589052;  // std dev = 0.083, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08882755855396682;  // std dev = 2.178, 271.000 (wgt'ed) examples reached here.  /* #neg=262 #pos=9 */
%   | | else return -0.0956628281899534;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.23410337747539509;  // std dev = 1.371, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.07552205365671627;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.29302801445881305;  // std dev = 0.121, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.25429334036176704;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.05218429537909109;  // std dev = 0.146, 181.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=15 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2695144357470448;  // std dev = 0.050, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.05602516735191296;  // std dev = 1.491, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.5231870624468978;  // std dev = 0.512, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11905788746429917;  // std dev = 0.029, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.21466355980632626;  // std dev = 0.115, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | else return 0.25426968352078283;  // std dev = 0.140, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.16382183183894564;  // std dev = 0.915, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.44749239544300945;  // std dev = 0.011, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08896367153822582;  // std dev = 0.050, 215.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=1 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.25353184669454243;  // std dev = 1.036, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.11313153314642374;  // std dev = 0.017, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.08141964430222032;  // std dev = 0.470, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.12380790146840707;  // std dev = 1.333, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.1325561854466145;  // std dev = 1.652, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | | | else return 0.1885432601705;  // std dev = 0.065, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.18324732326279491;  // std dev = 0.062, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.246957762885317;  // std dev = 0.104, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.049553124472857056;  // std dev = 0.126, 257.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.24422027246122135;  // std dev = 0.029, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.10547451819951058;  // std dev = 0.047, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06595802211863235;  // std dev = 0.752, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.043763917826723016;  // std dev = 1.395, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.18044534769399942;  // std dev = 0.133, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.07661672953124825;  // std dev = 1.474, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else if ( follows(F, A), tweets(F, G) )
%   | | | then return -0.14119650844150802;  // std dev = 0.778, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.186148750060006;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.0555666950647768;  // std dev = 0.921, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.1632072130950884;  // std dev = 0.021, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.060928814516264584;  // std dev = 0.802, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(J, A) )
%   | then return -0.03843128186905791;  // std dev = 0.114, 250.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=32 */
%   | else return -0.002708065250745524;  // std dev = 0.217, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17344910302264419;  // std dev = 0.165, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.053962674737718784;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.07527765659603498;  // std dev = 0.061, 203.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B), follows(H, G) )
%   | | | then return -0.5009088806117581;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.004880306134255173;  // std dev = 0.622, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | else return 0.09419169332044956;  // std dev = 0.230, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.35755375850055926;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05308096003216661;  // std dev = 0.394, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.11603362860851459;  // std dev = 1.207, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '30.410', 'seconds']
Refined model CLL: -0.109974


******************************************
Best model found
******************************************
Results 

CLL : -0.108883 

AUC ROC : 0.995326 

AUC PR : 0.456583 

Precision : 0.34507 

Recall : 0.942308 

F1 : 0.505155 

Total Learning Time : 23.925 

Total Inference Time : 25.078704833984375 

Total revision time: 74.3167919998169
Best scored revision CLL: -0.109974


Results 

CLL : -0.108883 

AUC ROC : 0.995326 

AUC PR : 0.456583 

Precision : 0.34507 

Recall : 0.942308 

F1 : 0.505155 

Total Learning Time : 74.38189576911927 

Total Inference Time : 25.078704833984375 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.706
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else return -0.07835900140842422;  // std dev = 0.244, 63.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0.16481560176617832;  // std dev = 0.461, 75.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7266576601272334;  // std dev = 0.201, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.024026417709770452;  // std dev = 0.275, 159.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06629736105771918;  // std dev = 1.794, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7488247121938462;  // std dev = 0.144, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14240429041641725;  // std dev = 4.881, 129.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5560289917065355;  // std dev = 1.069, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.36082676572654665;  // std dev = 1.043, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.4903398857646832;  // std dev = 0.852, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5918449580822184;  // std dev = 0.184, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5582496423659273;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01135219058561289;  // std dev = 4.552, 243.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=34 */
%   | | | else return 0.05175002202003715;  // std dev = 4.110, 107.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5166796779887785;  // std dev = 3.182, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1222673985647411;  // std dev = 0.029, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | | else return -0.12934392595582858;  // std dev = 0.006, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16293729190233003;  // std dev = 0.231, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3112883132347676;  // std dev = 1.180, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return -0.06241866251882339;  // std dev = 0.892, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.20852684935429106;  // std dev = 1.351, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.5107924997147413;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6326083344428748;  // std dev = 0.365, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.1030021973315195;  // std dev = 1.798, 243.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=5 */
%   | | else return 0.016859865108033376;  // std dev = 0.305, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04209920510839015;  // std dev = 3.086, 214.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2794711114645971;  // std dev = 0.335, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4909102540408532;  // std dev = 1.623, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1276031448710123;  // std dev = 0.192, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | | else return -0.12875360638167907;  // std dev = 0.187, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2622617205889163;  // std dev = 2.202, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.09391444418573565;  // std dev = 1.861, 292.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.044324203134047495;  // std dev = 2.261, 83.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17923837111775764;  // std dev = 0.998, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.3580032844568477;  // std dev = 0.129, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.048031892624434656;  // std dev = 0.153, 174.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.011193338222992861;  // std dev = 2.126, 128.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
%   | | | else return 0.033352779575059055;  // std dev = 2.557, 85.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17094364567570586;  // std dev = 0.120, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24862447986838246;  // std dev = 1.380, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09361474099472974;  // std dev = 0.090, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37453507906974665;  // std dev = 1.298, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12004797510584841;  // std dev = 0.262, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1631548635668421;  // std dev = 1.410, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.17027498494934262;  // std dev = 0.376, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08437502784147027;  // std dev = 0.022, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0958091316250269;  // std dev = 0.012, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.013035165581239162;  // std dev = 1.057, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -0.005184221414233743;  // std dev = 1.581, 85.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19950091113304247;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07987162938154808;  // std dev = 1.878, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.307', 'seconds']
Parameter learned model CLL:-0.112306 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 162, 0], 'true,false,false': [0.244, 59, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.47e-08, 42, 0], 'false,false': [0.461, 52, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.201, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.275, 140, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.794, 52, 4], 'false,false,false,true': [0.144, 0, 8], 'false,false,false,false': [4.881, 89, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.069, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [1.043, 2, 3], 'true,false,false': [0.852, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.184, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.552, 209, 34], 'false,false,false,false': [4.11, 84, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.182, 6, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.029, 174, 0], 'false,true,false,false': [0.006, 29, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.231, 84, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.18, 1, 77], 'true,false': [0.892, 1, 1], 'false,true,true': [1.351, 2, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.365, 0, 39], 'false,false,true,false': [1.798, 238, 5], 'false,false,false': [0.305, 58, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.086, 132, 82], 'false,true': [0.335, 0, 22], 'false,false,true': [1.623, 2, 52], 'false,false,false,true': [0.192, 81, 0], 'false,false,false,false': [0.187, 60, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.202, 4, 121], 'true,false': [1.861, 285, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.261, 55, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.998, 1, 83], 'true,false,true': [0.129, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 155, 19], 'false,false,false,true': [2.126, 100, 28], 'false,false,false,false': [2.557, 61, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.12, 1, 78], 'false,true,true,true': [1.38, 2, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.09, 216, 0], 'false,false,true': [1.298, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.262, 100, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.41, 2, 85], 'true,true,false': [0.376, 0, 19], 'true,false,true': [0.022, 162, 0], 'true,false,false,true': [0.012, 35, 0], 'true,false,false,false': [1.057, 26, 4], 'false,true': [1.581, 60, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.878, 31, 21]}]
{'': [0.21982274714542804, 0.22376512596707077], 'false': [0.2339051013588785, 0.2126222222222232], 'false,true': [7.105427357601002e-16, 4.7580986769649563e-17], 'true': [0.01851192595229848, 0.01746172839506162], 'true,false': [-1.507710280355151e-16, 0.05946082136558317], 'false,true,true': [0.0, 0.0]}
{'': [0.00047746378243294213, 0.12995952683429773], 'false': [0.07578904062958, 0.16683397653654286], 'false,false': [0.057480789345118924, 0.1942423822922936], 'false,false,false': [0.0025844964320571595, 0.18465393956382334], 'false,true': [nan, 0.07578904062958], 'false,false,true': [nan, 0.057480789345118924]}
{'': [0.0385184566788378, 0.11902679104509122], 'false': [nan, 0.11902679104509156], 'false,false': [0.0018426861029829616, 0.10831264689398064], 'false,false,false': [0.08525896956541554, 0.15790362565970284], 'true': [0.016820932805595542, 0.13351452673413597], 'true,false': [0.21771081043319543, 0.08074822490298726], 'true,true': [0.016820932805595542, nan], 'false,false,true': [0.005643226190386412, -2.3684757858670006e-16]}
{'': [0.062489426527600166, 0.0005194819577478407], 'false': [1.0460179358577291e-05, 0.0006371261635886702], 'false,false': [nan, 0.0006371261635886702], 'false,false,false': [nan, 0.0006371261635886702], 'false,true': [nan, 1.0460179358575104e-05], 'false,true,false': [4.833564222806152e-06, 1.2965216729359395e-06]}
{'': [0.030742048497013653, 0.08279742940485789], 'false': [0.08313809748350375, 0.07983363633412921], 'false,true': [0.0829447313324927, 0.0], 'false,false': [0.07641985023795947, 0.09313007058688533], 'false,false,true': [0.0034183164686948176, 0.01330000633493713], 'true': [0.017844470716821898, 0.39758210079076917]}
{'': [0.04448960803281404, 0.08700749263311891], 'false': [0.00511016408128483, 0.09059352639361681], 'false,false': [0.04875431644204367, 0.000509916778665306], 'true': [nan, 0.044489608032813675], 'true,false': [nan, 0.04448960803281404], 'false,false,false': [0.00045368853889564496, 0.0005850645584063026]}
{'': [0.04656846730361272, 0.06160416151663741], 'false': [nan, 0.061604161516637494], 'false,false': [nan, 0.06160416151663741], 'false,false,false': [nan, 0.06160416151663741], 'true': [0.03880354315542127, 0.011864477358463459]}
{'': [0.012508436205269145, 0.040164769794166374], 'false': [nan, 0.04016476979416631], 'false,false': [0.023561704120138655, 0.052386725895775706], 'false,false,false': [0.035311166787690876, 0.07690803181107386], 'true': [0.011866356532183101, 0.008262071820753808], 'true,false': [0.008262071820753808, nan]}
{'': [0.014456905685352158, 0.03804519222709813], 'false': [0.022913554490644753, 0.06288467278907343], 'false,false': [0.04109737553031587, 0.0006890370298164905], 'false,true': [0.047615583743995105, 3.790395750858953e-05], 'false,true,true': [0.047615583743995105, nan], 'false,false,false': [nan, 0.0006890370298164905]}
{'': [0.022799892400460053, 0.045465139367629706], 'false': [0.02941861701295286, 0.06582667036629608], 'false,false': [0.0, 0.06782842223029635], 'false,false,false': [nan, 0.0678284222302963], 'true': [0.020087266982478737, 0.005556705314140551], 'true,true': [0.022843788308830396, 0.007423691822583944], 'true,false': [3.1230930045463886e-06, 0.018886539434291423], 'true,false,false': [4.393689466246948e-06, 0.03722642437897253]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 69.563
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else return 0.7711924133603816;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else return -0.1237515173891761;  // std dev = 0.133, 221.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.20814893509951235;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6887041814417234;  // std dev = 0.173, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else return 0.7333900286345845;  // std dev = 0.206, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(F, E) )
%   | | then if ( tweets(A, G), tweets(E, G) )
%   | | | then return 0.4545694322667227;  // std dev = 1.482, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.7252104935851845;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7705010057642648;  // std dev = 0.125, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.744677099659365;  // std dev = 0.132, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12744380712911502;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08202983950586148;  // std dev = 4.005, 118.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=29 */
%   | | | else return 0.2502540691751666;  // std dev = 2.367, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.577159438654006;  // std dev = 0.324, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5629509039989166;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.22774007781325553;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5895776682390955;  // std dev = 0.194, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4894273488662408;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10874612403897126;  // std dev = 0.682, 132.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=1 */
%   | | | else return -0.022147277248788767;  // std dev = 2.628, 118.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=16 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.09364352527020559;  // std dev = 2.766, 55.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=15 */
%   | | | else return 0.15846581931299974;  // std dev = 3.589, 70.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.38652909306240185;  // std dev = 1.392, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return 0.10842079160545359;  // std dev = 1.132, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.40682859673037763;  // std dev = 0.958, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.5469712066844976;  // std dev = 0.386, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.4516695672420381;  // std dev = 0.090, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.547707063416596;  // std dev = 0.124, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.6208239660070022;  // std dev = 1.020, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.7130738900995351;  // std dev = 0.239, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.12396375093364974;  // std dev = 0.035, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.32938315015607195;  // std dev = 0.002, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.2755278767035625;  // std dev = 1.377, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | else return 0.4371599771010945;  // std dev = 0.059, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.24027982654548824;  // std dev = 0.310, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3366371858424229;  // std dev = 0.044, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.41116534900106066;  // std dev = 0.897, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09507804367701153;  // std dev = 0.050, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.03026430260906888;  // std dev = 2.251, 62.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=15 */
%   | | | else return 0.05790076415751235;  // std dev = 2.952, 78.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.26717457338466233;  // std dev = 0.074, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.13536951893640728;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.3454714870776389;  // std dev = 0.152, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.0870927785920078;  // std dev = 0.036, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | else return -0.0725120891957565;  // std dev = 0.080, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27307484026126594;  // std dev = 0.049, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2120111274372074;  // std dev = 0.962, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.47541732156625044;  // std dev = 1.426, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | else return -0.13425514698451455;  // std dev = 0.041, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.21297262896926308;  // std dev = 3.33e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.06409223146995328;  // std dev = 1.266, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.22010451008633372;  // std dev = 0.006, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.22061795047074037;  // std dev = 0.206, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then return -0.050773625373106694;  // std dev = 0.121, 251.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=23 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.36037429752392175;  // std dev = 0.331, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.1114427785647598;  // std dev = 1.003, 47.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.016893977315237237;  // std dev = 0.856, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.010200556657814065;  // std dev = 2.466, 72.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( follows(D, E), follows(A, E) )
%   | | | then return 0.18444150341903445;  // std dev = 1.031, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | | else return 0.041974936021384496;  // std dev = 1.520, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else return 0.2990954722702925;  // std dev = 0.068, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return -0.08737827227953289;  // std dev = 0.036, 245.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.18182758674926627;  // std dev = 0.057, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.32102385076219847;  // std dev = 0.164, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.0731953616470149;  // std dev = 0.016, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.05554136682123968;  // std dev = 1.016, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | | else return 0.03445732318459872;  // std dev = 1.683, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1632818741159674;  // std dev = 0.164, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(E, A) )
%   | | then return 0.27573317716012996;  // std dev = 0.153, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.16363702623244847;  // std dev = 0.089, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.071483013941917;  // std dev = 1.362, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.25712982038085663;  // std dev = 0.202, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07045619091214059;  // std dev = 0.042, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2811266417883;  // std dev = 0.084, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.4374673027157699;  // std dev = 0.245, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.13181870066375795;  // std dev = 0.036, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.1458287673613076;  // std dev = 0.098, 87.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=86 */
%   | | else return 0.09849614356232356;  // std dev = 0.192, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return -0.05942541390928289;  // std dev = 0.049, 220.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.12851462736047625;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.019823306066405838;  // std dev = 1.320, 58.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=15 */
%   | | | else return -0.05221463248378385;  // std dev = 0.686, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.05157703063176966;  // std dev = 0.579, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.022590500750304335;  // std dev = 1.167, 39.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
%   | | | else return -0.031789968145255455;  // std dev = 1.243, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '34.780', 'seconds']
Refined model CLL: -0.103001


******************************************
Best model found
******************************************
Results 

CLL : -0.100808 

AUC ROC : 0.994148 

AUC PR : 0.443934 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 69.563 

Total Inference Time : 42.671846866607666 

Total revision time: 142.27369303131104
Best scored revision CLL: -0.103001


Results 

CLL : -0.100808 

AUC ROC : 0.994148 

AUC PR : 0.443934 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 142.3387968006134 

Total Inference Time : 42.671846866607666 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.295
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048835;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | | else return -0.05094197399139689;  // std dev = 0.287, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.14847151574467365;  // std dev = 0.454, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6914921912608324;  // std dev = 1.710, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.018384923860683508;  // std dev = 0.285, 172.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0987252993674342;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5723510845347226;  // std dev = 0.798, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.15767692351761936;  // std dev = 3.118, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.49488863165232316;  // std dev = 2.478, 77.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=70 */
%   | | else return 0.22879902867964508;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8183215399746757;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6300881834806862;  // std dev = 0.134, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5692178609824885;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5692178609824885;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0439254270259366;  // std dev = 3.643, 215.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=21 */
%   | | | else return 0.01416903420917486;  // std dev = 2.829, 68.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5112942406478038;  // std dev = 2.271, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11918102364311023;  // std dev = 0.031, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | | | else return -0.1250408706930381;  // std dev = 0.002, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1595716028910395;  // std dev = 0.164, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3301205974536916;  // std dev = 1.130, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.4549700700311011;  // std dev = 0.178, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3096296383857702;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5839979308148887;  // std dev = 1.047, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.0838505221962909;  // std dev = 2.298, 241.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=9 */
%   | | else return -0.10786146813225027;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03041773499569005;  // std dev = 3.598, 262.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25536561012364145;  // std dev = 0.097, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.494292164882737;  // std dev = 1.155, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12037193504886377;  // std dev = 0.109, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.11228724509190875;  // std dev = 0.121, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2554807824132595;  // std dev = 2.418, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | else return -0.07857689602959557;  // std dev = 2.044, 256.000 (wgt'ed) examples reached here.  /* #neg=245 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0175899687115584;  // std dev = 0.658, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19205489778135926;  // std dev = 0.994, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22064551225483264;  // std dev = 0.032, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.048859384580692375;  // std dev = 0.144, 229.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -8.777326395127527E-4;  // std dev = 1.386, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.08808215458592764;  // std dev = 1.670, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13757238929885543;  // std dev = 0.239, 82.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28627553221591073;  // std dev = 0.727, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09148134553097632;  // std dev = 0.041, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4499559253652213;  // std dev = 0.599, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11062844705610542;  // std dev = 0.132, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17946106587790578;  // std dev = 1.565, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.13566806098178436;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0842507227629451;  // std dev = 0.021, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0825880548773563;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.03605028735715234;  // std dev = 0.480, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.0755494978820622;  // std dev = 0.873, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.23893178363962353;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.047108334600633434;  // std dev = 1.361, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.670', 'seconds']
Parameter learned model CLL:-0.111582 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 190, 0], 'true,false,false': [0.287, 20, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 19, 0], 'false,false': [0.454, 22, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.71, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.285, 150, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.981, 26, 1], 'false,false,false,true': [0.798, 1, 4], 'false,false,false,false': [3.118, 35, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.478, 7, 70], 'true,true,false': [0.707, 1, 1], 'true,false,true': [0.081, 0, 2], 'true,false,false': [0.134, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.643, 194, 21], 'false,false,false,false': [2.829, 57, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.271, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.031, 155, 0], 'false,true,false,false': [0.002, 40, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.164, 49, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.13, 1, 73], 'true,false': [0.178, 0, 4], 'false,true,true': [1.49e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.047, 1, 23], 'false,false,true,false': [2.298, 232, 9], 'false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.598, 171, 91], 'false,true': [0.097, 0, 13], 'false,false,true': [1.155, 1, 22], 'false,false,false,true': [0.109, 37, 0], 'false,false,false,false': [0.121, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.418, 5, 107], 'true,false': [2.044, 245, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.658, 14, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.994, 1, 80], 'true,false,true': [0.032, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.144, 207, 22], 'false,false,false,true': [1.386, 45, 13], 'false,false,false,false': [1.67, 19, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.239, 5, 77], 'false,true,true,true': [0.727, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.041, 201, 0], 'false,false,true': [0.599, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.132, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.565, 2, 94], 'true,true,false': [0.011, 0, 9], 'true,false,true': [0.021, 180, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.48, 13, 2], 'false,true': [0.873, 12, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.361, 18, 8]}]
{'': [0.22116411534354072, 0.2239854318418315], 'false': [0.23725286160249692, 0.2060353798126952], 'false,true': [-1.4802973661668753e-16, 0.0], 'true': [0.027500889996442155, 0.009344962620149349], 'true,false': [-2.220446049250313e-16, 0.0826446280991736], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.03438886342409254, 0.1111560724968058], 'false': [0.08133990684118918, 0.1628006614915247], 'false,false': [0.03566529492455416, 0.19547031536528317], 'false,false,false': [0.12750264339095296, 0.18692192635068197], 'false,true': [nan, 0.08133990684118918], 'false,false,true': [nan, 0.03566529492455416]}
{'': [0.08333429668885038, 0.09068832053996195], 'false': [nan, 0.09068832053996193], 'false,false': [-3.657205257588751e-16, 0.07579146587736467], 'true': [0.08579765361492875, 0.011963240330928585], 'true,true': [0.07974015945783432, 0.24999999999999997], 'false,false,false': [0.061721207155205016, 0.1177142928779249], 'true,false': [0.003259133009641424, 0.004504695159241179], 'false,false,true': [-1.4802973661668753e-16, -5.551115123125783e-17]}
{'': [0.03996675503435169, 0.00036471192182281414], 'false': [1.0562780014427977e-05, 0.0005467452149061636], 'false,false': [nan, 0.0005467452149061636], 'false,false,false': [nan, 0.0005467452149061636], 'false,true': [nan, 1.0562780014427977e-05], 'false,true,false': [6.22849992621106e-06, 6.396071765280009e-08]}
{'': [0.017537016750255728, 0.06022245216314976], 'false': [1.3061447348531253e-17, 0.057352046104848446], 'false,false': [0.06079355675955151, -1.2335811384723961e-17], 'false,false,true': [0.04565993999979804, 0.02190623383764416], 'true': [0.01725885433135206, 0.007894984071620093], 'false,true': [1.3061447348531253e-17, nan]}
{'': [0.04940023195403669, 0.08098820747456294], 'false': [0.0007246088534648826, 0.08686130783887519], 'false,false': [0.05796747870849828, 0.0004188667668550181], 'true': [nan, 0.04940023195403725], 'true,false': [nan, 0.04940023195403669], 'false,false,false': [0.0003218442104119707, 0.0005060117144410807]}
{'': [0.0508734226456514, 0.01967144622153078], 'true': [0.052203651785824444, 0.01632789401915588], 'false': [nan, 0.01967144622153078], 'false,false': [nan, 0.01967144622153078], 'false,false,false': [nan, 0.01967144622153078]}
{'': [0.011936431380520333, 0.031681746953872436], 'false': [nan, 0.03168174695387281], 'false,false': [0.020733574151710194, 0.05653026850802087], 'false,false,false': [0.03313196064485905, 0.09966093648490877], 'true': [0.012199057353011791, 0.0005023532040911508], 'true,false': [0.0005023532040911508, nan]}
{'': [0.05713474902244345, 0.03133768972663439], 'false': [0.019184853763869227, 0.07474702333285156], 'false,false': [0.02108798113275995, 0.00046909903775098686], 'false,true': [0.016535118511901994, 8.383372825630378e-06], 'false,true,true': [0.016535118511901994, nan], 'false,false,false': [nan, 0.00046909903775098686]}
{'': [0.023574895426172006, 0.05206442845963473], 'false': [0.03173867378607637, 0.06991753059686719], 'false,false': [0.0, 0.0712438428482687], 'false,false,false': [nan, 0.0712438428482687], 'true': [0.02348725340910901, 0.0012911935442387987], 'true,true': [0.025523555561591194, 1.3255033376766453e-05], 'true,false': [2.498968068821562e-06, 0.010122149616518286], 'true,false,false': [-4.625929269271485e-18, 0.015383277959267555]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 26.9
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.8392810105712104;  // std dev = 0.991, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.132922493471917;  // std dev = 0.094, 224.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.6687202811451373;  // std dev = 0.227, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | else return 0.7246100499036126;  // std dev = 0.152, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.32928309306450093;  // std dev = 1.069, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.6873671524831834;  // std dev = 1.003, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return -0.12642745700929675;  // std dev = 2.05e-07, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7438191550040489;  // std dev = 0.132, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.14638552851938297;  // std dev = 0.144, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13453014631448423;  // std dev = 1.406, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.202334239218108;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then return 0.5366684023622618;  // std dev = 0.176, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | else return 0.5860165342711757;  // std dev = 0.034, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(F, A) )
%   | | then return 0.3668758019252571;  // std dev = 0.995, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.42245690816820475;  // std dev = 0.871, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5540976653441961;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5803291417613512;  // std dev = 0.132, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11311102463960149;  // std dev = 8.16e-08, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02546135024751622;  // std dev = 1.822, 38.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=8 */
%   | | | else return 0.09709270765934835;  // std dev = 2.350, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then return 0.435766628587242;  // std dev = 0.321, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.527370148237841;  // std dev = 0.227, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.6620785113364264;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6704515841202591;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7701704943266418;  // std dev = 0.055, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10225090538275472;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else return -0.10225090538275439;  // std dev = 1.83e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return -0.16595753110180028;  // std dev = 0.231, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.31518882929976005;  // std dev = 0.989, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.26947055892312594;  // std dev = 0.967, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.07931512211339267;  // std dev = 0.858, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.4484980194016514;  // std dev = 0.317, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, A) )
%   | | then return 0.14924524507167156;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.3159119117383382;  // std dev = 6.45e-09, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.06786035649151953;  // std dev = 1.694, 233.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=15 */
%   | | | else return 0.028567007572235247;  // std dev = 2.402, 60.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
%   | | else return -0.09323907944949579;  // std dev = 2.28e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.27138634346610363;  // std dev = 0.011, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.27423047746570745;  // std dev = 1.035, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.08765798428326833;  // std dev = 4.71e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else return -0.013323105513622662;  // std dev = 0.156, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.3055313189654888;  // std dev = 0.186, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2518942118843874;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.31624677799331763;  // std dev = 1.010, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5517859165945098;  // std dev = 0.210, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11840641059714047;  // std dev = 0.041, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.21976926398542648;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.07572002544797939;  // std dev = 1.308, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return 0.23226131284075752;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.22256566822761606;  // std dev = 0.038, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then return -0.04851681572436888;  // std dev = 0.106, 258.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=23 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return -0.5549560162682645;  // std dev = 0.850, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.22130927996589575;  // std dev = 0.101, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.01613799310462842;  // std dev = 1.153, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.06335882075720206;  // std dev = 1.405, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1745899999921488;  // std dev = 0.109, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.29206397857487854;  // std dev = 0.068, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.06650558962044978;  // std dev = 0.067, 125.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.19411097628432702;  // std dev = 1.396, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return -0.07887442734821058;  // std dev = 0.026, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.30259631144504046;  // std dev = 0.247, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1064757367280782;  // std dev = 0.095, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.06413999224517368;  // std dev = 1.043, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | | else return -0.027294212261919856;  // std dev = 1.315, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.16305868533715048;  // std dev = 0.010, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return 0.09814110809261355;  // std dev = 0.294, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.2296739998028812;  // std dev = 0.233, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.19379321754203135;  // std dev = 0.895, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.08041654556753022;  // std dev = 1.184, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return -0.07291395080121331;  // std dev = 0.002, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.2752874933953137;  // std dev = 0.033, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.45474205115811317;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.12021586620517823;  // std dev = 0.041, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14428943684562526;  // std dev = 0.143, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.1382209767466257;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06507355809996021;  // std dev = 0.034, 219.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.12353335580631235;  // std dev = 0.073, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.005012942525792157;  // std dev = 0.564, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | | else return -0.001352494175258766;  // std dev = 0.567, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return -0.27766033050025907;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.045666454652222896;  // std dev = 0.607, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.020484367981832736;  // std dev = 1.002, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '38.146', 'seconds']
Refined model CLL: -0.101509


******************************************
Best model found
******************************************
Results 

CLL : -0.099708 

AUC ROC : 0.995459 

AUC PR : 0.444878 

Precision : 0.344444 

Recall : 0.99359 

F1 : 0.511551 

Total Learning Time : 26.9 

Total Inference Time : 34.73475623130798 

Total revision time: 87.79289896011352
Best scored revision CLL: -0.101509


Results 

CLL : -0.099708 

AUC ROC : 0.995459 

AUC PR : 0.444878 

Precision : 0.344444 

Recall : 0.99359 

F1 : 0.511551 

Total Learning Time : 87.8460829925537 

Total Inference Time : 34.73475623130798 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.97
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048835;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else return -0.06185106490048773;  // std dev = 0.271, 50.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0.2119950889456654;  // std dev = 0.478, 65.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7229096274265603;  // std dev = 0.204, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.038091006579012474;  // std dev = 0.259, 182.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06178309393609652;  // std dev = 1.786, 51.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7471888648717928;  // std dev = 0.136, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.12164769918839272;  // std dev = 4.941, 138.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5525015033397986;  // std dev = 1.072, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7281820434275135;  // std dev = 0.228, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4707623665067897;  // std dev = 0.995, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5883456686354565;  // std dev = 0.185, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.554517755834605;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02912317554578666;  // std dev = 4.614, 290.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=34 */
%   | | | else return 0.04333669736070287;  // std dev = 4.126, 109.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5380434139033051;  // std dev = 2.568, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12009636612845644;  // std dev = 0.065, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | | else return -0.12780762198434997;  // std dev = 0.018, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16736905316167114;  // std dev = 0.253, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2798233730959697;  // std dev = 1.733, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.4682218871430375;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29275685517770395;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5031380475309133;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.630750888605672;  // std dev = 0.336, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10049388696115874;  // std dev = 1.787, 248.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=5 */
%   | | else return 0.036006709163368934;  // std dev = 0.323, 61.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015014686887371648;  // std dev = 3.359, 256.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2469627319848561;  // std dev = 0.182, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4639469151471933;  // std dev = 1.986, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12466490473127337;  // std dev = 0.195, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return -0.1283412461520279;  // std dev = 0.192, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27124972847861933;  // std dev = 2.003, 124.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else return -0.09346944730492628;  // std dev = 1.994, 269.000 (wgt'ed) examples reached here.  /* #neg=262 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02754130050717521;  // std dev = 2.380, 84.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1778976156451051;  // std dev = 0.996, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2571967200077833;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04180160838866278;  // std dev = 0.144, 179.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.008362360323348604;  // std dev = 2.078, 130.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=28 */
%   | | | else return 0.03657720311297531;  // std dev = 2.514, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14728495443221096;  // std dev = 0.182, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28249085879563596;  // std dev = 0.895, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09140063232733271;  // std dev = 0.111, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4004054260624973;  // std dev = 0.800, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11672652188855187;  // std dev = 0.272, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17320842797384672;  // std dev = 1.255, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.15845494429749654;  // std dev = 0.377, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08056304793603351;  // std dev = 0.018, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09475550337712858;  // std dev = 0.027, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.008336845510639446;  // std dev = 0.967, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.004689415397292314;  // std dev = 1.346, 87.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20312570682888542;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04267134070152722;  // std dev = 1.935, 62.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.201', 'seconds']
Parameter learned model CLL:-0.110771 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [4.62e-07, 0, 104], 'true,false,true': [0.0, 188, 0], 'true,false,false': [0.271, 46, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.77e-08, 55, 0], 'false,false': [0.478, 42, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.204, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.259, 163, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.786, 47, 4], 'false,false,false,true': [0.136, 0, 8], 'false,false,false,false': [4.941, 98, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.072, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.228, 0, 3], 'true,false,false': [0.995, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.185, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.614, 256, 34], 'false,false,false,false': [4.126, 86, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.568, 2, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.065, 172, 0], 'false,true,false,false': [0.018, 39, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.253, 76, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.733, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.336, 0, 39], 'false,false,true,false': [1.787, 243, 5], 'false,false,false': [0.323, 48, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.359, 174, 82], 'false,true': [0.182, 0, 22], 'false,false,true': [1.986, 3, 52], 'false,false,false,true': [0.195, 72, 0], 'false,false,false,false': [0.192, 60, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.003, 3, 121], 'true,false': [1.994, 262, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.38, 56, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.996, 1, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.144, 160, 19], 'false,false,false,true': [2.078, 102, 28], 'false,false,false,false': [2.514, 59, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.182, 3, 78], 'false,true,true,true': [0.895, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.111, 201, 0], 'false,false,true': [0.8, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.272, 92, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.255, 1, 85], 'true,true,false': [0.377, 0, 19], 'true,false,true': [0.018, 151, 0], 'true,false,false,true': [0.027, 24, 0], 'true,false,false,false': [0.967, 19, 4], 'false,true': [1.346, 62, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.935, 41, 21]}]
{'': [0.2160664819944619, 0.22145065398335392], 'false': [0.2148437500000011, 0.2286390532544389], 'true': [2.049642507000289e-15, 0.016524256761528033], 'false,true': [7.105427357601002e-16, 6.055761952500853e-17], 'true,false': [-2.1732025162875404e-16, 0.07359999999999985], 'false,true,true': [0.0, 0.0]}
{'': [0.0004900143628313291, 0.12232139573280644], 'false': [0.0670281020392344, 0.16430517025560445], 'false,false': [0.06252776962645236, 0.18758742959702343], 'false,false,false': [0.002304438948585563, 0.17688728075428536], 'false,true': [nan, 0.0670281020392344], 'false,false,true': [nan, 0.06252776962645236]}
{'': [0.029291835105309173, 0.10793776617888547], 'false': [nan, 0.10793776617888588], 'false,false': [0.0018682900970811104, 0.09707461266425274], 'false,false,false': [0.07342269770095498, 0.1561856215518854], 'true': [0.016891780279554278, 0.09930193308283967], 'true,false': [0.017286029469614068, 0.11007434510408909], 'true,true': [0.016891780279554278, nan], 'false,false,true': [0.005721638422310142, -2.3684757858670006e-16]}
{'': [0.041751600260823446, 0.0006548197529290179], 'false': [3.056492027284283e-05, 0.0008425882693402148], 'false,false': [nan, 0.0008425882693402148], 'false,false,false': [nan, 0.0008425882693402148], 'false,true': [nan, 3.056492027284283e-05], 'false,true,false': [2.4662681204900856e-05, 8.122718845714442e-06]}
{'': [0.03751286432182102, 0.08010679500906477], 'false': [0.002015965617967696, 0.07978588055073763], 'false,false': [0.0743113448308771, 0.1044059692116301], 'false,false,true': [0.0028882725864772777, 0.012881045798086013], 'true': [0.037543577593805, 0.0], 'false,true': [9.133132391891951e-06, 0.0]}
{'': [0.044078103850880825, 0.08786816103796742], 'false': [0.0015038123014629035, 0.09383135331248092], 'false,false': [0.07170782344231597, 0.0005689368369154406], 'true': [nan, 0.044078103850880485], 'true,false': [nan, 0.044078103850880825], 'false,false,false': [0.0005274370545306803, 0.000611364492372507]}
{'': [0.04906091227590676, 0.06741009841703564], 'false': [nan, 0.06741009841703581], 'false,false': [nan, 0.06741009841703564], 'false,false,false': [nan, 0.06741009841703564], 'true': [0.032362929506049236, 0.01478741228804787]}
{'': [0.011675378511205014, 0.03751100549324463], 'false': [nan, 0.03751100549324463], 'false,false': [0.02072870617843434, 0.05042902398912704], 'false,false,false': [0.03321121792675504, 0.07616407407130081], 'true': [0.011804733341445347, 0.00010036833845188109], 'true,false': [0.00010036833845188109, nan]}
{'': [0.033279171178564965, 0.03744158060737857], 'false': [0.02209882829219227, 0.061887861752256905], 'false,false': [0.01599017118794699, 0.0008053637550811121], 'false,true': [0.021095091384491754, 6.179371997086003e-05], 'false,true,true': [0.021095091384491754, nan], 'false,false,false': [nan, 0.0008053637550811121]}
{'': [0.022682430922579808, 0.0375723208319788], 'false': [0.020817965057403652, 0.05928264736593381], 'false,false': [0.0, 0.06039044071655944], 'false,false,false': [nan, 0.0603904407165594], 'true': [0.016395251862316454, 0.0053121031553540815], 'true,true': [0.018322681321300213, 0.007492819239205978], 'true,false': [2.149212060885263e-06, 0.021769671123801262], 'true,false,false': [3.125007319468298e-05, 0.040639699931511196]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 25.074
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else return -0.0716756263039965;  // std dev = 0.255, 57.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.17633075328133055;  // std dev = 2.185, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.6423317279536601;  // std dev = 0.277, 61.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=56 */
%   | else return 0.7194734122109547;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.12544463852839105;  // std dev = 7.88e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else return -0.09818921753679956;  // std dev = 0.149, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.020498196209633873;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return -0.08961352841357256;  // std dev = 1.175, 39.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=2 */
%   | | else if ( follows(A, M), recursion_accounttype(M, B) )
%   | | | then return 0.6255936287954716;  // std dev = 0.797, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.15343805787957587;  // std dev = 4.570, 123.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.558216045158184;  // std dev = 0.126, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else return 0.48649195475016366;  // std dev = 0.285, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.6043950332292801;  // std dev = 0.186, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5574714423061767;  // std dev = 0.930, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11527739131163396;  // std dev = 0.087, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13557469437392536;  // std dev = 2.964, 56.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=19 */
%   | | | else return 0.1068490262993222;  // std dev = 3.489, 70.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.4319246872683703;  // std dev = 0.061, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.6313199755078945;  // std dev = 0.258, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.3325438517106809;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.20912281495598575;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(G, H), tweets(A, H) )
%   | | | then return 0.4113729368983854;  // std dev = 0.724, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.5708782053654825;  // std dev = 0.296, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6607399706773976;  // std dev = 0.016, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.74051606622123;  // std dev = 0.262, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.12389282325013339;  // std dev = 0.031, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.3449211841463928;  // std dev = 0.049, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.31696319556467994;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.16413712434911434;  // std dev = 0.521, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.05658069031941465;  // std dev = 0.801, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3358697515460142;  // std dev = 0.051, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3719591602558562;  // std dev = 0.408, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09371731093116183;  // std dev = 0.099, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.023733416893886652;  // std dev = 2.128, 57.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
%   | | | else return 0.05729814460028605;  // std dev = 3.000, 82.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2600209625208176;  // std dev = 0.030, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.15565507955648838;  // std dev = 1.273, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.08315872543973944;  // std dev = 2.36e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else return -0.059028149792847415;  // std dev = 0.108, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.3325528345144387;  // std dev = 0.289, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2554089631174558;  // std dev = 0.061, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.35532727475242687;  // std dev = 0.280, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.516629103255823;  // std dev = 0.438, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.13848534802084278;  // std dev = 0.034, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), follows(A, C) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.2140943972091401;  // std dev = 0.011, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.037132925494573754;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.21074702628254058;  // std dev = 0.073, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else return 0.060169325637552395;  // std dev = 0.869, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.2585180511244115;  // std dev = 0.081, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.07905341866829504;  // std dev = 0.061, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.1394709841964018;  // std dev = 0.323, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.0067783839938876;  // std dev = 2.112, 90.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=25 */
%   | | | else return 0.07672995831974398;  // std dev = 1.858, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), follows(F, A) )
%   | | | then return 0.14128985610082614;  // std dev = 1.388, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.17173565555284673;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.17717954558292592;  // std dev = 0.060, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.4002362053946086;  // std dev = 0.037, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04392926676909989;  // std dev = 0.093, 216.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=23 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.22422428788579896;  // std dev = 0.094, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.040604815531167716;  // std dev = 0.683, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.012124791496058955;  // std dev = 1.935, 71.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=19 */
%   | | | else return 0.027985089267899353;  // std dev = 2.195, 66.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.13745164000068102;  // std dev = 0.990, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.050322411728756004;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.16376597723679892;  // std dev = 0.089, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then return 0.3039618689129889;  // std dev = 0.236, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.20238450560303617;  // std dev = 0.039, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.18333605680880455;  // std dev = 0.056, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07045869298002078;  // std dev = 0.052, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.38502693380670655;  // std dev = 0.055, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.14589995078458398;  // std dev = 0.202, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.12771709871866266;  // std dev = 0.137, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else return -0.05983145996304766;  // std dev = 0.051, 231.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( tweets(A, H), tweets(F, H) )
%   | | | then return -1.2475031873963722E-4;  // std dev = 1.273, 56.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=18 */
%   | | | else return -0.03516290205841451;  // std dev = 0.356, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.02832420168498685;  // std dev = 0.412, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.0012761102743069491;  // std dev = 0.610, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.2102376626458139;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.004660960903273826;  // std dev = 1.332, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | | else return 0.010967412228589749;  // std dev = 1.219, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '34.106', 'seconds']
Refined model CLL: -0.106977


******************************************
Best model found
******************************************
Results 

CLL : -0.103714 

AUC ROC : 0.994069 

AUC PR : 0.441892 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 25.074 

Total Inference Time : 41.44052195549011 

Total revision time: 97.98172411346435
Best scored revision CLL: -0.106977


Results 

CLL : -0.103714 

AUC ROC : 0.994069 

AUC PR : 0.441892 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 98.03490814590454 

Total Inference Time : 41.44052195549011 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.356
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | | else return -0.08124500429442717;  // std dev = 0.239, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.20430278125335852;  // std dev = 0.476, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7012118477322481;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0245126414501148;  // std dev = 0.275, 185.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10099593522257289;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7474590973303332;  // std dev = 0.097, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1196780587294048;  // std dev = 3.200, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5504166393208528;  // std dev = 1.465, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7281806210257197;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8219368051289317;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5863835033812148;  // std dev = 0.131, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5645593076507137;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4534481965396026;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04201031736912798;  // std dev = 3.653, 210.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=21 */
%   | | | else return 0.0335698883389491;  // std dev = 2.793, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4922592761804972;  // std dev = 2.554, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11832697948135441;  // std dev = 0.034, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | | else return -0.12638355806025306;  // std dev = 0.002, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15233670013470946;  // std dev = 0.176, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3065517514752841;  // std dev = 1.433, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.410742830415249;  // std dev = 0.138, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.32206504059988117;  // std dev = 0.050, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6317417615148196;  // std dev = 0.182, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08498071301530176;  // std dev = 2.309, 250.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=9 */
%   | | else return -0.10502679827422094;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.035705526673808476;  // std dev = 3.286, 261.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26850196581148905;  // std dev = 0.108, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4015609304020144;  // std dev = 1.918, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11801550035516853;  // std dev = 0.136, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.11642817182803146;  // std dev = 0.149, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28707545227556425;  // std dev = 1.300, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else return -0.07939581242395295;  // std dev = 2.221, 244.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.029886426522117773;  // std dev = 0.677, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14850886734800667;  // std dev = 1.954, 84.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22044432002578196;  // std dev = 0.041, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05613705130832106;  // std dev = 0.154, 224.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0023295490646014294;  // std dev = 1.618, 56.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=13 */
%   | | | else return 0.06688667037490972;  // std dev = 1.746, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1548762241867669;  // std dev = 0.195, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28296546802081396;  // std dev = 0.662, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0907384472504757;  // std dev = 0.053, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4701865091522375;  // std dev = 0.624, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11354548131270706;  // std dev = 0.160, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17131287926914163;  // std dev = 1.541, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.14954788098796795;  // std dev = 0.000219, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08420555512142194;  // std dev = 0.030, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08112083641294918;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.018139330653979324;  // std dev = 0.489, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.03130679220816016;  // std dev = 1.023, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.23414083513383743;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09161774824104414;  // std dev = 1.327, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.220', 'seconds']
Parameter learned model CLL:-0.111511 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 183, 0], 'true,false,false': [0.239, 31, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.476, 17, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.275, 163, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.984, 31, 1], 'false,false,false,true': [0.097, 0, 4], 'false,false,false,false': [3.2, 42, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.465, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.081, 0, 2], 'true,false,false': [0.131, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.653, 189, 21], 'false,false,false,false': [2.793, 48, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.554, 4, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.034, 169, 0], 'false,true,false,false': [0.002, 30, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.176, 44, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.433, 2, 73], 'true,false': [0.138, 0, 4], 'false,true,true': [0.05, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.182, 0, 23], 'false,false,true,false': [2.309, 241, 9], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.286, 170, 91], 'false,true': [0.108, 0, 13], 'false,false,true': [1.918, 3, 22], 'false,false,false,true': [0.136, 41, 0], 'false,false,false,false': [0.149, 28, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.3, 1, 107], 'true,false': [2.221, 233, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.677, 13, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.954, 4, 80], 'true,false,true': [0.041, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 202, 22], 'false,false,false,true': [1.618, 43, 13], 'false,false,false,false': [1.746, 22, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.195, 3, 77], 'false,true,true,true': [0.662, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.053, 228, 0], 'false,false,true': [0.624, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.16, 42, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.541, 2, 94], 'true,true,false': [0.000219, 0, 9], 'true,false,true': [0.03, 180, 0], 'true,false,false,true': [0.0, 14, 0], 'true,false,false,false': [0.489, 10, 2], 'false,true': [1.023, 23, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.327, 13, 8]}]
{'': [0.2201065595248514, 0.22750000000000006], 'false': [0.22837370242214483, 0.22633136094674564], 'false,true': [-1.4802973661668753e-16, 5.046468293750712e-18], 'true': [0.01868480725623786, 0.009173525377228917], 'true,false': [-2.0627094446587609e-16, 0.05693296602387513], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.023569972754575307, 0.10242380555290889], 'false': [0.075478394980731, 0.14877029563576213], 'false,false': [0.030273437500000007, 0.186095175921343], 'false,false,false': [0.0023495957148030877, 0.17352970768333092], 'false,true': [nan, 0.075478394980731], 'false,false,true': [nan, 0.030273437500000007]}
{'': [0.029680417839178578, 0.09468075238455426], 'false': [nan, 0.09468075238455417], 'false,false': [0.052469135802469195, 0.07959168984027432], 'false,false,false': [0.06354717541499563, 0.13223981450932396], 'false,false,true': [-1.4802973661668753e-16, 0.0987654320987653], 'true': [0.029827365428887236, 0.016291014507838614], 'true,true': [0.029808757226169675, 0.0], 'true,false': [0.0032470668225028643, 0.004317869029089483]}
{'': [0.050192788395941816, 0.0002984032252809408], 'false': [1.4064307354773244e-05, 0.0007036128455915916], 'false,false': [nan, 0.0007036128455915916], 'false,false,false': [nan, 0.0007036128455915916], 'false,true': [nan, 1.4064307354775475e-05], 'false,true,false': [6.758351243012193e-06, 9.792978654110663e-08]}
{'': [0.026763618001693582, 0.05919194338177773], 'false': [0.00014686342231199292, 0.05581680371286835], 'false,false': [0.05928056993993835, -4.382459307730881e-18], 'false,false,true': [0.0014342331602580408, 0.021324427698681973], 'true': [0.027386629561661144, 0.00477603011558525], 'false,true': [0.00014686342231199292, nan]}
{'': [0.041373733052387944, 0.08760902150595992], 'false': [0.0009014059648750478, 0.09213652060075023], 'false,false': [0.14712632684759083, 0.0005928029363492077], 'true': [nan, 0.041373733052387604], 'true,false': [nan, 0.041373733052387944], 'false,false,false': [0.0004530845505091565, 0.0007958934120914937]}
{'': [0.04737705284190447, 0.021806929953771797], 'true': [0.015653977274248422, 0.020212367886434844], 'false': [nan, 0.021806929953771797], 'false,false': [nan, 0.021806929953771797], 'false,false,false': [nan, 0.021806929953771797]}
{'': [0.044540721637496325, 0.0367456232017531], 'true': [0.04546056495250387, 0.000852935133175331], 'false': [nan, 0.036745623201753244], 'false,false': [0.02358015194576474, 0.0662078300228931], 'false,false,false': [0.04672987527761707, 0.09831002472101388], 'true,false': [0.000852935133175331, nan]}
{'': [0.03786389826196189, 0.029382489948473107], 'false': [0.01676837385442456, 0.07691836098311415], 'false,false': [0.022877038156668777, 0.0006120327332023194], 'false,true': [0.013689726806346836, 1.22042018402551e-05], 'false,true,true': [0.013689726806346836, nan], 'false,false,false': [nan, 0.0006120327332023194]}
{'': [0.02250989732181944, 0.05067226309751411], 'false': [0.02989769678344639, 0.08098361707257179], 'false,false': [0.0, 0.08391666932224735], 'false,false,false': [nan, 0.08391666932224735], 'true': [0.02265638914653736, 0.0014023056437822493], 'true,true': [0.02473982097283473, 5.338249139027103e-09], 'true,false': [4.915215545634825e-06, 0.01017320726241289], 'true,false,false': [-1.982541115402065e-18, 0.01990604980135587]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 33.365
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.13259180564122913;  // std dev = 0.096, 216.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.15814893509951236;  // std dev = 0.458, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7093943795294303;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.6425503352878773;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.03460617721784519;  // std dev = 0.264, 157.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=17 */
%   | | else return -0.043603922409753526;  // std dev = 0.257, 53.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04020268280566775;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.13594311752653143;  // std dev = 0.147, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7490517228539605;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.05823545154499961;  // std dev = 3.255, 78.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.577942337082501;  // std dev = 0.403, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7598982323146211;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6658790356827354;  // std dev = 0.310, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5589809308057214;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5607881778354399;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10476474968115099;  // std dev = 1.459, 153.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=3 */
%   | | | else return -0.020677559067916483;  // std dev = 2.797, 100.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.18785255070731652;  // std dev = 1.868, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | | else return 0.11787173184412367;  // std dev = 2.350, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(A, D), tweets(A, G) )
%   | | | then return 0.3985016689220686;  // std dev = 0.991, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.43643410500784086;  // std dev = 0.206, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.32163497711448147;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(J, I) )
%   | | | then return 0.6269618108549065;  // std dev = 0.161, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2669502624356692;  // std dev = 0.731, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.6228029433312773;  // std dev = 1.363, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.6777693941943711;  // std dev = 0.960, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(L, A) )
%   | then return -0.1142949047416762;  // std dev = 0.006, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return -0.1641252181746626;  // std dev = 0.017, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.32527222987891885;  // std dev = 0.001, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return 0.16295679337291225;  // std dev = 0.399, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), tweets(G, F) )
%   | | | then return 0.33171471916182754;  // std dev = 0.974, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.06126727430730552;  // std dev = 1.054, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.2659844087560824;  // std dev = 0.717, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3330587322741774;  // std dev = 0.014, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5727519719095643;  // std dev = 0.214, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08389282396040249;  // std dev = 2.177, 249.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=9 */
%   | | else return -0.09215559731733775;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.23208062359798412;  // std dev = 1.400, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.3772103981406348;  // std dev = 0.049, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1552935364259859;  // std dev = 1.058, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04880319940749522;  // std dev = 0.159, 155.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=15 */
%   | | else return -0.04141045554481901;  // std dev = 0.158, 44.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.28583194428217856;  // std dev = 0.060, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.3821503372856938;  // std dev = 0.827, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.5604490924042324;  // std dev = 0.488, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.11859483503640303;  // std dev = 0.021, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D), tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.16189433444079382;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.22552992257275126;  // std dev = 0.033, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2250023961768232;  // std dev = 0.013, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.3263983997575649;  // std dev = 0.071, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3350642895722854;  // std dev = 0.187, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else return -0.09372883879679764;  // std dev = 0.007, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.2215336121162956;  // std dev = 0.000294, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.07698564285377157;  // std dev = 0.011, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.11623544614021168;  // std dev = 1.564, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.141373919701068;  // std dev = 1.656, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | | | else return -0.2222750429803159;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return 0.1834569271452147;  // std dev = 0.016, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.26993817464270653;  // std dev = 0.102, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.19750693033107605;  // std dev = 0.377, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | | else return -0.08329058765522757;  // std dev = 0.005, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.01956262222494673;  // std dev = 0.154, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.06582827099023096;  // std dev = 0.898, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.02001287180964528;  // std dev = 1.555, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.14837228327007698;  // std dev = 0.989, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return -0.14737507983122886;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.22417969480422084;  // std dev = 0.040, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2278635722437424;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.21882651342290826;  // std dev = 0.182, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return -0.07766767380409392;  // std dev = 0.004, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.21075901726052249;  // std dev = 0.052, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.48713201051956356;  // std dev = 0.190, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.11802196876233247;  // std dev = 0.019, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1350241268670719;  // std dev = 0.208, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.13232358660720228;  // std dev = 0.000196, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.0689205863066543;  // std dev = 0.033, 210.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.16318238890369507;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.023614096530704343;  // std dev = 0.553, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.016099502033303164;  // std dev = 0.694, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.19143104445188408;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.010965359900493077;  // std dev = 0.356, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.007959160382913166;  // std dev = 1.080, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '30.291', 'seconds']
Refined model CLL: -0.104293


******************************************
Best model found
******************************************
Results 

CLL : -0.102529 

AUC ROC : 0.994635 

AUC PR : 0.37286 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 33.365 

Total Inference Time : 26.198442935943604 

Total revision time: 86.00474695777893
Best scored revision CLL: -0.104293


Results 

CLL : -0.102529 

AUC ROC : 0.994635 

AUC PR : 0.37286 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 111.38438729858399 

Total Inference Time : 26.198442935943604 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 7.226
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else return -0.0740544547309962;  // std dev = 0.251, 59.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0.18209259707134262;  // std dev = 0.468, 71.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7131482230616665;  // std dev = 1.018, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03847226887565724;  // std dev = 0.257, 185.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0691262202505243;  // std dev = 1.795, 58.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7550431343948422;  // std dev = 0.130, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.09920976907960646;  // std dev = 5.062, 151.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5148949793479858;  // std dev = 2.001, 71.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.731825030048122;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5941691732946979;  // std dev = 0.178, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5929800481478739;  // std dev = 0.185, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5592765892052771;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.020182504542102964;  // std dev = 4.632, 270.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=34 */
%   | | | else return 0.04697313156320383;  // std dev = 4.136, 111.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5333594037564351;  // std dev = 2.916, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12075772274711483;  // std dev = 0.054, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | | else return -0.1272118431133529;  // std dev = 0.010, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16128919048872406;  // std dev = 0.265, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31457441910974293;  // std dev = 0.996, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.04306734368546927;  // std dev = 0.609, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2967563953649809;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.508640834574459;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6167470142086737;  // std dev = 0.969, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10007068268105766;  // std dev = 1.805, 255.000 (wgt'ed) examples reached here.  /* #neg=250 #pos=5 */
%   | | else return 0.00439739571420918;  // std dev = 0.299, 77.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.028299169858041682;  // std dev = 3.195, 240.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2543179717735473;  // std dev = 0.259, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5112099323060231;  // std dev = 1.415, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12329126502376636;  // std dev = 0.195, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | | else return -0.12693675893522072;  // std dev = 0.189, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28873433089530764;  // std dev = 1.489, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.09563736431723731;  // std dev = 2.058, 287.000 (wgt'ed) examples reached here.  /* #neg=280 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 9.719612791696552E-4;  // std dev = 2.485, 110.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17829530975850205;  // std dev = 0.998, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2997660524024625;  // std dev = 0.048, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05086054985171702;  // std dev = 0.169, 169.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.005966056718939769;  // std dev = 2.205, 122.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=28 */
%   | | | else return 0.05683135420765618;  // std dev = 2.541, 74.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15500138284102966;  // std dev = 0.160, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28392169189288036;  // std dev = 0.885, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09003812305920963;  // std dev = 0.069, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4024162687206473;  // std dev = 0.815, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11398723180559676;  // std dev = 0.264, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17175109642559486;  // std dev = 1.256, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.1617422779089074;  // std dev = 0.378, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08385936543060007;  // std dev = 0.344, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08992642797488458;  // std dev = 0.021, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.020073768203205316;  // std dev = 0.974, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.01275688720563126;  // std dev = 1.575, 71.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.16924103912575406;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04837680286268697;  // std dev = 1.975, 59.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.256', 'seconds']
Parameter learned model CLL:-0.109791 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 150, 0], 'true,false,false': [0.251, 55, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.05e-08, 48, 0], 'false,false': [0.468, 48, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.018, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.257, 166, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.795, 54, 4], 'false,false,false,true': [0.13, 0, 8], 'false,false,false,false': [5.062, 111, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.001, 4, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.226, 0, 3], 'true,false,false': [0.178, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.185, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.632, 236, 34], 'false,false,false,false': [4.136, 88, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.916, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.054, 161, 0], 'false,true,false,false': [0.01, 35, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.265, 103, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.996, 1, 77], 'true,false': [0.609, 1, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.969, 1, 39], 'false,false,true,false': [1.805, 250, 5], 'false,false,false': [0.299, 64, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.195, 158, 82], 'false,true': [0.259, 0, 22], 'false,false,true': [1.415, 1, 52], 'false,false,false,true': [0.195, 85, 0], 'false,false,false,false': [0.189, 65, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.489, 1, 121], 'true,false': [2.058, 280, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.485, 82, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.998, 1, 83], 'true,false,true': [0.048, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.169, 150, 19], 'false,false,false,true': [2.205, 94, 28], 'false,false,false,false': [2.541, 50, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.16, 2, 78], 'false,true,true,true': [0.885, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.069, 191, 0], 'false,false,true': [0.815, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.264, 100, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.256, 1, 85], 'true,true,false': [0.378, 0, 19], 'true,false,true': [0.344, 185, 0], 'true,false,false,true': [0.021, 29, 0], 'true,false,false,false': [0.974, 25, 4], 'false,true': [1.575, 46, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.975, 38, 21]}]
{'': [0.2256480993143762, 0.22145065398335392], 'true': [0.009433106575965852, 0.01877246400036619], 'false': [0.22370343316289376, 0.2190041658401121], 'false,true': [0.03698224852071082, 5.3198186596622086e-17], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-1.1546319456101628e-16, 0.06320022981901739]}
{'': [0.01205252295529548, 0.11801694755135939], 'false': [0.06608716061999714, 0.15600351450815184], 'false,false': [0.05556974623998739, 0.18180540213849652], 'false,false,false': [0.0021047999709661314, 0.16968483664471318], 'false,true': [nan, 0.06608716061999714], 'false,false,true': [nan, 0.05556974623998739]}
{'': [0.05193163457377758, 0.11296978793369039], 'false': [nan, 0.11296978793369192], 'false,false': [0.0018545683995023765, 0.10215021810032748], 'false,false,false': [0.07946170323568444, 0.15414251993022973], 'true': [0.05639827520708842, 0.011285938054245744], 'true,true': [0.05639827520708842, nan], 'true,false': [0.017022332848609878, 0.003966844124944857], 'false,false,true': [0.005679615723476639, -5.921189464667501e-17]}
{'': [0.053157561061291284, 0.0005994955970007453], 'false': [2.1210016304638444e-05, 0.0006834092299848095], 'false,false': [nan, 0.0006834092299848095], 'false,false,false': [nan, 0.0006834092299848095], 'false,true': [nan, 2.1210016304636178e-05], 'false,true,false': [1.778099822380557e-05, 2.766342221392572e-06]}
{'': [0.018846556591497265, 0.07832869104498522], 'false': [0.0020448283528215192, 0.07755886127018363], 'false,false': [0.07445145215516295, 0.08942192894736316], 'false,false,true': [0.02347666295210571, 0.012775957103493338], 'true': [0.012726300585270894, 0.18566335112902008], 'false,true': [9.21188574282139e-06, 0.0]}
{'': [0.04253859178001215, 0.08395158322059083], 'false': [0.0030530167447558776, 0.08827789554179445], 'false,false': [0.03775830799345144, 0.0004939475079442642], 'true': [nan, 0.04253859178001181], 'true,false': [nan, 0.04253859178001215], 'false,false,false': [0.00044632797365869284, 0.0005486884186389727]}
{'': [0.046697480928346226, 0.05614003852254305], 'false': [nan, 0.05614003852254311], 'false,false': [nan, 0.05614003852254305], 'false,false,false': [nan, 0.05614003852254305], 'true': [0.01817571037084544, 0.014752096350147082]}
{'': [0.011932453109311025, 0.045876300838831256], 'false': [nan, 0.04587630083883121], 'false,false': [0.02850206474434272, 0.0586779870194533], 'false,false,false': [0.03984382381768862, 0.0872742679553263], 'true': [0.011845602708271645, 0.0011681714558484935], 'true,false': [0.0011681714558484935, nan]}
{'': [0.02554744025484617, 0.03767777074375293], 'false': [0.02279782771021961, 0.05966678031099415], 'false,false': [0.016608956814995614, 0.0006977453220337759], 'false,true': [0.020620518891070264, 2.5132532138156245e-05], 'false,true,true': [0.020620518891070264, nan], 'false,false,false': [nan, 0.0006977453220337759]}
{'': [0.021170283854978836, 0.0489269114339843], 'false': [0.03492824790965808, 0.06437769560817548], 'false,false': [0.0, 0.06608103419070334], 'false,false,false': [nan, 0.06608103419070335], 'true': [0.016403494293755306, 0.004835364825294795], 'true,true': [0.018350619542946218, 0.00750814125295862], 'true,false': [0.0006380349268746469, 0.01758933152255446], 'true,false,false': [1.506743200614238e-05, 0.03272389857451381]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 38.368
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.12112567629945195;  // std dev = 0.142, 193.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.20814893509951235;  // std dev = 0.477, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.725408560576139;  // std dev = 0.210, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5627867205773588;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.048704437312567725;  // std dev = 2.945, 141.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=13 */
%   | | | else return -0.10099006104720287;  // std dev = 0.896, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.005597241964236599;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | | else return -0.08583810285654911;  // std dev = 1.225, 40.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.10002370344256155;  // std dev = 4.729, 150.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.5535034075928879;  // std dev = 0.129, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | else return 0.2397767729231081;  // std dev = 0.777, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return 0.22203310341295127;  // std dev = 0.471, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else return 0.22203310341295093;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5668839519069646;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6976331997473335;  // std dev = 0.997, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.1216532905023318;  // std dev = 0.065, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06723877563184073;  // std dev = 3.176, 77.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=19 */
%   | | | else return 0.17644489949279935;  // std dev = 3.251, 57.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.40329064095741496;  // std dev = 0.992, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | | | else return 0.48810312945904033;  // std dev = 0.055, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.3885540569164166;  // std dev = 1.027, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.4999138626817067;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(J, H) )
%   | | | then return 0.4161649773418077;  // std dev = 2.98e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.47517994265040436;  // std dev = 0.204, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.6193978590072696;  // std dev = 0.983, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return 0.7206944903344071;  // std dev = 0.264, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.12641911454062368;  // std dev = 0.029, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.3255356628450566;  // std dev = 4.21e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.28945950895153705;  // std dev = 0.983, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else return 0.33972103126928527;  // std dev = 0.103, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.42343612403217085;  // std dev = 0.111, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.32839028356478356;  // std dev = 0.047, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.39313152959787456;  // std dev = 1.010, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09744532770193515;  // std dev = 0.042, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.01904482017927362;  // std dev = 3.101, 123.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=29 */
%   | | | else return 0.06485408277720592;  // std dev = 2.133, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.23248013418416186;  // std dev = 0.988, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.26458934710892695;  // std dev = 0.063, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.26879007828692636;  // std dev = 0.070, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, G) )
%   | | then return -0.04963830423654221;  // std dev = 0.124, 147.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=14 */
%   | | else return -0.0663303032633127;  // std dev = 0.097, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2693987311257504;  // std dev = 0.059, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.44199970495393787;  // std dev = 1.114, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.5341683898601333;  // std dev = 0.375, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.12506065609435035;  // std dev = 0.035, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(F, B), follows(E, D) )
%   | | | then return 0.21641975204477248;  // std dev = 1.320, 88.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=86 */
%   | | | else return -0.11003686627338108;  // std dev = 1.153, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, D), follows(D, G) )
%   | | | then return 0.2053486156659435;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.36108435685865126;  // std dev = 0.965, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.09304300175600419;  // std dev = 0.217, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( recursion_accounttype(I, B) )
%   | | then return 0.29733363776829874;  // std dev = 0.094, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.10643077707785258;  // std dev = 0.170, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( follows(J, A) )
%   | | then return 0.03459177541142984;  // std dev = 0.146, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.09826009685724953;  // std dev = 0.321, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.16465408354353323;  // std dev = 0.125, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | else return 0.17575952876720155;  // std dev = 0.058, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.30943999296353353;  // std dev = 0.000750, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.29064170468143635;  // std dev = 0.081, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.07674708857663375;  // std dev = 0.044, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.29464933879783106;  // std dev = 0.404, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.11328797862401245;  // std dev = 0.042, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0890339170444288;  // std dev = 0.700, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0.0069912605495307655;  // std dev = 1.585, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1587169230671581;  // std dev = 0.117, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return -0.014745941150746142;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.18497951546842756;  // std dev = 0.321, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.2773614753765431;  // std dev = 0.807, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.19660224783917513;  // std dev = 0.055, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07203817193883205;  // std dev = 0.042, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.2766041133795484;  // std dev = 0.080, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.3989022260738899;  // std dev = 0.323, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.12002375650155792;  // std dev = 0.034, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.15307155781138812;  // std dev = 0.028, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | else return 0.10674232348473839;  // std dev = 0.152, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return -0.06314006262514546;  // std dev = 0.059, 239.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.11525301401308696;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.008574277774705558;  // std dev = 0.975, 51.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=13 */
%   | | | else return 0.037556512626451044;  // std dev = 0.570, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | then return 0.1587155919774328;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.005101753625415808;  // std dev = 1.004, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
%   | | | else return -0.030382675060405175;  // std dev = 1.256, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '33.315', 'seconds']
Refined model CLL: -0.101898


******************************************
Best model found
******************************************
Results 

CLL : -0.100671 

AUC ROC : 0.993651 

AUC PR : 0.396376 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 38.368 

Total Inference Time : 42.453588008880615 

Total revision time: 111.30187525177001
Best scored revision CLL: -0.101898


Results 

CLL : -0.100671 

AUC ROC : 0.993651 

AUC PR : 0.396376 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 136.68151559257507 

Total Inference Time : 42.453588008880615 

