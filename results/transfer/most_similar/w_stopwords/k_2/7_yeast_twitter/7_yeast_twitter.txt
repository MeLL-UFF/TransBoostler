Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 9.391
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834893121146022;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048804;  // std dev = 0.000, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7085181213873046;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839183;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5481725487088779;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360693;  // std dev = 0.000, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.40282278460862186;  // std dev = 1.710, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42761617303837474;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.31708575486215307;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926053;  // std dev = 5.77e-08, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2281887757372862;  // std dev = 2.194, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17231832156495963;  // std dev = 2.541, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 7.45e-08, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18780068750122997;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.27e-07, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13766416199071982;  // std dev = 0.169, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420283;  // std dev = 0.000, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12618553768204718;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 1.32e-09, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '33.272', 'seconds']
Parameter learned model CLL:-0.092878 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 271, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 243, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 273, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.71, 3, 118], 'true,false': [0.0, 244, 0], 'false,true,true': [5.27e-09, 0, 8], 'false,true,false': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.403, 2, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.77e-08, 198, 0], 'false,false,false': [1.32e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.194, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 255, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.541, 7, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.45e-08, 210, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.996, 1, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.27e-07, 227, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.169, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 268, 0], 'false,false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.32e-09, 228, 0]}]
{'': [0.022714981070853308, -5.243857828487824e-17], 'false': [-5.243857828487824e-17, nan]}
{'': [0.015380859375001332, -6.030841121420603e-17], 'false': [-6.030841121420603e-17, nan]}
{'': [0.015380859375001, -1.0898892695953917e-16], 'false': [nan, -1.0898892695953917e-16]}
{'': [0.06440155920987926, 0.0609423339278199], 'true': [0.024178676319924212, -7.280150981148567e-17], 'false': [0.0609423339278199, nan], 'false,true': [2.7755575615628914e-17, -1.6326809185664067e-18]}
{'': [0.015371910147644233, 2.1994984450121027e-17], 'true': [0.015371910147644233, nan], 'false': [nan, 2.1994984450121027e-17], 'false,false': [1.682156097916904e-17, 2.9738116731030977e-18], 'false,false,true': [nan, 1.682156097916904e-17]}
{'': [0.03676094973646771, 3.395976310618126e-17], 'false': [nan, 3.395976310618126e-17], 'false,false': [nan, 3.395976310618126e-17]}
{'': [0.04855277280106655, 2.6433881538694202e-17], 'false': [nan, 2.6433881538694202e-17], 'false,false': [nan, 2.6433881538694202e-17], 'false,false,false': [2.6433881538694202e-17, nan]}
{'': [0.0078090571548060225, 6.344131569286608e-17], 'true': [0.0078090571548060225, nan], 'false': [7.140641479967967e-17, 6.30808536718839e-19], 'false,false': [nan, 6.30808536718839e-19]}
{'': [0.0286308737041237, -4.015700301835673e-17], 'false': [nan, -4.015700301835673e-17], 'false,false': [-2.6512788647764932e-17, -2.9738116731030977e-18], 'false,false,true': [nan, -2.6512788647764932e-17]}
{'': [0.02270652895904464, 1.460819769243627e-18], 'false': [nan, 1.460819769243627e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 67.615
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.8425239350995126;  // std dev = 0.992, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.7152917922423695;  // std dev = 1.604, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.14185106490048813;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( tweets(D, E), follows(A, F) )
%   | | | then return 0.6835651641135336;  // std dev = 1.370, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | | else return 0.7208876607762557;  // std dev = 0.007, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.7316485875585377;  // std dev = 0.079, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.42468600128852124;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6409256431351367;  // std dev = 0.973, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.7374061153985183;  // std dev = 0.057, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839183;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.5358243453240682;  // std dev = 1.393, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | | else return 0.3700780786503821;  // std dev = 0.875, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.579511691128421;  // std dev = 0.198, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( tweets(A, F) )
%   | | then return 0.5674373730417425;  // std dev = 0.067, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.30703659882510104;  // std dev = 0.437, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.11231637819360685;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.41906699955719756;  // std dev = 0.999, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.24688836003451772;  // std dev = 1.831, 22.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=18 */
%   | | else return 0.44923246760022856;  // std dev = 0.213, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.3031266236643848;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.2925848606831904;  // std dev = 1.384, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.3385838049968758;  // std dev = 0.062, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.36514105463201313;  // std dev = 0.148, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return 0.24907582454768565;  // std dev = 0.947, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.1396611096315981;  // std dev = 1.004, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.23196843740776707;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.33885394831457044;  // std dev = 0.086, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, J) )
%   | then return -0.09269127618926051;  // std dev = 6.14e-08, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return -0.09269127618926087;  // std dev = 5.27e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.1408959274316971;  // std dev = 2.454, 52.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=45 */
%   | | | else return 0.31907379208833286;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, D), follows(G, A) )
%   | | | then return 0.26808406396956574;  // std dev = 0.031, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.1561191706375721;  // std dev = 0.878, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( recursion_accounttype(H, B), follows(A, J) )
%   | | | then return 0.2661723814434685;  // std dev = 0.047, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2938010520791268;  // std dev = 0.055, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.17998684487355968;  // std dev = 0.942, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.26766266216614604;  // std dev = 0.075, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.08518475138839678;  // std dev = 5.74e-09, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(E, A), follows(D, E) )
%   | | | then return 0.17741107110481322;  // std dev = 1.923, 64.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=60 */
%   | | | else return 0.23052805640187216;  // std dev = 0.117, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.20659319617525157;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.0958392682647099;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.30197413732595124;  // std dev = 0.124, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2365074930355893;  // std dev = 0.059, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.23588568874695742;  // std dev = 4.56e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, H) )
%   | then return -0.07877675473109144;  // std dev = 4.84e-09, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else return -0.07877675473109168;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then if ( tweets(D, F), tweets(A, F) )
%   | | | then return 0.21457246967285948;  // std dev = 0.055, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.19438803193802087;  // std dev = 0.123, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.048976766950938534;  // std dev = 0.805, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.011399720483143576;  // std dev = 1.234, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.186694339303837;  // std dev = 0.055, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return 0.18889910050342598;  // std dev = 0.039, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.19723077185628302;  // std dev = 0.053, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, K) )
%   | then return -0.07324622576333664;  // std dev = 8.54e-09, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return -0.073246225763337;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.14690051454919273;  // std dev = 1.367, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return -0.032258390494352675;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( tweets(A, G), tweets(D, G) )
%   | | | then return -0.4296419511622275;  // std dev = 1.104, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.2304134288290506;  // std dev = 0.121, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, A) )
%   | | | then return 0.1847936001044291;  // std dev = 0.095, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.16693801850207296;  // std dev = 0.047, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(J, A), follows(A, J) )
%   | | | then return -0.013912415793133515;  // std dev = 0.932, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.16236865350271157;  // std dev = 0.036, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420276;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.1246927102299958;  // std dev = 1.370, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | | else return 0.1894986015723535;  // std dev = 0.096, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(G, A), follows(D, G) )
%   | | | then return -0.11749420216064173;  // std dev = 1.118, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.19460573864677963;  // std dev = 0.129, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.18543222022647582;  // std dev = 0.026, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.14389663623094848;  // std dev = 0.033, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.14030793170696523;  // std dev = 0.030, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.14612508287129464;  // std dev = 0.041, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.06419184008202619;  // std dev = 3.36e-09, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.965', 'seconds']
Refined model CLL: -0.090248


******************************************
Best model found
******************************************
Results 

CLL : -0.085119 

AUC ROC : 0.995675 

AUC PR : 0.446081 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 67.615 

Total Inference Time : 17.85670018196106 

Total revision time: 118.74188824272156
Best scored revision CLL: -0.090248


Results 

CLL : -0.085119 

AUC ROC : 0.995675 

AUC PR : 0.446081 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 123.14245601272583 

Total Inference Time : 17.85670018196106 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 11.062
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8392810105712079;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048782;  // std dev = 1.07e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6744852478857137;  // std dev = 2.759, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839208;  // std dev = 0.000, 333.000 (wgt'ed) examples reached here.  /* #neg=333 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5522059169809201;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936068;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41851157066101236;  // std dev = 1.403, 130.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3994134274249374;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.1015963294878362;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.293049944963497;  // std dev = 2.590, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926044;  // std dev = 1.32e-07, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24305914960327993;  // std dev = 2.198, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19144137227495633;  // std dev = 2.401, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 2.98e-08, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14826450457757362;  // std dev = 2.727, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333678;  // std dev = 1.18e-07, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16143414642976422;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 3.33e-08, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | | else return -0.06842697784420262;  // std dev = 2.46e-09, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13942818608419744;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202582;  // std dev = 8.12e-09, 335.000 (wgt'ed) examples reached here.  /* #neg=335 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.212', 'seconds']
Parameter learned model CLL:-0.087168 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.716, 3, 156], 'false,true': [1.07e-07, 303, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.759, 8, 156], 'false,true': [0.0, 333, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 303, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.403, 2, 128], 'true,false': [0.0, 261, 0], 'false,true,true': [0.182, 1, 28], 'false,true,false': [0.0, 50, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.59, 7, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.32e-07, 275, 0], 'false,false,false': [0.0, 44, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.198, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 302, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.401, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.98e-08, 304, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.727, 8, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.18e-07, 251, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 50, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.33e-08, 241, 0], 'false,false,false': [2.46e-09, 41, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [8.12e-09, 335, 0]}]
{'': [0.018511925952302145, 3.8106664871622534e-17], 'false': [3.8106664871622534e-17, nan]}
{'': [0.04640095181439801, -9.601928861622976e-17], 'false': [-9.601928861622976e-17, nan]}
{'': [0.018511925952297188, -7.621332974324507e-17], 'false': [nan, -7.621332974324507e-17]}
{'': [0.06507315572196466, 0.07054021599512433], 'false': [0.07054021599512433, nan], 'false,true': [0.03329369797859676, -8.881784197001253e-18], 'true': [0.015147928994081994, -6.295517534272918e-17]}
{'': [0.041166117058864075, 9.88411720982898e-17], 'true': [0.041166117058864075, nan], 'false': [nan, 9.88411720982898e-17], 'false,false': [6.297992430600888e-17, -2.2709107321878203e-17], 'false,false,true': [nan, 6.297992430600888e-17]}
{'': [0.029997263740278828, 3.676235180878002e-17], 'false': [nan, 3.676235180878002e-17], 'false,false': [nan, 3.676235180878002e-17]}
{'': [0.03558984713372451, 2.921639538487254e-18], 'false': [nan, 2.921639538487254e-18], 'false,false': [nan, 2.921639538487254e-18], 'false,false,false': [2.921639538487254e-18, nan]}
{'': [0.045336651115233016, 3.0982968129074136e-17], 'true': [0.045336651115233016, nan], 'false': [5.57323111963226e-17, -1.1102230246251566e-17], 'false,false': [nan, -1.1102230246251566e-17]}
{'': [0.012511474740065661, -4.015700301835673e-17], 'false': [nan, -4.015700301835673e-17], 'false,false': [4.6067345420130975e-18, 6.0926873302600054e-18], 'false,false,true': [nan, 4.6067345420130975e-18]}
{'': [0.01250998581531226, 6.561915190321821e-17], 'false': [nan, 6.561915190321821e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 77.614
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), tweets(E, F) )
%   | | | then return 0.8425239350995126;  // std dev = 0.992, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.141851064900488;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.7070313722467118;  // std dev = 0.994, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.3999524182919191;  // std dev = 1.402, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.758101769489148;  // std dev = 0.044, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return 0.7230755741342941;  // std dev = 0.060, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.6694131893798132;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.7296699226651701;  // std dev = 0.066, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.125444638528392;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, D) )
%   | | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.5516874293615278;  // std dev = 1.007, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | | | else return 0.32893898892183715;  // std dev = 0.797, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.22192019311218356;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then return 0.5839415660787048;  // std dev = 0.203, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.5450811602594011;  // std dev = 0.962, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.5681360305593242;  // std dev = 0.030, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.11231637819360674;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.4329279178805229;  // std dev = 0.188, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.3450854356052031;  // std dev = 1.568, 33.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=30 */
%   | | else return 0.4435785583120219;  // std dev = 0.153, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(H, A) )
%   | | then return 0.423220956287163;  // std dev = 0.078, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.23226362065407208;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.43226362065407203;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10159632948783623;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.30345316675576556;  // std dev = 0.996, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.2431122792157233;  // std dev = 0.824, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.3495653057801892;  // std dev = 0.217, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.3324724947151052;  // std dev = 0.119, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.08685817471299406;  // std dev = 0.804, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.29631238639946716;  // std dev = 0.996, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926044;  // std dev = 1.21e-07, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.2412798738660608;  // std dev = 1.338, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | | | else return -0.18390373568202809;  // std dev = 1.215, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.2730477921000222;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.32812381672480245;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( recursion_accounttype(H, B), follows(I, H) )
%   | | | then return 0.2558017838786556;  // std dev = 0.066, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.26506110577441905;  // std dev = 0.079, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.26736606023124343;  // std dev = 0.052, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.28002335425117225;  // std dev = 0.079, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(A, F) )
%   | | | then return 0.2199919898747001;  // std dev = 0.089, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.13197617005934403;  // std dev = 1.558, 33.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=30 */
%   | | else if ( follows(D, G), follows(A, G) )
%   | | | then return 0.22648834124787773;  // std dev = 0.064, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.2523075483179302;  // std dev = 0.063, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.29250277463528745;  // std dev = 0.147, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.21813052210370043;  // std dev = 0.072, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.1327953907769365;  // std dev = 0.950, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.22024156722895932;  // std dev = 0.071, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.07877675473109143;  // std dev = 3.94e-08, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.1706543057832576;  // std dev = 0.988, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.20170991629709561;  // std dev = 0.098, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2335457310290239;  // std dev = 0.152, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.18554438782962362;  // std dev = 0.078, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.1898052903120676;  // std dev = 0.038, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.18259848416517724;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.14607953652829897;  // std dev = 0.827, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10370802201635623;  // std dev = 1.337, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   else return -0.07324622576333695;  // std dev = 5.89e-09, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.16528266899083296;  // std dev = 0.095, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.11322049112216069;  // std dev = 0.973, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.02356669560241707;  // std dev = 1.546, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.1765743834614362;  // std dev = 0.074, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.15462647818105837;  // std dev = 0.053, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.17073715078042154;  // std dev = 0.053, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.16675499261326188;  // std dev = 0.034, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.074894130458126;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.06842697784420308;  // std dev = 0.000, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.12601370265529663;  // std dev = 0.990, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.0024576670646934582;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.1612073668257811;  // std dev = 0.060, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.1333528063986912;  // std dev = 0.040, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.14165909147370453;  // std dev = 0.030, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.18786355814669348;  // std dev = 0.065, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.1415960445171333;  // std dev = 0.036, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.15685546995323554;  // std dev = 0.033, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.06419184008202598;  // std dev = 6.32e-09, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.623', 'seconds']
Refined model CLL: -0.085048


******************************************
Best model found
******************************************
Results 

CLL : -0.091001 

AUC ROC : 0.99539 

AUC PR : 0.508646 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 77.614 

Total Inference Time : 23.403836965560913 

Total revision time: 146.05500400161742
Best scored revision CLL: -0.085048


Results 

CLL : -0.091001 

AUC ROC : 0.99539 

AUC PR : 0.508646 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 150.4555717716217 

Total Inference Time : 23.403836965560913 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 9.412
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834893121146022;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004881;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6859751824560069;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839194;  // std dev = 0.000, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5167017559532373;  // std dev = 0.223, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360675;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.40809837271818145;  // std dev = 1.967, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else return -0.1034947461374137;  // std dev = 0.457, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.44088525796408223;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783621;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3201969953547467;  // std dev = 1.715, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09253174350696833;  // std dev = 1.08e-07, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | | else return -0.09269127618926087;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2674219814082043;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08505701590186897;  // std dev = 3.13e-05, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2019987214641427;  // std dev = 1.711, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07866704994264663;  // std dev = 0.000474, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1686688893397144;  // std dev = 1.714, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07314437122158744;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07326234513124721;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1363821447159282;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06833781528748199;  // std dev = 1.13e-07, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   | | else return -0.06844108723251918;  // std dev = 9.31e-10, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1047347765694039;  // std dev = 0.203, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06411745418525686;  // std dev = 1.93e-05, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '33.629', 'seconds']
Parameter learned model CLL:-0.092585 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 265, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 273, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.223, 7, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 227, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.967, 4, 118], 'true,false': [0.457, 241, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [1.32e-09, 14, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.715, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.08e-07, 227, 0], 'false,false,false': [0.0, 20, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.13e-05, 247, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.711, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.000474, 265, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.714, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 215, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.13e-07, 261, 0], 'false,false,false': [9.31e-10, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.203, 6, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.93e-05, 255, 0]}]
{'': [0.022714981070853308, -7.373556691850096e-17], 'false': [-7.373556691850096e-17, nan]}
{'': [0.03671114736903573, -7.1574817704772e-17], 'false': [-7.1574817704772e-17, nan]}
{'': [0.04986149584487682, -7.23845848654287e-17], 'false': [nan, -7.23845848654287e-17]}
{'': [0.06963227284822901, 0.06809930277918917], 'true': [0.031711905401772884, 0.0008649565860939103], 'false': [0.06809930277918917, nan], 'false,true': [-5.551115123125783e-17, 1.982541115402065e-18]}
{'': [0.022808724164272022, 1.8939185370689427e-09], 'true': [0.022808724164272022, nan], 'false': [nan, 1.8939185370689427e-09], 'false,false': [5.184301348469894e-17, 0.0], 'false,false,true': [nan, 5.184301348469894e-17]}
{'': [0.007808061627004816, 9.803818944249434e-10], 'false': [nan, 9.803818944249434e-10], 'false,false': [nan, 9.803818944249434e-10]}
{'': [0.022700481777060768, 8.493055617277433e-10], 'false': [nan, 8.493055617277433e-10], 'false,false': [nan, 8.493055617277433e-10], 'false,false,false': [8.493055617277433e-10, nan]}
{'': [0.022778423382861093, 1.1282508722015013e-09], 'true': [0.022778423382861093, nan], 'false': [-2.8917436920469193e-17, -5.9476233462061954e-18], 'false,false': [nan, -5.9476233462061954e-18]}
{'': [0.02980654567339382, 4.13866379892426e-10], 'false': [nan, 4.13866379892426e-10], 'false,false': [4.8492499926156265e-17, 1.261617073437678e-18], 'false,false,true': [nan, 4.8492499926156265e-17]}
{'': [0.041225006287817646, 3.723568747455588e-10], 'false': [nan, 3.723568747455588e-10]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 60.125
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.8025933795439567;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( tweets(D, F), tweets(A, F) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.14185106490048843;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.7039894775578791;  // std dev = 0.994, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.6557600713093495;  // std dev = 0.969, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5127570351351896;  // std dev = 1.228, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.6569734122109543;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.7221821703655216;  // std dev = 0.047, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.12544463852839194;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, E) )
%   | | then return 0.5664317729652539;  // std dev = 0.154, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else return 0.3692669756413666;  // std dev = 0.893, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.39414853293833346;  // std dev = 1.266, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.5728324907267419;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.48315196280073924;  // std dev = 0.967, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5654154707843896;  // std dev = 0.066, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.1123163781936068;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.3375940602507734;  // std dev = 2.091, 54.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=49 */
%   | | | else return 0.4180288750074385;  // std dev = 1.001, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return 0.4277868938031673;  // std dev = 0.087, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.10159632948783655;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.41416763411217566;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | then return 0.34781923252168995;  // std dev = 0.150, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.15181219908852844;  // std dev = 0.881, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.33756716229372635;  // std dev = 0.128, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.03389729719627155;  // std dev = 1.121, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.3252633850495361;  // std dev = 0.037, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.20733316485655;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926047;  // std dev = 9.88e-08, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | else return -0.09269127618926085;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), follows(D, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2701581140908173;  // std dev = 0.102, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.10985613680517449;  // std dev = 0.848, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.32417788545918397;  // std dev = 0.110, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2686500626453365;  // std dev = 0.118, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.2620578572886995;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2752267233789061;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.12441058542547843;  // std dev = 0.333, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(I, A) )
%   | then return -0.08518475138839678;  // std dev = 5.43e-09, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.2006137600159501;  // std dev = 1.006, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.13219650941121527;  // std dev = 1.600, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.2924304948976503;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21606984312755376;  // std dev = 0.077, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return 0.023829015373151918;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(A, F) )
%   | then if ( follows(F, A) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.07877675473109148;  // std dev = 7.60e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | | else return -0.07877675473109168;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return -0.07877675473109165;  // std dev = 2.95e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return -0.07877675473109165;  // std dev = 1.05e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.19066947618057428;  // std dev = 0.136, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | | else return 0.15487744222131564;  // std dev = 0.976, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( tweets(A, G), recursion_accounttype(E, B) )
%   | | | then return 0.17731699724930036;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11712588415186138;  // std dev = 0.788, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.23581719171792834;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1831333229384755;  // std dev = 0.029, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.219716469149505;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, I) )
%   | then return -0.07324622576333667;  // std dev = 8.38e-09, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else return -0.07324622576333696;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.1276864373770995;  // std dev = 1.643, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | | | else return 0.22537198622440183;  // std dev = 0.046, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return -0.422533937383417;  // std dev = 0.788, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.18944885406192966;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.155373773031093;  // std dev = 0.047, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.1608343816575118;  // std dev = 0.042, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1843670416945974;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420262;  // std dev = 3.36e-09, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | else return -0.06842697784420262;  // std dev = 3.73e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.14497429094237557;  // std dev = 0.133, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | | else return 0.1582372218803081;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.17413842773098795;  // std dev = 0.134, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.1458220506670644;  // std dev = 0.030, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.16623104839279265;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13742703876310547;  // std dev = 0.001, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1270292732599756;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.006357795013073478;  // std dev = 0.912, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.06419184008202625;  // std dev = 1.61e-09, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.025', 'seconds']
Refined model CLL: -0.090849


******************************************
Best model found
******************************************
Results 

CLL : -0.08544 

AUC ROC : 0.996047 

AUC PR : 0.509015 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 60.125 

Total Inference Time : 17.628633975982666 

Total revision time: 110.07532197189332
Best scored revision CLL: -0.090849


Results 

CLL : -0.08544 

AUC ROC : 0.996047 

AUC PR : 0.509015 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 110.15437513542176 

Total Inference Time : 17.628633975982666 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 11.127
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8211118980624726;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 1.79e-07, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7142293079096993;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839213;  // std dev = 0.000, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5531229518906202;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360699;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3907859231966725;  // std dev = 2.194, 133.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3938971495383885;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.10159632948783621;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.31130721051253796;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 9.19e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2518259781539786;  // std dev = 1.715, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.186887644202354;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109141;  // std dev = 2.58e-08, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16812449060408727;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333681;  // std dev = 1.16e-07, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14376993755514053;  // std dev = 0.153, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420278;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | | else return -0.06842697784420262;  // std dev = 2.63e-09, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13022759105512696;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202584;  // std dev = 7.74e-09, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.540', 'seconds']
Parameter learned model CLL:-0.087316 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.404, 6, 156], 'false,true': [1.79e-07, 326, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 312, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 285, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.194, 5, 128], 'true,false': [0.0, 256, 0], 'false,true,true': [0.182, 1, 28], 'false,true,false': [0.0, 46, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.975, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.19e-08, 243, 0], 'false,false,false': [0.0, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.715, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 319, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.404, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.58e-08, 322, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.975, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.16e-07, 256, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.153, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 258, 0], 'false,false,false': [2.63e-09, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.74e-09, 324, 0]}]
{'': [0.03566529492456011, 9.808105248222242e-17], 'false': [9.808105248222242e-17, nan]}
{'': [0.01249799711585062, -1.1102230246251565e-16], 'false': [-1.1102230246251565e-16, nan]}
{'': [0.012497997115847426, -1.0439991950861122e-16], 'false': [nan, -1.0439991950861122e-16]}
{'': [0.06692056255652123, 0.07109852195057241], 'false': [0.07109852195057241, nan], 'false,true': [0.033293697978596944, -1.8101462358018857e-17], 'true': [0.0361806772570524, -6.765421556309548e-17]}
{'': [0.024368995239936853, 8.792370262132112e-17], 'true': [0.024368995239936853, nan], 'false': [nan, 8.792370262132112e-17], 'false,false': [3.4723024638482264e-17, -2.826022244500398e-17], 'false,false,true': [nan, 3.4723024638482264e-17]}
{'': [0.01850790088310241, 3.6195358796556825e-17], 'false': [nan, 3.6195358796556825e-17], 'false,false': [nan, 3.6195358796556825e-17]}
{'': [0.03566484366716561, 2.068738555202155e-18], 'false': [nan, 2.068738555202155e-18], 'false,false': [nan, 2.068738555202155e-18], 'false,false,false': [2.068738555202155e-18, nan]}
{'': [0.024376700372561122, 2.7043894189587146e-17], 'true': [0.024376700372561122, nan], 'false': [5.2909066017292616e-17, -1.0903976134711359e-17], 'false,false': [nan, -1.0903976134711359e-17]}
{'': [0.023436252368857463, -6.115326824164797e-17], 'false': [nan, -6.115326824164797e-17], 'false,false': [-1.6352122068122462e-17, 7.086529944415892e-18], 'false,false,true': [nan, -1.6352122068122462e-17]}
{'': [0.018509327417686634, 6.030841121420603e-17], 'false': [nan, 6.030841121420603e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 77.541
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.8581489350995118;  // std dev = 1.88e-07, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return 0.7914822684328456;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.822434649385226;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   else return -0.14185106490048782;  // std dev = 1.03e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.721734212158444;  // std dev = 0.063, 128.000 (wgt'ed) examples reached here.  /* #pos=128 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then return 0.6660633000779167;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.7250924082100598;  // std dev = 0.011, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.12544463852839197;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.5562423096641228;  // std dev = 0.038, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.5238266230613996;  // std dev = 0.989, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.47923934686105757;  // std dev = 0.962, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.22147476412703707;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5628619547555502;  // std dev = 0.096, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.11231637819360689;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4226695026257362;  // std dev = 0.088, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3282576449629263;  // std dev = 1.249, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.39562627305678194;  // std dev = 0.992, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.37845344253934304;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.22301978820693596;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4204121554452004;  // std dev = 0.013, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.10159632948783623;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(A, E) )
%   | | | then return 0.324686032304577;  // std dev = 0.073, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.19067660242620452;  // std dev = 1.301, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.3358262948157881;  // std dev = 0.158, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.34962153474850577;  // std dev = 0.049, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.16408115235961812;  // std dev = 1.001, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.25658669117706473;  // std dev = 0.976, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926047;  // std dev = 9.66e-08, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.24068472238664793;  // std dev = 0.992, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return -0.040042788807832776;  // std dev = 0.826, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.29018060513157495;  // std dev = 0.075, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.2592867168739349;  // std dev = 0.052, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.27486189637246433;  // std dev = 0.011, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.04658601105784147;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2016754345110622;  // std dev = 0.974, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(H, A) )
%   | then return -0.08518475138839678;  // std dev = 5.59e-09, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else return -0.08518475138839678;  // std dev = 2.79e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, F) )
%   | | | then return 0.11894711075309476;  // std dev = 1.642, 32.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=29 */
%   | | | else return 0.22517079741277124;  // std dev = 0.131, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.08369727596689985;  // std dev = 1.162, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.22875087278989634;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.21047898520041358;  // std dev = 0.018, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.22360175495648138;  // std dev = 0.037, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.26472724664119823;  // std dev = 0.164, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.07877675473109143;  // std dev = 2.58e-08, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | | then return 0.13782313508139038;  // std dev = 1.636, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | | else return 0.18866309730597094;  // std dev = 0.207, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.17969659040253994;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12360804626384785;  // std dev = 0.747, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.18720251499143892;  // std dev = 0.008, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.24161027910138372;  // std dev = 0.090, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2015207210627448;  // std dev = 0.091, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, I) )
%   | then return -0.0732462257633369;  // std dev = 6.38e-09, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return -0.07324622576333703;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1317429358491522;  // std dev = 1.397, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return 0.04692792792025438;  // std dev = 1.625, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | else if ( recursion_accounttype(D, B), follows(G, A) )
%   | | | then return 0.19025109728620768;  // std dev = 0.104, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15484660050180657;  // std dev = 0.058, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.1606473849247057;  // std dev = 0.007, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.22321876962394693;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17046452259813621;  // std dev = 0.062, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return -0.06842697784420262;  // std dev = 2.95e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, F), tweets(D, E) )
%   | | then if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.126766042087871;  // std dev = 1.408, 90.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=88 */
%   | | | else return -0.029285144307443202;  // std dev = 0.862, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.01825511276948666;  // std dev = 0.825, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.1426985831545924;  // std dev = 0.057, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.18960992097416218;  // std dev = 0.073, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.14646035793862092;  // std dev = 0.063, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.06203747035921648;  // std dev = 0.965, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(I, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.220', 'seconds']
Refined model CLL: -0.085673


******************************************
Best model found
******************************************
Results 

CLL : -0.091616 

AUC ROC : 0.993758 

AUC PR : 0.376012 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 77.541 

Total Inference Time : 21.39015293121338 

Total revision time: 143.53869487571717
Best scored revision CLL: -0.085673


Results 

CLL : -0.091616 

AUC ROC : 0.993758 

AUC PR : 0.376012 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 143.6177480392456 

Total Inference Time : 21.39015293121338 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 9.099
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7984474425621968;  // std dev = 2.743, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048807;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6787321414766172;  // std dev = 2.575, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839188;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5492422241605422;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360678;  // std dev = 0.000, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.418841757988715;  // std dev = 1.710, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.33252403530735686;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.1015963294878362;  // std dev = 1.86e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3296660324588022;  // std dev = 1.406, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 9.42e-08, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | | else return -0.09269127618926087;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2376728609449039;  // std dev = 2.148, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20707391069259493;  // std dev = 1.705, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109146;  // std dev = 6.66e-08, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17389075521033875;  // std dev = 1.599, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333675;  // std dev = 1.21e-07, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333699;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15403662972606794;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420268;  // std dev = 2.11e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10366149052303482;  // std dev = 0.208, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 1.61e-09, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '34.141', 'seconds']
Parameter learned model CLL:-0.09263 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.743, 8, 126], 'false,true': [0.0, 267, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.575, 7, 126], 'false,true': [0.0, 258, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 233, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.71, 3, 118], 'true,false': [0.0, 227, 0], 'false,true,true': [0.314, 1, 8], 'false,true,false': [1.86e-09, 16, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.406, 2, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.42e-08, 245, 0], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.148, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 239, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.705, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.66e-08, 220, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.599, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.21e-07, 243, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.11e-08, 243, 0], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.208, 6, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.61e-09, 250, 0]}]
{'': [0.05613722432613483, -6.653021870412923e-17], 'false': [-6.653021870412923e-17, nan]}
{'': [0.04986149584487831, -6.885104028683141e-17], 'false': [-6.885104028683141e-17, nan]}
{'': [0.029822485207099503, -7.814445323541874e-17], 'false': [nan, -7.814445323541874e-17]}
{'': [0.06983842020602664, 0.07897685271188712], 'false': [0.07897685271188712, nan], 'false,true': [0.09876543209876538, 3.469446951953614e-18], 'true': [0.024178676319924007, -7.629726512842486e-17]}
{'': [0.015442219409126615, 5.719330732917473e-17], 'true': [0.015442219409126615, nan], 'false': [nan, 5.719330732917473e-17], 'false,false': [3.6252180395923476e-17, 1.460819769243627e-18], 'false,false,true': [nan, 3.6252180395923476e-17]}
{'': [0.03522771556523064, 3.2516992353038056e-17], 'false': [nan, 3.2516992353038056e-17], 'false,false': [nan, 3.2516992353038056e-17]}
{'': [0.0225394701839264, 2.0185873175002847e-17], 'false': [nan, 2.0185873175002847e-17], 'false,false': [nan, 2.0185873175002847e-17], 'false,false,false': [2.0185873175002847e-17, nan]}
{'': [0.019828729162145578, 5.0387044963757104e-17], 'true': [0.019828729162145578, nan], 'false': [6.030841121420603e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.015414306321104711, -1.2190684191962503e-17], 'false': [nan, -1.2190684191962503e-17], 'false,false': [1.827527612551698e-18, -2.3129646346357427e-18], 'false,false,true': [nan, 1.827527612551698e-18]}
{'': [0.043295824650500775, 2.6645352591003758e-18], 'false': [nan, 2.6645352591003758e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 117.542
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( recursion_accounttype(D, B), follows(A, D) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.7470378239884012;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004882;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7212148225777502;  // std dev = 0.081, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(E, G) )
%   | | | then return 0.5238473922615555;  // std dev = 1.272, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.3065233409631017;  // std dev = 1.312, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return 0.7269911904229256;  // std dev = 0.059, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.12544463852839183;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5571533793225871;  // std dev = 0.103, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(F, A), recursion_accounttype(E, B) )
%   | | | then return 0.3388331039478888;  // std dev = 1.171, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.5811050340443579;  // std dev = 0.184, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.3535092732435476;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5702071483565851;  // std dev = 0.091, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.11231637819360683;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.3551172918825673;  // std dev = 1.937, 65.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=61 */
%   | | | else return 0.4309007789344343;  // std dev = 0.094, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5142530608660253;  // std dev = 0.129, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3961851638821573;  // std dev = 0.980, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.3055446423099171;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.334497159932211;  // std dev = 0.063, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1634204882043005;  // std dev = 1.792, 21.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=17 */
%   | | | else return 0.3180357015570531;  // std dev = 0.001, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.3464038491133737;  // std dev = 0.196, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926046;  // std dev = 1.07e-07, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return -0.09269127618926087;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(A, E) )
%   | | | then return 0.21746940220164349;  // std dev = 1.382, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.28223978886737144;  // std dev = 0.118, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.32525057029869203;  // std dev = 0.088, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2647450258314263;  // std dev = 0.069, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(H, A), recursion_accounttype(G, B) )
%   | | | then return 0.1808684388944413;  // std dev = 0.972, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.08368857730744649;  // std dev = 1.532, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | else return 0.26026916796287963;  // std dev = 0.056, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, I) )
%   | then return -0.08518475138839678;  // std dev = 5.35e-09, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, F), follows(G, E) )
%   | | then if ( follows(G, A), tweets(G, D) )
%   | | | then return 0.1908588017967303;  // std dev = 1.350, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return 0.23054867801644457;  // std dev = 0.152, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return -0.1055802462535111;  // std dev = 0.844, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.23150009955359943;  // std dev = 0.031, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2841744296158999;  // std dev = 0.088, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.24315794258988477;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.22677424725978834;  // std dev = 0.075, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, K) )
%   | then return -0.07877675473109146;  // std dev = 5.74e-09, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return -0.07877675473109168;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A), tweets(F, G) )
%   | | | then return 0.194756832558486;  // std dev = 0.070, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.2423432420803614;  // std dev = 0.094, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.18008563411538972;  // std dev = 0.066, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.2097661516066119;  // std dev = 0.054, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then return 0.19538522330554312;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.0789431669798421;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.039876570099201904;  // std dev = 0.893, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, L) )
%   | then return -0.07324622576333663;  // std dev = 8.69e-09, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else return -0.07324622576333699;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.1428117379401752;  // std dev = 1.408, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | | | else return 0.06455765150785837;  // std dev = 0.899, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, G), tweets(D, H) )
%   | | | then return 0.1578277504434995;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.18615086159209268;  // std dev = 0.067, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.15246946103117848;  // std dev = 1.151, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.16472157525848632;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.05850079854501347;  // std dev = 0.948, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, K) )
%   | then return -0.06842697784420261;  // std dev = 4.47e-09, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else return -0.06842697784420268;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), tweets(D, E) )
%   | | then if ( tweets(F, E), follows(F, G) )
%   | | | then return 0.10598345019837256;  // std dev = 1.676, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | | else return -0.19576752589489846;  // std dev = 0.835, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, D), recursion_accounttype(D, B) )
%   | | | then return 0.18661367516937755;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15007199947347521;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.1444752944188038;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.14778529475763677;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.20345835116999544;  // std dev = 0.047, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15267572490514408;  // std dev = 0.049, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06419184008202626;  // std dev = 1.05e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '36.673', 'seconds']
Refined model CLL: -0.091735


******************************************
Best model found
******************************************
Results 

CLL : -0.085963 

AUC ROC : 0.99589 

AUC PR : 0.45759 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 117.542 

Total Inference Time : 26.673820972442627 

Total revision time: 176.1342758808136
Best scored revision CLL: -0.091735


Results 

CLL : -0.085963 

AUC ROC : 0.99589 

AUC PR : 0.45759 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 176.19248196220397 

Total Inference Time : 26.673820972442627 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 11.226
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.815204149823436;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048824;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7154005528413535;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.125444638528392;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5542862174760707;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360692;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41387049655227415;  // std dev = 1.403, 130.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=128 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42925511193688953;  // std dev = 1.05e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.10159632948783612;  // std dev = 4.17e-09, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.31261960690446955;  // std dev = 1.715, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926043;  // std dev = 1.43e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21872579230235698;  // std dev = 2.687, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.96e-09, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2130293605681231;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109141;  // std dev = 3.65e-08, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17177549800267955;  // std dev = 1.715, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333685;  // std dev = 1.13e-07, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15287423316189722;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442027;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | | else return -0.06842697784420262;  // std dev = 2.28e-09, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12047246119602309;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202584;  // std dev = 7.79e-09, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.631', 'seconds']
Parameter learned model CLL:-0.087504 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.588, 7, 156], 'false,true': [0.0, 249, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 301, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 290, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.403, 2, 128], 'true,false': [0.0, 273, 0], 'false,true,true': [1.05e-08, 0, 28], 'false,true,false': [4.17e-09, 71, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.715, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.43e-07, 287, 0], 'false,false,false': [0.0, 61, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.687, 8, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 296, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.65e-08, 311, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.715, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.13e-07, 267, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 57, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 245, 0], 'false,false,false': [2.28e-09, 63, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.79e-09, 325, 0]}]
{'': [0.04110053069367158, -1.319783193931913e-16], 'false': [-1.319783193931913e-16, nan]}
{'': [0.01249799711584945, -8.557200721363333e-17], 'false': [-8.557200721363333e-17, nan]}
{'': [0.012497997115846076, -1.0413126299932503e-16], 'false': [nan, -1.0413126299932503e-16]}
{'': [0.06294914487535633, 0.05715997007357076], 'true': [0.015147928994083196, -6.181461529048491e-17], 'false': [0.05715997007357076, nan], 'false,true': [1.2688263138573217e-16, 1.7200638409685523e-17]}
{'': [0.018490989177617496, 1.0847006562429691e-16], 'true': [0.018490989177617496, nan], 'false': [nan, 1.0847006562429691e-16], 'false,false': [7.117806150906926e-17, -2.912060392459427e-17], 'false,false,true': [nan, 7.117806150906926e-17]}
{'': [0.04401519982547205, 3.600723323108616e-17], 'false': [nan, 3.600723323108616e-17], 'false,false': [nan, 3.600723323108616e-17]}
{'': [0.01248701636337998, 4.2838187445343664e-18], 'false': [nan, 4.2838187445343664e-18], 'false,false': [nan, 4.2838187445343664e-18], 'false,false,false': [4.2838187445343664e-18, nan]}
{'': [0.01849701242234339, 2.1930331350620375e-17], 'true': [0.01849701242234339, nan], 'false': [4.7402780826692076e-17, -1.0712678307786598e-17], 'false,false': [nan, -1.0712678307786598e-17]}
{'': [0.012489148761472153, -6.416223973483048e-17], 'false': [nan, -6.416223973483048e-17], 'false,false': [-1.812609019796174e-18, 5.28677630773884e-18], 'false,false,true': [nan, -1.812609019796174e-18]}
{'': [0.024382090217612763, 6.080606104100857e-17], 'false': [nan, 6.080606104100857e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 109.993
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(D, E), tweets(A, F) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(E, A), follows(D, E) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8025933795439566;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.7748156017661781;  // std dev = 1.658, 36.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   | | | else return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.14185106490048774;  // std dev = 1.52e-07, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(F, A) )
%   | | | then return 0.6696579950712707;  // std dev = 1.689, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   | | | else return 0.7320654150581678;  // std dev = 0.058, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.6693145597679495;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.5359812264346162;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.7288534181284574;  // std dev = 0.096, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.12544463852839202;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(F, A) )
%   | | then if ( follows(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.567631220987992;  // std dev = 1.40e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.5286639418778174;  // std dev = 0.978, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return 0.5853123467675571;  // std dev = 0.085, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(A, G) )
%   | | then return 0.5686801190362124;  // std dev = 0.116, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.5530490025950237;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.42804900259502354;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.11231637819360699;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.42935962867696303;  // std dev = 0.052, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.31644898058953885;  // std dev = 1.349, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.42259264491096393;  // std dev = 0.054, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.44560411850520715;  // std dev = 0.080, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10159632948783621;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.3297547793374159;  // std dev = 0.059, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.3369544902216572;  // std dev = 0.046, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2550407302993346;  // std dev = 0.971, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.17607544342682133;  // std dev = 1.282, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return -0.37919985562710623;  // std dev = 0.826, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.26894238293968054;  // std dev = 0.975, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.292368466596249;  // std dev = 0.976, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(A, J) )
%   | then return -0.09269127618926044;  // std dev = 1.21e-07, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | else return -0.092691276189261;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, G) )
%   | | | then return 0.25910871538183744;  // std dev = 0.021, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.26750631283678244;  // std dev = 0.061, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(E, A), recursion_accounttype(D, B) )
%   | | | then return 0.2663597663435015;  // std dev = 0.020, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.0729746805398951;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.3262502605863266;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.39068028774178326;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.26405987367058287;  // std dev = 0.045, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.28718821929890026;  // std dev = 0.039, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.08518475138839678;  // std dev = 5.96e-09, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( tweets(E, D), follows(F, E) )
%   | | | then return 0.21144856858708752;  // std dev = 1.015, 89.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=88 */
%   | | | else return 0.08849804444857744;  // std dev = 0.795, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.2188441127667003;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.24547759304720718;  // std dev = 0.044, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.13419160554207707;  // std dev = 0.954, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.21899218102842374;  // std dev = 0.109, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return -0.12166744404272649;  // std dev = 0.830, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1158199580377867;  // std dev = 0.946, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.07877675473109141;  // std dev = 5.96e-08, 342.000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return 0.18067675025554236;  // std dev = 0.035, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.19297625500806148;  // std dev = 0.047, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(A, G), follows(D, H) )
%   | | | then return 0.22044424721537975;  // std dev = 0.044, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.25919725977042357;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.18231481595072824;  // std dev = 0.014, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.11627110487808713;  // std dev = 1.660, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.1754539535381321;  // std dev = 0.013, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.21374562222460733;  // std dev = 0.050, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333696;  // std dev = 5.74e-09, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.15495408167294084;  // std dev = 0.021, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.09691992258205359;  // std dev = 0.976, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return -0.3262502795034602;  // std dev = 0.978, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.13138748331114444;  // std dev = 1.003, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.18813283632661917;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.17569308888098015;  // std dev = 0.033, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.16076310272677627;  // std dev = 0.075, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.18006110291072633;  // std dev = 0.045, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0684269778442031;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.09190947507030164;  // std dev = 1.379, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.141398254253937;  // std dev = 0.083, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.16842744824476047;  // std dev = 0.105, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1539397074467635;  // std dev = 0.039, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.14332087914829303;  // std dev = 0.023, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1675962161781961;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.18087706336157916;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06579713550124482;  // std dev = 1.267, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   else return -0.06419184008202604;  // std dev = 5.74e-09, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.958', 'seconds']
Refined model CLL: -0.085471


******************************************
Best model found
******************************************
Results 

CLL : -0.091419 

AUC ROC : 0.995062 

AUC PR : 0.461167 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 109.993 

Total Inference Time : 25.66601800918579 

Total revision time: 180.49269022369384
Best scored revision CLL: -0.085471


Results 

CLL : -0.091419 

AUC ROC : 0.995062 

AUC PR : 0.461167 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 180.55089630508422 

Total Inference Time : 25.66601800918579 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 9.452
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8273797043302796;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048816;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6874735311669706;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839188;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5253530221043278;  // std dev = 0.208, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360683;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3995851159113845;  // std dev = 2.190, 123.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4402355224154508;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30649844221170025;  // std dev = 2.196, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 8.16e-08, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | | else return -0.09269127618926092;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2712464027343672;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19711065192359556;  // std dev = 1.972, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 5.77e-08, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1794825005487007;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.0732462257633368;  // std dev = 1.18e-07, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333699;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13029213858027383;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442027;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13535587989817807;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820262;  // std dev = 2.95e-09, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '33.421', 'seconds']
Parameter learned model CLL:-0.092845 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 259, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 255, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.208, 6, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 244, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.19, 5, 118], 'true,false': [0.0, 228, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.196, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.16e-08, 238, 0], 'false,false,false': [0.0, 30, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 249, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.972, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.77e-08, 265, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.403, 2, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.18e-07, 252, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 246, 0], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [2.95e-09, 255, 0]}]
{'': [0.02982248520710475, -9.259002830850726e-17], 'false': [-9.259002830850726e-17, nan]}
{'': [0.036711147369036225, -6.617799989922502e-17], 'false': [-6.617799989922502e-17, nan]}
{'': [0.043388429752066596, -8.736181177378281e-17], 'false': [nan, -8.736181177378281e-17]}
{'': [0.07084220205637468, 0.06524039016376562], 'true': [0.03899795095512061, -7.985814738531828e-17], 'false': [0.06524039016376562, nan], 'false,true': [-5.551115123125783e-17, -1.734723475976807e-18]}
{'': [0.03680799932585947, 6.131082374795641e-17], 'true': [0.03680799932585947, nan], 'false': [nan, 6.131082374795641e-17], 'false,false': [2.7988815746852685e-17, -1.1102230246251566e-17], 'false,false,true': [nan, 2.7988815746852685e-17]}
{'': [0.007807852466086603, 3.299457984829782e-17], 'false': [nan, 3.299457984829782e-17], 'false,false': [nan, 3.299457984829782e-17]}
{'': [0.029904524461394882, 1.25685625429263e-17], 'false': [nan, 1.25685625429263e-17], 'false,false': [nan, 1.25685625429263e-17], 'false,false,false': [1.25685625429263e-17, nan]}
{'': [0.015370862659699822, 5.0387044963757104e-17], 'true': [0.015370862659699822, nan], 'false': [5.551115123125783e-17, -8.673617379884035e-19], 'false,false': [nan, -8.673617379884035e-19]}
{'': [0.03668673099827134, -2.110690160884328e-17], 'false': [nan, -2.110690160884328e-17], 'false,false': [-9.026203452237046e-19, -2.44902137784961e-18], 'false,false,true': [nan, -9.026203452237046e-19]}
{'': [0.015372359874120552, 8.707631565687502e-18], 'false': [nan, 8.707631565687502e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 49.671
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(D, A) )
%   | | | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.7840748610254382;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | else if ( follows(D, F), follows(F, D) )
%   | | | then return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.14185106490048835;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7014249057923058;  // std dev = 0.979, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.6208745135769578;  // std dev = 0.919, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.7313077045014837;  // std dev = 0.082, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.6194734122109544;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.6891703819079239;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.12544463852839186;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.5630210165532744;  // std dev = 0.075, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.23977970113979694;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5763482929999487;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.5755518095870493;  // std dev = 0.189, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.11231637819360689;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.43315587038775255;  // std dev = 0.234, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.33848712081228294;  // std dev = 0.947, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.41997619210302956;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.103573302539114;  // std dev = 0.477, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4156532047600311;  // std dev = 2.58e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.2867239152715256;  // std dev = 1.350, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.20119064384520488;  // std dev = 0.868, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.33093257342189564;  // std dev = 0.142, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.32834105688065357;  // std dev = 0.097, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(A, G) )
%   | then return -0.09252514736691356;  // std dev = 9.88e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return -0.09269127618926086;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.2604515046330419;  // std dev = 0.062, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.2808649765149638;  // std dev = 0.081, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.061359529234812756;  // std dev = 1.265, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.26164936126608906;  // std dev = 0.049, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.12580917204223704;  // std dev = 1.044, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.22347159854213192;  // std dev = 1.003, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.29241294244128035;  // std dev = 0.098, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2551771536960842;  // std dev = 3.33e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.0850541865096102;  // std dev = 3.69e-05, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), recursion_accounttype(E, B) )
%   | | | then return 0.1314464818061381;  // std dev = 2.114, 58.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=53 */
%   | | | else return 0.25268060584140356;  // std dev = 0.149, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.23884072536596232;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.03700321018352555;  // std dev = 1.218, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( follows(A, G), follows(H, A) )
%   | | then if ( follows(G, H), follows(G, A) )
%   | | | then return 0.20814272030588635;  // std dev = 0.034, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.22975961891572308;  // std dev = 0.077, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.20976118477780714;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20678967556990943;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.07866342283530217;  // std dev = 3.23e-05, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.19565242232909202;  // std dev = 0.035, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.22919818304134157;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.18714505780189633;  // std dev = 0.084, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.16474813525351859;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.21606929890847315;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.12768458808978017;  // std dev = 0.929, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.209103909027489;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.177175559705111;  // std dev = 0.020, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.07314840318177268;  // std dev = 3.11e-05, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.16631546386357182;  // std dev = 0.103, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return -0.02249080117736748;  // std dev = 0.819, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return -0.4741806896131345;  // std dev = 0.765, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.17580054507213955;  // std dev = 0.070, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.19142787206799128;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1712461053192776;  // std dev = 0.078, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, K), follows(L, A) )
%   | | | then return 0.1641544972782982;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15176589489506104;  // std dev = 0.005, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.06833972755697726;  // std dev = 2.63e-05, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.1400485570250806;  // std dev = 0.044, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.04056844890174998;  // std dev = 2.058, 44.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=39 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.16572913932593059;  // std dev = 0.063, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13798390284256265;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.16695153227095694;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.14789470117111633;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13748543804568852;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13229034722451719;  // std dev = 0.011, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.06412085429328224;  // std dev = 3.40e-05, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.888', 'seconds']
Refined model CLL: -0.090464


******************************************
Best model found
******************************************
Results 

CLL : -0.085568 

AUC ROC : 0.995306 

AUC PR : 0.380824 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 49.671 

Total Inference Time : 16.786364793777466 

Total revision time: 98.91033372688293
Best scored revision CLL: -0.090464


Results 

CLL : -0.085568 

AUC ROC : 0.995306 

AUC PR : 0.380824 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 104.5816625099182 

Total Inference Time : 16.786364793777466 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 11.143
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8392810105712079;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048782;  // std dev = 1.03e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7106075078424906;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839197;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5192591548374877;  // std dev = 0.203, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360665;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.40281332165945155;  // std dev = 1.969, 132.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=128 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4331163519624806;  // std dev = 1.49e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.10159632948783617;  // std dev = 5.59e-09, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3368468041433709;  // std dev = 0.032, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892605;  // std dev = 1.17e-07, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22325638597310785;  // std dev = 2.586, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.18e-09, 332.000 (wgt'ed) examples reached here.  /* #neg=332 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19986811782328648;  // std dev = 1.976, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 2.58e-08, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17931159041352174;  // std dev = 1.404, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333685;  // std dev = 1.13e-07, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15930441671598028;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420279;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | | else return -0.06842697784420262;  // std dev = 3.09e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12594995731884245;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202582;  // std dev = 8.12e-09, 335.000 (wgt'ed) examples reached here.  /* #neg=335 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.389', 'seconds']
Parameter learned model CLL:-0.087616 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.716, 3, 156], 'false,true': [1.03e-07, 301, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 288, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.203, 7, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 326, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.969, 4, 128], 'true,false': [0.0, 219, 0], 'false,true,true': [1.49e-08, 0, 28], 'false,true,false': [5.59e-09, 64, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.032, 0, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.17e-07, 243, 0], 'false,false,false': [0.0, 69, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.586, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.18e-09, 332, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.976, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.58e-08, 311, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.404, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.13e-07, 265, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.08, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 259, 0], 'false,false,false': [3.09e-09, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [8.12e-09, 335, 0]}]
{'': [0.018511925952302145, 3.540910643322758e-17], 'false': [3.540910643322758e-17, nan]}
{'': [0.01249799711584864, -8.018277400070575e-17], 'false': [-8.018277400070575e-17, nan]}
{'': [0.04110053069366452, -3.8142631520864275e-17], 'false': [nan, -3.8142631520864275e-17]}
{'': [0.07075016320932538, 0.06053455007717269], 'true': [0.029384756657482584, -7.908437983631252e-17], 'false': [0.06053455007717269, nan], 'false,true': [1.9032394707859825e-16, 3.122502256758253e-17]}
{'': [6.704940255498643e-06, 1.0390548820209798e-16], 'true': [6.704940255498643e-06, nan], 'false': [nan, 1.0390548820209798e-16], 'false,false': [5.665335598910264e-17, -2.0917245391488457e-17], 'false,false,true': [nan, 5.665335598910264e-17]}
{'': [0.04101854372033507, 3.7453306854824555e-17], 'false': [nan, 3.7453306854824555e-17], 'false,false': [nan, 3.7453306854824555e-17]}
{'': [0.024397155547164023, 2.1419093722671832e-18], 'false': [nan, 2.1419093722671832e-18], 'false,false': [nan, 2.1419093722671832e-18], 'false,false,false': [2.1419093722671832e-18, nan]}
{'': [0.012480218699576155, 2.3592239273284576e-17], 'true': [0.012480218699576155, nan], 'false': [4.8598441832648363e-17, -1.1102230246251566e-17], 'false,false': [nan, -1.1102230246251566e-17]}
{'': [0.0063219406053046595, -6.563582661305957e-17], 'false': [nan, -6.563582661305957e-17], 'false,false': [-7.715835692375605e-18, 9.40866970021319e-18], 'false,false,true': [nan, -7.715835692375605e-18]}
{'': [0.01848917597848405, 6.561915190321821e-17], 'false': [nan, 6.561915190321821e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 75.443
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), follows(D, E) )
%   | | | then return 0.8458032560871667;  // std dev = 0.994, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.8295775065280829;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.7781489350995119;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   else return -0.14185106490048785;  // std dev = 9.42e-08, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.7267556742005873;  // std dev = 0.103, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( recursion_accounttype(D, B), follows(A, G) )
%   | | | then return 0.5652368177744554;  // std dev = 0.925, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.723696951419441;  // std dev = 0.009, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.7298132947414959;  // std dev = 0.060, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.5731261073639998;  // std dev = 2.007, 31.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=26 */
%   | | else return 0.7304705040580777;  // std dev = 0.023, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.1254446385283919;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5612627213375746;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.5075649315945318;  // std dev = 0.977, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.27070912927562923;  // std dev = 0.737, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G) )
%   | | then return 0.586927223671027;  // std dev = 0.179, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.5581112638147506;  // std dev = 0.005, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.4821284681028983;  // std dev = 0.911, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.11231637819360664;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.4147291642154981;  // std dev = 0.994, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | | | else return 0.15206449234300243;  // std dev = 1.104, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.4417568228774844;  // std dev = 0.185, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(H, A) )
%   | | then return 0.4230253756785211;  // std dev = 0.038, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.4211244121699378;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3274570889778524;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.10159632948783623;  // std dev = 3.16e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(A, F) )
%   | | | then return 0.3131973009384423;  // std dev = 0.984, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.056286860490969745;  // std dev = 1.046, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.3272523539678635;  // std dev = 0.135, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return 0.3516016785933722;  // std dev = 0.170, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(A, G) )
%   | then return -0.0926912761892605;  // std dev = 1.21e-07, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2504363141627185;  // std dev = 1.015, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return -0.1649141233006145;  // std dev = 0.920, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.38734058494399215;  // std dev = 0.130, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), follows(H, G) )
%   | | | then return 0.2541235077116024;  // std dev = 0.049, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.2686900132627379;  // std dev = 0.097, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.277158945174009;  // std dev = 0.068, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.28678595158535836;  // std dev = 0.043, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( tweets(A, J) )
%   | then return -0.08518475138839678;  // std dev = 5.51e-09, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.21894644330350593;  // std dev = 0.113, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.3429163892496643;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return 0.2090319647430883;  // std dev = 0.042, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.21936657151674913;  // std dev = 0.085, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), follows(J, I) )
%   | | | then return 0.2052748646174889;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.26313339288812015;  // std dev = 0.121, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.22706982648489307;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.14159734530486331;  // std dev = 1.344, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else return -0.07877675473109143;  // std dev = 3.65e-08, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), follows(A, F) )
%   | | then if ( follows(D, F) )
%   | | | then return 0.16357149418364683;  // std dev = 0.883, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | | else return -0.12127545498297794;  // std dev = 0.751, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(D, G), recursion_accounttype(E, B) )
%   | | | then return 0.1808485969813162;  // std dev = 0.098, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.22712413208784835;  // std dev = 0.084, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.1990688914120228;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2664983222488602;  // std dev = 0.058, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.18417893608898522;  // std dev = 0.075, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20403864929847904;  // std dev = 0.053, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.07324622576333706;  // std dev = 4.56e-09, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | | then return 0.1340384930518892;  // std dev = 0.991, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return -0.05451819323600972;  // std dev = 1.275, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.16257006954295722;  // std dev = 0.074, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.1490288429297009;  // std dev = 0.017, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(G, H), follows(G, I) )
%   | | | then return 0.18734124053282547;  // std dev = 0.096, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.14045205001834926;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1572413702538926;  // std dev = 0.092, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.17104677504629873;  // std dev = 0.058, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420311;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.14299647154266343;  // std dev = 0.132, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.028016590206723008;  // std dev = 1.359, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.014240136796210464;  // std dev = 1.310, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.07828637215458147;  // std dev = 1.378, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( follows(A, J), follows(J, H) )
%   | | | then return 0.1336647798090393;  // std dev = 0.014, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.1437526214621819;  // std dev = 0.038, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.15094338094984974;  // std dev = 0.074, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.1579879719417739;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202586;  // std dev = 7.62e-09, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.540', 'seconds']
Refined model CLL: -0.084305


******************************************
Best model found
******************************************
Results 

CLL : -0.090785 

AUC ROC : 0.995044 

AUC PR : 0.457275 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 75.443 

Total Inference Time : 23.27730083465576 

Total revision time: 144.56877378082277
Best scored revision CLL: -0.084305


Results 

CLL : -0.090785 

AUC ROC : 0.995044 

AUC PR : 0.457275 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 150.24010256385804 

Total Inference Time : 23.27730083465576 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 9.23
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8273797043302796;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048816;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6730098911508999;  // std dev = 2.575, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839188;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5510914602435341;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360664;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41266560602488467;  // std dev = 1.710, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43745899445463593;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783621;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.32383749810332385;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926046;  // std dev = 1.01e-07, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | | else return -0.09269127618926089;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21838568806251552;  // std dev = 2.574, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19930608100180833;  // std dev = 1.968, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 5.58e-08, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18104875920357472;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333666;  // std dev = 1.19e-07, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13146552984607282;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 7.15e-08, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | | else return -0.06842697784420267;  // std dev = 2.63e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11374289125322869;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202623;  // std dev = 2.63e-09, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '32.639', 'seconds']
Parameter learned model CLL:-0.092483 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 258, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.575, 7, 126], 'false,true': [0.0, 253, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 206, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.71, 3, 118], 'true,false': [0.0, 235, 0], 'false,true,true': [5.27e-09, 0, 8], 'false,true,false': [1.32e-09, 14, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.403, 2, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.01e-07, 250, 0], 'false,false,false': [0.0, 25, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.574, 7, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 242, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.968, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.58e-08, 254, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.403, 2, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.19e-07, 200, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.15e-08, 236, 0], 'false,false,false': [2.63e-09, 22, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [2.63e-09, 253, 0]}]
{'': [0.02982248520710475, -9.639145640156398e-17], 'false': [-9.639145640156398e-17, nan]}
{'': [0.04986149584487719, -6.49458528239222e-17], 'false': [-6.49458528239222e-17, nan]}
{'': [0.022714981070848017, -5.1738548720395646e-17], 'false': [nan, -5.1738548720395646e-17]}
{'': [0.0675545429570851, 0.06724180151719222], 'true': [0.024178676319923213, -7.558965274043619e-17], 'false': [0.06724180151719222, nan], 'false,true': [2.7755575615628914e-17, 1.982541115402065e-18]}
{'': [0.015371837617808304, 6.620966401400933e-17], 'true': [0.015371837617808304, nan], 'false': [nan, 6.620966401400933e-17], 'false,false': [4.085620730620576e-17, -3.3306690738754695e-18], 'false,false,true': [nan, 4.085620730620576e-17]}
{'': [0.049831979692113657, 3.303142883182284e-17], 'false': [nan, 3.303142883182284e-17], 'false,false': [nan, 3.303142883182284e-17]}
{'': [0.029807051778068062, 1.2238679011615899e-17], 'false': [nan, 1.2238679011615899e-17], 'false,false': [nan, 1.2238679011615899e-17], 'false,false,false': [1.2238679011615899e-17, nan]}
{'': [0.015374146265957268, 7.645875546946832e-17], 'true': [0.015374146265957268, nan], 'false': [7.105427357601002e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.03669567328039719, -9.467018039439319e-18], 'false': [nan, -9.467018039439319e-18], 'false,false': [2.163994031049034e-17, 5.677276830469551e-18], 'false,false,true': [nan, 2.163994031049034e-17]}
{'': [0.03669694559550851, 7.021173278261859e-18], 'false': [nan, 7.021173278261859e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 69.866
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.8196873966379739;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.8581489350995121;  // std dev = 8.43e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.1418510649004885;  // std dev = 0.000, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.7257152177837304;  // std dev = 0.046, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.5866532006820406;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else if ( tweets(D, G), tweets(A, G) )
%   | | | then return 0.14044033081096277;  // std dev = 1.094, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.5579379635884857;  // std dev = 0.910, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7194734122109543;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.7238297269403637;  // std dev = 0.045, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.12544463852839186;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.5741791672264086;  // std dev = 0.236, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | else if ( follows(E, A), follows(D, A) )
%   | | | then return 0.30498097541294394;  // std dev = 0.867, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5557396115271238;  // std dev = 0.033, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return 0.554290454276962;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.45266039810996744;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.41174073498248276;  // std dev = 0.925, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.11231637819360685;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4030636830497953;  // std dev = 1.366, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | | | else return 0.43636738650345414;  // std dev = 0.118, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.265118522001565;  // std dev = 1.279, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.43782695237074076;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.4511123085274723;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.332541462030762;  // std dev = 0.127, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | | else return 0.13714555419980098;  // std dev = 0.846, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, G), tweets(D, H) )
%   | | | then return 0.08474366684280056;  // std dev = 1.538, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3256244880670166;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.3465849145803687;  // std dev = 0.173, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926053;  // std dev = 5.77e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return -0.09269127618926086;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.26800808119066294;  // std dev = 0.229, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | | else return -0.011085293415480812;  // std dev = 0.710, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(D, A) )
%   | | | then return -0.6689998047884821;  // std dev = 0.178, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.29546546032919074;  // std dev = 0.132, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(G, A), follows(H, A) )
%   | | | then return 0.2898326184480059;  // std dev = 0.022, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.27367321144670204;  // std dev = 0.087, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.24593913823410718;  // std dev = 0.000242, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2713456213074895;  // std dev = 0.005, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.08518475138839678;  // std dev = 5.74e-09, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(E, D) )
%   | | | then return 0.2115561870828536;  // std dev = 0.076, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.22946024344002625;  // std dev = 0.046, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2508036052952834;  // std dev = 0.192, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.21480051384637194;  // std dev = 0.036, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then return 0.053188523627217967;  // std dev = 0.822, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.22007654439801355;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2222234728809119;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, K) )
%   | then return -0.07877675473109144;  // std dev = 4.47e-09, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else return -0.07877675473109168;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.16332033627381273;  // std dev = 0.997, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.22158375669259112;  // std dev = 0.149, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(G, A), follows(D, G) )
%   | | | then return -0.09157830459494966;  // std dev = 1.153, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.19182837387112664;  // std dev = 0.071, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), follows(A, J) )
%   | | | then return 0.18770254869360523;  // std dev = 0.050, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.19358225866040904;  // std dev = 0.022, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.1822854722006297;  // std dev = 0.032, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.1886294899245557;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07324622576333675;  // std dev = 7.68e-09, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.1262555397349667;  // std dev = 1.381, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | | else return 0.16604981203260777;  // std dev = 0.151, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.16615881969503032;  // std dev = 0.000181, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.014467858330256498;  // std dev = 0.938, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.04763566512078248;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, H) )
%   | then return -0.06842697784420271;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | else return -0.06842697784420267;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.13983043849439863;  // std dev = 0.044, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.15106964394132608;  // std dev = 0.132, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.1787513602183695;  // std dev = 0.061, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14072511661732015;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), tweets(H, J) )
%   | | | then return 0.14691163421057277;  // std dev = 0.049, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.35602356015786196;  // std dev = 0.994, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.13660985973142015;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15778556780710196;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202612;  // std dev = 4.56e-09, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '29.353', 'seconds']
Refined model CLL: -0.091214


******************************************
Best model found
******************************************
Results 

CLL : -0.085779 

AUC ROC : 0.996224 

AUC PR : 0.443862 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 69.866 

Total Inference Time : 22.582858085632324 

Total revision time: 125.03593997573853
Best scored revision CLL: -0.091214


Results 

CLL : -0.085779 

AUC ROC : 0.996224 

AUC PR : 0.443862 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 125.0913031539917 

Total Inference Time : 22.582858085632324 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 11.171
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8270930344783917;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048796;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7130403104915405;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839205;  // std dev = 0.000, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.539603512373382;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936069;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4002152598660808;  // std dev = 1.969, 132.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.36385162350244443;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | else return -0.10159632948783615;  // std dev = 1.86e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30143286033389777;  // std dev = 2.359, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926046;  // std dev = 1.17e-07, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2489347680170321;  // std dev = 1.974, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1902388835351594;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109141;  // std dev = 5.58e-08, 337.000 (wgt'ed) examples reached here.  /* #neg=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16452022464519067;  // std dev = 2.204, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333686;  // std dev = 1.12e-07, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16463437795527708;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420283;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | | else return -0.06842697784420262;  // std dev = 2.79e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1362485547401126;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202597;  // std dev = 6.59e-09, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.010', 'seconds']
Parameter learned model CLL:-0.08739 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 283, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 314, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 291, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.969, 4, 128], 'true,false': [0.0, 250, 0], 'false,true,true': [0.249, 2, 28], 'false,true,false': [1.86e-09, 59, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.359, 6, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.17e-07, 263, 0], 'false,false,false': [0.0, 49, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.974, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 304, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.404, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.58e-08, 337, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.204, 5, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.12e-07, 268, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.08, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 267, 0], 'false,false,false': [2.79e-09, 52, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [6.59e-09, 298, 0]}]
{'': [0.030091431657735174, -1.5692198227917407e-17], 'false': [-1.5692198227917407e-17, nan]}
{'': [0.012497997115844862, -8.768640449268753e-17], 'false': [-8.768640449268753e-17, nan]}
{'': [0.024375000000000348, -1.0224734384863984e-16], 'false': [nan, -1.0224734384863984e-16]}
{'': [0.06710059839110624, 0.06938382955714748], 'false': [0.06938382955714748, nan], 'false,true': [0.062222222222222116, 3.7634678800852764e-18], 'true': [0.02938475665748385, -7.105427357601002e-17]}
{'': [0.03434931862153839, 9.394194823751324e-17], 'true': [0.03434931862153839, nan], 'false': [nan, 9.394194823751324e-17], 'false,false': [5.234511598993133e-17, -2.4923374022197392e-17], 'false,false,true': [nan, 5.234511598993133e-17]}
{'': [0.02435785252000584, 3.652049423109068e-17], 'false': [nan, 3.652049423109068e-17], 'false,false': [nan, 3.652049423109068e-17]}
{'': [0.035677242115348104, 9.224404952375187e-18], 'false': [nan, 9.224404952375187e-18], 'false,false': [nan, 9.224404952375187e-18], 'false,false,false': [9.224404952375187e-18, nan]}
{'': [0.030158444019098167, 2.1930331350620375e-17], 'true': [0.030158444019098167, nan], 'false': [4.639738013358863e-17, -1.0903976134711359e-17], 'false,false': [nan, -1.0903976134711359e-17]}
{'': [0.006344612570313301, -7.239071759311365e-17], 'false': [nan, -7.239071759311365e-17], 'false,false': [-2.6612087481651693e-17, 8.540177112501205e-18], 'false,false,true': [nan, -2.6612087481651693e-17]}
{'': [0.01252199084881739, 4.396185131066056e-17], 'false': [nan, 4.396185131066056e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 80.078
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.8581489350995111;  // std dev = 5.20e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8164822684328453;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   else return -0.14185106490048757;  // std dev = 2.19e-07, 346.000 (wgt'ed) examples reached here.  /* #neg=346 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.6740188667564097;  // std dev = 1.382, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.3194734122109546;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.7247131884834669;  // std dev = 0.076, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else return -0.1254446385283921;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5606540635785252;  // std dev = 0.054, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, E) )
%   | | | then return 0.3425419093205342;  // std dev = 1.533, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.5863011600086391;  // std dev = 0.079, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(G, A), tweets(A, H) )
%   | | | then return 0.5107525639619488;  // std dev = 0.897, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.5638478607727267;  // std dev = 0.088, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.11231637819360653;  // std dev = 0.000, 344.000 (wgt'ed) examples reached here.  /* #neg=344 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3867713738021302;  // std dev = 1.397, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | | | else return 0.430426475149502;  // std dev = 0.090, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.42941044805791057;  // std dev = 0.182, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(H, A) )
%   | | then if ( tweets(A, I), recursion_accounttype(H, B) )
%   | | | then return 0.41622821812642147;  // std dev = 2.98e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.018536794139781217;  // std dev = 1.304, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return 0.43852982455083594;  // std dev = 0.062, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.10159632948783616;  // std dev = 4.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.331333051622072;  // std dev = 0.051, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.2608972698523977;  // std dev = 0.965, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return 0.028322234374657123;  // std dev = 1.315, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.2583279103568678;  // std dev = 1.380, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else return 0.33049280230890643;  // std dev = 0.195, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926046;  // std dev = 1.58e-07, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return -0.09269127618926104;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), recursion_accounttype(D, B) )
%   | | | then return 0.26776843555390556;  // std dev = 0.055, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.21603966735179997;  // std dev = 1.382, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.08453130693859505;  // std dev = 1.548, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.2703181859444049;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A), tweets(G, H) )
%   | | then if ( recursion_accounttype(G, B), tweets(A, H) )
%   | | | then return 0.25657877726118494;  // std dev = 0.025, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.360152977681614;  // std dev = 0.111, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2823150920435096;  // std dev = 0.063, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.25588983937546655;  // std dev = 0.067, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.08518475138839678;  // std dev = 6.18e-09, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.21899137313996744;  // std dev = 0.064, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.2724500605736712;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(E, F) )
%   | | | then return 0.1425247589845249;  // std dev = 1.309, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.2532438816898287;  // std dev = 0.139, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A), tweets(G, H) )
%   | | then if ( recursion_accounttype(G, B), follows(A, G) )
%   | | | then return 0.213361123648035;  // std dev = 0.014, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09385091993669768;  // std dev = 1.173, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.11411169248963532;  // std dev = 0.975, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.2102873641637179;  // std dev = 0.059, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.07877675473109143;  // std dev = 3.94e-08, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.19714647669751445;  // std dev = 0.199, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.12466513077355061;  // std dev = 0.836, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(D, G), follows(G, D) )
%   | | | then return 0.21423943120737224;  // std dev = 0.036, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1947030308339016;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, H), tweets(A, J) )
%   | | | then return 0.2079684320716742;  // std dev = 0.108, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.057709690021888076;  // std dev = 1.780, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.17495672097799073;  // std dev = 0.018, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.18530084708738673;  // std dev = 0.039, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07324622576333711;  // std dev = 3.95e-09, 347.000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(D, F) )
%   | | | then return 0.11057128391233517;  // std dev = 1.643, 50.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | | else return 0.16928167565447727;  // std dev = 0.058, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return -0.0039033492178936666;  // std dev = 0.922, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.09865374968590587;  // std dev = 1.392, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.17170249310072208;  // std dev = 0.140, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.25819796886375623;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17261439757965202;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1563502925593385;  // std dev = 0.050, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.06842697784420312;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.14559228498277438;  // std dev = 0.059, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.07902054433193524;  // std dev = 0.925, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.09824563242113804;  // std dev = 0.829, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.11696701400495196;  // std dev = 0.942, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( recursion_accounttype(H, B), tweets(A, J) )
%   | | | then return 0.14822215325407964;  // std dev = 0.047, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2094157174089537;  // std dev = 0.090, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.15173236103880391;  // std dev = 0.043, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1367461431753673;  // std dev = 0.036, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.06419184008202594;  // std dev = 6.91e-09, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.842', 'seconds']
Refined model CLL: -0.085547


******************************************
Best model found
******************************************
Results 

CLL : -0.090952 

AUC ROC : 0.994656 

AUC PR : 0.444645 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 80.078 

Total Inference Time : 22.079660177230835 

Total revision time: 147.0332984199524
Best scored revision CLL: -0.085547


Results 

CLL : -0.090952 

AUC ROC : 0.994656 

AUC PR : 0.444645 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 147.08866159820556 

Total Inference Time : 22.079660177230835 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 9.317
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834893121146022;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004882;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7008873074338162;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839183;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5202187261043333;  // std dev = 0.208, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360689;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3879603609044636;  // std dev = 2.389, 124.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=118 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3252363465675461;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.10159632948783617;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3071662857286877;  // std dev = 2.189, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 9.19e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2570321561762636;  // std dev = 1.654, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1925490918648498;  // std dev = 2.195, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 6.32e-08, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16015511329916235;  // std dev = 2.195, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333675;  // std dev = 1.21e-07, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15154045250187412;  // std dev = 0.146, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.83e-08, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | | else return -0.06842697784420267;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1301112628188225;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 1.61e-09, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '33.012', 'seconds']
Parameter learned model CLL:-0.092558 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 252, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 239, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.208, 6, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 261, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.389, 6, 118], 'true,false': [0.0, 241, 0], 'false,true,true': [0.314, 1, 8], 'false,true,false': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.189, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.19e-08, 243, 0], 'false,false,false': [1.32e-09, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.654, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 254, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.195, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.32e-08, 242, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.195, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.21e-07, 243, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.146, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.83e-08, 218, 0], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.61e-09, 242, 0]}]
{'': [0.022714981070853308, -1.1983359630874705e-16], 'false': [-1.1983359630874705e-16, nan]}
{'': [0.022714981070850387, -5.760152931109599e-17], 'false': [-5.760152931109599e-17, nan]}
{'': [0.043388429752066006, -1.0038798230327086e-16], 'false': [nan, -1.0038798230327086e-16]}
{'': [0.06940291704965189, 0.06788871763283538], 'true': [0.046045785639958675, -7.370775267220956e-17], 'false': [0.06788871763283538, nan], 'false,true': [0.09876543209876538, -7.93016446160826e-18]}
{'': [0.036580936278796286, 4.563762630870209e-17], 'true': [0.036580936278796286, nan], 'false': [nan, 4.563762630870209e-17], 'false,false': [3.4723024638482264e-17, 1.3877787807814458e-18], 'false,false,true': [nan, 3.4723024638482264e-17]}
{'': [0.02121486721866853, 3.321927160295744e-17], 'false': [nan, 3.321927160295744e-17], 'false,false': [nan, 3.321927160295744e-17]}
{'': [0.036771128370707055, 1.651571441591142e-17], 'false': [nan, 1.651571441591142e-17], 'false,false': [nan, 1.651571441591142e-17], 'false,false,false': [1.651571441591142e-17, nan]}
{'': [0.03676430133339938, 5.2909066017292616e-17], 'true': [0.03676430133339938, nan], 'false': [6.030841121420603e-17, 1.0675221390626506e-18], 'false,false': [nan, 1.0675221390626506e-18]}
{'': [0.021422176875950744, 1.883414059631962e-17], 'false': [nan, 1.883414059631962e-17], 'false,false': [2.1389617905622283e-17, 1.1564823173178713e-18], 'false,false,true': [nan, 2.1389617905622283e-17]}
{'': [0.0227429294237986, 2.2938492244321417e-18], 'false': [nan, 2.2938492244321417e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 62.239
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(A, D), follows(D, E) )
%   | | then if ( follows(E, D), recursion_accounttype(D, B) )
%   | | | then return 0.7879734965030212;  // std dev = 1.929, 57.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=53 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.1418510649004885;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(F, D), follows(A, F) )
%   | | | then return 0.7069858485416132;  // std dev = 0.986, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.7194734122109543;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.7292852512602487;  // std dev = 0.033, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.7259641235781044;  // std dev = 0.108, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.12544463852839188;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.5365725303525178;  // std dev = 1.389, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | | else return 0.22376516070910368;  // std dev = 1.827, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | else return 0.5658462157656455;  // std dev = 0.122, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.5559528542363369;  // std dev = 0.059, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.11231637819360686;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4074119277034073;  // std dev = 1.395, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | | | else return 0.4430137699732481;  // std dev = 0.192, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.4336253198743323;  // std dev = 0.076, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3522755765581015;  // std dev = 0.974, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.41737097667777995;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, F) )
%   | | | then return 0.3002622440954873;  // std dev = 1.385, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | | else return 0.3350728356888306;  // std dev = 0.097, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.16228189482361635;  // std dev = 0.895, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.33561077447344234;  // std dev = 0.200, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926046;  // std dev = 1.01e-07, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return -0.09269127618926086;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( tweets(A, E), tweets(D, F) )
%   | | | then return 0.28016569818293413;  // std dev = 0.108, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.263325176842568;  // std dev = 0.036, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.1180323077960768;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.2528574268559048;  // std dev = 0.038, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return 0.07456292948535165;  // std dev = 0.826, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2663579743214985;  // std dev = 0.088, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.10924989829611877;  // std dev = 0.930, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.17067106554893927;  // std dev = 1.357, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else return -0.08518475138839678;  // std dev = 5.67e-09, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.2034787059851237;  // std dev = 0.989, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.12129804648294709;  // std dev = 1.628, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.17308133285761632;  // std dev = 1.109, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.22167819229438196;  // std dev = 0.065, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.24841265361836384;  // std dev = 0.159, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.21065863374329158;  // std dev = 0.023, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0.08397103305435723;  // std dev = 0.926, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.22856807595161183;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109143;  // std dev = 4.27e-09, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then if ( follows(G, A), follows(H, G) )
%   | | | then return 0.198547661027191;  // std dev = 0.194, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | | else return 0.23144417782485927;  // std dev = 0.067, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(E, A), tweets(E, D) )
%   | | | then return 0.19684851351903562;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.180227580061582;  // std dev = 0.015, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.18892361005984246;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.021715124883061904;  // std dev = 0.876, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1750757230257941;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2073395662764999;  // std dev = 0.112, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.07324622576333692;  // std dev = 6.25e-09, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.1668053362539611;  // std dev = 0.073, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.09496666677307357;  // std dev = 1.814, 50.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=46 */
%   | | else return -0.1748551201688764;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(G, F), follows(A, G) )
%   | | | then return 0.17011606843245589;  // std dev = 0.067, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.15101987147172982;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.2350493702880909;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17480123372335202;  // std dev = 0.071, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420261;  // std dev = 4.17e-09, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return -0.06842697784420267;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.12130892967793645;  // std dev = 0.982, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.14804049751443776;  // std dev = 0.064, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.17536307747714477;  // std dev = 0.098, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.15367774638498555;  // std dev = 0.157, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return 0.021718464203954672;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, F) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return -0.06419184008202619;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '25.323', 'seconds']
Refined model CLL: -0.091191


******************************************
Best model found
******************************************
Results 

CLL : -0.085737 

AUC ROC : 0.996384 

AUC PR : 0.514095 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 62.239 

Total Inference Time : 18.98936700820923 

Total revision time: 113.50278592681885
Best scored revision CLL: -0.091191


Results 

CLL : -0.085737 

AUC ROC : 0.996384 

AUC PR : 0.514095 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 113.60765815353393 

Total Inference Time : 18.98936700820923 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 10.929
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004878;  // std dev = 1.26e-07, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6884175115898383;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839205;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5441535096403437;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360653;  // std dev = 0.000, 340.000 (wgt'ed) examples reached here.  /* #neg=340 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3759757671301847;  // std dev = 2.576, 135.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=128 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.36116095231537115;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | else return -0.10159632948783627;  // std dev = 2.95e-09, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.31486124662375614;  // std dev = 1.973, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 1.25e-07, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2604470486416019;  // std dev = 1.406, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.96e-09, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17579575658024404;  // std dev = 2.757, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 4.71e-08, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1714886589607464;  // std dev = 1.893, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333671;  // std dev = 1.25e-07, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12692493046586859;  // std dev = 0.203, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420268;  // std dev = 5.77e-08, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | | else return -0.06842697784420262;  // std dev = 3.36e-09, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12769609983278035;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202601;  // std dev = 6.18e-09, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.958', 'seconds']
Parameter learned model CLL:-0.087012 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [9.68e-07, 0, 156], 'false,true': [1.26e-07, 307, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 326, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 340, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.576, 7, 128], 'true,false': [0.0, 262, 0], 'false,true,true': [0.249, 2, 28], 'false,true,false': [2.95e-09, 47, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.973, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.25e-07, 250, 0], 'false,false,false': [0.0, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.406, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 298, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.757, 8, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.71e-08, 285, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.893, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.25e-07, 237, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 46, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.203, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.77e-08, 242, 0], 'false,false,false': [3.36e-09, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [6.18e-09, 290, 0]}]
{'': [6.012284687200848e-15, 5.207560766971418e-17], 'false': [5.207560766971418e-17, nan]}
{'': [0.030091431657726698, -9.263210512209895e-17], 'false': [-9.263210512209895e-17, nan]}
{'': [0.018511925952292674, -4.179663151530001e-17], 'false': [nan, -4.179663151530001e-17]}
{'': [0.06790170773782943, 0.07516896592319165], 'false': [0.07516896592319165, nan], 'false,true': [0.06222222222222222, 8.267618268485208e-18], 'true': [0.04916323731138595, -6.271488841394015e-17]}
{'': [0.02432467727066081, 1.0158903493302086e-16], 'true': [0.02432467727066081, nan], 'false': [nan, 1.0158903493302086e-16], 'false,false': [6.217248937900877e-17, -2.3790493384824782e-17], 'false,false,true': [nan, 6.217248937900877e-17]}
{'': [0.012512487076821835, 3.576557394765605e-17], 'false': [nan, 3.576557394765605e-17], 'false,false': [nan, 3.576557394765605e-17]}
{'': [0.04635504956285518, 7.791038769299344e-18], 'false': [nan, 7.791038769299344e-18], 'false,false': [nan, 7.791038769299344e-18], 'false,false,false': [7.791038769299344e-18, nan]}
{'': [0.022393787190021115, 3.923049556979352e-17], 'true': [0.022393787190021115, nan], 'false': [6.558279470359575e-17, -1.1464259493411943e-17], 'false,false': [nan, -1.1464259493411943e-17]}
{'': [0.04108289190788053, -5.009087047130336e-17], 'false': [nan, -5.009087047130336e-17], 'false,false': [1.376309534659285e-17, 1.1102230246251566e-17], 'false,false,true': [nan, 1.376309534659285e-17]}
{'': [0.024392361490310408, 3.7517881521815636e-17], 'false': [nan, 3.7517881521815636e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 99.49600000000001
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995118;  // std dev = 2.23e-07, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.14185106490048768;  // std dev = 1.71e-07, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then return 0.7240209762970059;  // std dev = 0.124, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.6169280616355988;  // std dev = 0.304, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.6679128005139638;  // std dev = 0.958, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.722619430499575;  // std dev = 0.043, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.12544463852839205;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5326232207723458;  // std dev = 0.991, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.44898004725119145;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.5733461512378122;  // std dev = 0.141, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.5202019849219456;  // std dev = 0.959, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else return 0.5678562360142817;  // std dev = 0.062, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.11231637819360699;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.41442415795764354;  // std dev = 0.960, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | | else return 0.17207733714425233;  // std dev = 0.863, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.42854742392121364;  // std dev = 0.113, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.42975839326828635;  // std dev = 0.051, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10159632948783627;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.33344192039660275;  // std dev = 0.119, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.2312303390923032;  // std dev = 0.950, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.33803266630778844;  // std dev = 0.086, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I), recursion_accounttype(H, B) )
%   | | | then return 0.3053538773951971;  // std dev = 0.981, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.2180200594475853;  // std dev = 1.289, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | else return 0.3249252326967842;  // std dev = 0.045, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, J) )
%   | then return -0.09269127618926047;  // std dev = 8.69e-08, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.2590002063507672;  // std dev = 0.059, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.27157758738277477;  // std dev = 0.055, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.2907748806300927;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.269914006186983;  // std dev = 0.053, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.22413201082708364;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.17641275784257898;  // std dev = 1.321, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.1698406651523987;  // std dev = 0.953, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.24067232516738635;  // std dev = 0.988, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   else return -0.08518475138839678;  // std dev = 5.96e-09, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.19074862993962613;  // std dev = 0.993, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.2165976212791847;  // std dev = 0.063, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2544831037927791;  // std dev = 0.088, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2240152238322143;  // std dev = 0.120, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.23035730979761296;  // std dev = 0.068, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.26930256021247456;  // std dev = 0.956, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.2258571575943056;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22216890695458918;  // std dev = 1.29e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07877675473109143;  // std dev = 2.11e-08, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(D, F) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.18439339674556326;  // std dev = 0.067, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.21168375588954524;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(D, G), tweets(A, G) )
%   | | | then return 0.1775451324686569;  // std dev = 0.000643, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.18009198312539995;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.20940660122076774;  // std dev = 0.078, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.16151613238379178;  // std dev = 0.905, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.11835745310627162;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.16075093982589292;  // std dev = 0.815, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   else return -0.07324622576333704;  // std dev = 4.84e-09, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.1555485995839782;  // std dev = 0.011, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.1647408454409946;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.020053301500848345;  // std dev = 1.299, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.1060868701529331;  // std dev = 1.393, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.17067153283678774;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15569678100479573;  // std dev = 0.018, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.1629672865895386;  // std dev = 0.040, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.1772575001057203;  // std dev = 0.119, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.06842697784420304;  // std dev = 0.000, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.1381780776521643;  // std dev = 0.040, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.15669298336096746;  // std dev = 0.149, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.07678152727192203;  // std dev = 0.855, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.14823335277690705;  // std dev = 0.079, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.13975145632646865;  // std dev = 0.001, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.14709846892508674;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.06820826258604677;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.14024593604556623;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202591;  // std dev = 7.09e-09, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.062', 'seconds']
Refined model CLL: -0.085642


******************************************
Best model found
******************************************
Results 

CLL : -0.091217 

AUC ROC : 0.99502 

AUC PR : 0.480773 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 99.49600000000001 

Total Inference Time : 25.292942762374878 

Total revision time: 169.3180606842041
Best scored revision CLL: -0.085642


Results 

CLL : -0.091217 

AUC ROC : 0.99502 

AUC PR : 0.480773 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 169.4229329109192 

Total Inference Time : 25.292942762374878 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 9.223
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834893121146022;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048818;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6859751824560069;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839177;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5460775209471174;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360678;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.40886365531696317;  // std dev = 1.710, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4336570437467166;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783621;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3060883843086913;  // std dev = 1.968, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892605;  // std dev = 6.83e-08, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21958980489313257;  // std dev = 2.574, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.59e-09, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20017204747750814;  // std dev = 1.968, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 5.77e-08, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18943312742850063;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333677;  // std dev = 1.20e-07, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16113840446968958;  // std dev = 0.088, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 3.33e-08, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.09494824457435723;  // std dev = 0.223, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202616;  // std dev = 4.06e-09, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '33.984', 'seconds']
Parameter learned model CLL:-0.092672 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 255, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 229, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 232, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.71, 3, 118], 'true,false': [0.0, 241, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [1.32e-09, 12, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.968, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.83e-08, 219, 0], 'false,false,false': [1.32e-09, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.574, 7, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 231, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.968, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.77e-08, 263, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.996, 1, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.2e-07, 248, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.088, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.33e-08, 241, 0], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.223, 7, 126], 'false,true': [0.0, 0, 0], 'false,false': [4.06e-09, 264, 0]}]
{'': [0.022714981070853308, -1.0797463141452503e-16], 'false': [-1.0797463141452503e-16, nan]}
{'': [0.03671114736903573, -5.4299117361579706e-17], 'false': [-5.4299117361579706e-17, nan]}
{'': [0.02271498107085061, -7.848128277522658e-17], 'false': [nan, -7.848128277522658e-17]}
{'': [0.06606589038380904, 0.06875908165415215], 'false': [0.06875908165415215, nan], 'false,true': [-5.551115123125783e-17, 0.0], 'true': [0.02417867631992439, -7.186505885540433e-17]}
{'': [0.029803345039032394, 2.210833728690788e-17], 'true': [0.029803345039032394, nan], 'false': [nan, 2.210833728690788e-17], 'false,false': [2.1291948417468754e-17, 2.3129646346357427e-18], 'false,false,true': [nan, 2.1291948417468754e-17]}
{'': [0.04983190053406913, 3.2681889902385563e-17], 'false': [nan, 3.2681889902385563e-17], 'false,false': [nan, 3.2681889902385563e-17]}
{'': [0.029807013752358006, 1.2664140965305969e-17], 'false': [nan, 1.2664140965305969e-17], 'false,false': [nan, 1.2664140965305969e-17], 'false,false,false': [1.2664140965305969e-17, nan]}
{'': [0.007809044074335898, 5.0002411032736055e-17], 'true': [0.007809044074335898, nan], 'false': [5.819717467793159e-17, 9.912705577010326e-19], 'false,false': [nan, 9.912705577010326e-19]}
{'': [0.007809291541022935, -1.0531759917392789e-17], 'false': [nan, -1.0531759917392789e-17], 'false,false': [4.6067345420130975e-18, -2.3129646346357427e-18], 'false,false,true': [nan, 4.6067345420130975e-18]}
{'': [0.04984244057198246, 1.5980482930210588e-17], 'false': [nan, 1.5980482930210588e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 46.217
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995104;  // std dev = 7.25e-07, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else return -0.14185106490048802;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), follows(A, E) )
%   | | | then return 0.7194734122109552;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.6194734122109546;  // std dev = 1.643, 30.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.2805265877890452;  // std dev = 9.13e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.7194734122109547;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7194734122109551;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.12544463852839188;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.5476967280286285;  // std dev = 1.005, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.3596452529215455;  // std dev = 0.678, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5553664367462847;  // std dev = 7.30e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(I, A), tweets(G, J) )
%   | | | then return 0.5618235835996416;  // std dev = 0.047, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.3553664367462847;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.41250929388914187;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.11231637819360694;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.40447075990674686;  // std dev = 1.399, 93.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=91 */
%   | | | else return 0.2593832520187441;  // std dev = 0.894, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.4405897484872588;  // std dev = 0.095, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.3064024730471991;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.2996962803654353;  // std dev = 0.987, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.3354335555569638;  // std dev = 0.079, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.3334954155484106;  // std dev = 0.036, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.13591705109622879;  // std dev = 0.911, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.34204126168418947;  // std dev = 0.102, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926049;  // std dev = 7.15e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return -0.09269127618926087;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.23626070493700752;  // std dev = 0.986, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.26806905683042187;  // std dev = 0.046, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.27488979030245986;  // std dev = 0.025, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.3014605438598968;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2835721083969789;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.17804351181416467;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1150800086968053;  // std dev = 1.269, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.21386527977962738;  // std dev = 0.908, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return -0.08518475138839678;  // std dev = 5.74e-09, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.21873265274103548;  // std dev = 0.020, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.16678370590256586;  // std dev = 0.968, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( tweets(A, F), follows(G, D) )
%   | | | then return 0.22305255696500934;  // std dev = 0.020, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.24020498894518666;  // std dev = 0.046, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return -0.15086933399317132;  // std dev = 1.372, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.24630692262051723;  // std dev = 0.022, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.22411092017419817;  // std dev = 0.008, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.15232315643748315;  // std dev = 0.949, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.07877675473109143;  // std dev = 3.61e-09, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.191594697074876;  // std dev = 0.131, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return -0.0022823168063168644;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.18743224215762522;  // std dev = 0.016, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.19956509356115168;  // std dev = 0.101, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.0744107495393645;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.07324622576333675;  // std dev = 9.06e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | | else return -0.07324622576333698;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.07324622576333703;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return -0.07324622576333698;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.058333514491197176;  // std dev = 2.009, 46.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=41 */
%   | | | else return 0.1849956117576258;  // std dev = 0.048, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.16256546529428437;  // std dev = 0.052, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.20229618057904183;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.15863204248985982;  // std dev = 0.007, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.16292860100924414;  // std dev = 0.005, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.17253914944246537;  // std dev = 0.042, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.17992695485444693;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06842697784420262;  // std dev = 3.36e-09, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.12807719771116724;  // std dev = 0.993, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.1457289262884568;  // std dev = 0.030, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(D, G), follows(D, H) )
%   | | | then return 0.1822011691873329;  // std dev = 0.050, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15781463008140637;  // std dev = 0.040, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(I, A), follows(A, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.02103814219297048;  // std dev = 1.327, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.14926983165072594;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.1419090308133467;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.15193628864914727;  // std dev = 0.021, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.06419184008202626;  // std dev = 1.49e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.770', 'seconds']
Refined model CLL: -0.091476


******************************************
Best model found
******************************************
Results 

CLL : -0.085828 

AUC ROC : 0.994896 

AUC PR : 0.370285 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 46.217 

Total Inference Time : 16.66127324104309 

Total revision time: 95.74799603462219
Best scored revision CLL: -0.091476


Results 

CLL : -0.085828 

AUC ROC : 0.994896 

AUC PR : 0.370285 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 95.84160512924194 

Total Inference Time : 16.66127324104309 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 11.286
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8331489350995097;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048777;  // std dev = 1.37e-07, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7181219767499103;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.125444638528392;  // std dev = 0.000, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5429957369564727;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360656;  // std dev = 0.000, 340.000 (wgt'ed) examples reached here.  /* #neg=340 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.39665661284666326;  // std dev = 1.969, 132.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=128 */
%   | else return -0.10159632948783662;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42695964314969354;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.10159632948783624;  // std dev = 3.73e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30765439487236546;  // std dev = 1.973, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892605;  // std dev = 1.19e-07, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24931072287469638;  // std dev = 1.714, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20324813854096352;  // std dev = 1.717, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 2.11e-08, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14076937606373624;  // std dev = 2.729, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333682;  // std dev = 1.14e-07, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14947913753528472;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420285;  // std dev = 0.000, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
%   | | else return -0.06842697784420262;  // std dev = 3.36e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12347129588209942;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202589;  // std dev = 7.45e-09, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.592', 'seconds']
Parameter learned model CLL:-0.087299 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [1.37e-07, 311, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.997, 1, 156], 'false,true': [0.0, 300, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 340, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.969, 4, 128], 'true,false': [0.0, 265, 0], 'false,true,true': [0.0, 0, 28], 'false,true,false': [3.73e-09, 51, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.973, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.19e-07, 246, 0], 'false,false,false': [0.0, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.714, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 304, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.717, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.11e-08, 320, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.729, 8, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.14e-07, 260, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 62, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 268, 0], 'false,false,false': [3.36e-09, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.45e-09, 317, 0]}]
{'': [0.024375000000006076, 5.997346242348113e-17], 'false': [5.997346242348113e-17, nan]}
{'': [0.00632885715444811, -8.585724723767877e-17], 'false': [-8.585724723767877e-17, nan]}
{'': [0.018511925952295085, -3.657205257588751e-17], 'false': [nan, -3.657205257588751e-17]}
{'': [0.0648685892116717, 0.06392283005111844], 'true': [0.029384756657483527, -6.200490854510308e-17], 'false': [0.06392283005111844, nan], 'false,true': [-1.2688263138573217e-16, 1.523835523995313e-17]}
{'': [0.0243228238398814, 9.901005334362052e-17], 'true': [0.0243228238398814, nan], 'false': [nan, 9.901005334362052e-17], 'false,false': [5.77677020943171e-17, -2.4462541220554296e-17], 'false,false,true': [nan, 5.77677020943171e-17]}
{'': [0.018477670595058455, 3.652049423109068e-17], 'false': [nan, 3.652049423109068e-17], 'false,false': [nan, 3.652049423109068e-17]}
{'': [0.018545632728768288, 1.3877787807814458e-18], 'false': [nan, 1.3877787807814458e-18], 'false,false': [nan, 1.3877787807814458e-18], 'false,false,false': [1.3877787807814458e-18, nan]}
{'': [0.045402661991396615, 2.2756124107223705e-17], 'true': [0.045402661991396615, nan], 'false': [5.0387044963757104e-17, -1.2534776084477573e-17], 'false,false': [nan, -1.2534776084477573e-17]}
{'': [0.01853858707757462, -6.990293118010245e-17], 'false': [nan, -6.990293118010245e-17], 'false,false': [-1.7399017550095738e-17, 1.0903976134711359e-17], 'false,false,true': [nan, -1.7399017550095738e-17]}
{'': [0.024343799822791324, 5.463558102256291e-17], 'false': [nan, 5.463558102256291e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 97.592
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.7152917922423694;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.14185106490048777;  // std dev = 1.43e-07, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.7090485438148667;  // std dev = 0.999, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | | else return 0.6443162191329567;  // std dev = 1.294, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return 0.2643068552616156;  // std dev = 1.002, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then if ( follows(A, H), follows(F, H) )
%   | | | then return 0.7423554452002342;  // std dev = 0.081, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.6480448407823829;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.7273211856680847;  // std dev = 0.046, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.12544463852839205;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.5598652580943102;  // std dev = 0.112, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | | else return 0.46076257778241986;  // std dev = 1.596, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | else return 0.23134853465687494;  // std dev = 0.968, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.5858035908738959;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3021443675409992;  // std dev = 0.756, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5640547837993681;  // std dev = 0.061, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.11231637819360671;  // std dev = 0.000, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.4044627220242482;  // std dev = 0.993, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | | else return 0.1221632754035269;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.4873614020906646;  // std dev = 0.284, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.429573144036843;  // std dev = 0.185, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( tweets(A, I), follows(J, A) )
%   | | then return 0.3157279505228235;  // std dev = 0.303, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.4658631441765458;  // std dev = 0.060, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.34758721367678075;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return -0.10159632948783621;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.32486006523847377;  // std dev = 1.03e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.2581933985718073;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.3515064107571883;  // std dev = 0.063, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, F), follows(G, A) )
%   | | then if ( follows(F, H), follows(H, G) )
%   | | | then return 0.324860065238474;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.45489540666798617;  // std dev = 0.214, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.3292620497314683;  // std dev = 0.177, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.351937323149083;  // std dev = 0.106, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else if ( follows(A, J) )
%   | then return -0.0926912761892605;  // std dev = 1.15e-07, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | else return -0.09269127618926103;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.24777184269606453;  // std dev = 0.969, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.05114463743292896;  // std dev = 1.142, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.26445499145117213;  // std dev = 0.052, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.2786948180926203;  // std dev = 0.137, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(I, A), follows(A, J) )
%   | | then if ( follows(J, I), follows(J, A) )
%   | | | then return 0.2580007913923057;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2690420094834076;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return -0.04202443575180385;  // std dev = 0.768, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18868270219535405;  // std dev = 1.257, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   else return -0.08518475138839678;  // std dev = 5.96e-09, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2154499785911131;  // std dev = 0.029, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.1484127287122827;  // std dev = 1.277, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.28204525668101;  // std dev = 0.283, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2211167926377511;  // std dev = 0.134, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.21589196081883652;  // std dev = 0.018, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.24251164563513808;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.26230218445599174;  // std dev = 0.997, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.17752154811467824;  // std dev = 0.963, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   else return -0.07877675473109143;  // std dev = 1.49e-08, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.12494820754701334;  // std dev = 1.357, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.18537021430112477;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(D, G), follows(H, D) )
%   | | | then return 0.18493652857538115;  // std dev = 0.087, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.2102616609818546;  // std dev = 0.069, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(J, I) )
%   | | | then return 0.22643420707851403;  // std dev = 0.183, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3097010720452653;  // std dev = 0.173, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.18622929804845664;  // std dev = 0.051, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.20102646502997187;  // std dev = 0.088, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.07324622576333693;  // std dev = 6.04e-09, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), follows(D, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.16117569549550453;  // std dev = 0.040, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return -0.05011979136653058;  // std dev = 1.189, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | | then return 0.18165676226999103;  // std dev = 0.264, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.16038917384399157;  // std dev = 0.085, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.009276871442910428;  // std dev = 0.791, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.11001072392298339;  // std dev = 0.957, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.17213336752322514;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1717975696009994;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420321;  // std dev = 0.000, 354.000 (wgt'ed) examples reached here.  /* #neg=354 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.1274157073801444;  // std dev = 0.946, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | | else return -0.1363818953935812;  // std dev = 1.196, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.15359950422623167;  // std dev = 0.152, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1407864045994417;  // std dev = 0.083, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.14597387256570035;  // std dev = 0.014, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.17908688791065222;  // std dev = 0.067, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.013154002032537946;  // std dev = 1.540, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else if ( follows(J, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.683', 'seconds']
Refined model CLL: -0.084212


******************************************
Best model found
******************************************
Results 

CLL : -0.090466 

AUC ROC : 0.995224 

AUC PR : 0.444476 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 97.592 

Total Inference Time : 30.323034048080444 

Total revision time: 173.5010080127716
Best scored revision CLL: -0.084212


Results 

CLL : -0.090466 

AUC ROC : 0.995224 

AUC PR : 0.444476 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 173.59461710739134 

Total Inference Time : 30.323034048080444 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 9.165
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8126943896449649;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004883;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7052995876142142;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4897459875695188;  // std dev = 0.272, 137.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360682;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.44825098132984964;  // std dev = 3.26e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.44825098132985014;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.32704582821060985;  // std dev = 1.314, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 7.60e-08, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | | else return -0.09269127618926087;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23504593728416995;  // std dev = 2.143, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.59e-09, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22040001794884664;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 6.50e-08, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1536124776110678;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333673;  // std dev = 1.23e-07, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333702;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1534643201253448;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 3.65e-08, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | | else return -0.06842697784420267;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1486081471581479;  // std dev = 1.86e-09, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '32.700', 'seconds']
Parameter learned model CLL:-0.093212 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.393, 6, 126], 'false,true': [0.0, 245, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 250, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.272, 11, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 243, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [3.26e-07, 0, 118], 'true,false': [0.0, 234, 0], 'false,true,true': [7.45e-09, 0, 8], 'false,true,false': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.314, 2, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.6e-08, 235, 0], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.143, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 231, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.5e-08, 244, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.193, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.23e-07, 238, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 24, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.65e-08, 240, 0], 'false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.86e-09, 0, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 213, 0]}]
{'': [0.043388429752070364, -1.4863393962328627e-16], 'false': [-1.4863393962328627e-16, nan]}
{'': [0.022714981070847247, -6.394884621840901e-17], 'false': [-6.394884621840901e-17, nan]}
{'': [0.07384517022750335, -8.77213254024815e-17], 'false': [nan, -8.77213254024815e-17]}
{'': [0.06737468511648971, 0.06303768712269282], 'true': [9.032322912204663e-16, -7.781050258056652e-17], 'false': [0.06303768712269282, nan], 'false,true': [5.551115123125783e-17, -2.921639538487254e-18]}
{'': [0.013487671640213778, 5.0703098762408726e-17], 'true': [0.013487671640213778, nan], 'false': [nan, 5.0703098762408726e-17], 'false,false': [2.456663714064176e-17, 1.460819769243627e-18], 'false,false,true': [nan, 2.456663714064176e-17]}
{'': [0.03504426989828367, 3.2681889902385563e-17], 'false': [nan, 3.2681889902385563e-17], 'false,false': [nan, 3.2681889902385563e-17]}
{'': [0.007812015624031689, 1.729035858022785e-17], 'false': [nan, 1.729035858022785e-17], 'false,false': [nan, 1.729035858022785e-17], 'false,false,false': [1.729035858022785e-17, nan]}
{'': [0.036711147369034525, 5.0002411032736055e-17], 'true': [0.036711147369034525, nan], 'false': [6.344131569286608e-17, -2.3129646346357427e-18], 'false,false': [nan, -2.3129646346357427e-18]}
{'': [0.015380859375000173, -1.7212760071707853e-17], 'false': [nan, -1.7212760071707853e-17], 'false,false': [5.551115123125783e-18, -2.3129646346357427e-18], 'false,false,true': [nan, 5.551115123125783e-18]}
{'': [7.04903507698512e-18, 5.212314669601674e-19], 'false': [nan, 5.212314669601674e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 125.744
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.8438632208137985;  // std dev = 0.993, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.14185106490048818;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(F, A) )
%   | | then if ( tweets(A, G), follows(E, F) )
%   | | | then return 0.706914583207695;  // std dev = 0.995, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | | else return 0.5376429266657912;  // std dev = 1.538, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | else return 0.7272417989797811;  // std dev = 0.122, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.6021213332322918;  // std dev = 0.861, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5194734122109544;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.1254446385283919;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5677251970915953;  // std dev = 0.093, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.43000722273219694;  // std dev = 1.565, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | else return 0.5844064913164321;  // std dev = 0.106, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.06578121206139645;  // std dev = 1.196, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.513944914613965;  // std dev = 0.990, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.6433908209214387;  // std dev = 0.078, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5175854662639314;  // std dev = 0.964, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else return -0.11231637819360674;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.4347692389401134;  // std dev = 0.227, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | | else return 0.2575965380961747;  // std dev = 0.911, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.45641271193443067;  // std dev = 0.191, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.3484700680003151;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.1015963294878362;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.2826651783520105;  // std dev = 1.625, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | | else return 0.3389653842513233;  // std dev = 0.088, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.3542868986021332;  // std dev = 0.145, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.13626161623048336;  // std dev = 0.797, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3361187566676102;  // std dev = 0.058, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0687789546702543;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.36134368734060357;  // std dev = 0.081, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, K) )
%   | then return -0.09269127618926046;  // std dev = 1.10e-07, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | else return -0.09269127618926087;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), recursion_accounttype(D, B) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.27168805436417115;  // std dev = 0.104, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.2555865154948945;  // std dev = 0.057, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.3103255276567249;  // std dev = 0.102, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.270526855953567;  // std dev = 0.086, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.32721824357879914;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.26363131734064;  // std dev = 0.066, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.28473939191575803;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15582805694945115;  // std dev = 0.828, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.08518475138839678;  // std dev = 5.67e-09, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(E, A) )
%   | | | then return 0.2146715590517928;  // std dev = 0.031, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.22971653686298468;  // std dev = 0.192, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return -0.10902660585894279;  // std dev = 0.750, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then return -0.04069091803643437;  // std dev = 0.427, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.23593232982622458;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.25267407677975745;  // std dev = 0.068, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109143;  // std dev = 5.16e-08, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.12343109118874862;  // std dev = 1.665, 50.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | | else return 0.020194236060554187;  // std dev = 0.911, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.19473430409886464;  // std dev = 0.114, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.14402226300475965;  // std dev = 0.939, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.18610667277920143;  // std dev = 0.092, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.21141978075791204;  // std dev = 0.070, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.19507704096638015;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.06372628469199902;  // std dev = 0.938, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.07324622576333674;  // std dev = 7.90e-09, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.16621612923806564;  // std dev = 0.056, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | | else return 0.1948572816057976;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, D), tweets(A, E) )
%   | | | then return 0.09522196340230146;  // std dev = 0.977, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.16496200679232934;  // std dev = 0.084, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.19941629651995407;  // std dev = 0.038, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15691615218447386;  // std dev = 0.044, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2015651257801203;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.19788127645430778;  // std dev = 0.058, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06842697784420279;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), recursion_accounttype(E, B) )
%   | | | then return 0.14219294130419366;  // std dev = 0.026, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.03786460586548677;  // std dev = 1.988, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   | | else if ( follows(A, G), follows(G, E) )
%   | | | then return 0.1389332155555853;  // std dev = 0.034, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.15329803373095832;  // std dev = 0.061, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.1520192438251494;  // std dev = 0.059, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1338518783310902;  // std dev = 0.044, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17106388645890735;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1684285752257717;  // std dev = 0.052, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202625;  // std dev = 2.58e-08, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '39.479', 'seconds']
Refined model CLL: -0.09075


******************************************
Best model found
******************************************
Results 

CLL : -0.085452 

AUC ROC : 0.996295 

AUC PR : 0.493696 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 125.744 

Total Inference Time : 27.72729992866516 

Total revision time: 185.17894013786315
Best scored revision CLL: -0.09075


Results 

CLL : -0.085452 

AUC ROC : 0.996295 

AUC PR : 0.493696 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 190.85605986976623 

Total Inference Time : 27.72729992866516 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 11.37
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8454907072514085;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048782;  // std dev = 1.03e-07, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6849840913500317;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839208;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #neg=329 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5543181110418134;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360665;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3989760938979579;  // std dev = 1.969, 132.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=128 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.36261245753432114;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | else return -0.10159632948783616;  // std dev = 2.95e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2881814085835199;  // std dev = 2.754, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926053;  // std dev = 1.01e-07, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23948463318875546;  // std dev = 2.359, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19357239813556115;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 2.98e-08, 328.000 (wgt'ed) examples reached here.  /* #neg=328 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1730769196577143;  // std dev = 1.974, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.0732462257633367;  // std dev = 1.26e-07, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13496406015311233;  // std dev = 0.189, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442029;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
%   | | else return -0.06842697784420264;  // std dev = 3.36e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.128632616156219;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202594;  // std dev = 6.91e-09, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.185', 'seconds']
Parameter learned model CLL:-0.086946 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.405, 2, 156], 'false,true': [1.03e-07, 302, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.404, 6, 156], 'false,true': [0.0, 329, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 323, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.969, 4, 128], 'true,false': [0.0, 248, 0], 'false,true,true': [0.249, 2, 28], 'false,true,false': [2.95e-09, 61, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.754, 8, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.01e-07, 227, 0], 'false,false,false': [0.0, 40, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.359, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 316, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.404, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.98e-08, 328, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.974, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.26e-07, 233, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.189, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 277, 0], 'false,false,false': [3.36e-09, 51, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [6.91e-09, 305, 0]}]
{'': [0.012497997115852777, 3.529185773642882e-17], 'false': [3.529185773642882e-17, nan]}
{'': [0.03566529492455195, -9.448706592554524e-17], 'false': [-9.448706592554524e-17, nan]}
{'': [0.012497997115846211, -4.949601100496054e-17], 'false': [nan, -4.949601100496054e-17]}
{'': [0.06701308152668847, 0.06813343761774827], 'false': [0.06813343761774827, nan], 'false,true': [0.062222222222222075, 9.100188726435709e-18], 'true': [0.029384756657483985, -6.983660961351791e-17]}
{'': [0.04626320047462889, 7.318324057454215e-17], 'true': [0.04626320047462889, nan], 'false': [nan, 7.318324057454215e-17], 'false,false': [4.499582302445568e-17, -1.3877787807814457e-17], 'false,false,true': [nan, 4.499582302445568e-17]}
{'': [0.034360016526468924, 3.653898562057477e-17], 'false': [nan, 3.653898562057477e-17], 'false,false': [nan, 3.653898562057477e-17]}
{'': [0.035677426726698803, 2.7078610356711136e-18], 'false': [nan, 2.7078610356711136e-18], 'false,false': [nan, 2.7078610356711136e-18], 'false,false,false': [2.7078610356711136e-18, nan]}
{'': [0.024360026622053936, 3.623644594262664e-17], 'true': [0.024360026622053936, nan], 'false': [6.766166072822842e-17, -1.1102230246251566e-17], 'false,false': [nan, -1.1102230246251566e-17]}
{'': [0.03567406907953702, -7.51431437398734e-17], 'false': [nan, -7.51431437398734e-17], 'false,false': [-2.7254572445671712e-17, 1.1972993402820316e-17], 'false,false,true': [nan, -2.7254572445671712e-17]}
{'': [0.024361987268773467, 4.8048996475580546e-17], 'false': [nan, 4.8048996475580546e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 62.789
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.14185106490048768;  // std dev = 1.69e-07, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.7221983235591617;  // std dev = 0.061, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( follows(F, D), follows(F, A) )
%   | | | then return 0.3861400788776214;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7194734122109544;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.6480448407823832;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.052806745544287846;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.5944734122109546;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.6967461394836822;  // std dev = 0.989, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   else return -0.12544463852839208;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.5619944707728993;  // std dev = 0.116, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else return 0.2773282573379574;  // std dev = 1.111, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.5648487246494676;  // std dev = 0.118, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.11231637819360668;  // std dev = 0.000, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.39767458580598375;  // std dev = 1.416, 76.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=74 */
%   | | | else return 0.17446059438231765;  // std dev = 1.140, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.4270783133144819;  // std dev = 0.084, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then return 0.42088782784743767;  // std dev = 0.080, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.4168318006129093;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.295738187210132;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.10159632948783617;  // std dev = 1.83e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then return 0.33623637862906547;  // std dev = 0.332, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.3480381973688101;  // std dev = 0.047, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.006090506555478085;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3255562807811392;  // std dev = 0.103, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926051;  // std dev = 1.07e-07, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else return -0.092691276189261;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.25970088696529925;  // std dev = 0.100, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | | else return 0.28990323643246757;  // std dev = 0.089, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.37807534400571186;  // std dev = 0.175, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.23318655790589468;  // std dev = 0.988, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.27273589875135584;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.22931813928930175;  // std dev = 0.988, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.26177479832079364;  // std dev = 0.059, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(J, A) )
%   | then return -0.08518475138839678;  // std dev = 5.51e-09, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), follows(G, D) )
%   | | then if ( follows(F, H) )
%   | | | then return 0.17898413193209828;  // std dev = 1.721, 75.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=72 */
%   | | | else return -0.12405863615853023;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(D, I), follows(I, A) )
%   | | | then return 0.21537135056313728;  // std dev = 0.059, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.23446254328597413;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then if ( follows(J, A) )
%   | | | then return 0.22209728596326125;  // std dev = 0.039, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.23425436237283903;  // std dev = 0.078, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.21135241200136246;  // std dev = 0.020, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.22136292189020756;  // std dev = 0.037, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.07877675473109143;  // std dev = 4.21e-08, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.16871890319524782;  // std dev = 0.963, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | | else return -0.0730045487128929;  // std dev = 0.676, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.2150799736359641;  // std dev = 0.095, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1920853560506059;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2679717574500014;  // std dev = 0.152, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.18577890526970972;  // std dev = 0.086, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.1950126505641395;  // std dev = 0.069, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.18037958368114596;  // std dev = 0.043, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.07324622576333699;  // std dev = 5.43e-09, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), tweets(D, G) )
%   | | | then return 0.16183655113109677;  // std dev = 0.124, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.15419441842301473;  // std dev = 0.048, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.15773847278076217;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), follows(A, I) )
%   | | then if ( tweets(A, J), follows(A, H) )
%   | | | then return 0.16858274186244984;  // std dev = 0.076, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.22954647020133634;  // std dev = 0.122, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.16629907306476602;  // std dev = 0.061, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1557088873542172;  // std dev = 0.036, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else if ( follows(A, L) )
%   | then return -0.06842697784420267;  // std dev = 2.98e-08, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | else return -0.06842697784420262;  // std dev = 2.95e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.141098745466847;  // std dev = 0.111, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.13530646941889918;  // std dev = 0.043, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.15752756639872967;  // std dev = 0.072, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.0733778075307411;  // std dev = 0.976, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.43133465593879167;  // std dev = 1.105, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.03908771975403746;  // std dev = 1.356, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.13649750310854125;  // std dev = 0.032, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else if ( follows(K, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.930', 'seconds']
Refined model CLL: -0.084877


******************************************
Best model found
******************************************
Results 

CLL : -0.090961 

AUC ROC : 0.994586 

AUC PR : 0.430294 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 62.789 

Total Inference Time : 21.724026679992676 

Total revision time: 128.70495470428466
Best scored revision CLL: -0.084877


Results 

CLL : -0.090961 

AUC ROC : 0.994586 

AUC PR : 0.430294 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 134.38207443618774 

Total Inference Time : 21.724026679992676 

