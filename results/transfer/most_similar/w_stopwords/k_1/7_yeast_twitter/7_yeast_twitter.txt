Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.222
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.7998965079150452;  // std dev = 2.377, 103.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=97 */
%   | | else return 0.7936328060672536;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | else return -0.14185106490048802;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1899678542370388;  // std dev = 7.667, 340.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.15487441122370404;  // std dev = 7.316, 326.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=118 */
%   | | | else return 0.14434608018576123;  // std dev = 1.919, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6178880393954184;  // std dev = 2.190, 123.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=118 */
%   | else return -0.16840009169017622;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07825155729872675;  // std dev = 1.963, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06930680870260908;  // std dev = 5.123, 266.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=89 */
%   | | else return 0.05918854308211691;  // std dev = 0.325, 119.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4568708244506374;  // std dev = 2.391, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15705484448072732;  // std dev = 0.139, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.040703787052329916;  // std dev = 4.333, 283.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.019071905422566083;  // std dev = 2.342, 98.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.020866689152723442;  // std dev = 4.715, 368.000 (wgt'ed) examples reached here.  /* #neg=250 #pos=118 */
%   | | | else return 0.06579485379325647;  // std dev = 1.548, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3512525978948522;  // std dev = 1.406, 120.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=118 */
%   | | | else return -0.14192532121019055;  // std dev = 0.026, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0761056010903652;  // std dev = 1.492, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.010800007614156738;  // std dev = 4.233, 368.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.538', 'seconds']
Parameter learned model CLL:-0.158436 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.377, 6, 97], 'false,true,false': [1.368, 2, 29], 'false,false': [0.0, 274, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.667, 214, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.316, 208, 118], 'false,false,false,false': [1.919, 15, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.19, 5, 118], 'true,false': [0.0, 225, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.963, 19, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.123, 177, 89], 'false,false,false': [0.325, 82, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.391, 6, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.139, 266, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.333, 186, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.342, 69, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.715, 250, 118], 'false,false,false,false': [1.548, 15, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.406, 2, 118], 'false,false,true,false': [0.026, 238, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.492, 13, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.233, 242, 126]}]
{'': [nan, 0.2134515570934281], 'false': [0.05613722432613483, -4.2139852029567983e-17], 'false,true': [0.05485908191158604, 0.06035379812695236]}
{'': [nan, 0.17287310424953561], 'false': [nan, 0.1728731042495396], 'false,false': [nan, 0.17287310424953561], 'false,false,false': [nan, 0.1728731042495396]}
{'': [nan, 0.16391824166060265], 'false': [nan, 0.1639182416606016], 'false,false': [nan, 0.1639182416606016], 'false,false,false': [0.16418450097738027, 0.16004076452420538]}
{'': [0.15506953350792502, 0.14277170891726887], 'true': [0.03900334119910519, -1.223712489364617e-16], 'false': [nan, 0.14277170891726887], 'false,false': [nan, 0.14277170891726887], 'false,false,false': [nan, 0.14277170891726887]}
{'': [nan, 0.10089457384462383], 'false': [nan, 0.1008945738446235], 'false,false': [0.09867870319335896, 0.10577696168834778], 'false,false,true': [nan, 0.09867870319335896]}
{'': [nan, 0.09795572115164303], 'false': [nan, 0.09795572115164303], 'false,false': [0.04330335559114592, 7.286612100809386e-05], 'false,false,false': [nan, 7.286612100799703e-05]}
{'': [0.06633530447090982, 0.05598425880247886], 'true': [nan, 0.06633530447090982], 'false': [nan, 0.05598425880247886], 'false,false': [nan, 0.05598425880247886], 'false,false,false': [nan, 0.05598425880247886]}
{'': [nan, 0.0630925449128664], 'false': [nan, 0.0630925449128664], 'false,false': [nan, 0.0630925449128664], 'false,false,false': [0.06040795586466914, 0.10414616735181777]}
{'': [nan, 0.0624367736340738], 'false': [nan, 0.06243677363407339], 'false,false': [0.05972408431478595, 0.10605628410765433], 'false,false,false': [nan, 0.10605628410765433], 'false,false,true': [0.016474678559722525, 2.7554651995067775e-06]}
{'': [nan, 0.0486989367816043], 'false': [nan, 0.04869893678160464], 'false,false': [nan, 0.0486989367816043]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 18.858
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.1418510649004884;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.7194734122109546;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return 0.6569734122109542;  // std dev = 0.242, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(G, A), tweets(A, H) )
%   | | | then return 0.23780360505247797;  // std dev = 0.965, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.5528067455442878;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6753036050524779;  // std dev = 0.919, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.12544463852839155;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.08578487415644521;  // std dev = 2.070, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.13677130825278513;  // std dev = 2.105, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then return 0.5315569129367602;  // std dev = 0.152, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0.5553664367462844;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.5707416375986883;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.09921390318753756;  // std dev = 0.100, 177.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.5321466568928398;  // std dev = 0.896, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.11231637819360614;  // std dev = 3.33e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.3960526174841312;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.11283787289528575;  // std dev = 1.986, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.08575540466568754;  // std dev = 2.129, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.38765088216935206;  // std dev = 1.713, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | | | else return 0.46320058600161546;  // std dev = 0.406, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4982479326392585;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6749255959088805;  // std dev = 0.011, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.11215168946246204;  // std dev = 0.305, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3179056210951057;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.10279850981534477;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(D, A), recursion_accounttype(C, B) )
%   | | then return 0.3351075642317902;  // std dev = 0.052, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( recursion_accounttype(C, B), follows(A, D) )
%   | | | then return 0.16497152356983327;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3119203465847558;  // std dev = 1.356, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | else return -0.09001247664581151;  // std dev = 0.038, 204.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.46895120286766867;  // std dev = 0.069, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.13622948338630994;  // std dev = 0.006, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5170690450372043;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.13524245908685972;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.04099322070854921;  // std dev = 0.284, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.23620602423282164;  // std dev = 1.237, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | | else return 0.35958021531594675;  // std dev = 0.316, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.06437906642941611;  // std dev = 1.795, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | | else return 0.2162208643029734;  // std dev = 0.600, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.2714453881228637;  // std dev = 0.052, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.37212333713009427;  // std dev = 0.208, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3764216842614221;  // std dev = 0.744, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.09303048978929732;  // std dev = 0.258, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2328018499606128;  // std dev = 0.248, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.21606753093044026;  // std dev = 0.063, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.2589601923640189;  // std dev = 0.290, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.07823822030792421;  // std dev = 0.009, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.014598707417997488;  // std dev = 1.003, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.02661070337429592;  // std dev = 1.229, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, C), recursion_accounttype(E, B) )
%   | | then return 0.18614203661374187;  // std dev = 0.060, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( follows(E, C), follows(A, C) )
%   | | | then return 0.01673979682541594;  // std dev = 1.290, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.18135023144265403;  // std dev = 0.065, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.1930442356957583;  // std dev = 0.063, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.22414374520068894;  // std dev = 0.047, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.213650079783841;  // std dev = 0.260, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.07285997216250023;  // std dev = 0.008, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.012703421896351371;  // std dev = 1.218, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.02269419322078286;  // std dev = 1.221, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.14500418520491998;  // std dev = 1.285, 78.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=76 */
%   | | | else return -0.5056888134053489;  // std dev = 0.866, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.12695003797382146;  // std dev = 1.027, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.333539709538869;  // std dev = 0.168, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.07505182210213532;  // std dev = 0.289, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.16608887063245434;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.06891676049107096;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.14425228542748922;  // std dev = 0.103, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.033030826006397423;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.06376414892367456;  // std dev = 0.003, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.153654600282147;  // std dev = 0.143, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.06287583991000795;  // std dev = 0.003, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.16716513621207957;  // std dev = 0.147, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.03025913132024873;  // std dev = 0.876, 38.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=8 */
%   | | | else return 0.043208793722622145;  // std dev = 0.940, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.664', 'seconds']
Refined model CLL: -0.097872


******************************************
Best model found
******************************************
Results 

CLL : -0.099226 

AUC ROC : 0.994732 

AUC PR : 0.363241 

Precision : 0.336343 

Recall : 0.955128 

F1 : 0.497496 

Total Learning Time : 18.858 

Total Inference Time : 13.847523212432861 

Total revision time: 38.59453638076782
Best scored revision CLL: -0.097872


Results 

CLL : -0.099226 

AUC ROC : 0.994732 

AUC PR : 0.363241 

Precision : 0.336343 

Recall : 0.955128 

F1 : 0.497496 

Total Learning Time : 40.237153129577635 

Total Inference Time : 13.847523212432861 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.366
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8410549180054936;  // std dev = 1.402, 117.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=115 */
%   | | else return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.1418510649004878;  // std dev = 6.97e-09, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1597157822510757;  // std dev = 8.634, 462.000 (wgt'ed) examples reached here.  /* #neg=306 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13318116858317816;  // std dev = 7.702, 384.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=128 */
%   | | | else return 0.15438608797976536;  // std dev = 3.550, 77.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6221279909362536;  // std dev = 2.192, 133.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=128 */
%   | else return -0.16125035415426886;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08500164919767385;  // std dev = 3.613, 92.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07569239872890178;  // std dev = 5.326, 285.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=97 */
%   | | else return 0.058638331670092435;  // std dev = 0.339, 195.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5023019824697232;  // std dev = 1.566, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15558065746385333;  // std dev = 0.228, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03640256523179865;  // std dev = 4.654, 351.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.029147132437846595;  // std dev = 2.886, 132.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.03335544017252971;  // std dev = 4.582, 376.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=128 */
%   | | | else return 0.037948552192852064;  // std dev = 2.915, 88.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.28817160465068337;  // std dev = 2.900, 137.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=128 */
%   | | | else return -0.1387332780949617;  // std dev = 0.020, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05887680823544697;  // std dev = 2.775, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.008962356855421388;  // std dev = 5.039, 477.000 (wgt'ed) examples reached here.  /* #neg=321 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.909', 'seconds']
Parameter learned model CLL:-0.158845 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.402, 2, 115], 'false,true,false': [2.46e-07, 0, 41], 'false,false': [6.97e-09, 306, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.634, 306, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.702, 256, 128], 'false,false,false,false': [3.55, 49, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.192, 5, 128], 'true,false': [0.0, 272, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.613, 64, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.326, 188, 97], 'false,false,false': [0.339, 136, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.566, 2, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.228, 286, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.654, 236, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.886, 91, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.582, 248, 128], 'false,false,false,false': [2.915, 60, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.9, 9, 128], 'false,false,true,false': [0.02, 267, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.775, 51, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.039, 321, 156]}]
{'': [nan, 0.22317181926278545], 'false': [0.012497997115852777, 4.9343245538895844e-17], 'false,true': [0.016801811673609827, 1.4730764034050857e-15]}
{'': [nan, 0.1613364324452656], 'false': [nan, 0.1613364324452705], 'false,false': [nan, 0.1613364324452656], 'false,false,false': [nan, 0.1613364324452705]}
{'': [nan, 0.15609637737060394], 'false': [nan, 0.15609637737060006], 'false,false': [nan, 0.15609637737060006], 'false,false,false': [0.15449575751519407, 0.16370414476738152]}
{'': [0.14720886070966543, 0.14187768428224384], 'true': [0.03611596908392081, -1.730641773680391e-16], 'false': [nan, 0.14187768428224384], 'false,false': [nan, 0.14187768428224384], 'false,false,false': [nan, 0.14187768428224384]}
{'': [nan, 0.10580526501237156], 'false': [nan, 0.1058052650123721], 'false,false': [0.09951276577748103, 0.11482930769893461], 'false,false,true': [nan, 0.09951276577748103]}
{'': [nan, 0.10484761206114385], 'false': [nan, 0.10484761206114385], 'false,false': [0.015514290356513527, 0.0001817677719758474], 'false,false,false': [nan, 0.00018176777197606477]}
{'': [0.06172127841683232, 0.06310850857576598], 'false': [nan, 0.06310850857576598], 'false,false': [nan, 0.06310850857576598], 'false,false,false': [nan, 0.06310850857576598], 'true': [nan, 0.06172127841683232]}
{'': [nan, 0.06357550579647503], 'false': [nan, 0.06357550579647503], 'false,false': [nan, 0.06357550579647503], 'false,false,false': [0.05584579393848728, 0.09658536087850003]}
{'': [nan, 0.06790305408650138], 'false': [nan, 0.0679030540865016], 'false,false': [0.06166056372660489, 0.09749103259156373], 'false,false,false': [nan, 0.09749103259156373], 'false,false,true': [0.061382347624820865, 1.4729858550366722e-06]}
{'': [nan, 0.05323698528495421], 'false': [nan, 0.05323698528495396], 'false,false': [nan, 0.05323698528495421]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 14.144
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6581489350995123;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.8295775065280833;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else if ( follows(A, G) )
%   | | then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.14185106490048754;  // std dev = 2.33e-07, 353.000 (wgt'ed) examples reached here.  /* #neg=353 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7053889051687005;  // std dev = 0.118, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | else return 0.6569734122109542;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then if ( follows(G, A), follows(G, F) )
%   | | | then return 0.4246860012885212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7503101501396745;  // std dev = 0.049, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.4246860012885212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6690114473039496;  // std dev = 0.971, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12544463852839174;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09768636180548973;  // std dev = 3.639, 95.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=25 */
%   | | | else return 0.12710088917562737;  // std dev = 2.794, 51.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.5612971798495293;  // std dev = 0.038, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else return 0.5163981440316124;  // std dev = 0.204, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.5131198000559262;  // std dev = 0.987, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.5817207524431063;  // std dev = 0.095, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.11231637819360678;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.6092083966364795;  // std dev = 0.069, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.21440602968962477;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10179480922632295;  // std dev = 3.550, 88.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=25 */
%   | | | else return 0.1457227499226519;  // std dev = 2.685, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return 0.41716125970938867;  // std dev = 0.896, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | | | else return 0.3433995676408305;  // std dev = 1.358, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.6329995025342523;  // std dev = 0.088, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else return -0.11729279679520273;  // std dev = 0.365, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then return 0.43218142853249214;  // std dev = 0.011, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.10536195707252198;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(I, A) )
%   | | then return -0.07643065394783426;  // std dev = 0.113, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.31356558512246474;  // std dev = 1.082, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.11102544206175603;  // std dev = 1.851, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then return 0.30618383092142887;  // std dev = 0.134, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | else return 0.3402085653498931;  // std dev = 0.117, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.0881519538230988;  // std dev = 0.073, 132.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.28550187315791625;  // std dev = 1.323, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.09151231000743396;  // std dev = 0.006, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.4133664286179302;  // std dev = 1.677, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return -0.13474237294544983;  // std dev = 3.94e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.12084522016259515;  // std dev = 1.422, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.10547729308822625;  // std dev = 1.955, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.2700121565120412;  // std dev = 0.270, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.1237780590340887;  // std dev = 0.320, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(F, A) )
%   | | then return 0.28420284529871753;  // std dev = 0.194, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.43595278307821883;  // std dev = 0.106, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.6131966149282496;  // std dev = 0.120, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.10290485228925829;  // std dev = 0.556, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.15848763137612523;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.2099379356240964;  // std dev = 0.010, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.052027359745075274;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.21739083717112898;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.21698417679598486;  // std dev = 0.088, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.25076886038877694;  // std dev = 0.057, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then return -0.05283042282281033;  // std dev = 0.086, 224.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=17 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.010484910183110804;  // std dev = 1.790, 66.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=19 */
%   | | | else return 0.04857531683455507;  // std dev = 1.948, 60.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.18376074868837108;  // std dev = 0.073, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.12330158101319988;  // std dev = 0.232, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.07151805405909209;  // std dev = 0.064, 142.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.1994604390700201;  // std dev = 1.024, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.07296615713126833;  // std dev = 0.005, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.28508525340563384;  // std dev = 0.360, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.11173105759570584;  // std dev = 0.014, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.04948572547443544;  // std dev = 0.935, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.0073101871294084025;  // std dev = 1.783, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.15999387166752363;  // std dev = 0.235, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | | else return -0.10047863932433027;  // std dev = 0.967, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.24477168414458425;  // std dev = 0.056, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return -0.0807726030607728;  // std dev = 0.338, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.16534767502945413;  // std dev = 0.069, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.08815266382765657;  // std dev = 0.489, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.0478499559077619;  // std dev = 0.290, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.027034931543312112;  // std dev = 0.327, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.007377732536391768;  // std dev = 1.879, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.13876064216672598;  // std dev = 0.074, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(A, E), follows(F, C) )
%   | | then return -0.03892832762249506;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.14300647074987505;  // std dev = 0.063, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.15519922457432825;  // std dev = 0.175, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.06468859488905969;  // std dev = 0.057, 215.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=2 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.13616473059360265;  // std dev = 1.426, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return -0.09436064166726896;  // std dev = 0.013, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.003950560755696753;  // std dev = 1.146, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02600916003511772;  // std dev = 1.526, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.628', 'seconds']
Refined model CLL: -0.101337


******************************************
Best model found
******************************************
Results 

CLL : -0.097368 

AUC ROC : 0.993873 

AUC PR : 0.382683 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 14.144 

Total Inference Time : 11.919481992721558 

Total revision time: 32.942692527770994
Best scored revision CLL: -0.101337


Results 

CLL : -0.097368 

AUC ROC : 0.993873 

AUC PR : 0.382683 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 34.58530927658081 

Total Inference Time : 11.919481992721558 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.06
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8273797043302796;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.70238565614478;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839183;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5289825687883636;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360685;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4108781313581003;  // std dev = 1.710, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4356715197878515;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783617;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3074710442030049;  // std dev = 1.968, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892605;  // std dev = 6.99e-08, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | | else return -0.09269127618926087;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24239749827557383;  // std dev = 1.968, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.51e-09, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18959273624698691;  // std dev = 2.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 6.50e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18825941344118288;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333671;  // std dev = 1.25e-07, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12997458082803878;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.32e-08, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | | else return -0.06842697784420267;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13510866487791126;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202616;  // std dev = 3.95e-09, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.138', 'seconds']
Parameter learned model CLL:-0.092859 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 243, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 239, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 249, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.71, 3, 118], 'true,false': [0.0, 206, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.968, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.99e-08, 223, 0], 'false,false,false': [1.86e-09, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.968, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 217, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.5e-08, 243, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.996, 1, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.25e-07, 237, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.32e-08, 227, 0], 'false,false,false': [0.0, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [3.95e-09, 262, 0]}]
{'': [0.02982248520710475, -1.5716737467944603e-16], 'false': [-1.5716737467944603e-16, nan]}
{'': [0.022714981070850883, -5.760152931109599e-17], 'false': [-5.760152931109599e-17, nan]}
{'': [0.03671114736903509, -9.095803093314535e-17], 'false': [nan, -9.095803093314535e-17]}
{'': [0.07016800761281117, 0.0576627022988992], 'true': [0.024178676319923213, -9.054246026069237e-17], 'false': [0.0576627022988992, nan], 'false,true': [-5.551115123125783e-17, -7.93016446160826e-18]}
{'': [0.0298033095703256, 3.172065784643304e-17], 'true': [0.0298033095703256, nan], 'false': [nan, 3.172065784643304e-17], 'false,false': [2.1905745777357347e-17, 1.8503717077085942e-18], 'false,false,true': [nan, 2.1905745777357347e-17]}
{'': [0.02980532117686274, 3.0697410819128755e-17], 'false': [nan, 3.0697410819128755e-17], 'false,false': [nan, 3.0697410819128755e-17]}
{'': [0.03669201661262578, 1.7361512319241132e-17], 'false': [nan, 1.7361512319241132e-17], 'false,false': [nan, 1.7361512319241132e-17], 'false,false,false': [1.7361512319241132e-17, nan]}
{'': [0.007809053464944699, 5.57323111963226e-17], 'true': [0.007809053464944699, nan], 'false': [6.558279470359575e-17, 9.912705577010326e-19], 'false,false': [nan, 9.912705577010326e-19]}
{'': [0.03669577742169279, -5.3720468933475315e-18], 'false': [nan, -5.3720468933475315e-18], 'false,false': [1.760706118348266e-17, -1.982541115402065e-18], 'false,false,true': [nan, 1.760706118348266e-17]}
{'': [0.01537528864463291, 1.52549728574449e-17], 'false': [nan, 1.52549728574449e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 39.95
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | then if ( follows(E, D), tweets(A, F) )
%   | | | then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.724815601766179;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.8581489350995121;  // std dev = 1.19e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(G, A) )
%   | | then return 0.7581489350995123;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.1418510649004885;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | | then return 0.7242828141475455;  // std dev = 0.062, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.5751931428689531;  // std dev = 1.841, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.7217112563773684;  // std dev = 0.043, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.636140078877621;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.745749686873078;  // std dev = 0.032, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.12544463852839188;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.572488345286227;  // std dev = 0.160, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.2573178350706595;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5618110169185243;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(G, A), follows(H, A) )
%   | | | then return 0.3048137674410021;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.53246804208892;  // std dev = 0.974, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else return 0.5894627538078929;  // std dev = 0.021, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1123163781936068;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(A, F) )
%   | | | then return 0.3926368780730777;  // std dev = 1.648, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | | | else return 0.15098568548379532;  // std dev = 1.470, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else return 0.4376027852239495;  // std dev = 0.107, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4313397808378139;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.2866323275526783;  // std dev = 1.354, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.35020576545315635;  // std dev = 0.060, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.36248696293698196;  // std dev = 0.158, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.329863408689575;  // std dev = 0.042, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.13493346335993717;  // std dev = 1.542, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.2893566649072533;  // std dev = 0.979, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   else if ( follows(A, J) )
%   | then return -0.09269127618926043;  // std dev = 1.37e-07, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return -0.09269127618926086;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.2403656314768854;  // std dev = 1.312, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | | else return -0.09363485408857179;  // std dev = 1.064, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.26243757106488647;  // std dev = 0.029, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2944712722387382;  // std dev = 0.091, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.16883615578902086;  // std dev = 1.329, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return -0.06086954506088856;  // std dev = 1.175, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.27061144744509247;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.28079335607631656;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839678;  // std dev = 5.89e-09, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), tweets(A, F) )
%   | | | then return 0.22514914296361585;  // std dev = 0.093, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.26175927208309213;  // std dev = 0.126, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.24184822489656027;  // std dev = 0.073, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.08459293624914;  // std dev = 0.890, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, H) )
%   | | | then return -0.25123558143927394;  // std dev = 0.947, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.28867116978143137;  // std dev = 0.091, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.0686165304058244;  // std dev = 1.307, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.22461085264323644;  // std dev = 0.013, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.07877675473109143;  // std dev = 6.32e-08, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.1733191348895988;  // std dev = 0.981, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.12231924738130809;  // std dev = 0.892, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.2230448990642105;  // std dev = 0.140, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.19841226773279386;  // std dev = 0.115, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return 0.09172786410749023;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, A) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.07324622576333667;  // std dev = 1.13e-07, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | | | else return -0.07324622576333698;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.07324622576333703;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return -0.07324622576333698;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, F) )
%   | | then if ( follows(A, G), follows(D, G) )
%   | | | then return 0.16453373372199429;  // std dev = 0.101, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.17479045010652827;  // std dev = 0.029, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(D, H), follows(H, A) )
%   | | | then return 0.17820202696700774;  // std dev = 0.032, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.20489776215591882;  // std dev = 0.078, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, I), follows(J, A) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.17618689943648716;  // std dev = 0.051, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.45994057893173074;  // std dev = 0.833, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.17875049562468132;  // std dev = 0.107, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06046506866481788;  // std dev = 0.948, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.06842697784420282;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, F) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.11776627503836266;  // std dev = 0.993, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.16150432216438296;  // std dev = 0.178, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( tweets(A, G), tweets(D, G) )
%   | | | then return 0.17540154131395227;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.21568048387731514;  // std dev = 1.105, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return 0.15021771140513354;  // std dev = 0.049, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.13990612360021787;  // std dev = 0.014, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.1629881832129765;  // std dev = 0.039, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.1507248161130147;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06419184008202625;  // std dev = 1.49e-08, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.864', 'seconds']
Refined model CLL: -0.090698


******************************************
Best model found
******************************************
Results 

CLL : -0.08498 

AUC ROC : 0.996358 

AUC PR : 0.481537 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 39.95 

Total Inference Time : 7.566368818283081 

Total revision time: 62.92725826263428
Best scored revision CLL: -0.090698


Results 

CLL : -0.08498 

AUC ROC : 0.996358 

AUC PR : 0.481537 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 62.95845604896546 

Total Inference Time : 7.566368818283081 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.006
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8454907072514085;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 1.74e-07, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7031532038587668;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839213;  // std dev = 0.000, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5314543517676594;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360671;  // std dev = 0.000, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4226777477872902;  // std dev = 0.996, 129.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3959469271510979;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.10159632948783616;  // std dev = 2.95e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.31341387920710273;  // std dev = 1.714, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 1.28e-07, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2603368762983757;  // std dev = 0.998, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.96e-09, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2062978240747587;  // std dev = 1.407, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 3.65e-08, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1730631955008239;  // std dev = 1.406, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333663;  // std dev = 1.30e-07, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11801602333586635;  // std dev = 0.203, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420294;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | | else return -0.06842697784420264;  // std dev = 3.23e-09, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12064317829774654;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202587;  // std dev = 7.57e-09, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.383', 'seconds']
Parameter learned model CLL:-0.087489 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.405, 2, 156], 'false,true': [1.74e-07, 325, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 321, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 318, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.996, 1, 128], 'true,false': [0.0, 261, 0], 'false,true,true': [0.182, 1, 28], 'false,true,false': [2.95e-09, 61, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.714, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.28e-07, 253, 0], 'false,false,false': [0.0, 49, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.998, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 300, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.407, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.65e-08, 301, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.406, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.3e-07, 222, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 52, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.203, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 287, 0], 'false,false,false': [3.23e-09, 50, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.57e-09, 320, 0]}]
{'': [0.012497997115852777, 9.29171269840131e-17], 'false': [9.29171269840131e-17, nan]}
{'': [0.018511925952293836, -1.134433495567138e-16], 'false': [-1.134433495567138e-16, nan]}
{'': [0.030091431657730715, -4.1895208476421005e-17], 'false': [nan, -4.1895208476421005e-17]}
{'': [0.06338822790726738, 0.06479151230536821], 'false': [0.06479151230536821, nan], 'false,true': [0.03329369797859676, 9.100188726435709e-18], 'true': [0.007691845441981269, -6.295517534272918e-17]}
{'': [0.01848332401853749, 9.705260877517925e-17], 'true': [0.01848332401853749, nan], 'false': [nan, 9.705260877517925e-17], 'false,false': [6.49458528239222e-17, -2.0391851472706958e-17], 'false,false,true': [nan, 6.49458528239222e-17]}
{'': [0.006344818625562015, 3.552713678800501e-17], 'false': [nan, 3.552713678800501e-17], 'false,false': [nan, 3.552713678800501e-17]}
{'': [0.012521681941477148, 4.426138304153448e-18], 'false': [nan, 4.426138304153448e-18], 'false,false': [nan, 4.426138304153448e-18], 'false,false,false': [4.426138304153448e-18, nan]}
{'': [0.01251864022814588, 4.3760615569166756e-17], 'true': [0.01251864022814588, nan], 'false': [7.601527015451522e-17, -1.2810265668751807e-17], 'false,false': [nan, -1.2810265668751807e-17]}
{'': [0.041113392450741776, -7.90663281632159e-17], 'false': [nan, -7.90663281632159e-17], 'false,false': [-3.7136379917775274e-17, 1.2212453270876722e-17], 'false,false,true': [nan, -3.7136379917775274e-17]}
{'': [0.024405899692437172, 5.689893001203927e-17], 'false': [nan, 5.689893001203927e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 43.222
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.8581489350995115;  // std dev = 3.58e-07, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.7581489350995123;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004879;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.719473412210954;  // std dev = 2.06e-07, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | | else return 0.6693542728787005;  // std dev = 0.964, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.7249381014834166;  // std dev = 0.071, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.12544463852839194;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.5243455878863407;  // std dev = 1.382, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.564789157787179;  // std dev = 0.106, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4118343810526461;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.529531553922789;  // std dev = 0.990, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else return 0.5644778560474742;  // std dev = 0.095, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.11231637819360668;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3601911436875526;  // std dev = 2.147, 72.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=67 */
%   | | | else return 0.4241413397442258;  // std dev = 0.004, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.4269469308498891;  // std dev = 0.133, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4358287477955659;  // std dev = 0.086, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10159632948783615;  // std dev = 3.16e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(D, E) )
%   | | | then return 0.32786334374060805;  // std dev = 1.025, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   | | | else return -0.3223349990333273;  // std dev = 0.838, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.1380380229363754;  // std dev = 1.061, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.2830778098546045;  // std dev = 0.988, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.057565170988087465;  // std dev = 1.087, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.1392008260672855;  // std dev = 1.277, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.2974270499445027;  // std dev = 0.995, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   else if ( follows(A, J) )
%   | then return -0.09269127618926051;  // std dev = 1.02e-07, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.2687870101180843;  // std dev = 0.047, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.2829539452761615;  // std dev = 0.134, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.3650104644369351;  // std dev = 0.131, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.288038239596987;  // std dev = 0.168, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.31841418186662285;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.03636812904634512;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.2655169225772816;  // std dev = 0.032, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.2547172933381697;  // std dev = 0.006, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.21924724804214837;  // std dev = 0.075, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | | else return 0.2309198537808805;  // std dev = 0.166, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return 0.31053558564129286;  // std dev = 0.066, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.11074665625677664;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.03960497176949159;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.21179747641271068;  // std dev = 0.011, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.13198151782986803;  // std dev = 0.965, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.07877675473109143;  // std dev = 3.33e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.1846861016491759;  // std dev = 0.023, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.2066649198337291;  // std dev = 0.122, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, D), tweets(A, G) )
%   | | | then return 0.08212290968095899;  // std dev = 0.834, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.19523494320109938;  // std dev = 0.127, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.15539881331458852;  // std dev = 0.992, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.25409035920792233;  // std dev = 0.984, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1860673368134598;  // std dev = 0.084, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.09982407222922182;  // std dev = 1.353, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   else return -0.07324622576333696;  // std dev = 5.74e-09, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.16048707915788557;  // std dev = 0.066, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 0.17731356086954372;  // std dev = 0.191, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, G) )
%   | | | then return -0.024640363499002838;  // std dev = 1.197, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.16563305655290672;  // std dev = 0.155, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.1573017719000732;  // std dev = 0.008, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.4087650489122633;  // std dev = 1.086, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.1745882142558456;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420278;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return -0.06842697784420262;  // std dev = 2.47e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return 0.11500288899046512;  // std dev = 0.891, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.14495544817992573;  // std dev = 0.101, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.007659681418229203;  // std dev = 0.924, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.1347918132220254;  // std dev = 0.006, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.21383643913935646;  // std dev = 0.123, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.14412886129908256;  // std dev = 0.171, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.09444273686202838;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.14435327034354123;  // std dev = 0.082, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06419184008202587;  // std dev = 7.57e-09, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.987', 'seconds']
Refined model CLL: -0.084065


******************************************
Best model found
******************************************
Results 

CLL : -0.090967 

AUC ROC : 0.995164 

AUC PR : 0.458675 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 43.222 

Total Inference Time : 9.263559341430664 

Total revision time: 73.86270840454102
Best scored revision CLL: -0.084065


Results 

CLL : -0.090967 

AUC ROC : 0.995164 

AUC PR : 0.458675 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 73.8939061908722 

Total Inference Time : 9.263559341430664 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.998
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8581489350995115;  // std dev = 3.58e-07, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14211046184339077;  // std dev = 7.861, 395.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13117001550134558;  // std dev = 7.426, 357.000 (wgt'ed) examples reached here.  /* #neg=239 #pos=118 */
%   | | | else return 0.09577496592571867;  // std dev = 1.988, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.5976909524991367;  // std dev = 2.737, 126.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=118 */
%   | else return -0.1586148496921346;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1752577434163462;  // std dev = 1.803, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08007026761364175;  // std dev = 5.094, 264.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=89 */
%   | | else return 0.07687647653769944;  // std dev = 0.331, 112.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4971522197185625;  // std dev = 1.050, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1520751063595496;  // std dev = 0.185, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03199041114263232;  // std dev = 4.273, 300.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.031794221718424394;  // std dev = 2.283, 89.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.03329446711711871;  // std dev = 4.570, 346.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=118 */
%   | | | else return 0.10284616170958548;  // std dev = 1.405, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3282731987484801;  // std dev = 1.967, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | | | else return -0.13769256844692393;  // std dev = 0.002, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0031874187184973528;  // std dev = 1.524, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.014442049882060357;  // std dev = 4.282, 354.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.467', 'seconds']
Parameter learned model CLL:-0.155189 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [3.58e-07, 0, 97], 'false,true,false': [1.79e-07, 0, 29], 'false,false': [0.0, 254, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.861, 269, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.426, 239, 118], 'false,false,false,false': [1.988, 20, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.737, 8, 118], 'true,false': [0.0, 239, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.803, 12, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.094, 175, 89], 'false,false,false': [0.331, 75, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.05, 1, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.185, 242, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.273, 203, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.283, 60, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.57, 228, 118], 'false,false,false,false': [1.405, 11, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.967, 4, 118], 'false,false,true,false': [0.002, 238, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.524, 19, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.282, 228, 126]}]
{'': [nan, 0.2216343490304736], 'false': [4.173028765575192e-15, -1.1189649382048822e-16], 'false,true': [1.3185329117197736e-15, 1.1025663141105003e-15]}
{'': [nan, 0.1564394647854072], 'false': [nan, 0.15643946478541174], 'false,false': [nan, 0.1564394647854072], 'false,false,false': [nan, 0.15643946478541174]}
{'': [nan, 0.15357334750708448], 'false': [nan, 0.1535733475070836], 'false,false': [nan, 0.1535733475070836], 'false,false,false': [0.15445246926720294, 0.14120284895179266]}
{'': [0.14981996616717191, 0.162564671256313], 'false': [nan, 0.162564671256313], 'false,false': [nan, 0.162564671256313], 'false,false,false': [nan, 0.162564671256313], 'true': [0.059460821365585316, -3.084468988916753e-16]}
{'': [nan, 0.10161584769942794], 'false': [nan, 0.1016158476994303], 'false,false': [0.09829181518524843, 0.10944390528336204], 'false,false,true': [nan, 0.09829181518524843]}
{'': [nan, 0.09822088844394582], 'false': [nan, 0.09822088844394582], 'false,false': [0.00868351290577302, 0.00014174052674133413], 'false,false,false': [nan, 0.0001417405267414259]}
{'': [0.06085938456844011, 0.058573719757945224], 'true': [nan, 0.06085938456844011], 'false': [nan, 0.058573719757945224], 'false,false': [nan, 0.058573719757945224], 'false,false,false': [nan, 0.058573719757945224]}
{'': [nan, 0.06286621549981425], 'false': [nan, 0.06286621549981425], 'false,false': [nan, 0.06286621549981425], 'false,false,false': [0.06036520554692287, 0.10382529669489456]}
{'': [nan, 0.06126205383887008], 'false': [nan, 0.061262053838869915], 'false,false': [0.059387773854420414, 0.08598264666186729], 'false,false,false': [nan, 0.08598264666186729], 'false,false,true': [0.03169940807588489, 2.604615829085094e-08]}
{'': [nan, 0.05180135663122195], 'false': [nan, 0.05180135663122165], 'false,false': [nan, 0.05180135663122195]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 19.823
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(E, F) )
%   | | | then return 0.7993254056877476;  // std dev = 1.680, 51.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=48 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.858148935099512;  // std dev = 1.46e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.1418510649004882;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.6902508918350766;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | else return 0.5567126718894452;  // std dev = 0.917, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.7287136929824375;  // std dev = 0.058, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.10516660531064682;  // std dev = 0.129, 125.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=3 */
%   | | else if ( follows(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109543;  // std dev = 4.21e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.1162468238420086;  // std dev = 0.855, 75.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1049875571277941;  // std dev = 2.162, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | | else return 0.16843990085920738;  // std dev = 1.930, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5724290838192929;  // std dev = 0.114, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.7402017989025015;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5647144589891562;  // std dev = 0.182, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.11402299831603618;  // std dev = 0.007, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.6040520610480189;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.07138405906642738;  // std dev = 2.170, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return 0.1433603141563179;  // std dev = 1.894, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3683016890796018;  // std dev = 2.178, 78.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=73 */
%   | | | else return 0.44140587232397066;  // std dev = 0.257, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.45470590928508814;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6119660392429722;  // std dev = 0.989, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return -0.1111178500179781;  // std dev = 0.302, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4204737492420941;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1033040121418529;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.33906021843559414;  // std dev = 0.101, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.2861337706081858;  // std dev = 0.235, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.3113617797450755;  // std dev = 0.898, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.14684714757527212;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.09321005031767324;  // std dev = 0.007, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return -0.3206014354270628;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.0960652312396039;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.001501702276968419;  // std dev = 1.673, 39.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=8 */
%   | | | else return 0.04351539118345912;  // std dev = 1.686, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.23007681208202138;  // std dev = 1.716, 71.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=68 */
%   | | | else return -0.0496640878314899;  // std dev = 1.160, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.2713958270415353;  // std dev = 0.090, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.30984568079842306;  // std dev = 0.161, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.35700713530511924;  // std dev = 0.079, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5260089022219473;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2869091079555227;  // std dev = 1.076, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.46547863091798886;  // std dev = 0.154, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.09342327626916773;  // std dev = 0.309, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(E, C), follows(C, E) )
%   | | then return 0.2211994712868219;  // std dev = 0.099, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else return -0.1940162499454123;  // std dev = 1.017, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.07868936967660783;  // std dev = 0.005, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.2147157942243585;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.0202661025539981;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.25176912579609556;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then return -0.02966164199131546;  // std dev = 0.109, 30.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.005624392153824466;  // std dev = 1.304, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0.03357759922894258;  // std dev = 1.378, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.18003731549359586;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.1904962039353519;  // std dev = 0.042, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return -0.13456895708733693;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2230172075444074;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then return -0.057250808796055236;  // std dev = 0.127, 233.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=23 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.28790100666529694;  // std dev = 1.152, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.12390762410228122;  // std dev = 0.011, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.009958324263594219;  // std dev = 0.769, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return -0.056350137554129966;  // std dev = 1.301, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.14734821105265836;  // std dev = 1.658, 84.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=81 */
%   | | | else return 0.24385114749401385;  // std dev = 0.395, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.3307563774422234;  // std dev = 0.211, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.35402689823735173;  // std dev = 0.170, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then return -0.06991179705181133;  // std dev = 0.018, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else return -0.12197524535057926;  // std dev = 0.077, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.1529463953764718;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.06998510387572085;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.14815154440755393;  // std dev = 0.057, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.0014465354481610164;  // std dev = 0.861, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(C, F), follows(F, A) )
%   | | | then return 0.030289438525873773;  // std dev = 0.949, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.1764104996446758;  // std dev = 0.051, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.18605906126139102;  // std dev = 0.066, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.13742925655569244;  // std dev = 0.012, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then return -0.04730380717728607;  // std dev = 0.067, 210.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.006557250375072755;  // std dev = 1.014, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | | else return 0.02659276568340739;  // std dev = 0.998, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '39.291', 'seconds']
Refined model CLL: -0.099854


******************************************
Best model found
******************************************
Results 

CLL : -0.101895 

AUC ROC : 0.99457 

AUC PR : 0.367415 

Precision : 0.340376 

Recall : 0.929487 

F1 : 0.498282 

Total Learning Time : 19.823 

Total Inference Time : 31.50230598449707 

Total revision time: 56.88724031066894
Best scored revision CLL: -0.099854


Results 

CLL : -0.101895 

AUC ROC : 0.99457 

AUC PR : 0.367415 

Precision : 0.340376 

Recall : 0.929487 

F1 : 0.498282 

Total Learning Time : 56.91268577194214 

Total Inference Time : 31.50230598449707 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.285
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8410549180054936;  // std dev = 1.402, 117.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=115 */
%   | | else return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else return -0.1418510649004879;  // std dev = 1.86e-09, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17039290410315913;  // std dev = 8.568, 446.000 (wgt'ed) examples reached here.  /* #neg=290 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12001926174114891;  // std dev = 7.796, 400.000 (wgt'ed) examples reached here.  /* #neg=272 #pos=128 */
%   | | | else return 0.12403392991002392;  // std dev = 3.638, 86.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6239421663471826;  // std dev = 2.194, 133.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=128 */
%   | else return -0.16091457307707982;  // std dev = 3.28e-07, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09237901597662798;  // std dev = 3.628, 90.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.061726385081872316;  // std dev = 5.347, 311.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=97 */
%   | | else return 0.07175959749959106;  // std dev = 0.345, 186.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4874389658250158;  // std dev = 2.282, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15505046894783195;  // std dev = 0.252, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.040526748588431936;  // std dev = 4.825, 338.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.055393003086930626;  // std dev = 2.880, 114.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.03170378875967725;  // std dev = 4.736, 376.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=128 */
%   | | | else return 0.07149191286431959;  // std dev = 2.792, 77.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3139255944808272;  // std dev = 2.392, 134.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=128 */
%   | | | else return -0.13851713436259272;  // std dev = 0.020, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04670146848098636;  // std dev = 2.799, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.009250521868553454;  // std dev = 4.929, 482.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.975', 'seconds']
Parameter learned model CLL:-0.159956 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.402, 2, 115], 'false,true,false': [0.988, 1, 41], 'false,false': [1.86e-09, 289, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.568, 290, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.796, 272, 128], 'false,false,false,false': [3.638, 58, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.194, 5, 128], 'true,false': [3.28e-07, 252, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.628, 62, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.347, 214, 97], 'false,false,false': [0.345, 127, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.282, 5, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.252, 314, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.825, 223, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.88, 73, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.736, 248, 128], 'false,false,false,false': [2.792, 49, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.392, 6, 128], 'false,false,true,false': [0.02, 260, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.799, 53, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.929, 326, 156]}]
{'': [nan, 0.22696109693877867], 'false': [0.018511925952302145, 0.0], 'false,true': [0.016801811673609827, 0.023242630385488926]}
{'': [nan, 0.16458041003670462], 'false': [nan, 0.1645804100367095], 'false,false': [nan, 0.16458041003670462], 'false,false,false': [nan, 0.1645804100367095]}
{'': [nan, 0.1522946482367716], 'false': [nan, 0.15229464823677574], 'false,false': [nan, 0.15229464823677574], 'false,false,false': [0.15195020018915315, 0.15388346669729316]}
{'': [0.15178780244626028, 0.14627096650198973], 'true': [0.03618567753959586, 4.2646662215759983e-16], 'false': [nan, 0.14627096650198973], 'false,false': [nan, 0.14627096650198973], 'false,false,false': [nan, 0.14627096650198973]}
{'': [nan, 0.10209911673967248], 'false': [nan, 0.10209911673967162], 'false,false': [0.09193940374578169, 0.11902360204298629], 'false,false,true': [nan, 0.09193940374578169]}
{'': [nan, 0.10358825432369692], 'false': [nan, 0.10358825432369692], 'false,false': [0.032344824990527134, 0.00020253811340531432], 'false,false,false': [nan, 0.00020253811340542464]}
{'': [0.0688689332169419, 0.0727750690000975], 'false': [nan, 0.0727750690000975], 'false,false': [nan, 0.0727750690000975], 'false,false,false': [nan, 0.0727750690000975], 'true': [nan, 0.0688689332169419]}
{'': [nan, 0.06693422802603931], 'false': [nan, 0.06693422802603931], 'false,false': [nan, 0.06693422802603931], 'false,false,false': [0.05964262866687434, 0.10122595631438983]}
{'': [nan, 0.06677970793689054], 'false': [nan, 0.06677970793689049], 'false,false': [0.060461544740432895, 0.09669768499656961], 'false,false,false': [nan, 0.09669768499656961], 'false,false,true': [0.04268778260898922, 1.5823452570519801e-06]}
{'': [nan, 0.050398650685551646], 'false': [nan, 0.05039865068555144], 'false,false': [nan, 0.050398650685551646]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 30.874
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.14185106490048785;  // std dev = 9.88e-08, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7230325717394859;  // std dev = 0.081, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.3861400788776214;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.674018866756409;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.4118373604848879;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12544463852839152;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.674018866756409;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.12544463852839122;  // std dev = 4.94e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.17785927712163038;  // std dev = 2.531, 39.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
%   | | | else return 0.13238518790853368;  // std dev = 2.552, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.560739120155092;  // std dev = 0.148, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.23322730222991087;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.528886695430852;  // std dev = 0.992, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.11231637819360679;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.566560635563244;  // std dev = 1.07e-07, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.11231637819360632;  // std dev = 2.98e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.19237665466677956;  // std dev = 1.290, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13253116087436143;  // std dev = 3.251, 69.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.4249322245640344;  // std dev = 0.178, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.44177330346217986;  // std dev = 0.049, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.6479829117645453;  // std dev = 0.102, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.10843855948285136;  // std dev = 0.302, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.41534300937556506;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10159632948783633;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0.012261562341152499;  // std dev = 0.722, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.16045848342229574;  // std dev = 1.263, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.10358421168771025;  // std dev = 1.793, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3226523434226384;  // std dev = 0.131, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, D) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.33075691546381264;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4651258503249071;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3293670736840777;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.09131501981415494;  // std dev = 0.621, 134.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=1 */
%   | | | else return -0.012405949809988739;  // std dev = 1.631, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.03247986286073257;  // std dev = 2.274, 87.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=25 */
%   | | | else return 0.07008244087095473;  // std dev = 2.399, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(E, D), tweets(F, D) )
%   | | | then return 0.23401518693284468;  // std dev = 1.260, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return 0.020572166062482855;  // std dev = 0.801, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.30415996029198195;  // std dev = 0.157, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.2566507773479781;  // std dev = 0.967, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.26116541499139145;  // std dev = 0.058, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.4699559298728259;  // std dev = 0.161, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5907579265653089;  // std dev = 0.200, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.10020669274182556;  // std dev = 0.494, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A), follows(C, D) )
%   | | | then return 0.21266114808541986;  // std dev = 0.038, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.044882506851248526;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.2162872323934811;  // std dev = 0.095, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else return 0.14750769164769728;  // std dev = 0.237, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.23007428992908652;  // std dev = 0.083, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.11799711364359688;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then return -0.050491985514982476;  // std dev = 0.100, 215.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=17 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.010437843335190907;  // std dev = 2.063, 121.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=29 */
%   | | | else return 0.12800772032234167;  // std dev = 1.633, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1828683658958403;  // std dev = 0.104, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.19042017097550437;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3020354941724337;  // std dev = 0.115, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(F, D), follows(A, G) )
%   | | | then return -0.07303120333759418;  // std dev = 0.473, 185.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=2 */
%   | | | else return -0.10440890017234682;  // std dev = 0.734, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.23333975502810345;  // std dev = 1.049, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.1014827605446105;  // std dev = 0.312, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.03742692523803101;  // std dev = 1.609, 45.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
%   | | | else return 0.006370554077462019;  // std dev = 1.396, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.11926398648891211;  // std dev = 1.701, 77.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=74 */
%   | | | else return -0.12805570367348748;  // std dev = 1.120, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.22179956286424307;  // std dev = 0.195, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.34526841014012966;  // std dev = 0.240, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.07955313812899688;  // std dev = 0.365, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.1582299593393718;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.05877431291574969;  // std dev = 1.179, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return -0.11061365963655988;  // std dev = 0.307, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0.05756286251166947;  // std dev = 0.293, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.14413520513318168;  // std dev = 0.088, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.10637434560121407;  // std dev = 0.175, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( follows(E, A), follows(E, C) )
%   | | then return 0.13739098703903888;  // std dev = 0.013, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.2564157622952662;  // std dev = 1.089, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(F, A) )
%   | then return -0.04469535124202761;  // std dev = 0.111, 217.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.1341903851030467;  // std dev = 1.321, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return -0.09624126859966832;  // std dev = 0.261, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 2.770512302831424E-6;  // std dev = 1.276, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
%   | | | else return 0.062354395791218105;  // std dev = 1.352, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.615', 'seconds']
Refined model CLL: -0.104272


******************************************
Best model found
******************************************
Results 

CLL : -0.098149 

AUC ROC : 0.994177 

AUC PR : 0.448825 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 30.874 

Total Inference Time : 14.90257740020752 

Total revision time: 52.58792217636108
Best scored revision CLL: -0.104272


Results 

CLL : -0.098149 

AUC ROC : 0.994177 

AUC PR : 0.448825 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 52.613367637634276 

Total Inference Time : 14.90257740020752 

Starting experiments for fasttext using relax-wmd 

Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 

Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.008
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8379469148974912;  // std dev = 1.400, 99.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=97 */
%   | | else return 0.7936328060672536;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14828108444604088;  // std dev = 7.888, 389.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.15016733245946248;  // std dev = 7.356, 336.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=118 */
%   | | | else return 0.24088998110177304;  // std dev = 1.764, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.645788598087879;  // std dev = 1.407, 120.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=118 */
%   | else return -0.16446227496116472;  // std dev = 0.300, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04988735271587427;  // std dev = 1.960, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05129731641632411;  // std dev = 5.121, 297.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=89 */
%   | | else return 0.09966979598536156;  // std dev = 0.337, 101.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4906207933822908;  // std dev = 1.049, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1526312117034619;  // std dev = 0.212, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04994449295049474;  // std dev = 4.233, 263.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05097591246206279;  // std dev = 2.166, 79.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.028801011126074902;  // std dev = 4.516, 346.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=118 */
%   | | | else return 0.055633561421986284;  // std dev = 1.472, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.2914756071821756;  // std dev = 2.676, 126.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=118 */
%   | | | else return -0.13962615311652615;  // std dev = 0.038, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01966768051549878;  // std dev = 1.569, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.014813234109387388;  // std dev = 4.021, 371.000 (wgt'ed) examples reached here.  /* #neg=245 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.449', 'seconds']
Parameter learned model CLL:-0.157284 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.4, 2, 97], 'false,true,false': [1.368, 2, 29], 'false,false': [0.0, 251, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.888, 263, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.356, 218, 118], 'false,false,false,false': [1.764, 9, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.407, 2, 118], 'true,false': [0.3, 213, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.96, 21, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.121, 208, 89], 'false,false,false': [0.337, 64, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.049, 1, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.212, 240, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.233, 166, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.166, 50, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.516, 228, 118], 'false,false,false,false': [1.472, 14, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.676, 8, 118], 'false,false,true,false': [0.038, 216, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.569, 15, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.021, 245, 126]}]
{'': [nan, 0.22134044268088804], 'false': [0.02982248520710475, -1.2384958043627243e-16], 'false,true': [0.019793898581778793, 0.06035379812695236]}
{'': [nan, 0.15993773655488525], 'false': [nan, 0.15993773655488974], 'false,false': [nan, 0.15993773655488525], 'false,false,false': [nan, 0.15993773655488974]}
{'': [nan, 0.16247209599267312], 'false': [nan, 0.16247209599267212], 'false,false': [nan, 0.16247209599267212], 'false,false,false': [0.1610352906940736, 0.18303590560800223]}
{'': [0.15753732997299197, 0.13240307819343497], 'true': [0.0164862672762899, 0.00042380667739519364], 'false': [nan, 0.13240307819343497], 'false,false': [nan, 0.13240307819343497], 'false,false,false': [nan, 0.13240307819343497]}
{'': [nan, 0.09511793216932249], 'false': [nan, 0.09511793216932213], 'false,false': [0.08828793982017064, 0.11345606321873973], 'false,false,true': [nan, 0.08828793982017064]}
{'': [nan, 0.0967602622301031], 'false': [nan, 0.0967602622301031], 'false,false': [0.008672575993046638, 0.00018752833177566227], 'false,false,false': [nan, 0.00018752833177565858]}
{'': [0.06814083635891073, 0.059380913788510625], 'true': [nan, 0.06814083635891073], 'false': [nan, 0.059380913788510625], 'false,false': [nan, 0.059380913788510625], 'false,false,false': [nan, 0.059380913788510625]}
{'': [nan, 0.06135306269359912], 'false': [nan, 0.06135306269359912], 'false,false': [nan, 0.06135306269359912], 'false,false,false': [0.058950815875089636, 0.09845691043781969]}
{'': [nan, 0.06688933038901973], 'false': [nan, 0.0668893303890192], 'false,false': [0.06419089053713364, 0.10701375351979216], 'false,false,false': [nan, 0.10701375351979216], 'false,false,true': [0.056843033034587855, 6.556845454610796e-06]}
{'': [nan, 0.043577966703205455], 'false': [nan, 0.04357796670320557], 'false,false': [nan, 0.043577966703205455]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 126.649
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( tweets(D, F), follows(E, G) )
%   | | then if ( tweets(A, H), recursion_accounttype(D, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.8116373071925352;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.14185106490048843;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), tweets(D, E) )
%   | | then return 0.7071747942710452;  // std dev = 0.116, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | else if ( tweets(C, F) )
%   | | | then return 0.4764416547373166;  // std dev = 0.874, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7499102171777805;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.38923707555600423;  // std dev = 0.820, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.7256674055677208;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10752416914151357;  // std dev = 1.464, 143.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=3 */
%   | | | else return 0.007678848345556159;  // std dev = 2.719, 77.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08007596840820648;  // std dev = 2.205, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return 0.14492913770819954;  // std dev = 1.971, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.5518597387522601;  // std dev = 0.115, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.4156815729975856;  // std dev = 0.941, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5652987372986872;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6703050723118509;  // std dev = 0.952, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.11777953660177388;  // std dev = 0.080, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6657326435363803;  // std dev = 0.224, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.13449628413727982;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10723638110788343;  // std dev = 1.205, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.1274278167270337;  // std dev = 1.623, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.41431976609132504;  // std dev = 1.014, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | | | else return 0.25233466332357635;  // std dev = 0.931, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.4457201024700646;  // std dev = 0.120, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5932036092070865;  // std dev = 0.246, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.11141459081726027;  // std dev = 0.215, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.42136231119048606;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10273902095398135;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then return 0.32734627143386735;  // std dev = 0.081, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return -0.2710217801945195;  // std dev = 1.107, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.3689332026540299;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.32863858611485147;  // std dev = 0.048, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.09591358636345848;  // std dev = 0.931, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08131688311251942;  // std dev = 0.944, 142.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=3 */
%   | | | else return -0.007491167265183251;  // std dev = 1.749, 62.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.007325472883980819;  // std dev = 1.431, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return 0.03025260051082001;  // std dev = 1.541, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, F) )
%   | | then if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.23334503186148775;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.2592480603390263;  // std dev = 0.094, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.27367523976536706;  // std dev = 0.049, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.32453211986056707;  // std dev = 0.139, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I) )
%   | | | then return 0.25892004952500486;  // std dev = 0.032, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.346140848801602;  // std dev = 0.110, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.4238021641028952;  // std dev = 0.125, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.4926504344379548;  // std dev = 0.125, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09748136164226691;  // std dev = 0.279, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.21548159421010563;  // std dev = 3.65e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.0802424361831859;  // std dev = 1.314, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.21462958590172226;  // std dev = 0.021, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.2316240536840085;  // std dev = 0.032, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(F, A) )
%   | then return -0.046363612478248765;  // std dev = 0.114, 236.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.1458037823234075;  // std dev = 1.263, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.10053915042263686;  // std dev = 0.004, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.04609017237318537;  // std dev = 0.752, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.040200544509374436;  // std dev = 1.103, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.1729989287090249;  // std dev = 0.106, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.21284026094911487;  // std dev = 0.050, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2760962344528273;  // std dev = 0.932, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.08097033338033308;  // std dev = 0.102, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then return 0.20627827432353152;  // std dev = 0.034, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.060033952656831015;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(I, A), follows(A, I) )
%   | | then return -0.035024492787462586;  // std dev = 0.125, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07721822266588063;  // std dev = 0.714, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.012504189758963068;  // std dev = 0.980, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.1500084224819278;  // std dev = 0.877, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return -0.04141290639731754;  // std dev = 1.791, 17.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.17029459014591675;  // std dev = 0.066, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2972627501954048;  // std dev = 0.331, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.08006928791152304;  // std dev = 0.262, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.1528049570296095;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.0706973758905258;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(C, A), tweets(A, E) )
%   | | | then return 0.09913209205239751;  // std dev = 1.343, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.15616736448629753;  // std dev = 0.106, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.07570479120878346;  // std dev = 0.741, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.19638440148845268;  // std dev = 0.055, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A), follows(A, G) )
%   | then return -0.04391975704095895;  // std dev = 0.098, 228.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=24 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.22399719079091313;  // std dev = 0.177, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09224731121927465;  // std dev = 0.100, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.13405472719351696;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.03567994792005606;  // std dev = 1.153, 47.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '24.396', 'seconds']
Refined model CLL: -0.101186


******************************************
Best model found
******************************************
Results 

CLL : -0.101233 

AUC ROC : 0.995021 

AUC PR : 0.412267 

Precision : 0.344186 

Recall : 0.948718 

F1 : 0.505119 

Total Learning Time : 126.649 

Total Inference Time : 25.438122510910034 

Total revision time: 157.9598404712677
Best scored revision CLL: -0.101186


Results 

CLL : -0.101233 

AUC ROC : 0.995021 

AUC PR : 0.412267 

Precision : 0.344186 

Recall : 0.948718 

F1 : 0.505119 

Total Learning Time : 159.5466281719208 

Total Inference Time : 25.438122510910034 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.239
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8410549180054936;  // std dev = 1.402, 117.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=115 */
%   | | else return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else return -0.14185106490048768;  // std dev = 9.68e-09, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13449993582162498;  // std dev = 8.843, 507.000 (wgt'ed) examples reached here.  /* #neg=351 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.14521288937436683;  // std dev = 7.686, 373.000 (wgt'ed) examples reached here.  /* #neg=245 #pos=128 */
%   | | | else return 0.148252130126115;  // std dev = 3.581, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6410323757802003;  // std dev = 1.712, 131.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=128 */
%   | else return -0.15947517248272627;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12124618461993274;  // std dev = 3.535, 82.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.051156287417234256;  // std dev = 5.424, 325.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=97 */
%   | | else return 0.08648866547944384;  // std dev = 0.358, 170.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4974236551405998;  // std dev = 1.843, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15573188218175257;  // std dev = 0.313, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.036492567087921965;  // std dev = 4.775, 347.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04019444579644795;  // std dev = 2.899, 120.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.030808464378678457;  // std dev = 4.683, 384.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=128 */
%   | | | else return 0.01516963922375067;  // std dev = 2.935, 98.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.32890869965104913;  // std dev = 1.877, 132.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=128 */
%   | | | else return -0.13595413442263118;  // std dev = 0.031, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03462664020835942;  // std dev = 2.891, 86.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.009239530804004309;  // std dev = 4.819, 501.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.534', 'seconds']
Parameter learned model CLL:-0.15666 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.402, 2, 115], 'false,true,false': [0.988, 1, 41], 'false,false': [9.68e-09, 325, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.843, 351, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.686, 245, 128], 'false,false,false,false': [3.581, 53, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.712, 3, 128], 'true,false': [0.0, 243, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.535, 54, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.424, 228, 97], 'false,false,false': [0.358, 111, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.843, 3, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.313, 311, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.775, 232, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.899, 79, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.683, 256, 128], 'false,false,false,false': [2.935, 70, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.877, 4, 128], 'false,false,true,false': [0.031, 243, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.891, 58, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.819, 345, 156]}]
{'': [nan, 0.21842770302575254], 'false': [0.018511925952302145, 9.29171269840131e-17], 'false,true': [0.016801811673609827, 0.023242630385488926]}
{'': [nan, 0.1542428475645355], 'false': [nan, 0.1542428475645405], 'false,false': [nan, 0.1542428475645355], 'false,false,false': [nan, 0.1542428475645405]}
{'': [nan, 0.15835673864216174], 'false': [nan, 0.15835673864216274], 'false,false': [nan, 0.15835673864216274], 'false,false,false': [0.15836218112087572, 0.1583240873875156]}
{'': [0.1536718622143204, 0.15242213583460779], 'true': [0.022370623843259524, -6.213593882675773e-17], 'false': [nan, 0.15242213583460779], 'false,false': [nan, 0.15242213583460779], 'false,false,false': [nan, 0.15242213583460779]}
{'': [nan, 0.10379009421428884], 'false': [nan, 0.10379009421428902], 'false,false': [0.09051835844426843, 0.12834288882026157], 'false,false,true': [nan, 0.09051835844426843]}
{'': [nan, 0.10293423487691683], 'false': [nan, 0.10293423487691683], 'false,false': [0.02136400448503543, 0.00031535835206711517], 'false,false,false': [nan, 0.0003153583520671294]}
{'': [0.06571267738077753, 0.07001727388656726], 'false': [nan, 0.07001727388656726], 'false,false': [nan, 0.07001727388656726], 'false,false,false': [nan, 0.07001727388656726], 'true': [nan, 0.06571267738077753]}
{'': [nan, 0.06340840475220642], 'false': [nan, 0.06340840475220642], 'false,false': [nan, 0.06340840475220642], 'false,false,false': [0.05711150082000907, 0.08788714108524834]}
{'': [nan, 0.0658796221079176], 'false': [nan, 0.06587962210791758], 'false,false': [0.058693084128541635, 0.09717698931362968], 'false,false,false': [nan, 0.09717698931362968], 'false,false,true': [0.026703345870407146, 3.921913330914793e-06]}
{'': [nan, 0.04634402048060317], 'false': [nan, 0.046344020480603765], 'false,false': [nan, 0.04634402048060317]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 26.824
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( follows(E, A), tweets(E, F) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.7405018762759829;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.14185106490048788;  // std dev = 7.30e-08, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7197454264721553;  // std dev = 0.023, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.3861400788776214;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7194734122109545;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.1254446385283917;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 5.96e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.1254446385283913;  // std dev = 3.16e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.1690742079111702;  // std dev = 2.811, 47.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
%   | | | else return 0.13170433343575755;  // std dev = 1.864, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.5321090446358855;  // std dev = 0.152, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else return 0.22196593268047052;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.10054037907884253;  // std dev = 0.093, 127.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.5553664367462847;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.11231637819360624;  // std dev = 5.58e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5553664367462847;  // std dev = 7.30e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.11231637819360626;  // std dev = 4.71e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.18337002683139172;  // std dev = 2.681, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | | | else return 0.10555740327726601;  // std dev = 1.868, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.40881754924958835;  // std dev = 1.322, 76.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=74 */
%   | | | else return 0.10801335867475055;  // std dev = 1.015, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.42768496236041453;  // std dev = 0.248, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.6370642813586158;  // std dev = 0.309, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.11092834137760617;  // std dev = 0.355, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.360613907451546;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(I, A) )
%   | | then return -0.07769959272720092;  // std dev = 0.111, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07144030839421252;  // std dev = 0.848, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.07659314745409006;  // std dev = 1.848, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.33238133706178485;  // std dev = 0.176, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.35091569242081133;  // std dev = 0.332, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.004579356523893814;  // std dev = 0.890, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(D, G), follows(H, D) )
%   | | | then return -0.08879332213113053;  // std dev = 0.633, 213.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=2 */
%   | | | else return -0.14275075182522287;  // std dev = 0.533, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.4091804379708757;  // std dev = 0.583, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.11665379210375587;  // std dev = 0.212, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.0011312516672697236;  // std dev = 0.947, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.07637479489015436;  // std dev = 1.984, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.26180760138140163;  // std dev = 0.227, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.19302608026028184;  // std dev = 1.669, 42.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=39 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.26742637156301213;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.35709272326141656;  // std dev = 0.076, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.25873662986333534;  // std dev = 0.027, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.32478443710124894;  // std dev = 0.138, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.43208740277564917;  // std dev = 0.113, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.6345116830420695;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09697600449913624;  // std dev = 0.462, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.21837322043234664;  // std dev = 0.156, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2115068115056062;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.04583039813090404;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.20988573204690925;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then return -0.047716512294254665;  // std dev = 0.105, 230.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.25508911016303776;  // std dev = 0.349, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.10816804675297606;  // std dev = 0.660, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.042652909719069966;  // std dev = 0.750, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | | else return 0.07825743622826078;  // std dev = 1.527, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1597850170105435;  // std dev = 0.993, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return -0.029319449755610138;  // std dev = 1.565, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | | else return 0.2083116225439435;  // std dev = 0.138, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | else return -0.08071566334632096;  // std dev = 0.304, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.1831227461504848;  // std dev = 0.010, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.12519645338915378;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.08735036166274832;  // std dev = 0.088, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.012810283514241485;  // std dev = 0.415, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.06066236623022129;  // std dev = 1.329, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.17506807893791096;  // std dev = 0.429, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | | else return 0.122423517489413;  // std dev = 1.204, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | else return 0.2367772849636236;  // std dev = 0.153, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07420998094437342;  // std dev = 0.261, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.15730112487401365;  // std dev = 0.009, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return -0.07133427822279886;  // std dev = 1.29e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.004246478163875631;  // std dev = 0.297, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -9.421268311982067E-4;  // std dev = 0.411, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.053708164498637585;  // std dev = 1.414, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.13772062439930127;  // std dev = 0.115, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.13653540849547788;  // std dev = 0.019, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.19730198987104977;  // std dev = 1.159, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.06300288449083512;  // std dev = 0.074, 124.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=2 */
%   | | else return -0.023404562489864483;  // std dev = 0.121, 116.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=21 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.16896809001873433;  // std dev = 0.270, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.08026256031210759;  // std dev = 0.195, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.038651021772442215;  // std dev = 0.565, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.10054623956695435;  // std dev = 1.199, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.662', 'seconds']
Refined model CLL: -0.095321


******************************************
Best model found
******************************************
Results 

CLL : -0.09326 

AUC ROC : 0.99457 

AUC PR : 0.439755 

Precision : 0.346154 

Recall : 1.0 

F1 : 0.514286 

Total Learning Time : 26.824 

Total Inference Time : 18.42653250694275 

Total revision time: 52.11062935638428
Best scored revision CLL: -0.095321


Results 

CLL : -0.09326 

AUC ROC : 0.99457 

AUC PR : 0.439755 

Precision : 0.346154 

Recall : 1.0 

F1 : 0.514286 

Total Learning Time : 53.697417057037356 

Total Inference Time : 18.42653250694275 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.67
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8273797043302796;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7100164700982684;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5496512617331021;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360682;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3959399714983268;  // std dev = 1.967, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42872685674422867;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.28252595753701065;  // std dev = 2.574, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892605;  // std dev = 6.66e-08, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23716118647453163;  // std dev = 2.195, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2073859536777648;  // std dev = 1.711, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 6.14e-08, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18023953349413924;  // std dev = 1.406, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333661;  // std dev = 1.28e-07, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.073246225763337;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13829171223488915;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.66e-08, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12032186529852917;  // std dev = 0.169, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 1.32e-09, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.215', 'seconds']
Parameter learned model CLL:-0.092707 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 242, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 251, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 243, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.967, 4, 118], 'true,false': [0.0, 222, 0], 'false,true,true': [7.45e-09, 0, 8], 'false,true,false': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.574, 7, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.66e-08, 217, 0], 'false,false,false': [1.32e-09, 16, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.195, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 281, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.711, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.14e-08, 247, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.406, 2, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.28e-07, 213, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.66e-08, 209, 0], 'false,false,false': [0.0, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.169, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.32e-09, 235, 0]}]
{'': [0.02982248520710475, -1.5781682664093133e-16], 'false': [-1.5781682664093133e-16, nan]}
{'': [0.015380859375001776, -6.36940699386544e-17], 'false': [-6.36940699386544e-17, nan]}
{'': [0.015380859374998668, -8.77213254024815e-17], 'false': [nan, -8.77213254024815e-17]}
{'': [0.06790260627891422, 0.06119840757171964], 'true': [0.03171190540177414, -8.201647569302958e-17], 'false': [0.06119840757171964, nan], 'false,true': [5.551115123125783e-17, -1.6326809185664067e-18]}
{'': [0.04981844912608067, 2.4777509562449847e-17], 'true': [0.04981844912608067, nan], 'false': [nan, 2.4777509562449847e-17], 'false,false': [2.0464940546085836e-17, 1.734723475976807e-18], 'false,false,true': [nan, 2.0464940546085836e-17]}
{'': [0.03677899771748671, 3.476855023737145e-17], 'false': [nan, 3.476855023737145e-17], 'false,false': [nan, 3.476855023737145e-17]}
{'': [0.02270026829089373, 1.5282422201317944e-17], 'false': [nan, 1.5282422201317944e-17], 'false,false': [nan, 1.5282422201317944e-17], 'false,false,false': [1.5282422201317944e-17, nan]}
{'': [0.015451318918065851, 6.891039463190627e-17], 'true': [0.015451318918065851, nan], 'false': [7.714225711010478e-17, -7.304098846218135e-19], 'false,false': [nan, -7.304098846218135e-19]}
{'': [0.029806410575482896, 1.784287003861859e-17], 'false': [nan, 1.784287003861859e-17], 'false,false': [2.1248287552634575e-17, -2.7755575615628915e-18], 'false,false,true': [nan, 2.1248287552634575e-17]}
{'': [0.028729501084593, 2.362176648138631e-18], 'false': [nan, 2.362176648138631e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 44.265
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995128;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | | else return 0.8295775065280835;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.14185106490048827;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.6714790135288211;  // std dev = 0.977, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(D, A), tweets(D, F) )
%   | | | then return 0.386140078877621;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.725827372108717;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7285817482593915;  // std dev = 0.066, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.12544463852839202;  // std dev = 0.000, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.5400674385654225;  // std dev = 0.994, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | | else return 0.3077583172020072;  // std dev = 0.871, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5648049540151903;  // std dev = 0.110, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.5773608380076595;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2243286993744457;  // std dev = 1.139, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.5882136121500673;  // std dev = 0.000609, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.11231637819360682;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.40933148339921;  // std dev = 1.005, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.371768794294809;  // std dev = 0.964, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.4340930080094368;  // std dev = 0.160, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4370900550283267;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.28658272109902333;  // std dev = 1.696, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   | | | else return 0.33353590711176845;  // std dev = 0.071, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.12455815605149767;  // std dev = 0.893, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.33221480104118306;  // std dev = 0.147, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926051;  // std dev = 6.14e-08, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return -0.09269127618926085;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, F) )
%   | | | then return 0.26626247653961344;  // std dev = 0.067, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.22642005350106928;  // std dev = 0.984, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.2640305986132008;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2964399560001816;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(I, A), follows(H, A) )
%   | | | then return -0.1315442880123085;  // std dev = 1.107, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23273532660763663;  // std dev = 0.999, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.3148875937129082;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2693474895723705;  // std dev = 0.000495, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839678;  // std dev = 5.67e-09, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.18244832765988256;  // std dev = 1.386, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | | else return 0.23865877138680616;  // std dev = 0.134, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.23298045071137505;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.07761201869811522;  // std dev = 1.282, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.2203691493474921;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21031777789819708;  // std dev = 0.004, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.24267533913271294;  // std dev = 0.038, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.21774003936229738;  // std dev = 0.006, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.07877675473109143;  // std dev = 3.84e-09, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(A, F) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.19146706088939797;  // std dev = 0.096, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.2078680666902477;  // std dev = 0.096, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.1860597770295609;  // std dev = 0.038, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.007737706934068678;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return 0.052438208109252885;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.1435276244032494;  // std dev = 0.988, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.20834503409585292;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.184669908929904;  // std dev = 0.000379, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07324622576333664;  // std dev = 8.54e-09, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.1467302087757404;  // std dev = 0.996, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.05665274047215109;  // std dev = 0.932, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.3240104218406533;  // std dev = 0.975, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.17085785337522663;  // std dev = 0.090, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(G, I), follows(I, A) )
%   | | | then return 0.21478867050247075;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.176490008648798;  // std dev = 0.073, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17092261853791565;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.16097575536521905;  // std dev = 0.031, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.06842697784420276;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(A, G) )
%   | | | then return 0.0706038539178804;  // std dev = 1.932, 54.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=50 */
%   | | | else return 0.15303787845669994;  // std dev = 0.149, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( follows(A, E), follows(E, H) )
%   | | | then return 0.14448472888301192;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1536413117937692;  // std dev = 1.433, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return 0.145792515117794;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15262003714071137;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.13815862994977543;  // std dev = 0.000300, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202625;  // std dev = 2.58e-08, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.427', 'seconds']
Refined model CLL: -0.091382


******************************************
Best model found
******************************************
Results 

CLL : -0.086343 

AUC ROC : 0.994427 

AUC PR : 0.382502 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 44.265 

Total Inference Time : 10.395209550857544 

Total revision time: 71.1262522315979
Best scored revision CLL: -0.091382


Results 

CLL : -0.086343 

AUC ROC : 0.994427 

AUC PR : 0.382502 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 71.15816193580628 

Total Inference Time : 10.395209550857544 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.091
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8392810105712079;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004879;  // std dev = 5.16e-08, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6862286986535548;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5431949309490629;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360693;  // std dev = 0.000, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4029221012762526;  // std dev = 1.969, 132.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=128 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4332251315792822;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.10159632948783613;  // std dev = 2.63e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2939459021007787;  // std dev = 2.590, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926044;  // std dev = 1.25e-07, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2558374237747405;  // std dev = 1.714, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.96e-09, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21409364921228266;  // std dev = 1.404, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109141;  // std dev = 3.33e-08, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17255372183769643;  // std dev = 1.714, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.0732462257633368;  // std dev = 1.17e-07, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15974532893094395;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420271;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | | else return -0.06842697784420262;  // std dev = 2.28e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1201623412756613;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820259;  // std dev = 7.27e-09, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.259', 'seconds']
Parameter learned model CLL:-0.08753 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.716, 3, 156], 'false,true': [5.16e-08, 291, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.404, 6, 156], 'false,true': [0.0, 311, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 273, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.969, 4, 128], 'true,false': [0.0, 274, 0], 'false,true,true': [0.0, 0, 28], 'false,true,false': [2.63e-09, 62, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.59, 7, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.25e-07, 269, 0], 'false,false,false': [0.0, 68, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.714, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 300, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.404, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.33e-08, 317, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.714, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.17e-07, 253, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 58, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.08, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 248, 0], 'false,false,false': [2.28e-09, 61, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.27e-09, 315, 0]}]
{'': [0.018511925952302145, 9.156478553609538e-18], 'false': [9.156478553609538e-18, nan]}
{'': [0.03566529492455599, -8.567637489068732e-17], 'false': [-8.567637489068732e-17, nan]}
{'': [0.02437500000000208, -1.0898892695953917e-16], 'false': [nan, -1.0898892695953917e-16]}
{'': [0.06540409192399906, 0.06130308835782614], 'true': [0.029384756657483527, -6.320977804435197e-17], 'false': [0.06130308835782614, nan], 'false,true': [-1.9032394707859825e-16, 7.162729191130042e-18]}
{'': [0.041166294228759594, 1.0805731515639505e-16], 'true': [0.041166294228759594, nan], 'false': [nan, 1.0805731515639505e-16], 'false,false': [5.778112395818659e-17, -2.44902137784961e-17], 'false,false,true': [nan, 5.778112395818659e-17]}
{'': [0.018477224561307987, 3.552713678800501e-17], 'false': [nan, 3.552713678800501e-17], 'false,false': [nan, 3.552713678800501e-17]}
{'': [0.012478359807342939, 3.5022808347796734e-18], 'false': [nan, 3.5022808347796734e-18], 'false,false': [nan, 3.5022808347796734e-18], 'false,false,false': [3.5022808347796734e-18, nan]}
{'': [0.01848410007405232, 2.784482183947338e-17], 'true': [0.01848410007405232, nan], 'false': [5.441409290652941e-17, -1.0527976957652346e-17], 'false,false': [nan, -1.0527976957652346e-17]}
{'': [0.00632193124555083, -6.53917768549445e-17], 'false': [nan, -6.53917768549445e-17], 'false,false': [-4.476705744456276e-18, 5.4601132358614255e-18], 'false,false,true': [nan, -4.476705744456276e-18]}
{'': [0.02434434057928491, 5.427757009278543e-17], 'false': [nan, 5.427757009278543e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 29.077
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(E, F) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.8581489350995123;  // std dev = 8.43e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.7528857772047755;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.858148935099512;  // std dev = 2.38e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.14185106490048777;  // std dev = 1.40e-07, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7233787211279905;  // std dev = 0.075, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.6343209733954547;  // std dev = 1.339, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.7225472521844845;  // std dev = 0.112, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.636140078877621;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.12544463852839194;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5639465616488976;  // std dev = 0.202, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.5599667471554305;  // std dev = 0.040, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.04514181878635737;  // std dev = 0.772, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.5642428989494817;  // std dev = 0.088, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.11231637819360688;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.4234137107143776;  // std dev = 0.193, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | | else return 0.1252550382936716;  // std dev = 1.216, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.2683609201776787;  // std dev = 1.579, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | | else return 0.38744532962528194;  // std dev = 0.987, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4287904216162027;  // std dev = 0.115, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10159632948783627;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.25592450412369994;  // std dev = 1.903, 58.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=54 */
%   | | | else return 0.18222396861512322;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.33648496264427424;  // std dev = 0.180, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.3423501715947229;  // std dev = 0.218, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.1487016395736542;  // std dev = 0.734, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.34089600117552415;  // std dev = 0.163, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else if ( follows(A, J) )
%   | then return -0.09269127618926049;  // std dev = 1.33e-07, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A), follows(A, D) )
%   | | | then return 0.2615339413536778;  // std dev = 0.035, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.27594359450210826;  // std dev = 0.072, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2940070467689148;  // std dev = 0.128, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2714301227677907;  // std dev = 0.046, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.035144384201797135;  // std dev = 1.465, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | | | else return 0.3931935170979994;  // std dev = 0.178, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.22115301499923143;  // std dev = 1.377, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return 0.26770047078825127;  // std dev = 0.073, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.21496984208092262;  // std dev = 0.021, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.1829990678734507;  // std dev = 0.987, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.23718689958690642;  // std dev = 0.114, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.22120370391663355;  // std dev = 0.040, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return -0.07377203267096973;  // std dev = 1.238, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.26358646368306043;  // std dev = 0.180, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.22844121499628137;  // std dev = 0.111, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.12247070434528959;  // std dev = 1.293, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   else return -0.07877675473109143;  // std dev = 3.33e-08, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.18503656913891897;  // std dev = 0.107, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.12247082295210887;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.189796356089465;  // std dev = 0.055, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.22792564308056276;  // std dev = 0.160, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.09806445265757384;  // std dev = 0.303, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.15970757491952672;  // std dev = 0.938, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.1858676904193852;  // std dev = 0.067, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( follows(A, I) )
%   | then return -0.07324622576333682;  // std dev = 7.15e-09, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return -0.07324622576333703;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, F) )
%   | | then if ( tweets(A, G), tweets(E, G) )
%   | | | then return 0.1694022831591993;  // std dev = 0.204, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.10521148407806431;  // std dev = 0.900, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return -0.09092769282762032;  // std dev = 0.789, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.19192648101346693;  // std dev = 0.066, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17606617426100996;  // std dev = 4.02e-05, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.15499569944263988;  // std dev = 0.016, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.1675796275712731;  // std dev = 0.069, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(A, L) )
%   | then return -0.06842697784420261;  // std dev = 3.73e-09, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else return -0.06842697784420262;  // std dev = 1.49e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.05776256711617637;  // std dev = 1.875, 49.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=45 */
%   | | | else return 0.14617110422463747;  // std dev = 0.081, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.1662872672072824;  // std dev = 0.122, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.008819048890253913;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2113757043340898;  // std dev = 0.102, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14457165331352065;  // std dev = 0.063, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.05545729573546178;  // std dev = 0.958, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.1391156390443997;  // std dev = 0.033, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.06419184008202591;  // std dev = 7.15e-09, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.441', 'seconds']
Refined model CLL: -0.083975


******************************************
Best model found
******************************************
Results 

CLL : -0.089811 

AUC ROC : 0.995473 

AUC PR : 0.49991 

Precision : 0.338753 

Recall : 0.992063 

F1 : 0.505051 

Total Learning Time : 29.077 

Total Inference Time : 10.302340269088745 

Total revision time: 61.113779561996466
Best scored revision CLL: -0.083975


Results 

CLL : -0.089811 

AUC ROC : 0.995473 

AUC PR : 0.49991 

Precision : 0.338753 

Recall : 0.992063 

F1 : 0.505051 

Total Learning Time : 61.14568926620484 

Total Inference Time : 10.302340269088745 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.955
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8479448534668583;  // std dev = 0.995, 98.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=97 */
%   | | else return 0.7369368138873904;  // std dev = 1.875, 33.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=29 */
%   | else return -0.1418510649004884;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1658473158369169;  // std dev = 7.788, 365.000 (wgt'ed) examples reached here.  /* #neg=239 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1312982352038933;  // std dev = 7.474, 355.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=118 */
%   | | | else return 0.2155540479442098;  // std dev = 1.796, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6394022126374013;  // std dev = 1.711, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | else return -0.16182579903465147;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16852151299810414;  // std dev = 1.749, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06379299023067597;  // std dev = 5.085, 275.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=89 */
%   | | else return 0.06330384008038188;  // std dev = 0.329, 118.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4768916700910177;  // std dev = 1.755, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1517056404675052;  // std dev = 0.213, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.028497844790596995;  // std dev = 4.446, 285.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01766857364848995;  // std dev = 2.533, 97.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.020602826249931035;  // std dev = 4.720, 374.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=118 */
%   | | | else return 0.0263387382999636;  // std dev = 1.497, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.30560137676770893;  // std dev = 2.671, 126.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=118 */
%   | | | else return -0.13609571359381908;  // std dev = 0.009, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06448851036419663;  // std dev = 1.415, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.021371938670085175;  // std dev = 4.088, 364.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.381', 'seconds']
Parameter learned model CLL:-0.155686 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.995, 1, 97], 'false,true,false': [1.875, 4, 29], 'false,false': [0.0, 235, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.788, 239, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.474, 237, 118], 'false,false,false,false': [1.796, 10, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.711, 3, 118], 'true,false': [0.0, 218, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.749, 11, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.085, 186, 89], 'false,false,false': [0.329, 81, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.755, 3, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.213, 285, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.446, 188, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.533, 68, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.72, 256, 118], 'false,false,false,false': [1.497, 16, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.671, 8, 118], 'false,false,true,false': [0.009, 233, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.415, 12, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.088, 238, 126]}]
{'': [nan, 0.2257457672668665], 'false': [0.03671114736903867, -1.8897413185109048e-16], 'false,true': [0.010099958350688542, 0.10651974288338066]}
{'': [nan, 0.16616638416678248], 'false': [nan, 0.166166384166787], 'false,false': [nan, 0.16616638416678248], 'false,false,false': [nan, 0.166166384166787]}
{'': [nan, 0.15873863682334524], 'false': [nan, 0.15873863682334666], 'false,false': [nan, 0.15873863682334666], 'false,false,false': [0.15735676271714796, 0.17923580416273477]}
{'': [0.155984654297472, 0.16092298847576283], 'false': [nan, 0.16092298847576283], 'false,false': [nan, 0.16092298847576283], 'false,false,false': [nan, 0.16092298847576283], 'true': [0.02418695460993879, -2.5260120193306315e-16]}
{'': [nan, 0.09821406863728967], 'false': [nan, 0.09821406863728939], 'false,false': [0.09402498108304595, 0.10797660525657035], 'false,false,true': [nan, 0.09402498108304595]}
{'': [nan, 0.09230791726780471], 'false': [nan, 0.09230791726780471], 'false,false': [0.023879759052975173, 0.00015901843330240259], 'false,false,false': [nan, 0.00015901843330209405]}
{'': [0.06936073656126471, 0.06614448600148405], 'true': [nan, 0.06936073656126471], 'false': [nan, 0.06614448600148405], 'false,false': [nan, 0.06614448600148405], 'false,false,false': [nan, 0.06614448600148405]}
{'': [nan, 0.061605620802060015], 'false': [nan, 0.061605620802060015], 'false,false': [nan, 0.061605620802060015], 'false,false,false': [0.0595657592128507, 0.09336254717455354]}
{'': [nan, 0.06630229868238707], 'false': [nan, 0.06630229868238678], 'false,false': [0.06431150762078883, 0.10007085390980305], 'false,false,false': [nan, 0.10007085390980305], 'false,false,true': [0.056613750815257644, 3.258632985002776e-07]}
{'': [nan, 0.04592159566353172], 'false': [nan, 0.04592159566353149], 'false,false': [nan, 0.04592159566353172]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 14.956
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.8417554924765617;  // std dev = 0.992, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.1418510649004881;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.6438228202290059;  // std dev = 1.662, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | | | else return 0.7227701886500579;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7227701886500579;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.7264335068664186;  // std dev = 0.049, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.7324900834762279;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.10978890035103994;  // std dev = 1.459, 152.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=3 */
%   | | | else return 0.028176825242398996;  // std dev = 2.647, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1049875571277941;  // std dev = 2.162, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | | else return 0.1561947117180575;  // std dev = 1.951, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5682193432290819;  // std dev = 0.099, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.5626750309334252;  // std dev = 0.043, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3397510136236369;  // std dev = 0.854, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.6041450417723505;  // std dev = 1.300, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return -0.1190459797075966;  // std dev = 0.193, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.06181657884843651;  // std dev = 2.054, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.1586043805096694;  // std dev = 1.999, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.40244806587803145;  // std dev = 1.402, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | | | else return 0.24958357674430065;  // std dev = 1.279, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.3127031607613265;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.6283528854039546;  // std dev = 0.250, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.11502899254786231;  // std dev = 0.279, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.30159204965021535;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.10241396052076814;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.32660677140863364;  // std dev = 0.110, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.013186772783376136;  // std dev = 0.830, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.08170814183599069;  // std dev = 0.076, 153.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=3 */
%   | | else if ( follows(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.334511303389589;  // std dev = 1.056, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.10652299975481755;  // std dev = 0.714, 73.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.39717545839493695;  // std dev = 1.144, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.13361554248194374;  // std dev = 0.015, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07916732218792784;  // std dev = 1.177, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05346668589005909;  // std dev = 1.300, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.26900496332656393;  // std dev = 0.038, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.19142088580779984;  // std dev = 1.364, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(D, G), follows(G, D) )
%   | | | then return 0.09377576039989319;  // std dev = 1.546, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.352757003084048;  // std dev = 0.114, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.2754153564208012;  // std dev = 0.063, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.36883728531084375;  // std dev = 0.206, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.418439806251911;  // std dev = 0.783, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else return -0.09520436518829009;  // std dev = 0.299, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.2213896956824248;  // std dev = 0.018, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.007100900724977756;  // std dev = 1.748, 17.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   | | else return 0.23075243125867603;  // std dev = 0.100, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.236564869038158;  // std dev = 0.105, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(F, G) )
%   | | then return 0.05794938166589816;  // std dev = 0.918, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.2660891528613197;  // std dev = 0.126, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then return -0.05475555029983506;  // std dev = 0.102, 200.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.014487161214277016;  // std dev = 1.225, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | | else return -0.00803178982008138;  // std dev = 1.221, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.18842025780179744;  // std dev = 0.100, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( follows(A, C), follows(A, E) )
%   | | | then return 0.13479304766723435;  // std dev = 0.938, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.19804080381695133;  // std dev = 0.053, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.21140105441089635;  // std dev = 0.080, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.06568002835696021;  // std dev = 0.065, 156.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=3 */
%   | | else return 0.0013271073400711714;  // std dev = 0.146, 79.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22879413212324498;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015881194692274964;  // std dev = 1.271, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
%   | | | else return 0.02578612371173462;  // std dev = 1.166, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.15652148713677758;  // std dev = 0.963, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | | else return 0.07530297584387875;  // std dev = 1.187, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.06890018746477629;  // std dev = 0.965, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.27489851752042965;  // std dev = 1.395, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | else return -0.08388502772031332;  // std dev = 0.309, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.15736209525701433;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.07106472447511611;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.14873065365512425;  // std dev = 0.152, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.15333354734416993;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.3482617918764588;  // std dev = 1.221, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.16080053218387322;  // std dev = 0.036, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then return -0.052037035758822923;  // std dev = 0.130, 244.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2659475875871903;  // std dev = 0.224, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1083316888266758;  // std dev = 0.065, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.004319624546538995;  // std dev = 0.550, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.01086974252723679;  // std dev = 0.883, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.927', 'seconds']
Refined model CLL: -0.100678


******************************************
Best model found
******************************************
Results 

CLL : -0.101383 

AUC ROC : 0.995267 

AUC PR : 0.420098 

Precision : 0.344418 

Recall : 0.929487 

F1 : 0.5026 

Total Learning Time : 14.956 

Total Inference Time : 9.5589599609375 

Total revision time: 30.316314683914186
Best scored revision CLL: -0.100678


Results 

CLL : -0.101383 

AUC ROC : 0.995267 

AUC PR : 0.420098 

Precision : 0.344418 

Recall : 0.929487 

F1 : 0.5026 

Total Learning Time : 30.342169509887697 

Total Inference Time : 9.5589599609375 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.294
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8410549180054936;  // std dev = 1.402, 117.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=115 */
%   | | else return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else return -0.14185106490048774;  // std dev = 8.33e-09, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1707199510645577;  // std dev = 8.569, 445.000 (wgt'ed) examples reached here.  /* #neg=289 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13994694635513447;  // std dev = 7.659, 372.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=128 */
%   | | | else return 0.15764064348111062;  // std dev = 3.518, 77.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6193809137851726;  // std dev = 2.194, 133.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=128 */
%   | else return -0.16366820672059446;  // std dev = 5.16e-08, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12566823458396917;  // std dev = 3.491, 78.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08332030204405472;  // std dev = 5.208, 276.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=97 */
%   | | else return 0.07805096139759995;  // std dev = 0.352, 174.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4898878428003455;  // std dev = 1.780, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16032811025147295;  // std dev = 0.293, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.018857628621817953;  // std dev = 4.833, 372.000 (wgt'ed) examples reached here.  /* #neg=257 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008319368121906524;  // std dev = 3.093, 139.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.030459773080349146;  // std dev = 4.653, 383.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=128 */
%   | | | else return 0.06396828523948847;  // std dev = 2.767, 77.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.33412760861952345;  // std dev = 1.714, 131.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=128 */
%   | | | else return -0.1386940001278643;  // std dev = 0.012, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0075725976717601305;  // std dev = 2.883, 95.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.008633619402656315;  // std dev = 4.900, 479.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.669', 'seconds']
Parameter learned model CLL:-0.15981 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.402, 2, 115], 'false,true,false': [0.988, 1, 41], 'false,false': [8.33e-09, 315, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.569, 289, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.659, 244, 128], 'false,false,false,false': [3.518, 49, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.194, 5, 128], 'true,false': [5.16e-08, 249, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.491, 50, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.208, 179, 97], 'false,false,false': [0.352, 115, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.78, 3, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.293, 317, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.833, 257, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.093, 98, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.653, 255, 128], 'false,false,false,false': [2.767, 49, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.714, 3, 128], 'false,false,true,false': [0.012, 238, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.883, 67, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.9, 323, 156]}]
{'': [nan, 0.22079794904663014], 'false': [0.018511925952302145, 7.04903507698512e-17], 'false,true': [0.016801811673609827, 0.023242630385488926]}
{'': [nan, 0.16500408033844233], 'false': [nan, 0.1650040803384472], 'false,false': [nan, 0.16500408033844233], 'false,false,false': [nan, 0.1650040803384472]}
{'': [nan, 0.15823840027040711], 'false': [nan, 0.15823840027040692], 'false,false': [nan, 0.15823840027040692], 'false,false,false': [0.15767294054391195, 0.16071085329439208]}
{'': [0.15176241702578153, 0.15623472797723442], 'false': [nan, 0.15623472797723442], 'false,false': [nan, 0.15623472797723442], 'false,false,false': [nan, 0.15623472797723442], 'true': [0.036207593585598975, 1.070094481566416e-17]}
{'': [nan, 0.10804670914882934], 'false': [nan, 0.10804670914882962], 'false,false': [0.09825543525456863, 0.12356066554274463], 'false,false,true': [nan, 0.09825543525456863]}
{'': [nan, 0.10088488939602615], 'false': [nan, 0.10088488939602615], 'false,false': [0.019921564658785394, 0.00027126065932179654], 'false,false,false': [nan, 0.0002712606593220263]}
{'': [0.06279105345726729, 0.06882896841384724], 'false': [nan, 0.06882896841384724], 'false,false': [nan, 0.06882896841384724], 'false,false,false': [nan, 0.06882896841384724], 'true': [nan, 0.06279105345726729]}
{'': [nan, 0.06386361221605891], 'false': [nan, 0.06386361221605891], 'false,false': [nan, 0.06386361221605891], 'false,false,false': [0.05652721212696953, 0.09942018679706402]}
{'': [nan, 0.06503492636718386], 'false': [nan, 0.06503492636718379], 'false,false': [0.05915654276888275, 0.08749706260017658], 'false,false,false': [nan, 0.08749706260017658], 'false,false,true': [0.022437297082392747, 6.297159845185286e-07]}
{'': [nan, 0.05012879939185006], 'false': [nan, 0.050128799391850005], 'false,false': [nan, 0.05012879939185006]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 42.032
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.7748156017661786;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.8581489350995122;  // std dev = 1.69e-07, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else return -0.14185106490048766;  // std dev = 1.88e-07, 331.000 (wgt'ed) examples reached here.  /* #neg=331 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7216097175810747;  // std dev = 0.051, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7273684537961838;  // std dev = 0.040, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.1254446385283918;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.681011873749416;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.12544463852839152;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.11596051882570749;  // std dev = 2.856, 56.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
%   | | | else return 0.17027667923037954;  // std dev = 1.802, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5581033435257609;  // std dev = 0.062, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.44372773581105823;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.5548388469221693;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.053416035715601606;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.5191392087804029;  // std dev = 0.969, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.11231637819360672;  // std dev = 0.000, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.5975032560099423;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.05151240016968043;  // std dev = 2.283, 62.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=15 */
%   | | | else return 0.10855826514872087;  // std dev = 3.384, 82.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.37781581027890093;  // std dev = 1.924, 78.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=74 */
%   | | | else return 0.015092398740606925;  // std dev = 1.269, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return 0.5371039855582883;  // std dev = 0.098, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return -0.10990790944764355;  // std dev = 0.251, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4182505413011672;  // std dev = 0.027, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10159632948783631;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.013927018622085749;  // std dev = 0.679, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14103648264938906;  // std dev = 1.025, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06122192306293595;  // std dev = 1.853, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.33222791505925026;  // std dev = 0.192, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.34106382936816654;  // std dev = 0.218, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.049908766141350314;  // std dev = 0.776, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.09248335195324446;  // std dev = 0.027, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.3286097082824466;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.129378893665155;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.04520966933567114;  // std dev = 2.028, 66.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=19 */
%   | | | else return 0.10613848582086413;  // std dev = 2.696, 60.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.24091793635248465;  // std dev = 0.994, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.18959393889990916;  // std dev = 1.226, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.2720583621814626;  // std dev = 0.259, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.18726360386107152;  // std dev = 0.335, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.4078194875851117;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.507566797701252;  // std dev = 0.937, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else return -0.1000818667620074;  // std dev = 0.484, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.21905732847511755;  // std dev = 0.107, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return -0.0822705584191444;  // std dev = 0.786, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2220962562357966;  // std dev = 0.063, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then return -0.07131236705339325;  // std dev = 0.536, 129.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=2 */
%   | | else return -0.020344123556602964;  // std dev = 0.119, 109.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=21 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.3312505122375472;  // std dev = 0.350, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.11824172899279713;  // std dev = 0.157, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.11666026135275953;  // std dev = 0.676, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.028297153636446755;  // std dev = 1.693, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18596206422091016;  // std dev = 0.157, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, D), follows(A, E) )
%   | | | then return 0.09721891994704479;  // std dev = 0.862, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.2265198790424191;  // std dev = 0.209, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.0738243324503445;  // std dev = 0.036, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.2077121754856484;  // std dev = 0.059, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.002826698942325234;  // std dev = 1.672, 94.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=25 */
%   | | | else return 0.08843597179315085;  // std dev = 1.689, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.16650246629354093;  // std dev = 0.250, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | | else return 0.08366862397044263;  // std dev = 0.974, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.26181744025941084;  // std dev = 0.061, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else return -0.08045028709099097;  // std dev = 0.336, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.15667156766261725;  // std dev = 0.019, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.08523183728934237;  // std dev = 0.528, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.031120082164497593;  // std dev = 0.265, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.011823203164328012;  // std dev = 0.348, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.048591086892086494;  // std dev = 1.687, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(F, B), follows(C, D) )
%   | | | then return 0.12372602968827205;  // std dev = 1.360, 88.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=86 */
%   | | | else return -0.30017648405723213;  // std dev = 1.187, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( tweets(A, G), follows(C, H) )
%   | | | then return 0.1733840233961788;  // std dev = 0.183, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2575205152759067;  // std dev = 0.088, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.07596311102641166;  // std dev = 0.336, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   else if ( follows(I, A) )
%   | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | then return 0.15333319183274952;  // std dev = 0.046, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.06530544637411347;  // std dev = 0.033, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( tweets(A, K) )
%   | | then return 0.1690222854603353;  // std dev = 0.559, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.07413557311180853;  // std dev = 0.319, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.014', 'seconds']
Refined model CLL: -0.102078


******************************************
Best model found
******************************************
Results 

CLL : -0.096717 

AUC ROC : 0.994224 

AUC PR : 0.412198 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 42.032 

Total Inference Time : 18.576102256774902 

Total revision time: 67.64178993797302
Best scored revision CLL: -0.102078


Results 

CLL : -0.096717 

AUC ROC : 0.994224 

AUC PR : 0.412198 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 67.66764476394653 

Total Inference Time : 18.576102256774902 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.948
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8379469148974912;  // std dev = 1.400, 99.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=97 */
%   | | else return 0.7936328060672536;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14179929360173354;  // std dev = 7.927, 399.000 (wgt'ed) examples reached here.  /* #neg=273 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.143849599171983;  // std dev = 7.415, 344.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=118 */
%   | | | else return 0.1547559079538901;  // std dev = 1.919, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6168474149126826;  // std dev = 2.396, 124.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=118 */
%   | else return -0.16096525901694442;  // std dev = 0.167, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13725064774933007;  // std dev = 1.855, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06316425882153438;  // std dev = 5.185, 282.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=89 */
%   | | else return 0.054106939033508966;  // std dev = 0.328, 123.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4714346745492749;  // std dev = 2.217, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14998924600016603;  // std dev = 0.163, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04628429660492904;  // std dev = 4.259, 282.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03154994828875645;  // std dev = 2.355, 95.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.041152659117039046;  // std dev = 4.605, 335.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=118 */
%   | | | else return 0.003437386003283583;  // std dev = 1.658, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3340944851088005;  // std dev = 1.968, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | | | else return -0.13911586999154135;  // std dev = 0.018, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07798808685361737;  // std dev = 1.475, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03217233964253568;  // std dev = 4.057, 328.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.496', 'seconds']
Parameter learned model CLL:-0.158529 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.4, 2, 97], 'false,true,false': [1.368, 2, 29], 'false,false': [0.0, 250, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.927, 273, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.415, 226, 118], 'false,false,false,false': [1.919, 14, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.396, 6, 118], 'true,false': [0.167, 241, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.855, 14, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.185, 193, 89], 'false,false,false': [0.328, 86, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.217, 5, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.163, 251, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.259, 185, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.355, 66, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.605, 217, 118], 'false,false,false,false': [1.658, 20, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.968, 4, 118], 'false,false,true,false': [0.018, 221, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.475, 13, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.057, 202, 126]}]
{'': [nan, 0.2216343490304736], 'false': [0.02982248520710475, -1.2789769243681802e-16], 'false,true': [0.019793898581778793, 0.06035379812695236]}
{'': [nan, 0.15750072272124316], 'false': [nan, 0.15750072272124774], 'false,false': [nan, 0.15750072272124316], 'false,false,false': [nan, 0.15750072272124774]}
{'': [nan, 0.16029411151629097], 'false': [nan, 0.16029411151629155], 'false,false': [nan, 0.16029411151629155], 'false,false,false': [0.15982774141064668, 0.16747464636004594]}
{'': [0.15150771168399146, 0.1564479709248633], 'false': [nan, 0.1564479709248633], 'false,false': [nan, 0.1564479709248633], 'false,false,false': [nan, 0.1564479709248633], 'true': [0.04628556510456763, 0.0001151898728407942]}
{'': [nan, 0.09909056453777794], 'false': [nan, 0.09909056453777751], 'false,false': [0.09534526843703754, 0.10762022026813378], 'false,false,true': [nan, 0.09534526843703754]}
{'': [nan, 0.09994687517119627], 'false': [nan, 0.09994687517119627], 'false,false': [0.03750672096058973, 0.00010592915398273179], 'false,false,false': [nan, 0.0001059291539827884]}
{'': [0.06432083080869794, 0.05839947777199802], 'true': [nan, 0.06432083080869794], 'false': [nan, 0.05839947777199802], 'false,false': [nan, 0.05839947777199802], 'false,false,false': [nan, 0.05839947777199802]}
{'': [nan, 0.06610479204670162], 'false': [nan, 0.06610479204670162], 'false,false': [nan, 0.06610479204670162], 'false,false,false': [0.06331239234365289, 0.09820113812707784]}
{'': [nan, 0.06510658265350973], 'false': [nan, 0.0651065826535092], 'false,false': [0.06261388996867139, 0.10357742713932092], 'false,false,false': [nan, 0.10357742713932092], 'false,false,true': [0.03175445470779715, 1.540968632748395e-06]}
{'': [nan, 0.05018186776150659], 'false': [nan, 0.050181867761506634], 'false,false': [nan, 0.05018186776150659]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 21.263
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, D), tweets(D, E) )
%   | | | then return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.14185106490048838;  // std dev = 0.000, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then return 0.7010754335499074;  // std dev = 0.147, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | else return 0.7230586405495557;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7194734122109542;  // std dev = 7.30e-08, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.31947341221095443;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.1067205140368153;  // std dev = 1.530, 143.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=3 */
%   | | | else return -0.004742059851341816;  // std dev = 2.710, 84.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.16843990085920738;  // std dev = 1.930, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return 0.11985415039593504;  // std dev = 2.135, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.5484933938550814;  // std dev = 0.110, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.22173793954737384;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(G, A) )
%   | | then if ( tweets(A, H), recursion_accounttype(F, B) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.013439042849399086;  // std dev = 1.041, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.6126020438364097;  // std dev = 0.104, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6742207550152554;  // std dev = 0.923, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.11748456829042837;  // std dev = 0.067, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.10062269278380345;  // std dev = 1.968, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.17350100471291033;  // std dev = 1.978, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3851818053677065;  // std dev = 1.696, 75.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=72 */
%   | | | else return 0.1668265949467526;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4599659253924955;  // std dev = 0.201, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.6241495639404328;  // std dev = 0.248, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.11527206748031524;  // std dev = 0.302, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4191860222129381;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.11513795194934118;  // std dev = 0.054, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.2992360278451776;  // std dev = 0.189, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.08267834306276259;  // std dev = 0.859, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3320014967520491;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.3386445572038435;  // std dev = 0.038, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(G, A) )
%   | then return -0.04239139775248782;  // std dev = 0.155, 217.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.38312644671986756;  // std dev = 0.952, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.14331067173694123;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09091925072559306;  // std dev = 1.041, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.275643309061187;  // std dev = 0.901, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.27404857454040704;  // std dev = 0.015, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.2310712046336233;  // std dev = 0.975, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( follows(G, D), follows(G, A) )
%   | | | then return 0.2660266397428461;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.30795817019000243;  // std dev = 0.128, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return 0.19786253481275676;  // std dev = 0.759, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.3540960452562361;  // std dev = 0.133, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.37322832418429147;  // std dev = 0.907, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.43639801319561544;  // std dev = 0.111, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.10173115489093322;  // std dev = 0.371, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2220444071371153;  // std dev = 0.033, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.14678211811546318;  // std dev = 0.953, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.07639120103731066;  // std dev = 0.884, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.224632256683864;  // std dev = 0.021, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.27883347158958427;  // std dev = 1.000, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.0805716664326889;  // std dev = 0.402, 155.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=1 */
%   | | else if ( follows(I, F), recursion_accounttype(I, B) )
%   | | | then return 0.24069339475349247;  // std dev = 1.484, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | | else return -0.12659860804842768;  // std dev = 0.262, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return -0.08126243561726108;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(E, C), follows(A, E) )
%   | | then if ( follows(A, C), follows(E, A) )
%   | | | then return 0.16343237313138037;  // std dev = 0.990, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return -0.09961950123555463;  // std dev = 1.197, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.19628568602720803;  // std dev = 0.028, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.18801392966163047;  // std dev = 0.097, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(F, A) )
%   | then return -0.04270817530722924;  // std dev = 0.120, 219.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.15517064942613587;  // std dev = 0.989, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.10342817714151552;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( tweets(A, I) )
%   | | | then return -7.812849122859959E-4;  // std dev = 0.764, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return -0.018594517505255613;  // std dev = 0.861, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.15056800217573196;  // std dev = 0.981, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.18962900358511936;  // std dev = 0.106, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.29113637905160733;  // std dev = 0.209, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.20683763773083683;  // std dev = 1.022, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else return -0.08087278513998632;  // std dev = 0.274, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.1526247090443602;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.0724743822787879;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.14677642965157348;  // std dev = 0.136, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.030490952197353854;  // std dev = 0.884, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.25659985401874547;  // std dev = 0.070, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13888703249149992;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.24339426324255226;  // std dev = 0.107, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.06912535833982317;  // std dev = 0.040, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.012812201677306036;  // std dev = 0.706, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return -0.01864921911338568;  // std dev = 0.998, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.661', 'seconds']
Refined model CLL: -0.100994


******************************************
Best model found
******************************************
Results 

CLL : -0.099786 

AUC ROC : 0.995147 

AUC PR : 0.399041 

Precision : 0.345324 

Recall : 0.923077 

F1 : 0.502618 

Total Learning Time : 21.263 

Total Inference Time : 13.320799350738525 

Total revision time: 40.167373929977416
Best scored revision CLL: -0.100994


Results 

CLL : -0.099786 

AUC ROC : 0.995147 

AUC PR : 0.399041 

Precision : 0.345324 

Recall : 0.923077 

F1 : 0.502618 

Total Learning Time : 45.885014568328856 

Total Inference Time : 13.320799350738525 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.405
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8085621582400064;  // std dev = 2.388, 121.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=115 */
%   | | else return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.14185106490048774;  // std dev = 8.33e-09, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14761883042624413;  // std dev = 8.800, 483.000 (wgt'ed) examples reached here.  /* #neg=327 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1289853574009008;  // std dev = 7.815, 395.000 (wgt'ed) examples reached here.  /* #neg=267 #pos=128 */
%   | | | else return 0.1450633738945574;  // std dev = 3.605, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6239758030613008;  // std dev = 2.397, 134.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=128 */
%   | else return -0.15905892285936568;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06309753243561614;  // std dev = 3.726, 103.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06548873880316461;  // std dev = 5.467, 309.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=97 */
%   | | else return 0.08420502377952974;  // std dev = 0.350, 178.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47020016655893837;  // std dev = 3.009, 165.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15288217316774866;  // std dev = 0.214, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05647311083995074;  // std dev = 4.809, 324.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.027503534313028058;  // std dev = 2.943, 134.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.0342733712616728;  // std dev = 4.818, 377.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=128 */
%   | | | else return 0.0467369350603489;  // std dev = 2.933, 88.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.33663578999830285;  // std dev = 1.975, 132.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=128 */
%   | | | else return -0.13904849894470914;  // std dev = 0.008, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05383196115069028;  // std dev = 2.862, 82.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015265634645147111;  // std dev = 4.935, 470.000 (wgt'ed) examples reached here.  /* #neg=314 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.734', 'seconds']
Parameter learned model CLL:-0.159913 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.388, 6, 115], 'false,true,false': [2.46e-07, 0, 41], 'false,false': [8.33e-09, 314, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.8, 327, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.815, 267, 128], 'false,false,false,false': [3.605, 53, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.397, 6, 128], 'true,false': [0.0, 269, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.726, 75, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.467, 212, 97], 'false,false,false': [0.35, 119, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [3.009, 9, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.214, 292, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.809, 209, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.943, 93, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.818, 249, 128], 'false,false,false,false': [2.933, 60, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.975, 4, 128], 'false,false,true,false': [0.008, 244, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.862, 54, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.935, 314, 156]}]
{'': [nan, 0.22032342348704487], 'false': [0.03566529492456011, 6.788624863950002e-17], 'false,true': [0.04712792842019318, 1.4730764034050857e-15]}
{'': [nan, 0.1603443558585874], 'false': [nan, 0.1603443558585916], 'false,false': [nan, 0.1603443558585874], 'false,false,false': [nan, 0.1603443558585916]}
{'': [nan, 0.15562701985335167], 'false': [nan, 0.15562701985334843], 'false,false': [nan, 0.15562701985334843], 'false,false,false': [0.15459943363465245, 0.16042357472659138]}
{'': [0.15034241649511562, 0.13479056000169123], 'true': [0.04287980395296795, -3.301778511896376e-18], 'false': [nan, 0.13479056000169123], 'false,false': [nan, 0.13479056000169123], 'false,false,false': [nan, 0.13479056000169123]}
{'': [nan, 0.10633361543080029], 'false': [nan, 0.1063336154307998], 'false,false': [0.09674210674453279, 0.12276177958942851], 'false,false,true': [nan, 0.09674210674453279]}
{'': [nan, 0.10947420600374934], 'false': [nan, 0.10947420600374934], 'false,false': [0.05487218743939083, 0.00015693899785623972], 'false,false,false': [nan, 0.00015693899785633098]}
{'': [0.07137577013211989, 0.06462742134360988], 'true': [nan, 0.07137577013211989], 'false': [nan, 0.06462742134360988], 'false,false': [nan, 0.06462742134360988], 'false,false,false': [nan, 0.06462742134360988]}
{'': [nan, 0.06844651430390473], 'false': [nan, 0.06844651430390473], 'false,false': [nan, 0.06844651430390473], 'false,false,false': [0.06158156191809117, 0.09773065174613614]}
{'': [nan, 0.0688110241436868], 'false': [nan, 0.06881102414368705], 'false,false': [0.061919675493534054, 0.09986031173170569], 'false,false,false': [nan, 0.09986031173170569], 'false,false,true': [0.029538395368890514, 2.5857628515600023e-07]}
{'': [nan, 0.0518166325033481], 'false': [nan, 0.05181663250334775], 'false,false': [nan, 0.0518166325033481]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 17.809
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.8368723393548312;  // std dev = 0.989, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.8581489350995121;  // std dev = 8.43e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8164822684328453;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   else return -0.14185106490048785;  // std dev = 9.88e-08, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.6951761491161336;  // std dev = 0.167, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else return 0.7237475776875623;  // std dev = 5.96e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7208621190540138;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.4068585879990681;  // std dev = 0.766, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7267858271949943;  // std dev = 0.083, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12544463852839177;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09932039133070185;  // std dev = 3.666, 95.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=25 */
%   | | | else return 0.24051652663771828;  // std dev = 2.500, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5604479920414409;  // std dev = 0.048, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.22120233564465938;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.11231637819360617;  // std dev = 9.88e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.5651480489531732;  // std dev = 0.126, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.11231637819360626;  // std dev = 4.83e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.4545961881276112;  // std dev = 0.319, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.10616105984556054;  // std dev = 3.568, 87.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=25 */
%   | | | else return 0.1659666019696406;  // std dev = 2.530, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.4156849929637136;  // std dev = 0.081, 92.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=91 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.454215403791211;  // std dev = 0.071, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6800041494516617;  // std dev = 0.083, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.1175530310765494;  // std dev = 0.386, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.41627829072433453;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10159632948783634;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -4.7199066013718524E-4;  // std dev = 0.714, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05693643042184526;  // std dev = 1.385, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.16908756685780368;  // std dev = 1.671, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.30711921205856757;  // std dev = 0.144, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return 0.31995393444629483;  // std dev = 0.000392, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.3292394662418598;  // std dev = 0.123, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.05974043905474211;  // std dev = 1.029, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.09191508559305776;  // std dev = 0.029, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.4957901921539942;  // std dev = 0.471, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.143798002983104;  // std dev = 0.107, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.060644812378360925;  // std dev = 2.057, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
%   | | | else return 0.04632211250732985;  // std dev = 1.909, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), tweets(D, F) )
%   | | | then return 0.23230505811028815;  // std dev = 1.264, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return 0.14140438483018392;  // std dev = 1.322, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.25944117617654994;  // std dev = 0.157, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.3248511542947422;  // std dev = 0.205, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2659954963926356;  // std dev = 0.119, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.39754662404637614;  // std dev = 0.062, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.5278526355759854;  // std dev = 0.202, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.10234394553898203;  // std dev = 0.518, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), follows(C, D) )
%   | | then return 0.21963019424601224;  // std dev = 0.080, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | else return -0.035642762811930156;  // std dev = 0.856, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.12000168846822586;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.20031511163314664;  // std dev = 0.165, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.07691235711410713;  // std dev = 0.023, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2589748310702782;  // std dev = 1.500, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return -0.12534117813549228;  // std dev = 0.367, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.02536688716077511;  // std dev = 0.865, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.04621886302328881;  // std dev = 1.373, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1865992430825206;  // std dev = 0.112, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return -0.24655550750104097;  // std dev = 0.959, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.19662862154268218;  // std dev = 0.219, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.07172341655378042;  // std dev = 0.025, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.26207679665620603;  // std dev = 0.328, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.09293650968653808;  // std dev = 0.940, 60.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01819977062621616;  // std dev = 1.055, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.014603226645793959;  // std dev = 1.401, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.14427329321020202;  // std dev = 1.002, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.11328487778084191;  // std dev = 1.280, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | else return 0.22016971362407417;  // std dev = 0.049, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else return -0.07636447650765671;  // std dev = 0.261, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.08580142869234694;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.06760319622024974;  // std dev = 5.27e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.06878393694565274;  // std dev = 0.394, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05946942871409912;  // std dev = 0.820, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.03454541237030453;  // std dev = 1.361, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.12783910204976737;  // std dev = 0.130, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else if ( follows(C, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.13750084997764364;  // std dev = 0.008, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.06009706823071511;  // std dev = 1.243, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.1451964442956833;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(G, A) )
%   | then return -0.04462141798900257;  // std dev = 0.081, 246.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.12272522222933495;  // std dev = 1.422, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return -0.10116535714283902;  // std dev = 0.728, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.025979631325594683;  // std dev = 0.528, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return -0.006892024394366045;  // std dev = 1.663, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.070', 'seconds']
Refined model CLL: -0.099346


******************************************
Best model found
******************************************
Results 

CLL : -0.09462 

AUC ROC : 0.994385 

AUC PR : 0.410275 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 17.809 

Total Inference Time : 16.17835831642151 

Total revision time: 40.88594843292236
Best scored revision CLL: -0.099346


Results 

CLL : -0.09462 

AUC ROC : 0.994385 

AUC PR : 0.410275 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 46.6035890712738 

Total Inference Time : 16.17835831642151 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.912
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8281489350995114;  // std dev = 1.706, 100.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=97 */
%   | | else return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14153098562411434;  // std dev = 7.926, 400.000 (wgt'ed) examples reached here.  /* #neg=274 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1615390131240352;  // std dev = 7.296, 324.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=118 */
%   | | | else return 0.1375994639981216;  // std dev = 1.936, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6286267922922224;  // std dev = 1.967, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else return -0.1626309913597063;  // std dev = 2.21e-07, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1159258727572577;  // std dev = 1.907, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0737575788916211;  // std dev = 5.069, 266.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=89 */
%   | | else return 0.07593123054220877;  // std dev = 0.333, 110.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.43979013785705673;  // std dev = 2.789, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1530848954217592;  // std dev = 0.135, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06180855393239242;  // std dev = 4.194, 258.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03410424374248545;  // std dev = 2.358, 87.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.02419890923158921;  // std dev = 4.706, 357.000 (wgt'ed) examples reached here.  /* #neg=239 #pos=118 */
%   | | | else return 0.14343949312035242;  // std dev = 1.385, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.34055524194371917;  // std dev = 1.710, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | | | else return -0.14175887993480632;  // std dev = 0.020, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04547278892116786;  // std dev = 1.689, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.004231342670502748;  // std dev = 4.334, 383.000 (wgt'ed) examples reached here.  /* #neg=257 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.460', 'seconds']
Parameter learned model CLL:-0.157141 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.706, 3, 97], 'false,true,false': [0.983, 1, 29], 'false,false': [0.0, 253, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.926, 274, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.296, 206, 118], 'false,false,false,false': [1.936, 16, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.967, 4, 118], 'true,false': [2.21e-07, 224, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.907, 16, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.069, 177, 89], 'false,false,false': [0.333, 73, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.789, 8, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.135, 253, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.194, 161, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.358, 58, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.706, 239, 118], 'false,false,false,false': [1.385, 9, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.71, 3, 118], 'false,false,true,false': [0.02, 223, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.689, 25, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.334, 257, 126]}]
{'': [nan, 0.22075274901322112], 'false': [0.02982248520710475, -1.1584935909132068e-16], 'false,true': [0.029100000000001527, 0.03222222222222335]}
{'': [nan, 0.15705942285629612], 'false': [nan, 0.15705942285630095], 'false,false': [nan, 0.15705942285629612], 'false,false,false': [nan, 0.15705942285630095]}
{'': [nan, 0.163778807307601], 'false': [nan, 0.1637788073076006], 'false,false': [nan, 0.1637788073076006], 'false,false,false': [0.16430499829338233, 0.15614165126391116]}
{'': [0.1541011707881357, 0.15160550584219668], 'true': [0.03171180811727732, 2.1807952269422717e-16], 'false': [nan, 0.15160550584219668], 'false,false': [nan, 0.15160550584219668], 'false,false,false': [nan, 0.15160550584219668]}
{'': [nan, 0.10085579323763606], 'false': [nan, 0.10085579323763628], 'false,false': [0.09660938108684626, 0.11112104737573968], 'false,false,true': [nan, 0.09660938108684626]}
{'': [nan, 0.09970777617332174], 'false': [nan, 0.09970777617332174], 'false,false': [0.0580341135123999, 7.170366120493296e-05], 'false,false,false': [nan, 7.170366120506284e-05]}
{'': [0.06818953117722087, 0.06388336736610405], 'true': [nan, 0.06818953117722087], 'false': [nan, 0.06388336736610405], 'false,false': [nan, 0.06388336736610405], 'false,false,false': [nan, 0.06388336736610405]}
{'': [nan, 0.06496634468425001], 'false': [nan, 0.06496634468425001], 'false,false': [nan, 0.06496634468425001], 'false,false,false': [0.06203784705583248, 0.11289276516425555]}
{'': [nan, 0.06415266646842964], 'false': [nan, 0.06415266646842936], 'false,false': [0.06154243031990514, 0.08645110512020616], 'false,false,false': [nan, 0.08645110512020616], 'false,false,true': [0.02415866456849468, 1.7312732149890809e-06]}
{'': [nan, 0.04904919028281447], 'false': [nan, 0.04904919028281395], 'false,false': [nan, 0.04904919028281447]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 34.392
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, G), recursion_accounttype(E, B) )
%   | | | then return 0.8402917922423695;  // std dev = 0.991, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.6914822684328454;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.858148935099512;  // std dev = 1.46e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( tweets(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.7152917922423694;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.14185106490048818;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7092590802388268;  // std dev = 0.121, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return 0.6569734122109543;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(E, G), tweets(A, G) )
%   | | | then return 0.22306337965279774;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.7218667238388501;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7296247949110118;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10950278851444128;  // std dev = 1.450, 159.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=3 */
%   | | | else return -0.003287811915473729;  // std dev = 2.707, 83.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.062314928302574533;  // std dev = 2.108, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
%   | | | else return 0.13268253023734983;  // std dev = 2.160, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5647957277871993;  // std dev = 0.078, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.475805920124155;  // std dev = 0.989, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.7243161717902519;  // std dev = 0.032, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.11746933986155857;  // std dev = 0.073, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.6655639903570433;  // std dev = 0.223, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.13244216293387387;  // std dev = 1.29e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.09716733746036059;  // std dev = 1.407, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.06351779258278667;  // std dev = 1.807, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4105891449950018;  // std dev = 0.999, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | | else return 0.26221254993081666;  // std dev = 1.569, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.4219609639319506;  // std dev = 0.018, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5387464432268123;  // std dev = 1.373, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | else return -0.1119770887950549;  // std dev = 0.221, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.41770451531969227;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.11765085734541228;  // std dev = 0.067, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.30858826684663515;  // std dev = 0.136, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( tweets(A, D) )
%   | | | then return -0.007026307778524273;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.33138250792704055;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.3851777504772693;  // std dev = 0.058, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.3237415908028538;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.20973018006759014;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then return -0.05776412163788898;  // std dev = 0.135, 208.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.08004608907889477;  // std dev = 1.320, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return 0.04997962839585462;  // std dev = 1.811, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( follows(E, A), tweets(E, F) )
%   | | | then return 0.27091357627858537;  // std dev = 0.209, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.17628348068129931;  // std dev = 0.967, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( tweets(A, G), follows(D, A) )
%   | | | then return 0.2718786198119391;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.07237470242689663;  // std dev = 1.341, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.2579150676299657;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4405775104755457;  // std dev = 0.041, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2811702268299867;  // std dev = 1.206, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.40575609343465235;  // std dev = 0.794, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.09851400837501935;  // std dev = 0.248, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then return 0.21551521665203685;  // std dev = 0.035, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return 0.17473453522144786;  // std dev = 0.234, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( follows(C, E), follows(F, A) )
%   | | then if ( follows(A, E), follows(E, F) )
%   | | | then return -0.14714648346135512;  // std dev = 1.310, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.27225513752811764;  // std dev = 0.085, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.28741627311010426;  // std dev = 0.173, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.21522998712629682;  // std dev = 0.041, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then return -0.05552629020399484;  // std dev = 0.104, 227.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -8.516115588548332E-4;  // std dev = 1.059, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.03229693515151591;  // std dev = 1.532, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.16802820055044854;  // std dev = 0.120, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return 0.19812324751257857;  // std dev = 0.110, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.2618280378214439;  // std dev = 0.152, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.01995908479038805;  // std dev = 0.808, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2832983090910597;  // std dev = 0.117, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.06884292749076118;  // std dev = 0.844, 131.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=3 */
%   | | | else return -0.017470578780584133;  // std dev = 1.363, 77.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.002351793796531957;  // std dev = 1.336, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | | | else return 0.049084541524214396;  // std dev = 1.257, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.1613376209693161;  // std dev = 0.097, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.06195146416479971;  // std dev = 0.962, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.301203088147992;  // std dev = 0.410, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.43730967691191064;  // std dev = 0.146, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.08397502064732534;  // std dev = 0.314, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   else return 0.010777760688112247;  // std dev = 0.112, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.0989158808681553;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.13961884410323028;  // std dev = 0.022, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.1587927185060663;  // std dev = 0.053, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.15020130691719016;  // std dev = 0.075, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then return -0.03958390632432696;  // std dev = 0.095, 247.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.13748634624692965;  // std dev = 1.027, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.09832273634011482;  // std dev = 0.007, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.06242351877315171;  // std dev = 0.736, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.041750122249720405;  // std dev = 0.891, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.251', 'seconds']
Refined model CLL: -0.10426


******************************************
Best model found
******************************************
Results 

CLL : -0.103797 

AUC ROC : 0.994662 

AUC PR : 0.381605 

Precision : 0.342926 

Recall : 0.916667 

F1 : 0.499127 

Total Learning Time : 34.392 

Total Inference Time : 11.87763500213623 

Total revision time: 52.01103506469727
Best scored revision CLL: -0.10426


Results 

CLL : -0.103797 

AUC ROC : 0.994662 

AUC PR : 0.381605 

Precision : 0.342926 

Recall : 0.916667 

F1 : 0.499127 

Total Learning Time : 52.02907190704346 

Total Inference Time : 11.87763500213623 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.49
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.141851064900488;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17303327985209704;  // std dev = 8.507, 439.000 (wgt'ed) examples reached here.  /* #neg=283 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1266374070685556;  // std dev = 7.690, 389.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=128 */
%   | | | else return 0.10204909320727026;  // std dev = 3.683, 93.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6398615561971355;  // std dev = 1.403, 130.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=128 */
%   | else return -0.16216859648977094;  // std dev = 1.98e-07, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1598913598469459;  // std dev = 3.390, 72.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09006216081542184;  // std dev = 5.097, 266.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=97 */
%   | | else return 0.0819592139585089;  // std dev = 0.344, 174.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46942582945385186;  // std dev = 2.332, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16167222000832004;  // std dev = 0.286, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03628124184230304;  // std dev = 4.681, 335.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.013663232181916604;  // std dev = 3.117, 130.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.023745397294510293;  // std dev = 4.843, 373.000 (wgt'ed) examples reached here.  /* #neg=245 #pos=128 */
%   | | | else return 0.0598439209191615;  // std dev = 2.820, 77.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3443556351175375;  // std dev = 0.998, 129.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=128 */
%   | | | else return -0.13933765219435063;  // std dev = 0.021, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.033991563121617545;  // std dev = 2.806, 84.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.021088654215655898;  // std dev = 4.902, 418.000 (wgt'ed) examples reached here.  /* #neg=262 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.588', 'seconds']
Parameter learned model CLL:-0.16263 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [6.19e-07, 0, 115], 'false,true,false': [2.46e-07, 0, 41], 'false,false': [0.0, 278, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.507, 283, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.69, 261, 128], 'false,false,false,false': [3.683, 65, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.403, 2, 128], 'true,false': [1.98e-07, 254, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.39, 44, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.097, 169, 97], 'false,false,false': [0.344, 115, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.332, 5, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.286, 273, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.681, 220, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.117, 89, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.843, 245, 128], 'false,false,false,false': [2.82, 49, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.998, 1, 128], 'false,false,true,false': [0.021, 250, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.806, 56, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.902, 262, 156]}]
{'': [nan, 0.23024485548642257], 'false': [6.012284687200848e-15, -3.1948864017990115e-17], 'false,true': [3.3364615418300357e-15, 1.4730764034050857e-15]}
{'': [nan, 0.16486662244311842], 'false': [nan, 0.164866622443123], 'false,false': [nan, 0.16486662244311842], 'false,false,false': [nan, 0.164866622443123]}
{'': [nan, 0.15092308789379763], 'false': [nan, 0.15092308789380274], 'false,false': [nan, 0.15092308789380274], 'false,false,false': [0.15202435421344132, 0.14582878301706484]}
{'': [0.1491724835525671, 0.15965642417985776], 'false': [nan, 0.15965642417985776], 'false,false': [nan, 0.15965642417985776], 'false,false,false': [nan, 0.15965642417985776], 'true': [0.015147928994080054, 1.538576790031713e-16]}
{'': [nan, 0.10599211120657988], 'false': [nan, 0.10599211120658021], 'false,false': [0.09767992385395077, 0.11865955510096422], 'false,false,true': [nan, 0.09767992385395077]}
{'': [nan, 0.10565497830518118], 'false': [nan, 0.10565497830518118], 'false,false': [0.033768401613703175, 0.00029883247171844145], 'false,false,false': [nan, 0.00029883247171850005]}
{'': [0.06540361817779622, 0.07475552611377646], 'false': [nan, 0.07475552611377646], 'false,false': [nan, 0.07475552611377646], 'false,false,false': [nan, 0.07475552611377646], 'true': [nan, 0.06540361817779622]}
{'': [nan, 0.06998459365452968], 'false': [nan, 0.06998459365452968], 'false,false': [nan, 0.06998459365452968], 'false,false,false': [0.06288779730307162, 0.10328245323936378]}
{'': [nan, 0.06216527802420513], 'false': [nan, 0.062165278024205524], 'false,false': [0.055159295326448976, 0.09371372050669964], 'false,false,false': [nan, 0.09371372050669964], 'false,false,true': [0.007727025775279301, 1.796787978484815e-06]}
{'': [nan, 0.057485437799329506], 'false': [nan, 0.05748543779932898], 'false,false': [nan, 0.057485437799329506]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 22.506
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8282981888308559;  // std dev = 1.393, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995121;  // std dev = 1.19e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.1418510649004878;  // std dev = 1.26e-07, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then if ( tweets(C, E), tweets(A, E) )
%   | | then return 0.7255543911033913;  // std dev = 0.050, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( tweets(A, F), follows(C, A) )
%   | | | then return 0.49987914468344474;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7198474848770331;  // std dev = 0.006, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.388135133096708;  // std dev = 1.158, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, G), follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.7198724230547716;  // std dev = 0.006, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.12544463852839138;  // std dev = 3.65e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.7245608004696259;  // std dev = 0.010, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.07850474682064995;  // std dev = 1.422, 54.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=3 */
%   | | | else return 0.11424842551113853;  // std dev = 4.523, 141.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.5659703305884405;  // std dev = 0.186, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.25249006680296526;  // std dev = 0.857, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return 0.5759188211298744;  // std dev = 0.249, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2818592371636371;  // std dev = 0.899, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.11356823110691144;  // std dev = 0.031, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6652248593721205;  // std dev = 0.355, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.13852411479924337;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.11820569961300344;  // std dev = 1.388, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.07006885941070716;  // std dev = 1.912, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.427496396507538;  // std dev = 0.190, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.32844666638799114;  // std dev = 1.244, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else return 0.5016836014534743;  // std dev = 0.065, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return -0.10723468825469826;  // std dev = 0.142, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.48682674162506934;  // std dev = 0.107, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.11865355984071675;  // std dev = 0.128, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5013573624504196;  // std dev = 0.215, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10584304429763529;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.08471742478131077;  // std dev = 0.372, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3248852160150058;  // std dev = 0.242, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.02519639785211362;  // std dev = 0.761, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3589015514411034;  // std dev = 0.261, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(G, D), tweets(D, H) )
%   | | | then return -0.09014257164834262;  // std dev = 0.853, 224.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=2 */
%   | | | else return -0.1721064392141677;  // std dev = 0.492, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.3827831784751122;  // std dev = 0.337, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.12784447273720004;  // std dev = 0.800, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.1644486684422019;  // std dev = 1.162, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.11774530291905978;  // std dev = 1.873, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.26034489944104294;  // std dev = 0.221, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | | else return 0.4128418814810913;  // std dev = 0.123, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(E, A), follows(A, D) )
%   | | | then return 0.0446079223195259;  // std dev = 1.160, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.27896607640710036;  // std dev = 0.222, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(G, B) )
%   | | | then return 0.20883427555915918;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.33496314378723047;  // std dev = 0.116, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5145262933700612;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.635311311643744;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09426375352521857;  // std dev = 0.369, 331.000 (wgt'ed) examples reached here.  /* #neg=331 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.20712596395433938;  // std dev = 0.049, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.13460321578045686;  // std dev = 0.961, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.21755595116947793;  // std dev = 0.027, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.2271116830246907;  // std dev = 0.026, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2064973485429511;  // std dev = 0.203, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.07840222683426468;  // std dev = 0.018, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17641893022532107;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.01906191968824282;  // std dev = 1.444, 79.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=25 */
%   | | | else return 0.07564922251449435;  // std dev = 1.700, 37.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.1820212269051457;  // std dev = 0.111, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else return 0.1368170095633308;  // std dev = 0.206, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07340603613389549;  // std dev = 0.072, 128.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.16211794287083744;  // std dev = 1.037, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.07277854882489534;  // std dev = 0.015, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.22807779264277722;  // std dev = 0.224, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.09618022950119853;  // std dev = 0.072, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.10661787345589785;  // std dev = 0.745, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.006389830325063942;  // std dev = 1.897, 74.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=23 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.13230313322831988;  // std dev = 1.402, 70.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=68 */
%   | | | else return 0.057676448460785505;  // std dev = 1.186, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.15894752215263638;  // std dev = 0.996, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.23934025192541608;  // std dev = 0.183, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.07379870615744025;  // std dev = 0.194, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
%   else if ( follows(H, A) )
%   | then return -0.002922089287033265;  // std dev = 0.109, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.34554682901449996;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.17141974690095793;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.06028451841978784;  // std dev = 0.305, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(E, A), follows(E, C) )
%   | | | then return 0.1058593872130774;  // std dev = 0.978, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.14110446345584285;  // std dev = 0.047, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.16686762977004593;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1492461983598971;  // std dev = 0.108, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.06375671610960913;  // std dev = 0.059, 135.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=2 */
%   | | else return -0.01559852999559635;  // std dev = 0.097, 101.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.11231268513927684;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.014273895212999375;  // std dev = 1.153, 73.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=19 */
%   | | | else return 0.02673106821727235;  // std dev = 1.609, 60.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.079', 'seconds']
Refined model CLL: -0.099651


******************************************
Best model found
******************************************
Results 

CLL : -0.096152 

AUC ROC : 0.993866 

AUC PR : 0.404073 

Precision : 0.344262 

Recall : 1.0 

F1 : 0.512195 

Total Learning Time : 22.506 

Total Inference Time : 13.759371757507324 

Total revision time: 43.76618141746521
Best scored revision CLL: -0.099651


Results 

CLL : -0.096152 

AUC ROC : 0.993866 

AUC PR : 0.404073 

Precision : 0.344262 

Recall : 1.0 

F1 : 0.512195 

Total Learning Time : 43.784218259811404 

Total Inference Time : 13.759371757507324 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.136
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8273797043302796;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6589748034316016;  // std dev = 2.898, 135.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283919;  // std dev = 0.000, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5470056033471378;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360683;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.40913640474482604;  // std dev = 1.967, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.44192328999072844;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783619;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.32186160871491065;  // std dev = 1.649, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 8.16e-08, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | | else return -0.09269127618926086;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2677227986632435;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18807571218877606;  // std dev = 2.150, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 5.96e-08, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16355468708094964;  // std dev = 1.968, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333664;  // std dev = 1.29e-07, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.073246225763337;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.147350567140737;  // std dev = 0.147, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 2.98e-08, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11203086602565858;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 1.61e-09, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.203', 'seconds']
Parameter learned model CLL:-0.092628 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 241, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.898, 9, 126], 'false,true': [0.0, 268, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 247, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.967, 4, 118], 'true,false': [0.0, 232, 0], 'false,true,true': [5.27e-09, 0, 8], 'false,true,false': [0.0, 23, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.649, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.16e-08, 238, 0], 'false,false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 242, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.15, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.96e-08, 254, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.968, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.29e-07, 224, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.147, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.98e-08, 242, 0], 'false,false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.61e-09, 247, 0]}]
{'': [0.02982248520710475, -1.6584244351247152e-16], 'false': [-1.6584244351247152e-16, nan]}
{'': [0.06222222222222411, -7.291016878135356e-17], 'false': [-7.291016878135356e-17, nan]}
{'': [0.02982248520710016, -8.98966011842232e-17], 'false': [nan, -8.98966011842232e-17]}
{'': [0.06984434120790396, 0.05656201677783009], 'true': [0.031711905401773995, -7.656710514656253e-17], 'false': [0.05656201677783009, nan], 'false,true': [2.7755575615628914e-17, -1.206764157201257e-17]}
{'': [0.021071172013964183, 4.229421046191072e-17], 'true': [0.021071172013964183, nan], 'false': [nan, 4.229421046191072e-17], 'false,false': [2.7988815746852685e-17, -5.9476233462061954e-18], 'false,false,true': [nan, 2.7988815746852685e-17]}
{'': [0.0078080606262612645, 3.303142883182284e-17], 'false': [nan, 3.303142883182284e-17], 'false,false': [nan, 3.303142883182284e-17]}
{'': [0.035277532877037825, 1.3987061727561027e-17], 'false': [nan, 1.3987061727561027e-17], 'false,false': [nan, 1.3987061727561027e-17], 'false,false,false': [1.3987061727561027e-17, nan]}
{'': [0.02980471190295513, 5.981609765327374e-17], 'true': [0.02980471190295513, nan], 'false': [7.434529182757744e-17, -1.32169407693471e-18], 'false,false': [nan, -1.32169407693471e-18]}
{'': [0.021547324640375322, -1.3877787807814457e-17], 'false': [nan, -1.3877787807814457e-17], 'false,false': [3.670158759091427e-18, -2.9738116731030977e-18], 'false,false,true': [nan, 3.670158759091427e-18]}
{'': [0.036692818677309585, 2.696898035526696e-18], 'false': [nan, 2.696898035526696e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 41.649
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), follows(A, E) )
%   | | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.7018989350995122;  // std dev = 2.054, 32.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=27 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.14185106490048793;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( follows(D, A), tweets(D, F) )
%   | | | then return 0.7083360201581205;  // std dev = 0.971, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.7563119300578027;  // std dev = 0.080, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(D, G), follows(H, A) )
%   | | | then return 0.40135543941880586;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.7346887727521393;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.719473412210955;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.12544463852839186;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), recursion_accounttype(D, B) )
%   | | | then return 0.5603790696454363;  // std dev = 0.065, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.5307653410640739;  // std dev = 0.964, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0.577110838211726;  // std dev = 0.158, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.5717041232937935;  // std dev = 0.113, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.4612686623997533;  // std dev = 1.257, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return 0.5549904073934346;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360689;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4314510333449623;  // std dev = 0.215, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.26620831711132903;  // std dev = 1.531, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.42453883076007115;  // std dev = 0.068, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4180983623785671;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1015963294878362;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.3109471794019881;  // std dev = 0.965, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | | else return 0.37271577272371265;  // std dev = 0.098, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.39729053555230603;  // std dev = 0.139, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(A, F) )
%   | | then return 0.3214684078024723;  // std dev = 0.050, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.1856572543387561;  // std dev = 0.789, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.32559845289970685;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926051;  // std dev = 6.50e-08, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else return -0.09269127618926087;  // std dev = 5.27e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), follows(A, D) )
%   | | | then return 0.2557919425405934;  // std dev = 0.014, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.2889873353217438;  // std dev = 0.089, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.2538232740661999;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2665768468429129;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(I, A) )
%   | | | then return 0.30842770993962004;  // std dev = 0.105, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.028307948123290207;  // std dev = 1.431, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.17537991332291394;  // std dev = 0.955, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.26758944276645147;  // std dev = 0.071, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.18205926861169502;  // std dev = 1.370, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | | else return 0.21879855854061392;  // std dev = 0.122, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2926400883139757;  // std dev = 0.065, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21525690196605204;  // std dev = 0.024, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(J, A), recursion_accounttype(I, B) )
%   | | | then return 0.1854462186183569;  // std dev = 1.018, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.022175422347437135;  // std dev = 0.844, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.08195152739314666;  // std dev = 0.331, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, K) )
%   | then return -0.07877675473109146;  // std dev = 4.66e-09, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else return -0.0787767547310917;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.13847923631925557;  // std dev = 1.682, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | | | else return 0.19080823279870576;  // std dev = 0.105, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.00866267561330376;  // std dev = 0.846, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.1840426256903579;  // std dev = 0.026, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.197444631311045;  // std dev = 0.051, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.26902019518009945;  // std dev = 0.067, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.19557610265149103;  // std dev = 0.078, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333664;  // std dev = 8.64e-09, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return -0.07324622576333699;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.16120692230335645;  // std dev = 0.045, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.12593768537760566;  // std dev = 0.968, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return -0.14385315805906426;  // std dev = 1.100, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1578866934516005;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.19000043890147425;  // std dev = 0.080, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.23508315518195655;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.15856277191313822;  // std dev = 0.040, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1771098331874301;  // std dev = 0.041, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420265;  // std dev = 4.47e-09, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), follows(D, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1283387009378597;  // std dev = 0.998, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return -0.0020244144907948236;  // std dev = 0.927, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return 0.17180361982475328;  // std dev = 0.088, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.14858940412753294;  // std dev = 0.117, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then return -0.03495592633139757;  // std dev = 0.893, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1378374937710957;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14642999581824026;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, J) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.740', 'seconds']
Refined model CLL: -0.091036


******************************************
Best model found
******************************************
Results 

CLL : -0.085336 

AUC ROC : 0.996146 

AUC PR : 0.490911 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 41.649 

Total Inference Time : 9.48947811126709 

Total revision time: 66.80086270332336
Best scored revision CLL: -0.091036


Results 

CLL : -0.085336 

AUC ROC : 0.996146 

AUC PR : 0.490911 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 66.83222666740417 

Total Inference Time : 9.48947811126709 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.992
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8517795083479174;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048785;  // std dev = 8.43e-08, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6778123784674109;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839205;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.548325168884301;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360688;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3933705264450466;  // std dev = 2.194, 133.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=128 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3964817527867627;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.10159632948783619;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3010512537078839;  // std dev = 2.403, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 9.42e-08, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2616427181032794;  // std dev = 1.406, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.96e-09, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20651837907457965;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 2.11e-08, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17872139724495295;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333675;  // std dev = 1.21e-07, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15886637617584062;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | | else return -0.06842697784420262;  // std dev = 2.46e-09, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1385631213431582;  // std dev = 0.074, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820259;  // std dev = 7.27e-09, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.044', 'seconds']
Parameter learned model CLL:-0.087773 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.997, 1, 156], 'false,true': [8.43e-08, 297, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.588, 7, 156], 'false,true': [0.0, 324, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 294, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.194, 5, 128], 'true,false': [0.0, 268, 0], 'false,true,true': [0.182, 1, 28], 'false,true,false': [0.0, 54, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.403, 6, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.42e-08, 245, 0], 'false,false,false': [0.0, 46, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.406, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 287, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.11e-08, 325, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.405, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.21e-07, 245, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 52, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.08, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 249, 0], 'false,false,false': [2.46e-09, 58, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.074, 1, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.27e-09, 315, 0]}]
{'': [0.006328857154454536, 2.392399783704041e-17], 'false': [2.392399783704041e-17, nan]}
{'': [0.04110053069366295, -9.320390824013659e-17], 'false': [-9.320390824013659e-17, nan]}
{'': [0.018511925952296917, -9.516197353929913e-17], 'false': [nan, -9.516197353929913e-17]}
{'': [0.06630633905292417, 0.0680264178134404], 'false': [0.0680264178134404, nan], 'false,true': [0.03329369797859679, 0.0], 'true': [0.03618067725705171, -6.296787303844171e-17]}
{'': [0.03565645315655534, 8.088222722355092e-17], 'true': [0.03565645315655534, nan], 'false': [nan, 8.088222722355092e-17], 'false,false': [3.6252180395923476e-17, -2.413528314402514e-17], 'false,false,true': [nan, 3.6252180395923476e-17]}
{'': [0.012503014045397307, 3.558903075453463e-17], 'false': [nan, 3.558903075453463e-17], 'false,false': [nan, 3.558903075453463e-17]}
{'': [0.0185150621675256, 1.3664283380001927e-18], 'false': [nan, 1.3664283380001927e-18], 'false,false': [nan, 1.3664283380001927e-18], 'false,false,false': [1.3664283380001927e-18, nan]}
{'': [0.012501886806662262, 3.289549702593056e-17], 'true': [0.012501886806662262, nan], 'false': [5.981609765327374e-17, -1.0675221390626506e-17], 'false,false': [nan, -1.0675221390626506e-17]}
{'': [0.006327909794893414, -6.220142027215861e-17], 'false': [nan, -6.220142027215861e-17], 'false,false': [-4.458727006526733e-18, 6.699621700324221e-18], 'false,false,true': [nan, -4.458727006526733e-18]}
{'': [0.005443885266502059, 5.427757009278543e-17], 'false': [nan, 5.427757009278543e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 24.294
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( follows(A, E), follows(E, D) )
%   | | | then return 0.7405018762759829;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.858148935099512;  // std dev = 2.38e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.1418510649004878;  // std dev = 1.23e-07, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.7236004819855105;  // std dev = 0.120, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.5194734122109543;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.6401578055602438;  // std dev = 0.911, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.12544463852839202;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5633546161375779;  // std dev = 0.228, 128.000 (wgt'ed) examples reached here.  /* #pos=128 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then return 0.48768042245506643;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.11231637819360663;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #neg=329 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.40683733869414435;  // std dev = 0.976, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | | | else return 0.3146243668405255;  // std dev = 0.903, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.43038061718733284;  // std dev = 0.192, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4309759419752969;  // std dev = 0.020, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.09453591068419735;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4175135841583098;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.10159632948783624;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.3301491172767212;  // std dev = 0.152, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else return 0.048723238749279106;  // std dev = 1.167, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.3245757291588141;  // std dev = 0.138, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926051;  // std dev = 1.07e-07, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else return -0.09269127618926103;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.2531106148819731;  // std dev = 3.65e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.2553388218902558;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.27902412392449266;  // std dev = 0.150, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.25905360412821044;  // std dev = 0.030, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H), follows(I, A) )
%   | | then if ( follows(H, A), follows(H, I) )
%   | | | then return -0.07189306468818735;  // std dev = 0.826, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.22506692120302563;  // std dev = 0.940, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.26729875369352035;  // std dev = 0.170, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.2207597291473277;  // std dev = 0.908, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.19645391376393095;  // std dev = 0.999, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | | else return 0.06291737329313164;  // std dev = 1.296, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return -0.018294487966312372;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.212910525066833;  // std dev = 0.024, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.23191202819801357;  // std dev = 0.089, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.20442974069254566;  // std dev = 0.006, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.21253478694596173;  // std dev = 0.008, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.07877675473109143;  // std dev = 2.98e-08, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(A, E) )
%   | | | then return 0.154757646036965;  // std dev = 0.989, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.19198172410020828;  // std dev = 0.176, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2398849545045042;  // std dev = 0.166, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1804762062710418;  // std dev = 0.082, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.1773823645659025;  // std dev = 0.029, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.19794667988676753;  // std dev = 0.060, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.09975609800162295;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17913116044080474;  // std dev = 0.007, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.07324622576333703;  // std dev = 4.93e-09, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(A, F), follows(A, D) )
%   | | | then return 0.15485920463603411;  // std dev = 0.016, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.16094654936077532;  // std dev = 0.112, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.1777122503149537;  // std dev = 0.115, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.20202342394710032;  // std dev = 1.543, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.1051070186119791;  // std dev = 0.944, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.16641804349665346;  // std dev = 0.068, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.15169948262901817;  // std dev = 0.019, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else if ( follows(A, J) )
%   | then return -0.0684269778442028;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   | else return -0.06842697784420262;  // std dev = 1.83e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.1375355881962306;  // std dev = 0.106, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | | else return 0.07817714039401796;  // std dev = 1.292, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return 0.20645355502110244;  // std dev = 0.166, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(G, F), follows(A, G) )
%   | | | then return 0.17308312780565963;  // std dev = 0.157, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.0488951506990192;  // std dev = 1.327, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.13171283242939477;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.13660125766966136;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(I, A) )
%   | then return -0.06419184008202625;  // std dev = 1.61e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.644', 'seconds']
Refined model CLL: -0.084472


******************************************
Best model found
******************************************
Results 

CLL : -0.090269 

AUC ROC : 0.995445 

AUC PR : 0.479183 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 24.294 

Total Inference Time : 8.776713132858276 

Total revision time: 55.34633182144165
Best scored revision CLL: -0.084472


Results 

CLL : -0.090269 

AUC ROC : 0.995445 

AUC PR : 0.479183 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 55.37769578552246 

Total Inference Time : 8.776713132858276 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.974
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8379469148974912;  // std dev = 1.400, 99.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=97 */
%   | | else return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else return -0.14185106490048832;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1444202806957852;  // std dev = 7.890, 395.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12707777996635933;  // std dev = 7.512, 363.000 (wgt'ed) examples reached here.  /* #neg=245 #pos=118 */
%   | | | else return 0.1253231690000455;  // std dev = 1.950, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6261270622691534;  // std dev = 2.192, 123.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=118 */
%   | else return -0.15837711989130873;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15599905713009987;  // std dev = 1.835, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0765235271549004;  // std dev = 5.155, 263.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=89 */
%   | | else return 0.08511238880060856;  // std dev = 0.334, 108.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4668880795276506;  // std dev = 2.184, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1510339965042054;  // std dev = 0.174, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03869001108244662;  // std dev = 4.332, 290.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0028003239476605338;  // std dev = 2.522, 109.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.02395552776547897;  // std dev = 4.784, 365.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=118 */
%   | | | else return 6.053910644021258E-4;  // std dev = 1.605, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.33758125626424756;  // std dev = 1.973, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | | | else return -0.13610677653449887;  // std dev = 0.026, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0395817931334134;  // std dev = 1.598, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.004040878815625044;  // std dev = 4.458, 389.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.551', 'seconds']
Parameter learned model CLL:-0.151724 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.4, 2, 97], 'false,true,false': [0.983, 1, 29], 'false,false': [0.0, 241, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.89, 269, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.512, 245, 118], 'false,false,false,false': [1.95, 17, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.192, 5, 118], 'true,false': [0.0, 211, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.835, 13, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.155, 174, 89], 'false,false,false': [0.334, 71, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.184, 5, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.174, 237, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.332, 193, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.522, 80, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.784, 247, 118], 'false,false,false,false': [1.605, 22, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.973, 4, 118], 'false,false,true,false': [0.026, 255, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.598, 15, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.458, 263, 126]}]
{'': [nan, 0.22457268078889978], 'false': [0.022714981070853308, -1.6584244351247152e-16], 'false,true': [0.019793898581778793, 0.03222222222222335]}
{'': [nan, 0.15758525802293225], 'false': [nan, 0.1575852580229369], 'false,false': [nan, 0.15758525802293225], 'false,false,false': [nan, 0.1575852580229369]}
{'': [nan, 0.1552376252965953], 'false': [nan, 0.15523762529659563], 'false,false': [nan, 0.15523762529659563], 'false,false,false': [0.1554574727493376, 0.1520425599903823]}
{'': [0.1575635793504229, 0.1603638913675436], 'false': [nan, 0.1603638913675436], 'false,false': [nan, 0.1603638913675436], 'false,false,false': [nan, 0.1603638913675436], 'true': [0.03905534177164951, -2.104688198341529e-16]}
{'': [nan, 0.10408292950154112], 'false': [nan, 0.10408292950154277], 'false,false': [0.10103968045101952, 0.11144151036088736], 'false,false,true': [nan, 0.10103968045101952]}
{'': [nan, 0.10058202429971201], 'false': [nan, 0.10058202429971201], 'false,false': [0.036415309147856956, 0.00012734452812283864], 'false,false,false': [nan, 0.00012734452812290984]}
{'': [0.06470917045090915, 0.0583341527258033], 'true': [nan, 0.06470917045090915], 'false': [nan, 0.0583341527258033], 'false,false': [nan, 0.0583341527258033], 'false,false,false': [nan, 0.0583341527258033]}
{'': [nan, 0.0645008098360217], 'false': [nan, 0.0645008098360217], 'false,false': [nan, 0.0645008098360217], 'false,false,false': [0.06270715164489453, 0.08581983206609958]}
{'': [nan, 0.06243270585650215], 'false': [nan, 0.06243270585650246], 'false,false': [0.05943871588556701, 0.11103521459880109], 'false,false,false': [nan, 0.11103521459880109], 'false,false,true': [0.03190074729998433, 2.595465743865486e-06]}
{'': [nan, 0.05107832419152197], 'false': [nan, 0.05107832419152189], 'false,false': [nan, 0.05107832419152197]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 19.666
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.8427643197148973;  // std dev = 0.992, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.6914822684328454;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.14185106490048816;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7225873708655184;  // std dev = 0.031, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else return 0.6083623010998434;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(G, F) )
%   | | | then return 0.7413433124639606;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1413433124639606;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.7518526675222027;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109543;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12544463852839163;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07938397983266234;  // std dev = 2.080, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.15619471171805752;  // std dev = 2.070, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then return 0.5127410941321181;  // std dev = 0.207, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | else return 0.5583943908063579;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.5649425200522143;  // std dev = 0.070, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F) )
%   | | then return 0.6099478031894381;  // std dev = 0.055, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3354947653207583;  // std dev = 0.863, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.09576225881493122;  // std dev = 1.142, 121.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=3 */
%   | | | else return -0.018055274907974622;  // std dev = 2.143, 85.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=12 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0817369171049713;  // std dev = 2.041, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.030323430144069616;  // std dev = 2.228, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.41414568638681826;  // std dev = 1.009, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | | else return 0.30656506125305416;  // std dev = 1.263, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.4144306852401831;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.6270066482031833;  // std dev = 0.338, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.11295107844437575;  // std dev = 0.247, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3312823895584746;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.1218238737508018;  // std dev = 0.075, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then return 0.3189373757187145;  // std dev = 0.120, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | else if ( follows(A, C) )
%   | | then if ( follows(A, E), follows(C, E) )
%   | | | then return 8.231487281817329E-4;  // std dev = 1.154, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.3407177138562747;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.32900807775503976;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then return -0.055248412120213856;  // std dev = 0.148, 252.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5152707917912135;  // std dev = 0.167, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.13082530556395214;  // std dev = 1.67e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0711143720869229;  // std dev = 1.108, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.12571040866572422;  // std dev = 1.234, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.2642275095346861;  // std dev = 0.026, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.1212918859915754;  // std dev = 1.812, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | | else return 0.2829292873075894;  // std dev = 0.126, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.3642121049227651;  // std dev = 0.085, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1143811297153878;  // std dev = 0.796, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.36009297601293894;  // std dev = 1.228, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.4535254183105684;  // std dev = 0.143, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09627118817784688;  // std dev = 0.247, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.23451503900148132;  // std dev = 0.202, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( follows(A, E), follows(C, E) )
%   | | then if ( follows(C, A) )
%   | | | then return 0.14108358746958494;  // std dev = 0.957, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.05137126408546466;  // std dev = 0.773, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.307946484001929;  // std dev = 0.110, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.22586835538910743;  // std dev = 0.064, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3331282762233682;  // std dev = 0.047, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.08581100256332799;  // std dev = 0.604, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.01150908214164051;  // std dev = 1.200, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.045188879121326825;  // std dev = 1.323, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.1864616380848047;  // std dev = 0.072, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.07605035399043016;  // std dev = 1.338, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return -0.2387339408474129;  // std dev = 0.909, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.20893057320797648;  // std dev = 0.040, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else if ( follows(F, A), follows(A, G) )
%   | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | then return 0.194026175667492;  // std dev = 0.191, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return -0.07667547386574071;  // std dev = 0.035, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.1993325488171065;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.020337725754574813;  // std dev = 1.679, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
%   | | | else return -0.0743156019024526;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( tweets(F, G), follows(E, F) )
%   | | | then return 0.148040676610523;  // std dev = 1.720, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | | else return -0.13835903510711364;  // std dev = 0.798, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.23747298429752198;  // std dev = 0.090, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.35321654953418796;  // std dev = 0.169, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.07972327400010867;  // std dev = 0.291, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.16941151492562678;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.06936220427609864;  // std dev = 5.27e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15603031171435158;  // std dev = 0.267, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.182744198629405;  // std dev = 0.141, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.06726677157111687;  // std dev = 0.228, 181.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=1 */
%   | | else if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.21123216200176756;  // std dev = 0.946, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.10268985196909347;  // std dev = 0.213, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.14688865420132236;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.06501635126098398;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.549', 'seconds']
Refined model CLL: -0.098508


******************************************
Best model found
******************************************
Results 

CLL : -0.097667 

AUC ROC : 0.99503 

AUC PR : 0.429206 

Precision : 0.346062 

Recall : 0.929487 

F1 : 0.504348 

Total Learning Time : 19.666 

Total Inference Time : 17.195560693740845 

Total revision time: 42.320675983428956
Best scored revision CLL: -0.098508


Results 

CLL : -0.097667 

AUC ROC : 0.99503 

AUC PR : 0.429206 

Precision : 0.346062 

Recall : 0.929487 

F1 : 0.504348 

Total Learning Time : 42.346682682037354 

Total Inference Time : 17.195560693740845 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.32
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8410549180054936;  // std dev = 1.402, 117.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=115 */
%   | | else return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.1418510649004877;  // std dev = 8.93e-09, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17195389765933167;  // std dev = 8.539, 443.000 (wgt'ed) examples reached here.  /* #neg=287 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13450274501394788;  // std dev = 7.675, 379.000 (wgt'ed) examples reached here.  /* #neg=251 #pos=128 */
%   | | | else return 0.10659145716040061;  // std dev = 3.691, 91.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6412660772808736;  // std dev = 1.402, 130.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=128 */
%   | else return -0.1630927189224381;  // std dev = 1.81e-07, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11790840008062563;  // std dev = 3.540, 83.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07619066454092742;  // std dev = 5.185, 285.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=97 */
%   | | else return 0.07416049193954768;  // std dev = 0.348, 179.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48150329321226365;  // std dev = 2.128, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.157875788561186;  // std dev = 0.234, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03150188216273552;  // std dev = 4.741, 352.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.029375695380945022;  // std dev = 2.891, 129.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.023200286866052414;  // std dev = 4.787, 382.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=128 */
%   | | | else return 0.050571792945195974;  // std dev = 2.893, 83.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3157484415595196;  // std dev = 2.195, 133.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=128 */
%   | | | else return -0.13866000388245092;  // std dev = 0.003, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0628766395729917;  // std dev = 2.766, 77.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.008660234096002174;  // std dev = 4.994, 469.000 (wgt'ed) examples reached here.  /* #neg=313 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.788', 'seconds']
Parameter learned model CLL:-0.159738 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.402, 2, 115], 'false,true,false': [2.46e-07, 0, 41], 'false,false': [8.93e-09, 318, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.539, 287, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.675, 251, 128], 'false,false,false,false': [3.691, 63, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.402, 2, 128], 'true,false': [1.81e-07, 235, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.54, 55, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.185, 188, 97], 'false,false,false': [0.348, 120, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.128, 4, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.234, 299, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.741, 237, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.891, 88, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.787, 254, 128], 'false,false,false,false': [2.893, 55, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.195, 5, 128], 'false,false,true,false': [0.003, 238, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.766, 49, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.994, 313, 156]}]
{'': [nan, 0.22032342348704487], 'false': [0.012497997115852777, 7.54113752575578e-17], 'false,true': [0.016801811673609827, 1.4730764034050857e-15]}
{'': [nan, 0.16461186378213985], 'false': [nan, 0.16461186378214462], 'false,false': [nan, 0.16461186378213985], 'false,false,false': [nan, 0.16461186378214462]}
{'': [nan, 0.1544373857524106], 'false': [nan, 0.15443738575241137], 'false,false': [nan, 0.15443738575241137], 'false,false,false': [0.15541565323652273, 0.14973485834657274]}
{'': [0.15374886318820033, 0.1509660943364369], 'true': [0.015122316484556163, 1.3984085756980696e-16], 'false': [nan, 0.1509660943364369], 'false,false': [nan, 0.1509660943364369], 'false,false,false': [nan, 0.1509660943364369]}
{'': [nan, 0.10479547053163601], 'false': [nan, 0.10479547053163607], 'false,false': [0.09434462985854618, 0.12143254560321402], 'false,false,true': [nan, 0.09434462985854618]}
{'': [nan, 0.10281545859921093], 'false': [nan, 0.10281545859921093], 'false,false': [0.028305751296699412, 0.00018382892495750575], 'false,false,false': [nan, 0.00018382892495748496]}
{'': [0.06386484946539023, 0.06477303795125891], 'false': [nan, 0.06477303795125891], 'false,false': [nan, 0.06477303795125891], 'false,false,false': [nan, 0.06477303795125891], 'true': [nan, 0.06386484946539023]}
{'': [nan, 0.06738100561534986], 'false': [nan, 0.06738100561534986], 'false,false': [nan, 0.06738100561534986], 'false,false,false': [0.059984745747557855, 0.10080615203022344]}
{'': [nan, 0.06736667305681858], 'false': [nan, 0.06736667305681873], 'false,false': [0.06047000622118212, 0.09935992391360333], 'false,false,false': [nan, 0.09935992391360333], 'false,false,true': [0.03621602971885664, 4.481227931773519e-08]}
{'': [nan, 0.05318127643989908], 'false': [nan, 0.053181276439898804], 'false,false': [nan, 0.05318127643989908]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 22.473
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.8146706742299468;  // std dev = 1.383, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.858148935099512;  // std dev = 1.46e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.14185106490048802;  // std dev = 0.000, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7130703343263075;  // std dev = 0.118, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | else return 0.6569734122109543;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.11163200944604197;  // std dev = 0.114, 113.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.6740188667564088;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.12544463852839113;  // std dev = 6.83e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.681011873749416;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.12544463852839122;  // std dev = 4.83e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.11432940289763938;  // std dev = 3.277, 74.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5671875444336731;  // std dev = 0.073, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(F, D), follows(F, A) )
%   | | | then return -0.10719418003398284;  // std dev = 0.869, 114.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=1 */
%   | | | else return -0.0472861990391686;  // std dev = 0.830, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.05765038228121826;  // std dev = 2.593, 74.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=19 */
%   | | | else return -0.06988656483380323;  // std dev = 0.930, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.6182227610520851;  // std dev = 0.380, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.12687425440038833;  // std dev = 0.328, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.05697335944845646;  // std dev = 1.173, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.08610279660769903;  // std dev = 1.887, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.38336417724926436;  // std dev = 1.382, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.42690394861827324;  // std dev = 0.065, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.49432314338849204;  // std dev = 0.126, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else return -0.10843173619383582;  // std dev = 0.136, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.429887566535677;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1038877834774903;  // std dev = 0.009, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.05968261777367884;  // std dev = 0.830, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.12511808288991969;  // std dev = 1.067, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.10239206455919787;  // std dev = 1.824, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, C), follows(A, D) )
%   | | then return 0.26951578153127975;  // std dev = 0.250, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | else return 0.33145282779599233;  // std dev = 0.050, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return 0.38051408873784115;  // std dev = 0.096, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, E) )
%   | | | then return 0.42626684422261907;  // std dev = 0.307, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.015838978991580783;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.09232371388301944;  // std dev = 0.053, 161.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=2 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.32911346418404996;  // std dev = 3.65e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I), follows(J, A) )
%   | | | then return -0.0796396574594768;  // std dev = 0.628, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   | | | else return 0.051851091009705925;  // std dev = 3.036, 136.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=41 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(F, B) )
%   | | | then return 0.27662740804718894;  // std dev = 0.344, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.23201207231887044;  // std dev = 1.549, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | | else if ( follows(G, A), tweets(G, D) )
%   | | | then return 0.25499710408011345;  // std dev = 0.559, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.4365324233383706;  // std dev = 0.253, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.27047745068658186;  // std dev = 0.073, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.39724154157167235;  // std dev = 0.183, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5220045887805748;  // std dev = 0.936, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.10031931337765868;  // std dev = 0.363, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.19918201773473265;  // std dev = 0.145, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return 0.21828681621304988;  // std dev = 0.116, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.07798655940334204;  // std dev = 0.089, 132.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.30087434919873024;  // std dev = 0.251, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.08974353480196916;  // std dev = 0.057, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.17500996219058726;  // std dev = 1.025, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.08698076735337558;  // std dev = 1.97e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.043926914382925834;  // std dev = 1.342, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | | | else return 0.06687864601931075;  // std dev = 1.677, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.188060142635617;  // std dev = 0.076, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E), follows(A, C) )
%   | | then if ( follows(A, F), follows(F, C) )
%   | | | then return -0.10529912891777009;  // std dev = 1.199, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.1781351776610507;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18010730259302746;  // std dev = 0.076, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(G, A) )
%   | then return -0.04824480509186741;  // std dev = 0.118, 240.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=23 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.21284731287369726;  // std dev = 1.080, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return -0.09631292858795465;  // std dev = 0.108, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07288233032650983;  // std dev = 0.801, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.1256833059973319;  // std dev = 1.319, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.13115230524483543;  // std dev = 1.737, 77.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=74 */
%   | | | else return -0.3342243105357243;  // std dev = 1.432, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.22592071828971697;  // std dev = 0.063, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return -0.07624763009617164;  // std dev = 0.138, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.15398906210569388;  // std dev = 0.002, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.07126981280792148;  // std dev = 0.004, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.0811461013205161;  // std dev = 0.429, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.04235097361516737;  // std dev = 0.811, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.06924784690014929;  // std dev = 1.397, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.14588306942018325;  // std dev = 0.082, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.09991116194415034;  // std dev = 0.198, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return 0.14786900135815575;  // std dev = 0.112, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.2432963286415477;  // std dev = 0.098, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.06889592412558575;  // std dev = 0.059, 203.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=2 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.09325349931976161;  // std dev = 1.003, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.06845861326934626;  // std dev = 1.39e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.035452950038369964;  // std dev = 0.804, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.04380649970067698;  // std dev = 1.653, 55.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=23 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.155', 'seconds']
Refined model CLL: -0.0992


******************************************
Best model found
******************************************
Results 

CLL : -0.092951 

AUC ROC : 0.994691 

AUC PR : 0.446115 

Precision : 0.351955 

Recall : 1.0 

F1 : 0.520661 

Total Learning Time : 22.473 

Total Inference Time : 27.14669704437256 

Total revision time: 56.63597585487366
Best scored revision CLL: -0.0992


Results 

CLL : -0.092951 

AUC ROC : 0.994691 

AUC PR : 0.446115 

Precision : 0.351955 

Recall : 1.0 

F1 : 0.520661 

Total Learning Time : 56.661982553482055 

Total Inference Time : 27.14669704437256 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.894
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8185449747034717;  // std dev = 1.960, 101.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=97 */
%   | | else return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else return -0.14185106490048838;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1424657335182968;  // std dev = 7.960, 396.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1360034349202419;  // std dev = 7.467, 356.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=118 */
%   | | | else return 0.1503099949197608;  // std dev = 1.919, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6278373192735378;  // std dev = 2.191, 123.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=118 */
%   | else return -0.1593085397864369;  // std dev = 0.000, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13945950399616167;  // std dev = 1.866, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08693535758011418;  // std dev = 5.067, 256.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=89 */
%   | | else return 0.07208748714546706;  // std dev = 0.327, 115.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4756078771023141;  // std dev = 1.926, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15210762398900002;  // std dev = 0.165, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0438395593012348;  // std dev = 4.325, 278.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.009021356662230582;  // std dev = 2.482, 100.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.012580051242193994;  // std dev = 4.847, 385.000 (wgt'ed) examples reached here.  /* #neg=267 #pos=118 */
%   | | | else return 0.0661665087222136;  // std dev = 1.501, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.32904140663278014;  // std dev = 2.196, 123.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=118 */
%   | | | else return -0.1365416535813014;  // std dev = 0.038, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.025201307404792105;  // std dev = 1.536, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.025860843355095545;  // std dev = 4.010, 357.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.392', 'seconds']
Parameter learned model CLL:-0.155671 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.96, 4, 97], 'false,true,false': [0.983, 1, 29], 'false,false': [0.0, 237, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.96, 270, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.467, 238, 118], 'false,false,false,false': [1.919, 15, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.191, 5, 118], 'true,false': [0.0, 219, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.866, 14, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.067, 167, 89], 'false,false,false': [0.327, 78, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.926, 4, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.165, 246, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.325, 181, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.482, 71, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.847, 267, 118], 'false,false,false,false': [1.501, 14, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.196, 5, 118], 'false,false,true,false': [0.038, 217, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.536, 17, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.01, 231, 126]}]
{'': [nan, 0.2251594990548232], 'false': [0.03671114736903867, -1.7988423690129118e-16], 'false,true': [0.03803548671699008, 0.03222222222222335]}
{'': [nan, 0.15999040904124404], 'false': [nan, 0.15999040904124873], 'false,false': [nan, 0.15999040904124404], 'false,false,false': [nan, 0.15999040904124873]}
{'': [nan, 0.156848336961347], 'false': [nan, 0.15684833696134678], 'false,false': [nan, 0.15684833696134678], 'false,false,false': [0.15662400078124336, 0.16012841429210528]}
{'': [0.15673409733405927, 0.15822897839837943], 'false': [nan, 0.15822897839837943], 'false,false': [nan, 0.15822897839837943], 'false,false,false': [nan, 0.15822897839837943], 'true': [0.039036737028596766, -1.6627997811737503e-16]}
{'': [nan, 0.10236606763351189], 'false': [nan, 0.1023660676335121], 'false,false': [0.1002894141251943, 0.10683675609234831], 'false,false,true': [nan, 0.1002894141251943]}
{'': [nan, 0.09907387510376814], 'false': [nan, 0.09907387510376814], 'false,false': [0.028548049033200504, 0.00011096755539254156], 'false,false,false': [nan, 0.00011096755539242603]}
{'': [0.067298950657632, 0.0616052500341694], 'true': [nan, 0.067298950657632], 'false': [nan, 0.0616052500341694], 'false,false': [nan, 0.0616052500341694], 'false,false,false': [nan, 0.0616052500341694]}
{'': [nan, 0.06341081475180528], 'false': [nan, 0.06341081475180528], 'false,false': [nan, 0.06341081475180528], 'false,false,false': [0.061029411679393394, 0.10236907676539161]}
{'': [nan, 0.06630247307906305], 'false': [nan, 0.06630247307906288], 'false,false': [0.06423896338566065, 0.09432453226794775], 'false,false,false': [nan, 0.09432453226794775], 'false,false,true': [0.039210880401891905, 6.526323692299069e-06]}
{'': [nan, 0.045041079145062286], 'false': [nan, 0.04504107914506244], 'false,false': [nan, 0.045041079145062286]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 51.05
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.858148935099512;  // std dev = 1.46e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.7581489350995123;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.14185106490048835;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(A, C), follows(E, A) )
%   | | then return 0.6777307991732282;  // std dev = 0.203, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | else return 0.7262393183496305;  // std dev = 0.051, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.12544463852839147;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.7208991229299644;  // std dev = 0.013, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.3954435859654955;  // std dev = 1.147, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1121885632420499;  // std dev = 2.149, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0.15999954620123719;  // std dev = 2.195, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then return 0.5659523024133035;  // std dev = 0.062, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else return 0.5087035588758902;  // std dev = 0.255, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.15395893514214393;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.5604561184476469;  // std dev = 0.078, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.11243657312667754;  // std dev = 0.026, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.5862089120089873;  // std dev = 0.944, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.13827848373690158;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08021762131842655;  // std dev = 1.554, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.11143804313039767;  // std dev = 1.746, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.41474421225271246;  // std dev = 0.984, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | | | else return 0.4470848391333721;  // std dev = 0.175, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.528930144422665;  // std dev = 0.180, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.7056108276782913;  // std dev = 0.096, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.10943945743081429;  // std dev = 0.247, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.43773967848505396;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1015853592789097;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( follows(D, A) )
%   | | then return 0.310318921332417;  // std dev = 0.127, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | else return -0.0020742304841226598;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.34314636521317743;  // std dev = 0.146, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.08414517735398497;  // std dev = 0.087, 130.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=3 */
%   | | else return 0.0037108738341189687;  // std dev = 0.192, 81.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.45290051426422856;  // std dev = 0.352, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12428977808756267;  // std dev = 0.075, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0360742003154104;  // std dev = 0.798, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.029696218177982573;  // std dev = 1.408, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.26567798050590796;  // std dev = 0.118, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else if ( tweets(A, F), follows(D, G) )
%   | | | then return 0.18994697706633576;  // std dev = 0.923, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.07992951462202179;  // std dev = 1.350, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.2622727646719211;  // std dev = 0.017, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.32252484172190143;  // std dev = 0.923, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.30763632924443424;  // std dev = 0.109, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.48228734037028875;  // std dev = 0.136, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.09251486191828953;  // std dev = 0.233, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, D), follows(A, C) )
%   | | | then return 0.18306928758090235;  // std dev = 0.983, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.21649660640822954;  // std dev = 0.016, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.15812714335686961;  // std dev = 0.972, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.04343955205798572;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.23073295358462623;  // std dev = 0.130, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(F, A) )
%   | then return -0.04674195696583302;  // std dev = 0.116, 231.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=23 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2824782498032361;  // std dev = 0.242, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.010664195684926993;  // std dev = 1.095, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | | else return 0.06218267037322192;  // std dev = 1.101, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.18540624547435364;  // std dev = 0.039, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.1158503048980213;  // std dev = 0.967, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.23545054221901293;  // std dev = 0.922, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.38776109735164577;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.08010841785552335;  // std dev = 0.140, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else if ( follows(A, I), recursion_accounttype(I, B) )
%   | then return 0.2364247288928453;  // std dev = 0.081, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.2140127705725187;  // std dev = 0.072, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.05269558781218754;  // std dev = 0.571, 39.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=3 */
%   | | | else return 0.0435391168515638;  // std dev = 1.102, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.13009476542118353;  // std dev = 1.386, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | | | else return -0.05659428661313602;  // std dev = 1.840, 18.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=12 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.1703329274911792;  // std dev = 0.069, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.25117623887666407;  // std dev = 0.761, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return -0.07945807065796903;  // std dev = 0.301, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.16644422840704387;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.0701212672724958;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then return 0.14201983613915747;  // std dev = 0.055, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( follows(C, E), follows(E, A) )
%   | | | then return 0.1474906160087338;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.015601637454773812;  // std dev = 0.865, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.2540966052163893;  // std dev = 0.075, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A), follows(A, G) )
%   | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | then return 0.18277645611701945;  // std dev = 0.201, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.06729257239139344;  // std dev = 0.060, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.14461577851819993;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.008302396912587525;  // std dev = 1.275, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
%   | | | else return -0.06568461547499245;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '47.187', 'seconds']
Refined model CLL: -0.097853


******************************************
Best model found
******************************************
Results 

CLL : -0.09765 

AUC ROC : 0.995548 

AUC PR : 0.438356 

Precision : 0.346154 

Recall : 0.923077 

F1 : 0.503497 

Total Learning Time : 51.05 

Total Inference Time : 35.13988637924194 

Total revision time: 91.65197634124755
Best scored revision CLL: -0.097853


Results 

CLL : -0.09765 

AUC ROC : 0.995548 

AUC PR : 0.438356 

Precision : 0.346154 

Recall : 0.923077 

F1 : 0.503497 

Total Learning Time : 97.36911200904845 

Total Inference Time : 35.13988637924194 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.368
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8410549180054936;  // std dev = 1.402, 117.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=115 */
%   | | else return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.14185106490048788;  // std dev = 4.17e-09, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17160382553910444;  // std dev = 8.546, 443.000 (wgt'ed) examples reached here.  /* #neg=287 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1431141290422922;  // std dev = 7.631, 366.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=128 */
%   | | | else return 0.1529595821181637;  // std dev = 3.523, 78.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6318919920420001;  // std dev = 1.711, 131.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=128 */
%   | else return -0.1642234749646524;  // std dev = 1.46e-07, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09166696970846652;  // std dev = 3.582, 89.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07172425857964718;  // std dev = 5.257, 287.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=97 */
%   | | else return 0.07171948756743031;  // std dev = 0.340, 183.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4818545173202038;  // std dev = 2.117, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15820594161073243;  // std dev = 0.247, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04381442467175735;  // std dev = 4.740, 321.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04715013953128762;  // std dev = 2.848, 115.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.015085576498937742;  // std dev = 4.755, 404.000 (wgt'ed) examples reached here.  /* #neg=276 #pos=128 */
%   | | | else return 0.03646313525112775;  // std dev = 2.871, 88.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.34543936364787325;  // std dev = 0.995, 129.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=128 */
%   | | | else return -0.13968830061994272;  // std dev = 0.003, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.047887382272982226;  // std dev = 2.797, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 3.511464070317531E-4;  // std dev = 4.847, 509.000 (wgt'ed) examples reached here.  /* #neg=353 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.654', 'seconds']
Parameter learned model CLL:-0.159568 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.402, 2, 115], 'false,true,false': [2.46e-07, 0, 41], 'false,false': [4.17e-09, 294, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.546, 287, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.631, 238, 128], 'false,false,false,false': [3.523, 50, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.711, 3, 128], 'true,false': [1.46e-07, 273, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.582, 61, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.257, 190, 97], 'false,false,false': [0.34, 124, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.117, 4, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.247, 310, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.74, 206, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.848, 74, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.755, 276, 128], 'false,false,false,false': [2.871, 60, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.995, 1, 128], 'false,false,true,false': [0.003, 246, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.797, 53, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.847, 353, 156]}]
{'': [nan, 0.22601613282168062], 'false': [0.012497997115852777, 1.5105075164968118e-17], 'false,true': [0.016801811673609827, 1.4730764034050857e-15]}
{'': [nan, 0.16487425297066854], 'false': [nan, 0.16487425297067335], 'false,false': [nan, 0.16487425297066854], 'false,false,false': [nan, 0.16487425297067335]}
{'': [nan, 0.15911395374355364], 'false': [nan, 0.15911395374355788], 'false,false': [nan, 0.15911395374355788], 'false,false,false': [0.1591038319907068, 0.15908154393686366]}
{'': [0.1461177304172823, 0.14416942578465697], 'true': [0.02233708570876845, 7.808161931429673e-17], 'false': [nan, 0.14416942578465697], 'false,false': [nan, 0.14416942578465697], 'false,false,false': [nan, 0.14416942578465697]}
{'': [nan, 0.10387701704449644], 'false': [nan, 0.10387701704449687], 'false,false': [0.09628345685043524, 0.11578604312729034], 'false,false,true': [nan, 0.09628345685043524]}
{'': [nan, 0.10165304308743754], 'false': [nan, 0.10165304308743754], 'false,false': [0.028013033298402767, 0.00019614630106748197], 'false,false,false': [nan, 0.00019614630106776275]}
{'': [0.06998142267633162, 0.07052627582750054], 'false': [nan, 0.07052627582750054], 'false,false': [nan, 0.07052627582750054], 'false,false,false': [nan, 0.07052627582750054], 'true': [nan, 0.06998142267633162]}
{'': [nan, 0.06278424765764205], 'false': [nan, 0.06278424765764205], 'false,false': [nan, 0.06278424765764205], 'false,false,false': [0.055971742113425434, 0.0936845811149048]}
{'': [nan, 0.06306332030731275], 'false': [nan, 0.06306332030731304], 'false,false': [0.05575117281284024, 0.09656375862555591], 'false,false,false': [nan, 0.09656375862555591], 'false,false,true': [0.007678450583865557, 3.472809334051747e-08]}
{'': [nan, 0.04615048472844587], 'false': [nan, 0.046150484728445906], 'false,false': [nan, 0.04615048472844587]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 15.002
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8414822684328459;  // std dev = 0.992, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995118;  // std dev = 2.23e-07, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.14185106490048785;  // std dev = 8.94e-08, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.7222132014232528;  // std dev = 0.038, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(E, A), follows(E, C) )
%   | | then return 0.3883744255103532;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7227413163111386;  // std dev = 0.037, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7218779131742757;  // std dev = 0.038, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.12544463852839166;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.6187900171628757;  // std dev = 0.305, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.11015751023546438;  // std dev = 3.864, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
%   | | | else return 0.14010103456111758;  // std dev = 2.321, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.560640108373127;  // std dev = 0.120, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else return 0.5219264337016749;  // std dev = 0.184, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.23298398748846408;  // std dev = 1.129, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.5074134554958668;  // std dev = 0.979, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return -0.11231637819360674;  // std dev = 0.000, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.6385462436255037;  // std dev = 1.104, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.13803664620280165;  // std dev = 5.37e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1771187725499396;  // std dev = 1.644, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.147400921922202;  // std dev = 2.020, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3863443356942334;  // std dev = 1.390, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | | else return 0.4378216064018144;  // std dev = 0.150, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.5349419048671273;  // std dev = 0.065, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else return -0.10807053140300066;  // std dev = 0.212, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then return 0.4219232019007826;  // std dev = 0.079, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.0853337155402533;  // std dev = 0.820, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, I), follows(J, A) )
%   | | then return -0.08195829364567604;  // std dev = 0.100, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.06852949685798507;  // std dev = 1.379, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.05923489013877952;  // std dev = 1.919, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.33117045710702336;  // std dev = 0.160, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.3386693260190002;  // std dev = 0.150, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.28364404600362886;  // std dev = 0.984, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09279572998112154;  // std dev = 0.034, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.01411884556838665;  // std dev = 2.298, 105.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=25 */
%   | | | else return 0.09946681841758669;  // std dev = 2.455, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.23409776393756593;  // std dev = 1.405, 70.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=68 */
%   | | | else return 0.11848868375808976;  // std dev = 0.929, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.06727427036225242;  // std dev = 1.191, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(G, A) )
%   | | then return 0.2699095861579854;  // std dev = 0.179, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.4253016763781864;  // std dev = 0.180, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.6180830657242242;  // std dev = 0.015, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09957160988011836;  // std dev = 0.486, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.19477146231638245;  // std dev = 0.161, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.06550588295631767;  // std dev = 0.897, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.04034009763973023;  // std dev = 0.859, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.21956880654281777;  // std dev = 0.149, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(G, A) )
%   | then return -0.04941989724677484;  // std dev = 0.105, 234.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=23 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.2901999730509205;  // std dev = 0.281, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.10713149456050704;  // std dev = 0.083, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.018648794797336672;  // std dev = 1.258, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.006373954393045073;  // std dev = 1.912, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.18458587356362807;  // std dev = 0.072, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(D, C), tweets(A, E) )
%   | | | then return 0.11419307615947057;  // std dev = 0.963, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.1892185732766865;  // std dev = 0.035, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.20453868216611495;  // std dev = 0.141, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.21605244066432963;  // std dev = 0.059, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.07157180850709269;  // std dev = 0.308, 120.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=1 */
%   | | | else return -0.04109956423450305;  // std dev = 1.525, 111.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=16 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.013908603800323039;  // std dev = 1.656, 80.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=19 */
%   | | | else return 0.035407194485088445;  // std dev = 1.913, 65.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), tweets(A, G) )
%   | | | then return 0.1778734216597615;  // std dev = 0.202, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.06193343221196354;  // std dev = 1.364, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.1653079136458258;  // std dev = 0.971, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.29130557540980295;  // std dev = 0.206, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.08112219499416443;  // std dev = 0.290, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.15694130522434255;  // std dev = 0.071, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(J, A) )
%   | | then return -0.05162541295634935;  // std dev = 0.090, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.05769240012246108;  // std dev = 1.013, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.04717954504304627;  // std dev = 1.352, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.13922424433768155;  // std dev = 0.019, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.08681996059093863;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return -0.008704182677929532;  // std dev = 0.923, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.16594459981488588;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1417567727290034;  // std dev = 0.104, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(G, A) )
%   | then return -0.04038136347038112;  // std dev = 0.101, 228.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=23 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.13201345659840502;  // std dev = 0.038, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.005060961781721658;  // std dev = 1.325, 81.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=25 */
%   | | | else return 0.02702681612107073;  // std dev = 1.901, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.625', 'seconds']
Refined model CLL: -0.103768


******************************************
Best model found
******************************************
Results 

CLL : -0.099955 

AUC ROC : 0.994228 

AUC PR : 0.450773 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 15.002 

Total Inference Time : 11.912612676620483 

Total revision time: 33.78844439506531
Best scored revision CLL: -0.103768


Results 

CLL : -0.099955 

AUC ROC : 0.994228 

AUC PR : 0.450773 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 39.505580062866215 

Total Inference Time : 11.912612676620483 

