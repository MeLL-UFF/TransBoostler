Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.596
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8379469148974912;  // std dev = 1.400, 99.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=97 */
%   | | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.14185106490048846;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1629402278245883;  // std dev = 7.737, 370.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.11054293827659113;  // std dev = 7.572, 381.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=118 */
%   | | | else return 0.1589159084186741;  // std dev = 1.882, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.639774158015921;  // std dev = 1.709, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | else return -0.15948405345427114;  // std dev = 0.180, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12001305628631076;  // std dev = 1.873, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0839894826332412;  // std dev = 5.006, 258.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=89 */
%   | | else return 0.06810835598887523;  // std dev = 0.321, 116.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4384272941955786;  // std dev = 2.782, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1517960068550783;  // std dev = 0.182, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04379035505834636;  // std dev = 4.365, 278.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04992503052680783;  // std dev = 2.222, 83.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.03234592173967358;  // std dev = 4.694, 343.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=118 */
%   | | | else return 0.13827910416415165;  // std dev = 1.377, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3569269994414383;  // std dev = 0.995, 119.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=118 */
%   | | | else return -0.13919850481344032;  // std dev = 0.008, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07846136500309665;  // std dev = 1.411, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.010318903175782046;  // std dev = 4.211, 365.000 (wgt'ed) examples reached here.  /* #neg=239 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.959', 'seconds']
Parameter learned model CLL:-0.157787 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.4, 2, 97], 'false,true,false': [1.79e-07, 0, 29], 'false,false': [0.0, 230, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.737, 244, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.572, 263, 118], 'false,false,false,false': [1.882, 14, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.709, 3, 118], 'true,false': [0.18, 214, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.873, 15, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.006, 169, 89], 'false,false,false': [0.321, 79, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.782, 8, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.182, 234, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.365, 181, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.222, 54, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.694, 225, 118], 'false,false,false,false': [1.377, 9, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.995, 1, 118], 'false,false,true,false': [0.008, 231, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.411, 11, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.211, 239, 126]}]
{'': [nan, 0.22808276895228272], 'false': [0.015380859375004219, -2.0852884636437723e-16], 'false,true': [0.019793898581778793, 1.1025663141105003e-15]}
{'': [nan, 0.16180573036684084], 'false': [nan, 0.16180573036684517], 'false,false': [nan, 0.16180573036684084], 'false,false,false': [nan, 0.16180573036684517]}
{'': [nan, 0.15117769234094225], 'false': [nan, 0.1511776923409431], 'false,false': [nan, 0.1511776923409431], 'false,false,false': [0.1504804218111383, 0.1610409448037255]}
{'': [0.1562070057052607, 0.15253062102727882], 'true': [0.02412877264472046, 0.00015106379474186482], 'false': [nan, 0.15253062102727882], 'false,false': [nan, 0.15253062102727882], 'false,false,false': [nan, 0.15253062102727882]}
{'': [nan, 0.09896001199053847], 'false': [nan, 0.09896001199053654], 'false,false': [0.09713088942359557, 0.10285424830710302], 'false,false,true': [nan, 0.09713088942359557]}
{'': [nan, 0.10178715374839914], 'false': [nan, 0.10178715374839914], 'false,false': [0.0577752254323301, 0.0001407965492656681], 'false,false,false': [nan, 0.00014079654926574782]}
{'': [0.06852997815539175, 0.05948470676994962], 'true': [nan, 0.06852997815539175], 'false': [nan, 0.05948470676994962], 'false,false': [nan, 0.05948470676994962], 'false,false,false': [nan, 0.05948470676994962]}
{'': [nan, 0.06698484765041446], 'false': [nan, 0.06698484765041446], 'false,false': [nan, 0.06698484765041446], 'false,false,false': [0.06424818868563795, 0.11150904780622498]}
{'': [nan, 0.060585770403844115], 'false': [nan, 0.06058577040384354], 'false,false': [0.05806422797568894, 0.10475998391990249], 'false,false,false': [nan, 0.10475998391990249], 'false,false,true': [0.008323904474956706, 2.5556068558717556e-07]}
{'': [nan, 0.04858114747227848], 'false': [nan, 0.04858114747227869], 'false,false': [nan, 0.04858114747227848]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 44.401
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.821785298735876;  // std dev = 1.388, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | | else return 0.6763307532813304;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return 0.858148935099512;  // std dev = 1.46e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.1418510649004882;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7119704125392321;  // std dev = 0.122, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.7194734122109545;  // std dev = 2.98e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(F, G) )
%   | | then return 0.5588737607476475;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.7446128960439437;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10831792128367464;  // std dev = 1.449, 148.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=3 */
%   | | | else return 0.017182999466058776;  // std dev = 2.677, 70.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14613616349497008;  // std dev = 2.088, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | | else return 0.23031033020396505;  // std dev = 1.818, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then return 0.5485952025849802;  // std dev = 0.127, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else return 0.5714908499114437;  // std dev = 0.102, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.7408073478474965;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11403530727979076;  // std dev = 4.94e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else if ( follows(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.6706629746155066;  // std dev = 0.263, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.11891920921062339;  // std dev = 0.735, 67.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.5825216907010631;  // std dev = 0.039, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.16941298679258812;  // std dev = 1.972, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | | else return 0.0742651208892045;  // std dev = 1.983, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.43236801709899036;  // std dev = 0.209, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | | else return 0.24041738015059583;  // std dev = 0.885, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.4441220853024951;  // std dev = 1.326, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return 0.6528207613848502;  // std dev = 0.005, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.11331229124484153;  // std dev = 0.283, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.41359748495179977;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10301132587367447;  // std dev = 9.13e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.32784400032043537;  // std dev = 0.066, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return -0.1692092592099575;  // std dev = 0.980, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.3297437274677386;  // std dev = 0.070, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, F) )
%   | | | then return 0.36792620132033704;  // std dev = 0.169, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.03902352964430863;  // std dev = 0.862, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07208083710489444;  // std dev = 1.078, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(I, A) )
%   | | then return -0.055595909304078824;  // std dev = 0.145, 201.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.0010390316487936364;  // std dev = 1.691, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | | else return 0.10966167972668721;  // std dev = 1.411, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.2673069001164904;  // std dev = 0.208, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.1488065422964772;  // std dev = 1.275, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else if ( follows(D, G) )
%   | | | then return -0.4044698515766491;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.33350548461317614;  // std dev = 0.081, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), tweets(H, J) )
%   | | | then return 0.4262466878040244;  // std dev = 0.484, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.3738561756631708;  // std dev = 0.788, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.25151384245368197;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.10212304151940274;  // std dev = 0.385, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2148813677332169;  // std dev = 0.186, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.05904359272483669;  // std dev = 0.946, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3568074375958908;  // std dev = 0.128, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.08361627383991152;  // std dev = 0.065, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.29316937064168186;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.014005082844003753;  // std dev = 1.282, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.019902934082013494;  // std dev = 1.332, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then if ( follows(A, E), tweets(C, D) )
%   | | | then return 0.1465048818720647;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.17619053540981358;  // std dev = 0.063, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.26619847153490817;  // std dev = 0.152, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.07677735828690029;  // std dev = 0.058, 183.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.21628650261482335;  // std dev = 0.161, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.2214841171177142;  // std dev = 0.158, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.07961886197923043;  // std dev = 0.027, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.005053296383671938;  // std dev = 1.258, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.03802807962189379;  // std dev = 1.283, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.031163673394801233;  // std dev = 2.789, 69.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=60 */
%   | | | else return 0.1687548312183561;  // std dev = 0.943, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.19953323541865708;  // std dev = 0.038, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3336988746045687;  // std dev = 0.781, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return -0.08525831588074405;  // std dev = 0.438, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.1501863252003589;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.07008866221133604;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17296904095350724;  // std dev = 0.495, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else return -0.07277085080044302;  // std dev = 0.266, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.12993763814820272;  // std dev = 0.018, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.2871204900509835;  // std dev = 0.129, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.15754033440230836;  // std dev = 0.358, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return -0.06565592785457033;  // std dev = 4.56e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1', 'minutes', 'and', '3.553', 'seconds']
Refined model CLL: -0.10241


******************************************
Best model found
******************************************
Results 

CLL : -0.106342 

AUC ROC : 0.99463 

AUC PR : 0.378899 

Precision : 0.338028 

Recall : 0.923077 

F1 : 0.494845 

Total Learning Time : 44.401 

Total Inference Time : 57.405895948410034 

Total revision time: 117.14423086357117
Best scored revision CLL: -0.10241


Results 

CLL : -0.106342 

AUC ROC : 0.99463 

AUC PR : 0.378899 

Precision : 0.338028 

Recall : 0.923077 

F1 : 0.494845 

Total Learning Time : 121.6002497882843 

Total Inference Time : 57.405895948410034 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.081
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.816482268432844;  // std dev = 2.189, 120.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=115 */
%   | | else return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.14185106490048796;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15908979164435103;  // std dev = 8.684, 465.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13933488942483618;  // std dev = 7.712, 377.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=128 */
%   | | | else return 0.14302509384599826;  // std dev = 3.595, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6178662547598072;  // std dev = 2.393, 134.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=128 */
%   | else return -0.1619993730008151;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11190256315195425;  // std dev = 3.557, 84.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08472713017129586;  // std dev = 5.270, 281.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=97 */
%   | | else return 0.09134478929623858;  // std dev = 0.350, 170.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4703861062742341;  // std dev = 2.718, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15871797956285205;  // std dev = 0.261, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.026901271600094694;  // std dev = 5.112, 347.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.039523867748870116;  // std dev = 2.848, 122.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.025885037623986612;  // std dev = 4.832, 391.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=128 */
%   | | | else return 0.061988472616657936;  // std dev = 2.821, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3195855350202928;  // std dev = 2.409, 134.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=128 */
%   | | | else return -0.13928399365538657;  // std dev = 0.016, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.053632738543647245;  // std dev = 2.784, 78.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01020433021168184;  // std dev = 5.038, 474.000 (wgt'ed) examples reached here.  /* #neg=318 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.887', 'seconds']
Parameter learned model CLL:-0.161318 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.189, 5, 115], 'false,true,false': [2.46e-07, 0, 41], 'false,false': [0.0, 281, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.684, 309, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.712, 249, 128], 'false,false,false,false': [3.595, 53, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.393, 6, 128], 'true,false': [0.0, 267, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.557, 56, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27, 184, 97], 'false,false,false': [0.35, 111, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.718, 7, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.261, 303, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [5.112, 232, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.848, 81, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.832, 263, 128], 'false,false,false,false': [2.821, 51, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.409, 6, 128], 'false,false,true,false': [0.016, 230, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.784, 50, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.038, 318, 156]}]
{'': [nan, 0.2283737024221485], 'false': [0.030091431657735174, -2.2125441060145468e-17], 'false,true': [0.03993055555555891, 1.4730764034050857e-15]}
{'': [nan, 0.1621866747387038], 'false': [nan, 0.16218667473870757], 'false,false': [nan, 0.1621866747387038], 'false,false,false': [nan, 0.16218667473870757]}
{'': [nan, 0.15806053531357872], 'false': [nan, 0.1580605353135737], 'false,false': [nan, 0.1580605353135737], 'false,false,false': [0.15774155362170325, 0.15953396924244223]}
{'': [0.1495992774498268, 0.15060129312018045], 'false': [nan, 0.15060129312018045], 'false,false': [nan, 0.15060129312018045], 'false,false,false': [nan, 0.15060129312018045], 'true': [0.04272671635045816, -2.1289669985321354e-16]}
{'': [nan, 0.10788906902206484], 'false': [nan, 0.10788906902206455], 'false,false': [0.09883066584119848, 0.12283479071515707], 'false,false,true': [nan, 0.09883066584119848]}
{'': [nan, 0.10601612820087036], 'false': [nan, 0.10601612820087036], 'false,false': [0.045333198150410786, 0.00022548755352542059], 'false,false,false': [nan, 0.00022548755352549973]}
{'': [0.07531449682571066, 0.06647819149333814], 'true': [nan, 0.07531449682571066], 'false': [nan, 0.06647819149333814], 'false,false': [nan, 0.06647819149333814], 'false,false,false': [nan, 0.06647819149333814]}
{'': [nan, 0.06679764549916557], 'false': [nan, 0.06679764549916557], 'false,false': [nan, 0.06679764549916557], 'false,false,false': [0.05971501933914193, 0.10076779617789462]}
{'': [nan, 0.07109319263777603], 'false': [nan, 0.07109319263777576], 'false,false': [0.06492675975657138, 0.0993958333568092], 'false,false,false': [nan, 0.0993958333568092], 'false,false,true': [0.043319427700152534, 1.075064838504271e-06]}
{'': [nan, 0.053554614958980395], 'false': [nan, 0.05355461495898046], 'false,false': [nan, 0.053554614958980395]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 42.483
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then return 0.8581489350995115;  // std dev = 3.58e-07, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.6914822684328454;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.1418510649004879;  // std dev = 4.21e-08, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.7194734122109537;  // std dev = 2.67e-07, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.728352773263003;  // std dev = 0.081, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.6675155516899819;  // std dev = 0.943, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.1182817222618048;  // std dev = 2.760, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
%   | | | else return 0.2409772285358956;  // std dev = 3.207, 58.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5577901540897772;  // std dev = 0.067, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | | else if ( recursion_accounttype(C, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.25657136792647134;  // std dev = 0.763, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.10777088366941881;  // std dev = 0.067, 223.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=2 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.6574102335440334;  // std dev = 0.300, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return -0.14432292409387;  // std dev = 0.076, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7042336702540904;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.154351171489184;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.0760139721758594;  // std dev = 0.369, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, G) )
%   | | | then return 0.4033022459400848;  // std dev = 0.998, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | | | else return 0.1755380300697669;  // std dev = 0.864, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.44016766934999285;  // std dev = 0.182, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.526681575548047;  // std dev = 0.082, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.1113466239225516;  // std dev = 0.207, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.4170028399553921;  // std dev = 0.000776, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, J), follows(K, A) )
%   | | then return -0.07909804462555997;  // std dev = 0.112, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.09007167998539674;  // std dev = 1.104, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.04933792059840043;  // std dev = 1.925, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.2947138284698832;  // std dev = 0.167, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else return 0.323285257041312;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.3252308739830811;  // std dev = 0.118, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.3571828727130903;  // std dev = 0.196, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.20541015656933728;  // std dev = 0.322, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.35152333240264905;  // std dev = 0.222, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.09133024946243597;  // std dev = 0.632, 226.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.022597064072924156;  // std dev = 2.194, 92.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=25 */
%   | | | else return 0.0779162658422236;  // std dev = 2.231, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.25915147751416445;  // std dev = 0.151, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | | | else return 0.2213516510874217;  // std dev = 0.873, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.40132185198824766;  // std dev = 0.164, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H) )
%   | | | then return 0.36337574533718014;  // std dev = 0.305, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.24346677325233596;  // std dev = 0.601, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.4988297238743904;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.621896491824837;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.10009645865395578;  // std dev = 0.442, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21369685577852504;  // std dev = 0.065, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.13656691727775505;  // std dev = 1.366, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.07654732822264591;  // std dev = 0.877, 234.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=2 */
%   | | else return -0.18313549964754441;  // std dev = 0.265, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.2838074272289543;  // std dev = 0.260, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.12083614799267463;  // std dev = 1.034, 76.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=1 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.09301365100416878;  // std dev = 0.903, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.0453941479124459;  // std dev = 1.455, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1799890875891743;  // std dev = 0.057, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(F, E), follows(F, A) )
%   | | | then return -0.0711177894817333;  // std dev = 0.260, 130.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=1 */
%   | | | else return -0.05458012446831262;  // std dev = 0.246, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.2213192578493135;  // std dev = 0.323, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.07194377935331726;  // std dev = 0.024, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.16666532771358417;  // std dev = 0.060, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.020069892379307397;  // std dev = 1.688, 78.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=19 */
%   | | | else return 0.028221915034070066;  // std dev = 1.699, 63.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.14085143129714295;  // std dev = 0.993, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return -0.008140771250327312;  // std dev = 1.533, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else return 0.2229411333464762;  // std dev = 0.060, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return -0.0771188720897394;  // std dev = 0.017, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.15052572782577117;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1777430310334869;  // std dev = 0.900, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.09130062959842751;  // std dev = 0.036, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( follows(I, A) )
%   | | then return 0.03922393372374301;  // std dev = 0.141, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.03098763826049279;  // std dev = 0.297, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.13685985528542474;  // std dev = 0.060, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.18726541041442543;  // std dev = 0.151, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1458548377830476;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.15905634007802238;  // std dev = 0.237, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.06320982931096901;  // std dev = 0.040, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.016937192598685154;  // std dev = 1.337, 104.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=25 */
%   | | | else return 0.021104621440858156;  // std dev = 1.652, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '30.655', 'seconds']
Refined model CLL: -0.100298


******************************************
Best model found
******************************************
Results 

CLL : -0.097055 

AUC ROC : 0.993933 

AUC PR : 0.424919 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 42.483 

Total Inference Time : 36.01165580749512 

Total revision time: 97.02480780029296
Best scored revision CLL: -0.100298


Results 

CLL : -0.097055 

AUC ROC : 0.993933 

AUC PR : 0.424919 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 101.4808267250061 

Total Inference Time : 36.01165580749512 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 9.268
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8199809961682126;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048818;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7114869871004702;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839177;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5212779363248073;  // std dev = 0.208, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360692;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4371477505100764;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4371477505100757;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2753121575248576;  // std dev = 2.701, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926046;  // std dev = 1.03e-07, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | | else return -0.09269127618926089;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2232055341102725;  // std dev = 2.575, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20277395208310187;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 5.96e-08, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16844936489964274;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.0732462257633368;  // std dev = 1.18e-07, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.073246225763337;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15807407449389185;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 4.21e-08, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12891071222080233;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202612;  // std dev = 4.56e-09, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '33.308', 'seconds']
Parameter learned model CLL:-0.092631 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 255, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 227, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.208, 6, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 266, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 118], 'true,false': [0.0, 237, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.701, 8, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.03e-07, 252, 0], 'false,false,false': [0.0, 26, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.575, 7, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 241, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.96e-08, 254, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.969, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.18e-07, 252, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 22, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.21e-08, 238, 0], 'false,false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [4.56e-09, 268, 0]}]
{'': [0.03671114736903867, -1.0797463141452503e-16], 'false': [-1.0797463141452503e-16, nan]}
{'': [0.01538085937499678, -5.0864843418949904e-17], 'false': [-5.0864843418949904e-17, nan]}
{'': [0.043388429752064174, -1.0350951507783414e-16], 'false': [nan, -1.0350951507783414e-16]}
{'': [0.06440783025805477, 0.061827376416453625], 'true': [-9.333400342611486e-16, -7.495176537553799e-17], 'false': [0.061827376416453625, nan], 'false,true': [-1.1102230246251565e-16, -3.0839528461809902e-18]}
{'': [0.05445942646032783, 7.028750083957825e-17], 'true': [0.05445942646032783, nan], 'false': [nan, 7.028750083957825e-17], 'false,false': [4.229421046191072e-17, -5.337610695313253e-18], 'false,false,true': [nan, 4.229421046191072e-17]}
{'': [0.04986149584487546, 3.31684887024943e-17], 'false': [nan, 3.31684887024943e-17], 'false,false': [nan, 3.31684887024943e-17]}
{'': [0.029822485207100322, 1.3987061727561027e-17], 'false': [nan, 1.3987061727561027e-17], 'false,false': [nan, 1.3987061727561027e-17], 'false,false,false': [1.3987061727561027e-17, nan]}
{'': [0.029822485207100586, 4.3760615569166756e-17], 'true': [0.029822485207100586, nan], 'false': [5.551115123125783e-17, -1.8924256101565167e-18], 'false,false': [nan, -1.8924256101565167e-18]}
{'': [0.015380859374999983, -8.846398602590889e-18], 'false': [nan, -8.846398602590889e-18], 'false,false': [7.463684199160716e-18, -1.6012832085939759e-18], 'false,false,true': [nan, 7.463684199160716e-18]}
{'': [0.02271498107084897, 1.9884591485823698e-17], 'false': [nan, 1.9884591485823698e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 101.065
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(A, F) )
%   | | then if ( follows(F, A), tweets(D, E) )
%   | | | then return 0.8025933795439568;  // std dev = 1.683, 54.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=51 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.14185106490048838;  // std dev = 0.000, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.7026355691388635;  // std dev = 0.985, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.7284185815955166;  // std dev = 0.022, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | | then return 0.43375912649666876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.6361400788776209;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | else return 0.7282839087620173;  // std dev = 0.096, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.1254446385283919;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(E, B), follows(F, E) )
%   | | | then return 0.5712177276972887;  // std dev = 0.023, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.4712971718996967;  // std dev = 1.346, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else if ( follows(G, A), recursion_accounttype(E, B) )
%   | | | then return 0.32188279156512806;  // std dev = 1.226, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.5229803712073178;  // std dev = 0.991, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | else return 0.576121532732278;  // std dev = 0.152, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.11231637819360696;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4353892191151977;  // std dev = 0.156, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else if ( follows(F, A), tweets(A, G) )
%   | | | then return 0.408583885506105;  // std dev = 0.952, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.4206230576725562;  // std dev = 0.042, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.45945065595666135;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3345778123880286;  // std dev = 0.149, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.16426463690646215;  // std dev = 1.236, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.30578890926885577;  // std dev = 1.003, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.322660820548101;  // std dev = 0.058, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926047;  // std dev = 9.88e-08, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | else return -0.09269127618926086;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, F) )
%   | | | then return 0.25732787840256977;  // std dev = 0.028, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.26945625771050036;  // std dev = 0.094, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0.2747512473649852;  // std dev = 0.018, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2918781659475953;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(H, I), tweets(A, I) )
%   | | | then return -0.08277153443177258;  // std dev = 1.484, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.2827731308079844;  // std dev = 0.075, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.30642813682079817;  // std dev = 0.143, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2563124084704299;  // std dev = 0.032, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08518475138839678;  // std dev = 5.59e-09, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.22698590503198943;  // std dev = 0.253, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.16390122163285215;  // std dev = 0.838, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.24149265973574519;  // std dev = 0.131, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.21826956748842172;  // std dev = 0.028, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.041101336573394674;  // std dev = 1.292, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.23162498264635464;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.21529392032273761;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.20318115078995497;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109143;  // std dev = 4.27e-09, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.17585572993350432;  // std dev = 0.887, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return -0.03930634440862768;  // std dev = 0.898, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.20027406843742318;  // std dev = 0.116, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.18332196801604408;  // std dev = 0.025, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.2016626258074349;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.17051079832251984;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.09273016570789329;  // std dev = 1.186, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.17202616135842277;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07324622576333666;  // std dev = 8.48e-09, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.15618507199653955;  // std dev = 0.033, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.06748136109759428;  // std dev = 1.554, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.011034376338823296;  // std dev = 1.753, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | | else return 0.10520677083309897;  // std dev = 0.840, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.20324732573068963;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15745497815673928;  // std dev = 0.022, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1484462920670935;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14850661892070316;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06842697784420282;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.11953193227977532;  // std dev = 0.977, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return -0.014442449466076202;  // std dev = 0.919, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.14902154043779822;  // std dev = 0.060, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.18178931102447424;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return 0.066956156038891;  // std dev = 1.113, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return -0.20587387595458004;  // std dev = 1.005, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.15428134267412436;  // std dev = 0.132, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.031179313682619437;  // std dev = 0.962, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.06419184008202625;  // std dev = 2.36e-08, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '30.786', 'seconds']
Refined model CLL: -0.089285


******************************************
Best model found
******************************************
Results 

CLL : -0.084576 

AUC ROC : 0.995879 

AUC PR : 0.420666 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 101.065 

Total Inference Time : 25.652658939361572 

Total revision time: 159.45008426475525
Best scored revision CLL: -0.089285


Results 

CLL : -0.084576 

AUC ROC : 0.995879 

AUC PR : 0.420666 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 159.597333486557 

Total Inference Time : 25.652658939361572 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 10.804
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8517795083479174;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004877;  // std dev = 1.63e-07, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6957571637434845;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839208;  // std dev = 0.000, 340.000 (wgt'ed) examples reached here.  /* #neg=340 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5501244888377338;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360696;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41074471575754307;  // std dev = 1.403, 130.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.39164657252146934;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30574541198090394;  // std dev = 1.972, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926046;  // std dev = 1.01e-07, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2238900677989079;  // std dev = 2.589, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.96e-09, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21271172409645184;  // std dev = 1.406, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 2.98e-08, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1777511829843922;  // std dev = 1.406, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.27e-07, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13951308889169817;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442029;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
%   | | else return -0.06842697784420262;  // std dev = 2.79e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11517934433044544;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202594;  // std dev = 6.91e-09, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '24.563', 'seconds']
Parameter learned model CLL:-0.087391 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.997, 1, 156], 'false,true': [1.63e-07, 321, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 340, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 288, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.403, 2, 128], 'true,false': [0.0, 262, 0], 'false,true,true': [0.182, 1, 28], 'false,true,false': [0.0, 40, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.972, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.01e-07, 251, 0], 'false,false,false': [0.0, 45, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.589, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 297, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.406, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.98e-08, 306, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.406, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.27e-07, 229, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 277, 0], 'false,false,false': [2.79e-09, 52, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false': [6.91e-09, 306, 0]}]
{'': [0.006328857154454536, 8.300732894393693e-17], 'false': [8.300732894393693e-17, nan]}
{'': [0.024374999999997548, -9.665471037913128e-17], 'false': [-9.665471037913128e-17, nan]}
{'': [0.012497997115847965, -9.868649107779169e-17], 'false': [nan, -9.868649107779169e-17]}
{'': [0.06320583772518876, 0.0732693593150482], 'false': [0.0732693593150482, nan], 'false,true': [0.033293697978597006, -2.0816681711721685e-17], 'true': [0.015147928994083388, -6.440988539810068e-17]}
{'': [0.02431154739610649, 8.251657615457244e-17], 'true': [0.02431154739610649, nan], 'false': [nan, 8.251657615457244e-17], 'false,false': [4.069343357191809e-17, -2.3438041630975527e-17], 'false,false,true': [nan, 4.069343357191809e-17]}
{'': [0.041113866187185245, 3.588599675556062e-17], 'false': [nan, 3.588599675556062e-17], 'false,false': [nan, 3.588599675556062e-17]}
{'': [0.012514637867105547, 2.9025438552291675e-18], 'false': [nan, 2.9025438552291675e-18], 'false,false': [nan, 2.9025438552291675e-18], 'false,false,false': [2.9025438552291675e-18, nan]}
{'': [0.012512529232415871, 3.83105128215723e-17], 'true': [0.012512529232415871, nan], 'false': [7.078277798920212e-17, -1.0092936587501423e-17], 'false,false': [nan, -1.0092936587501423e-17]}
{'': [0.024366970647040388, -7.289002228542061e-17], 'false': [nan, -7.289002228542061e-17], 'false,false': [-2.7254572445671712e-17, 8.540177112501205e-18], 'false,false,true': [nan, -2.7254572445671712e-17]}
{'': [0.030060523259909586, 4.8617609575088554e-17], 'false': [nan, 4.8617609575088554e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 57.55
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.8581489350995104;  // std dev = 7.44e-07, 128.000 (wgt'ed) examples reached here.  /* #pos=128 */
%   | else if ( tweets(A, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.14185106490048777;  // std dev = 1.40e-07, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.7194734122109543;  // std dev = 1.19e-07, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.7194734122109545;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.628564321301864;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), recursion_accounttype(G, B) )
%   | | | then return 0.6480448407823828;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5194734122109544;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.6189976143448207;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.12544463852839202;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.5553664367462854;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( follows(F, A), follows(E, F) )
%   | | | then return 0.4442553256351737;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.5553664367462848;  // std dev = 5.96e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.572817012050425;  // std dev = 0.147, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.11231637819360674;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(G, F) )
%   | | | then return 0.4070862182689805;  // std dev = 0.999, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | | | else return 0.084180250824977;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4192571269794006;  // std dev = 0.059, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.1035591461668319;  // std dev = 0.480, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(I, A), tweets(A, J) )
%   | | then return 0.30460753439349686;  // std dev = 0.330, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0.4550906627803664;  // std dev = 0.082, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.10159632948783613;  // std dev = 3.65e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.3216313268218291;  // std dev = 0.020, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.2753268331113655;  // std dev = 0.981, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.005830838947963657;  // std dev = 0.822, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2007967279818532;  // std dev = 0.819, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.336400581939661;  // std dev = 0.173, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else if ( follows(A, F) )
%   | then return -0.09252633600287305;  // std dev = 1.40e-07, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.2558013642375789;  // std dev = 0.017, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.27587814223390156;  // std dev = 0.078, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.3054242534898883;  // std dev = 0.063, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.279222313597842;  // std dev = 0.057, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.2567736972843769;  // std dev = 0.026, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.4055009729707774;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0.21522429474633842;  // std dev = 0.960, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.262868847456306;  // std dev = 0.092, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.08506718955023009;  // std dev = 5.14e-05, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.2107598679848977;  // std dev = 0.035, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.2450437378129355;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0.2289581327676122;  // std dev = 0.036, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.24028775643160336;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(A, I) )
%   | | then if ( follows(A, H), tweets(A, J) )
%   | | | then return 0.23523063929038118;  // std dev = 0.053, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.16072370520794294;  // std dev = 1.145, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.20828312333703322;  // std dev = 0.034, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.22982433430541208;  // std dev = 0.037, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.07867538844207754;  // std dev = 4.75e-05, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.1788932017952831;  // std dev = 0.040, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.026486855929702634;  // std dev = 0.959, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.19678360240030462;  // std dev = 0.070, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.17761318889050756;  // std dev = 0.033, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.18016873088273624;  // std dev = 0.091, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.1523689341348651;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.1612868576017554;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.07136847580973327;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.073159262421995;  // std dev = 4.53e-05, 333.000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.11751526909563204;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.16055749285278878;  // std dev = 0.220, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( tweets(A, G), follows(D, H) )
%   | | | then return 0.1536745570117987;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.17896246936372423;  // std dev = 0.981, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(I, A), follows(A, I) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return 0.17560575837772627;  // std dev = 0.048, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.17235513058604926;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.15289234115872405;  // std dev = 0.044, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.1687420085969857;  // std dev = 0.103, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.06835499340098103;  // std dev = 4.59e-05, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.11253543137562284;  // std dev = 0.991, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.13671529794984;  // std dev = 0.049, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.1418401844574461;  // std dev = 0.143, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.17874443199887352;  // std dev = 0.179, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.14213774253841732;  // std dev = 0.006, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.14418229157344886;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.12145660261118711;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.03620919433837498;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.06412500480360131;  // std dev = 4.06e-05, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.398', 'seconds']
Refined model CLL: -0.086094


******************************************
Best model found
******************************************
Results 

CLL : -0.091877 

AUC ROC : 0.993375 

AUC PR : 0.409135 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 57.55 

Total Inference Time : 21.273486137390137 

Total revision time: 123.36315098190308
Best scored revision CLL: -0.086094


Results 

CLL : -0.091877 

AUC ROC : 0.993375 

AUC PR : 0.409135 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 123.51040020370483 

Total Inference Time : 21.273486137390137 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.255
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8379469148974912;  // std dev = 1.400, 99.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=97 */
%   | | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13781652909628545;  // std dev = 7.925, 403.000 (wgt'ed) examples reached here.  /* #neg=277 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12039215547813718;  // std dev = 7.562, 371.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=118 */
%   | | | else return 0.06776323603950496;  // std dev = 2.049, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6512882052956164;  // std dev = 1.401, 120.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=118 */
%   | else return -0.1566137598762825;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15039127572040992;  // std dev = 1.919, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06536108944408647;  // std dev = 5.166, 279.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=89 */
%   | | else return 0.10342736581852638;  // std dev = 0.334, 101.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4354941385414966;  // std dev = 2.896, 135.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14975580024985108;  // std dev = 0.168, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.052420790251166104;  // std dev = 4.361, 273.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03193623328488979;  // std dev = 2.251, 90.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.03508537828214315;  // std dev = 4.660, 344.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=118 */
%   | | | else return 0.054011253243713246;  // std dev = 1.558, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3342959865720858;  // std dev = 1.963, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | | | else return -0.1378706115485439;  // std dev = 0.014, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1186301229022943;  // std dev = 1.410, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015024611474120625;  // std dev = 4.101, 374.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.755', 'seconds']
Parameter learned model CLL:-0.15599 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.4, 2, 97], 'false,true,false': [1.79e-07, 0, 29], 'false,false': [0.0, 263, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.925, 277, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.562, 253, 118], 'false,false,false,false': [2.049, 24, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.401, 2, 118], 'true,false': [0.0, 227, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.919, 13, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.166, 190, 89], 'false,false,false': [0.334, 64, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.896, 9, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.168, 220, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.361, 176, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.251, 61, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.66, 226, 118], 'false,false,false,false': [1.558, 16, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.963, 4, 118], 'false,false,true,false': [0.014, 244, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.41, 10, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.101, 248, 126]}]
{'': [nan, 0.21840516480138408], 'false': [0.015380859375004219, -7.767339792054327e-17], 'false,true': [0.019793898581778793, 1.1025663141105003e-15]}
{'': [nan, 0.1558348770284971], 'false': [nan, 0.1558348770285015], 'false,false': [nan, 0.1558348770284971], 'false,false,false': [nan, 0.1558348770285015]}
{'': [nan, 0.15250916242955306], 'false': [nan, 0.1525091624295551], 'false,false': [nan, 0.1525091624295551], 'false,false,false': [0.15412735251864462, 0.13119840266520177]}
{'': [0.15331729063169802, 0.17530828427690714], 'false': [nan, 0.17530828427690714], 'false,false': [nan, 0.17530828427690714], 'false,false,false': [nan, 0.17530828427690714], 'true': [0.01635642419117449, -8.216628552291907e-17]}
{'': [nan, 0.10010455570376571], 'false': [nan, 0.10010455570376803], 'false,false': [0.09563729793644335, 0.11138090096080114], 'false,false,true': [nan, 0.09563729793644335]}
{'': [nan, 0.10442698137032344], 'false': [nan, 0.10442698137032344], 'false,false': [0.06213016460645175, 0.00012871587745423598], 'false,false,false': [nan, 0.00012871587745429654]}
{'': [0.06966667081602822, 0.05627848869524583], 'true': [nan, 0.06966667081602822], 'false': [nan, 0.05627848869524583], 'false,false': [nan, 0.05627848869524583], 'false,false,false': [nan, 0.05627848869524583]}
{'': [nan, 0.06563075459053684], 'false': [nan, 0.06563075459053684], 'false,false': [nan, 0.06563075459053684], 'false,false,false': [0.06313257399988419, 0.10110318111557998]}
{'': [nan, 0.06287271297339872], 'false': [nan, 0.06287271297339873], 'false,false': [0.06007280557539783, 0.1104414616798779], 'false,false,false': [nan, 0.1104414616798779], 'false,false,true': [0.03158933060172662, 7.77601964673083e-07]}
{'': [nan, 0.04496473156949329], 'false': [nan, 0.04496473156949324], 'false,false': [nan, 0.04496473156949329]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 34.411
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.837740771834206;  // std dev = 0.990, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return 0.7152917922423694;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(K, A), recursion_accounttype(J, B) )
%   | | | then return 0.8105298874804645;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.1418510649004882;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, E) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.6833946885358371;  // std dev = 0.198, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.6362728223634666;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.5992500789997908;  // std dev = 0.930, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.7280013143255738;  // std dev = 0.026, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.6809508995001159;  // std dev = 0.201, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.12544463852839177;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1405975224499466;  // std dev = 2.114, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | | else return 0.10719891880537712;  // std dev = 2.115, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5741679747939213;  // std dev = 0.134, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.5689038023238908;  // std dev = 0.039, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.11231637819360664;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.5830478226280434;  // std dev = 1.107, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.14074796567383457;  // std dev = 0.011, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.22805306067097394;  // std dev = 1.240, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.1665753077543845;  // std dev = 1.577, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.39686665854424574;  // std dev = 1.395, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.428796267662582;  // std dev = 0.061, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4365847516119695;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6239507698641228;  // std dev = 0.188, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.10858834263726759;  // std dev = 0.266, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4686081970158513;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1015963294878362;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(C, E), follows(A, C) )
%   | | | then return 0.3351102669529295;  // std dev = 0.043, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.22252947666240017;  // std dev = 1.334, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | else return 0.1221507916565588;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.34108628008261477;  // std dev = 0.067, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.32609317794604215;  // std dev = 0.021, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.09235284224898863;  // std dev = 0.047, 199.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.33444431882613346;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.05053813863187063;  // std dev = 1.321, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return -0.003490793315978632;  // std dev = 1.718, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), follows(A, D) )
%   | | | then return 0.23435878099108368;  // std dev = 1.369, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.27316115011277786;  // std dev = 0.077, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.2432430288361518;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.21706031365140305;  // std dev = 0.991, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2649969751526462;  // std dev = 0.073, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.43245432454955207;  // std dev = 0.150, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3949165678200509;  // std dev = 0.937, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.09175992581805603;  // std dev = 0.270, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.17095547787400467;  // std dev = 1.368, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.23016344631588348;  // std dev = 0.026, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.23324269797639996;  // std dev = 0.048, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.22243225661010504;  // std dev = 0.067, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.07452718787957785;  // std dev = 0.071, 162.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=3 */
%   | | else return -0.01833104708596416;  // std dev = 0.150, 90.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21696752139055103;  // std dev = 0.065, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.008241006251153166;  // std dev = 1.163, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.033880734371180984;  // std dev = 1.262, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(C, D) )
%   | | then return 0.19180453023624897;  // std dev = 0.058, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( tweets(A, E), tweets(C, E) )
%   | | | then return 0.07377768341106719;  // std dev = 0.924, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.18935685724737703;  // std dev = 0.047, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.1923650456434953;  // std dev = 0.039, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.22880918860123625;  // std dev = 0.122, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.05366512218546235;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return -0.05259665944307561;  // std dev = 0.080, 225.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.06004736343801286;  // std dev = 1.189, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.005971065407490119;  // std dev = 1.368, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.1403639361356621;  // std dev = 1.849, 94.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=90 */
%   | | | else return 0.20788099098454402;  // std dev = 0.099, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.18143158280637267;  // std dev = 0.076, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3558604520338481;  // std dev = 0.214, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.08187453286651;  // std dev = 0.367, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.05362738371451097;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.06962623116419711;  // std dev = 9.86e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( follows(D, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.14497780662049242;  // std dev = 0.033, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.07206464989843439;  // std dev = 1.332, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return -0.3578108138438608;  // std dev = 0.982, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.14508657829535482;  // std dev = 0.057, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(E, A) )
%   | then return -0.05170021923608748;  // std dev = 0.118, 259.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=23 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.21475164701329863;  // std dev = 0.195, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.10829746501486288;  // std dev = 0.002, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.11263175512861083;  // std dev = 0.571, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.044324856028609375;  // std dev = 0.826, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '30.211', 'seconds']
Refined model CLL: -0.099641


******************************************
Best model found
******************************************
Results 

CLL : -0.100514 

AUC ROC : 0.995142 

AUC PR : 0.399584 

Precision : 0.347722 

Recall : 0.929487 

F1 : 0.506108 

Total Learning Time : 34.411 

Total Inference Time : 24.013602018356323 

Total revision time: 73.14724289512634
Best scored revision CLL: -0.099641


Results 

CLL : -0.100514 

AUC ROC : 0.995142 

AUC PR : 0.399584 

Precision : 0.347722 

Recall : 0.929487 

F1 : 0.506108 

Total Learning Time : 73.2240837726593 

Total Inference Time : 24.013602018356323 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.066
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.816482268432844;  // std dev = 2.189, 120.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=115 */
%   | | else return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.14185106490048766;  // std dev = 1.02e-08, 330.000 (wgt'ed) examples reached here.  /* #neg=330 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16794056781600641;  // std dev = 8.624, 450.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.14254482690057682;  // std dev = 7.673, 371.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=128 */
%   | | | else return 0.13804102273907304;  // std dev = 3.604, 82.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6296752604618708;  // std dev = 1.966, 132.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=128 */
%   | else return -0.16364336397933177;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09297618575620951;  // std dev = 3.614, 90.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06324897140186449;  // std dev = 5.379, 303.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=97 */
%   | | else return 0.06942863766180739;  // std dev = 0.342, 186.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47766212458694685;  // std dev = 2.537, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15731474582285118;  // std dev = 0.244, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0375466180437026;  // std dev = 4.828, 347.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03611319769179601;  // std dev = 2.952, 120.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.02614548016375972;  // std dev = 4.784, 388.000 (wgt'ed) examples reached here.  /* #neg=260 #pos=128 */
%   | | | else return 0.026406973664256077;  // std dev = 3.017, 92.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.323018796760531;  // std dev = 2.198, 133.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=128 */
%   | | | else return -0.1389210832793653;  // std dev = 0.004, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.019126596956721233;  // std dev = 2.984, 95.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.007738990843945652;  // std dev = 5.051, 489.000 (wgt'ed) examples reached here.  /* #neg=333 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.149', 'seconds']
Parameter learned model CLL:-0.157593 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.189, 5, 115], 'false,true,false': [2.46e-07, 0, 41], 'false,false': [1.02e-08, 330, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.624, 294, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.673, 243, 128], 'false,false,false,false': [3.604, 54, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.966, 4, 128], 'true,false': [0.0, 261, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.614, 62, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.379, 206, 97], 'false,false,false': [0.342, 127, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.537, 6, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.244, 303, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.828, 232, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.952, 79, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.784, 260, 128], 'false,false,false,false': [3.017, 64, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.198, 5, 128], 'false,false,true,false': [0.004, 250, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.984, 67, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.051, 333, 156]}]
{'': [nan, 0.21677361550682425], 'false': [0.030091431657735174, 1.049665405100148e-16], 'false,true': [0.03993055555555891, 1.4730764034050857e-15]}
{'': [nan, 0.16526664576840275], 'false': [nan, 0.1652666457684067], 'false,false': [nan, 0.16526664576840275], 'false,false,false': [nan, 0.1652666457684067]}
{'': [nan, 0.15862813021499178], 'false': [nan, 0.15862813021499256], 'false,false': [nan, 0.15862813021499256], 'false,false,false': [0.15867773494922371, 0.15838708655049927]}
{'': [0.1502164181763488, 0.14512631725866013], 'true': [0.029267029223367172, -4.151638590169168e-16], 'false': [nan, 0.14512631725866013], 'false,false': [nan, 0.14512631725866013], 'false,false,false': [nan, 0.14512631725866013]}
{'': [nan, 0.10373127903464287], 'false': [nan, 0.10373127903464217], 'false,false': [0.09550555589289332, 0.11710758470494594], 'false,false,true': [nan, 0.09550555589289332]}
{'': [nan, 0.1054981103929928], 'false': [nan, 0.1054981103929928], 'false,false': [0.03972395761776471, 0.00019633554583816802], 'false,false,false': [nan, 0.0001963355458383058]}
{'': [0.06717708078078594, 0.07264074119372409], 'false': [nan, 0.07264074119372409], 'false,false': [nan, 0.07264074119372409], 'false,false,false': [nan, 0.07264074119372409], 'true': [nan, 0.06717708078078594]}
{'': [nan, 0.06664463814725989], 'false': [nan, 0.06664463814725989], 'false,false': [nan, 0.06664463814725989], 'false,false,false': [0.05898389971053904, 0.09895291454226583]}
{'': [nan, 0.06749392794956949], 'false': [nan, 0.06749392794956935], 'false,false': [0.06098251688653526, 0.09374071462752144], 'false,false,false': [nan, 0.09374071462752144], 'false,false,true': [0.036323698060051146, 5.7539877193590884e-08]}
{'': [nan, 0.0521736719022804], 'false': [nan, 0.05217367190228051], 'false,false': [nan, 0.0521736719022804]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 57.875
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7152917922423694;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.8581489350995117;  // std dev = 1.88e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8164822684328454;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   else return -0.14185106490048766;  // std dev = 1.91e-07, 332.000 (wgt'ed) examples reached here.  /* #neg=332 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.7194734122109542;  // std dev = 1.19e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( tweets(C, E), tweets(A, F) )
%   | | then return 0.386140078877621;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7274065038819155;  // std dev = 0.075, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.11290634201202403;  // std dev = 0.103, 137.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=2 */
%   | | else if ( follows(G, I), recursion_accounttype(I, B) )
%   | | | then return 0.7269123211840414;  // std dev = 0.054, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.6300704843048837;  // std dev = 0.312, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.11301534081075396;  // std dev = 3.599, 89.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=25 */
%   | | | else return 0.14250597809617746;  // std dev = 2.736, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), follows(C, D) )
%   | | then return 0.5585178361975693;  // std dev = 0.138, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | else return 0.31857197842569773;  // std dev = 0.885, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.22203310341295093;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(A, F) )
%   | | | then return 0.6244254513412424;  // std dev = 0.161, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5670666763421696;  // std dev = 0.183, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.11304269768332594;  // std dev = 0.009, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.6031359503470181;  // std dev = 0.042, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.10409562235154747;  // std dev = 3.057, 65.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=19 */
%   | | | else return 0.15487904085972282;  // std dev = 3.111, 60.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(E, F) )
%   | | then if ( follows(G, E) )
%   | | | then return 0.3946469328068942;  // std dev = 1.616, 91.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=88 */
%   | | | else return 0.14934822642837656;  // std dev = 0.859, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.45412565679143424;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6672680975591164;  // std dev = 0.134, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return -0.11743450059904395;  // std dev = 0.388, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.42471426077949004;  // std dev = 0.079, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, J), follows(K, A) )
%   | | then return -0.07548504492828818;  // std dev = 0.115, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.10417177219588526;  // std dev = 1.389, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.04958028654453342;  // std dev = 1.938, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3317379231326228;  // std dev = 0.243, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.38126580720431374;  // std dev = 0.183, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.28682171537412404;  // std dev = 1.020, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else if ( tweets(D, F), tweets(A, F) )
%   | | | then return -0.09663543142152424;  // std dev = 0.920, 177.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=1 */
%   | | | else return -0.08489190973622045;  // std dev = 0.411, 51.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=1 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3457594048586986;  // std dev = 0.039, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.028998713734321505;  // std dev = 3.023, 112.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=29 */
%   | | | else return 0.0885040270134545;  // std dev = 2.250, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.24806226294186548;  // std dev = 1.007, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | | else return 0.17798965341041664;  // std dev = 1.469, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | else return 0.030659476668619012;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, F) )
%   | | | then return 0.2699349709554455;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.31349905541373585;  // std dev = 0.084, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.4362062699659734;  // std dev = 1.319, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.5470847428855969;  // std dev = 0.281, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(I, A) )
%   | then return -0.08516515769549003;  // std dev = 0.038, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else return -0.15586015215922802;  // std dev = 0.182, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( tweets(A, D), follows(C, E) )
%   | | then return 0.19287855099028642;  // std dev = 0.182, 91.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=88 */
%   | | else return 0.10311960143616883;  // std dev = 0.325, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else return -0.07862359814846323;  // std dev = 0.031, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.11006238112598593;  // std dev = 0.936, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.38057710075414997;  // std dev = 0.151, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return -0.12429925617328864;  // std dev = 0.052, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then return 0.13335245853261946;  // std dev = 0.518, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.010207708877526383;  // std dev = 0.592, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.06296086646104523;  // std dev = 1.897, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.18642020904489084;  // std dev = 0.116, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E), follows(A, C) )
%   | | then if ( follows(A, F), follows(F, C) )
%   | | | then return -0.10184213198255054;  // std dev = 1.187, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.1819091729184119;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.20181061903092054;  // std dev = 0.027, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(G, A) )
%   | then return -0.04732846763944203;  // std dev = 0.103, 243.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=23 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.22980583666171653;  // std dev = 1.532, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return -0.11483324941211899;  // std dev = 0.075, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.037374536275526296;  // std dev = 1.114, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.04295298810975316;  // std dev = 1.487, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.13130165385882428;  // std dev = 1.679, 77.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=74 */
%   | | | else return -0.12314035511849158;  // std dev = 1.208, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.2393860441974347;  // std dev = 0.046, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return -0.07955964317854901;  // std dev = 0.265, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.15795977649184503;  // std dev = 0.062, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07365510068442573;  // std dev = 0.018, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.014080192562076552;  // std dev = 0.475, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06805431707354043;  // std dev = 1.062, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.07781053006653844;  // std dev = 1.340, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(C, D) )
%   | then if ( follows(D, C), follows(A, D) )
%   | | then return 0.1495186005597268;  // std dev = 0.115, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( follows(A, D), follows(C, A) )
%   | | | then return 0.13929141745192208;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.5367786781626798;  // std dev = 1.015, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.16694623533700934;  // std dev = 0.048, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( follows(A, E), follows(E, A) )
%   | then return -0.04799567213443915;  // std dev = 0.091, 173.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=15 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(G, F) )
%   | | | then return 0.13499310608127718;  // std dev = 0.042, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.017248693796853325;  // std dev = 0.892, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.01730796047512924;  // std dev = 1.315, 107.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=25 */
%   | | | else return 0.010207432784673863;  // std dev = 1.919, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '57.326', 'seconds']
Refined model CLL: -0.10209


******************************************
Best model found
******************************************
Results 

CLL : -0.097006 

AUC ROC : 0.993987 

AUC PR : 0.393209 

Precision : 0.347107 

Recall : 1.0 

F1 : 0.515337 

Total Learning Time : 57.875 

Total Inference Time : 69.48749804496765 

Total revision time: 145.55800820922852
Best scored revision CLL: -0.10209


Results 

CLL : -0.097006 

AUC ROC : 0.993987 

AUC PR : 0.393209 

Precision : 0.347107 

Recall : 1.0 

F1 : 0.515337 

Total Learning Time : 145.63484908676148 

Total Inference Time : 69.48749804496765 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.095
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.809129327256374;  // std dev = 2.181, 102.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=97 */
%   | | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.14185106490048827;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.169247024131447;  // std dev = 7.753, 363.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12161333079589202;  // std dev = 7.516, 369.000 (wgt'ed) examples reached here.  /* #neg=251 #pos=118 */
%   | | | else return 0.22802551091967946;  // std dev = 1.770, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6327987896727013;  // std dev = 1.962, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else return -0.16175161925882658;  // std dev = 0.170, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05843245921619837;  // std dev = 1.960, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1019401575326877;  // std dev = 4.946, 240.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=89 */
%   | | else return 0.0717846519861606;  // std dev = 0.327, 112.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46700000018733456;  // std dev = 2.013, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15494372431505352;  // std dev = 0.170, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03446111370263847;  // std dev = 4.383, 286.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01166651235541562;  // std dev = 2.392, 97.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.01623394485887872;  // std dev = 4.694, 381.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=118 */
%   | | | else return 0.13695732719064402;  // std dev = 1.374, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3342306962425937;  // std dev = 1.884, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | | | else return -0.13829564198985617;  // std dev = 0.043, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07742883306470524;  // std dev = 1.409, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01282072556252898;  // std dev = 4.035, 380.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.301', 'seconds']
Parameter learned model CLL:-0.157406 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.181, 5, 97], 'false,true,false': [1.79e-07, 0, 29], 'false,false': [0.0, 247, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.753, 237, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.516, 251, 118], 'false,false,false,false': [1.77, 10, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.962, 4, 118], 'true,false': [0.17, 220, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.96, 20, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.946, 151, 89], 'false,false,false': [0.327, 75, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.013, 4, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.17, 252, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.383, 189, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.392, 68, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.694, 263, 118], 'false,false,false,false': [1.374, 9, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.884, 4, 118], 'false,false,true,false': [0.043, 231, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.409, 11, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.035, 254, 126]}]
{'': [nan, 0.22222222222222493], 'false': [0.03671114736903867, -1.4023869784738819e-16], 'false,true': [0.04661668589004392, 1.1025663141105003e-15]}
{'': [nan, 0.16557131491112848], 'false': [nan, 0.1655713149111327], 'false,false': [nan, 0.16557131491112848], 'false,false,false': [nan, 0.1655713149111327]}
{'': [nan, 0.15458417765203708], 'false': [nan, 0.15458417765203714], 'false,false': [nan, 0.15458417765203714], 'false,false,false': [0.1531036004483427, 0.17413913508994566]}
{'': [0.1562124680939221, 0.13724489875525658], 'true': [0.03156287787142136, 0.00013205402984484946], 'false': [nan, 0.13724489875525658], 'false,false': [nan, 0.13724489875525658], 'false,false,false': [nan, 0.13724489875525658]}
{'': [nan, 0.10372297364643063], 'false': [nan, 0.10372297364643263], 'false,false': [0.10192652628498401, 0.10695248926478719], 'false,false,true': [nan, 0.10192652628498401]}
{'': [nan, 0.09752586979449425], 'false': [nan, 0.09752586979449425], 'false,false': [0.031178896384833347, 0.00011421201890247725], 'false,false,false': [nan, 0.00011421201890233626]}
{'': [0.06718247516513198, 0.05897585503031086], 'true': [nan, 0.06718247516513198], 'false': [nan, 0.05897585503031086], 'false,false': [nan, 0.05897585503031086], 'false,false,false': [nan, 0.05897585503031086]}
{'': [nan, 0.06070493089403979], 'false': [nan, 0.06070493089403979], 'false,false': [nan, 0.06070493089403979], 'false,false,false': [0.0578341527345035, 0.11109251379252838]}
{'': [nan, 0.06293337860914314], 'false': [nan, 0.06293337860914344], 'false,false': [0.060559859391432914, 0.10442384688285745], 'false,false,false': [nan, 0.10442384688285745], 'false,false,true': [0.029098483301379083, 7.83807876491069e-06]}
{'': [nan, 0.042849455358472184], 'false': [nan, 0.0428494553584721], 'false,false': [nan, 0.042849455358472184]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 35.339
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then return 0.8581489350995128;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), tweets(G, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.14185106490048824;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then return 0.7056704926461101;  // std dev = 0.120, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | else if ( follows(A, C), tweets(A, E) )
%   | | then return 0.29090198363952563;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return 0.7343849979581674;  // std dev = 0.072, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7218177060118497;  // std dev = 0.053, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.12615930188903993;  // std dev = 0.155, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7341785278711165;  // std dev = 0.080, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09986684166876753;  // std dev = 1.447, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.15619471171805724;  // std dev = 1.690, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.5645258478040427;  // std dev = 0.175, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( follows(A, C), tweets(C, E) )
%   | | then return 0.3756262506140854;  // std dev = 0.803, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5784626190298809;  // std dev = 0.125, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.5577884147363565;  // std dev = 0.068, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.11224514498845287;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.6374024433627837;  // std dev = 0.057, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07140525580230106;  // std dev = 1.923, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.28064018402441004;  // std dev = 1.484, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(E, F) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.4025565370370247;  // std dev = 1.350, 88.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=86 */
%   | | | else return 0.28795002405643333;  // std dev = 1.184, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.43550694000134077;  // std dev = 1.297, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.5667201545590882;  // std dev = 0.197, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.10724818375053088;  // std dev = 0.249, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.4152552473418764;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10153761576524065;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then return 0.31226913301050724;  // std dev = 0.115, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | else return 0.3577533024560318;  // std dev = 0.194, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.08689557534837639;  // std dev = 0.070, 147.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.33258987980613863;  // std dev = 0.075, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.09216320105996807;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3766814251381397;  // std dev = 1.104, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.11312786671930436;  // std dev = 0.043, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.01203512625431249;  // std dev = 0.690, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.019450430834235734;  // std dev = 1.369, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, F) )
%   | | then return 0.2672600831501658;  // std dev = 0.160, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.1933772591290057;  // std dev = 0.896, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.26834193169418397;  // std dev = 0.147, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.3228170638445818;  // std dev = 0.091, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.48959915114803687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.33402541719000106;  // std dev = 0.916, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.09043947326712495;  // std dev = 0.247, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21848619744859693;  // std dev = 0.184, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(A, E) )
%   | | | then return 0.06659677662957503;  // std dev = 0.840, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.23063120673538112;  // std dev = 0.121, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.07827948709381416;  // std dev = 0.003, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.24441960782781672;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.008660076399216642;  // std dev = 0.911, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.0163355537042443;  // std dev = 1.337, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.17863021852380553;  // std dev = 0.072, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.10526609494041078;  // std dev = 0.305, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(C, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.03529502089747665;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.06195222918387461;  // std dev = 0.878, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.19474948627808905;  // std dev = 0.038, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then return -0.05084395071180056;  // std dev = 0.090, 250.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=23 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2797572576606035;  // std dev = 0.247, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.0948986016230652;  // std dev = 0.040, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0.004934314258910679;  // std dev = 0.227, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( tweets(E, G), recursion_accounttype(F, B) )
%   | | | then return 0.15986296900248842;  // std dev = 1.355, 107.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=105 */
%   | | | else return -0.14741532404638188;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.27711310873113704;  // std dev = 0.121, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.380320631655043;  // std dev = 0.118, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07668664877660769;  // std dev = 0.283, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.1442106792848178;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.0698983645286441;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), tweets(D, E) )
%   | | then return 0.143442818155703;  // std dev = 0.162, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.17683139754517163;  // std dev = 0.095, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.13687903765258966;  // std dev = 0.733, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.02312092549338492;  // std dev = 0.787, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, G), follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.17127775979612342;  // std dev = 0.121, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.06462586696920455;  // std dev = 0.002, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.13106154361115427;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.06520453010391232;  // std dev = 0.002, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.005235990990318521;  // std dev = 1.267, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '32.924', 'seconds']
Refined model CLL: -0.098193


******************************************
Best model found
******************************************
Results 

CLL : -0.097736 

AUC ROC : 0.994943 

AUC PR : 0.39404 

Precision : 0.336343 

Recall : 0.955128 

F1 : 0.497496 

Total Learning Time : 35.339 

Total Inference Time : 26.760082006454468 

Total revision time: 76.45097087287903
Best scored revision CLL: -0.098193


Results 

CLL : -0.097736 

AUC ROC : 0.994943 

AUC PR : 0.39404 

Precision : 0.336343 

Recall : 0.955128 

F1 : 0.497496 

Total Learning Time : 81.53905723953247 

Total Inference Time : 26.760082006454468 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.95
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8495282454443384;  // std dev = 0.996, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | | else return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else return -0.14185106490048774;  // std dev = 8.33e-09, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18094832004999797;  // std dev = 8.470, 430.000 (wgt'ed) examples reached here.  /* #neg=274 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12018485628561383;  // std dev = 7.764, 396.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=128 */
%   | | | else return 0.10631652709669721;  // std dev = 3.669, 92.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6128753793072784;  // std dev = 2.396, 134.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=128 */
%   | else return -0.1623674030328098;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08767346559240742;  // std dev = 3.643, 92.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06818311073099978;  // std dev = 5.330, 296.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=97 */
%   | | else return 0.09302119525990167;  // std dev = 0.353, 170.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4897208549827895;  // std dev = 2.054, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1580435989588052;  // std dev = 0.249, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.028031047793194534;  // std dev = 4.864, 359.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02837753184865131;  // std dev = 2.951, 128.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.03709843605502002;  // std dev = 4.729, 361.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=128 */
%   | | | else return 0.05378751065839605;  // std dev = 2.880, 82.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.34149090794775344;  // std dev = 1.403, 130.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=128 */
%   | | | else return -0.13920324136664544;  // std dev = 0.020, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04247455967046785;  // std dev = 2.896, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015160721631897687;  // std dev = 4.795, 461.000 (wgt'ed) examples reached here.  /* #neg=305 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.115', 'seconds']
Parameter learned model CLL:-0.16039 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.996, 1, 115], 'false,true,false': [0.988, 1, 41], 'false,false': [8.33e-09, 314, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.47, 274, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.764, 268, 128], 'false,false,false,false': [3.669, 64, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.396, 6, 128], 'true,false': [0.0, 249, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.643, 64, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.33, 199, 97], 'false,false,false': [0.353, 111, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.054, 4, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.249, 296, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.864, 244, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.951, 87, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.729, 233, 128], 'false,false,false,false': [2.88, 54, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.403, 2, 128], 'false,false,true,false': [0.02, 241, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.896, 53, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.795, 305, 156]}]
{'': [nan, 0.2212726228095405], 'false': [0.012497997115852777, 6.788624863950002e-17], 'false,true': [0.008546373365044909, 0.023242630385488926]}
{'': [nan, 0.16683254569401276], 'false': [nan, 0.16683254569401765], 'false,false': [nan, 0.16683254569401276], 'false,false,false': [nan, 0.16683254569401765]}
{'': [nan, 0.1511381370544144], 'false': [nan, 0.15113813705441442], 'false,false': [nan, 0.15113813705441442], 'false,false,false': [0.15222591002323704, 0.14629991232525438]}
{'': [0.15169408747237467, 0.1442381423426185], 'true': [0.04284404803821727, -9.630850334097744e-17], 'false': [nan, 0.1442381423426185], 'false,false': [nan, 0.1442381423426185], 'false,false,false': [nan, 0.1442381423426185]}
{'': [nan, 0.10659953563707986], 'false': [nan, 0.10659953563707965], 'false,false': [0.09598661419872105, 0.12468663474875376], 'false,false,true': [nan, 0.09598661419872105]}
{'': [nan, 0.10495234443188223], 'false': [nan, 0.10495234443188223], 'false,false': [0.026355565598045905, 0.00020944490878231373], 'false,false,false': [nan, 0.0002094449087821697]}
{'': [0.06590761581753325, 0.06805116223853584], 'false': [nan, 0.06805116223853584], 'false,false': [nan, 0.06805116223853584], 'false,false,false': [nan, 0.06805116223853584], 'true': [nan, 0.06590761581753325]}
{'': [nan, 0.06924082046962109], 'false': [nan, 0.06924082046962109], 'false,false': [nan, 0.06924082046962109], 'false,false,false': [0.06193631608045199, 0.10117148589189737]}
{'': [nan, 0.06610966332259258], 'false': [nan, 0.06610966332259248], 'false,false': [0.057899106636136635, 0.10357214576993909], 'false,false,false': [nan, 0.10357214576993909], 'false,false,true': [0.015132063007349462, 1.6401942820289941e-06]}
{'': [nan, 0.049875841860657286], 'false': [nan, 0.04987584186065658], 'false,false': [nan, 0.049875841860657286]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 37.078
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), tweets(E, F) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.8105298874804645;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.858148935099512;  // std dev = 2.38e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.14185106490048777;  // std dev = 1.37e-07, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7106276635922443;  // std dev = 0.107, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | else return -0.26450800207366176;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.11234513386576558;  // std dev = 0.104, 129.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.6757709541387225;  // std dev = 0.980, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.1254446385283911;  // std dev = 7.30e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.7289832469462058;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.07199527617142197;  // std dev = 0.805, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.05560922948718303;  // std dev = 2.901, 70.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=15 */
%   | | | else return 0.11556535364658575;  // std dev = 3.580, 87.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5601470851583339;  // std dev = 0.072, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else return 0.5175075685009103;  // std dev = 0.187, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.4082465367139911;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.11362906493121724;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.5684315272162754;  // std dev = 0.047, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.11231637819360625;  // std dev = 6.50e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.3797331040318167;  // std dev = 0.410, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08304406332338332;  // std dev = 3.599, 96.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=25 */
%   | | | else return 0.1464516740965542;  // std dev = 2.628, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.43038826204133773;  // std dev = 0.342, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.39876079573152307;  // std dev = 0.792, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.6490004850513816;  // std dev = 0.989, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else return -0.11729308169396681;  // std dev = 0.332, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4198907006619806;  // std dev = 0.014, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return -0.10267722887502503;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0.07393003392780735;  // std dev = 0.430, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.0032871288066744194;  // std dev = 0.471, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04401503589243901;  // std dev = 2.380, 44.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32402933290526953;  // std dev = 0.092, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, F) )
%   | | | then return 0.029441949904292403;  // std dev = 1.035, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.36225226993542475;  // std dev = 0.312, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(G, D), tweets(D, H) )
%   | | | then return -0.08901190877911119;  // std dev = 0.622, 237.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=2 */
%   | | | else return -0.16306722492520562;  // std dev = 0.536, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.3934897538237535;  // std dev = 0.053, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.03805489645456353;  // std dev = 3.068, 113.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=29 */
%   | | | else return 0.15132629843279183;  // std dev = 2.146, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.22350521823956998;  // std dev = 1.394, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | | | else return 0.014045282685582932;  // std dev = 1.078, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.22764001678943824;  // std dev = 0.937, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.2854600002447951;  // std dev = 0.162, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.3116970445707084;  // std dev = 0.137, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.01595916467027525;  // std dev = 0.663, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.51959669427271;  // std dev = 0.050, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.6188081984189647;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1065476292022883;  // std dev = 0.031, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then if ( follows(A, E), follows(C, E) )
%   | | then return 0.21501575354503613;  // std dev = 0.046, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else if ( follows(A, F), tweets(A, G) )
%   | | | then return -0.09720300076179951;  // std dev = 0.803, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.21925221508101342;  // std dev = 0.045, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.10388513991419053;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.048309035474704165;  // std dev = 0.103, 248.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=23 */
%   | else if ( follows(A, I), tweets(A, J) )
%   | | then if ( tweets(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.35599907907585787;  // std dev = 0.332, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.12106973058820102;  // std dev = 0.013, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.02481614910532113;  // std dev = 1.561, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04589273179791117;  // std dev = 1.870, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.14988132601552465;  // std dev = 0.986, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return -0.15414587611569616;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.18968446627874627;  // std dev = 0.023, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.18660456081785196;  // std dev = 0.103, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2351227976044895;  // std dev = 0.159, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.07367633278612222;  // std dev = 0.030, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21198926770236987;  // std dev = 0.053, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -5.850586564780131E-4;  // std dev = 1.424, 59.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=15 */
%   | | | else return 0.05648621815972077;  // std dev = 2.256, 67.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=25 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.17878600254235313;  // std dev = 0.413, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | | else return 0.06950021042683349;  // std dev = 1.033, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.17922685056901547;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3398843579480687;  // std dev = 0.131, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.0828683936226537;  // std dev = 0.024, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.15634229503975183;  // std dev = 0.029, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(I, A) )
%   | | then return -0.056107046823655235;  // std dev = 0.067, 40.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0659668061037784;  // std dev = 0.969, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return -0.009060055224799699;  // std dev = 1.404, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.14187583670495857;  // std dev = 0.120, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.07419582895310256;  // std dev = 0.243, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, F) )
%   | | | then return 0.19927491910297687;  // std dev = 0.297, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.15109688169918814;  // std dev = 0.826, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.06403949833973663;  // std dev = 0.031, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.1969831790848931;  // std dev = 1.301, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return -0.11360970619625715;  // std dev = 0.125, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.029133758889566784;  // std dev = 1.060, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.0911537895384324;  // std dev = 1.242, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '28.451', 'seconds']
Refined model CLL: -0.102411


******************************************
Best model found
******************************************
Results 

CLL : -0.094953 

AUC ROC : 0.994611 

AUC PR : 0.410973 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 37.078 

Total Inference Time : 34.88585305213928 

Total revision time: 90.08420789527894
Best scored revision CLL: -0.102411


Results 

CLL : -0.094953 

AUC ROC : 0.994611 

AUC PR : 0.410973 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 95.17229426193238 

Total Inference Time : 34.88585305213928 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.305
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8479448534668583;  // std dev = 0.995, 98.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=97 */
%   | | else return 0.7936328060672536;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | else return -0.14185106490048846;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16691555494944493;  // std dev = 7.740, 364.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13138757131025663;  // std dev = 7.434, 354.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=118 */
%   | | | else return 0.17191471135728292;  // std dev = 1.851, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6124978201582916;  // std dev = 2.388, 124.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=118 */
%   | else return -0.16198287193559635;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06565042558868131;  // std dev = 1.951, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08119481904811451;  // std dev = 4.995, 260.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=89 */
%   | | else return 0.08639281395596826;  // std dev = 0.336, 108.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4558502393029523;  // std dev = 2.386, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15371416951311465;  // std dev = 0.144, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04362013470978764;  // std dev = 4.277, 279.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07758702801987996;  // std dev = 2.178, 72.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.014416047757761641;  // std dev = 4.813, 372.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=118 */
%   | | | else return 0.09207583393811376;  // std dev = 1.455, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3411138927737096;  // std dev = 1.706, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | | | else return -0.1404026735208918;  // std dev = 0.029, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.031088111285434716;  // std dev = 1.512, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.023022267088328784;  // std dev = 4.027, 350.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.413', 'seconds']
Parameter learned model CLL:-0.159094 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.995, 1, 97], 'false,true,false': [1.368, 2, 29], 'false,false': [0.0, 230, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.74, 238, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.434, 236, 118], 'false,false,false,false': [1.851, 13, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.388, 6, 118], 'true,false': [0.0, 232, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.951, 20, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.995, 171, 89], 'false,false,false': [0.336, 71, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.386, 6, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.144, 255, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.277, 182, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.178, 43, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.813, 254, 118], 'false,false,false,false': [1.455, 12, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.706, 3, 118], 'false,false,true,false': [0.029, 221, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.512, 16, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.027, 224, 126]}]
{'': [nan, 0.22779152861942695], 'false': [0.022714981070853308, -2.0852884636437723e-16], 'false,true': [0.010099958350688542, 0.06035379812695236]}
{'': [nan, 0.16456500349662703], 'false': [nan, 0.16456500349663153], 'false,false': [nan, 0.16456500349662703], 'false,false,false': [nan, 0.16456500349663153]}
{'': [nan, 0.15660799612384585], 'false': [nan, 0.15660799612384624], 'false,false': [nan, 0.15660799612384624], 'false,false,false': [0.1561288659433826, 0.16313429009118424]}
{'': [0.15216811515922368, 0.13596756987495148], 'true': [0.045975594234811186, -2.6798486801296883e-17], 'false': [nan, 0.13596756987495148], 'false,false': [nan, 0.13596756987495148], 'false,false,false': [nan, 0.13596756987495148]}
{'': [nan, 0.10085740306662565], 'false': [nan, 0.10085740306662772], 'false,false': [0.09594451499838558, 0.11266563657627228], 'false,false,true': [nan, 0.09594451499838558]}
{'': [nan, 0.09826969587032251], 'false': [nan, 0.09826969587032251], 'false,false': [0.04311894027138825, 8.168808256331437e-05], 'false,false,false': [nan, 8.168808256340145e-05]}
{'': [0.06557388903539642, 0.0658882333957478], 'false': [nan, 0.0658882333957478], 'false,false': [nan, 0.0658882333957478], 'false,false,false': [nan, 0.0658882333957478], 'true': [nan, 0.06557388903539642]}
{'': [nan, 0.06477831914622552], 'false': [nan, 0.06477831914622552], 'false,false': [nan, 0.06477831914622552], 'false,false,false': [0.062265675447596924, 0.10579015579550485]}
{'': [nan, 0.06373013028312263], 'false': [nan, 0.06373013028312256], 'false,false': [0.06152107306200883, 0.09520800323204626], 'false,false,false': [nan, 0.09520800323204626], 'false,false,true': [0.02405278027973379, 3.6835911932734975e-06]}
{'': [nan, 0.0463336431196108], 'false': [nan, 0.04633364311961066], 'false,false': [nan, 0.0463336431196108]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 49.96
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.8146706742299468;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8278459047964819;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.1418510649004884;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7244760375023709;  // std dev = 0.074, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.4755486463834699;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.6818038434686111;  // std dev = 0.982, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return -0.1254446385283915;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7537707295238012;  // std dev = 0.092, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.11313781858150546;  // std dev = 2.158, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0.09318665529200607;  // std dev = 2.064, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, C) )
%   | then if ( tweets(A, D) )
%   | | then return 0.5321071290947451;  // std dev = 0.153, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0.5569505816328603;  // std dev = 0.021, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.5714656526389178;  // std dev = 0.063, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.5829859123125725;  // std dev = 0.090, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.41350253364546835;  // std dev = 0.931, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.11231637819360678;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.5928016500859556;  // std dev = 0.126, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.17586383580546358;  // std dev = 1.988, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | | else return 0.1124701164514753;  // std dev = 1.990, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.42851328097980124;  // std dev = 0.183, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.5235043070429037;  // std dev = 0.960, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.6576539040083437;  // std dev = 0.101, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.11159424671542713;  // std dev = 0.332, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.43955222746982825;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1015963294878362;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3240737332594706;  // std dev = 0.068, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.33923847085912145;  // std dev = 0.142, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.34418903545609597;  // std dev = 0.082, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09193432167076074;  // std dev = 0.004, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.025492323485712322;  // std dev = 1.728, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0.0786088591777211;  // std dev = 1.566, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), follows(D, E) )
%   | | | then return 0.2335226535123195;  // std dev = 1.619, 104.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=101 */
%   | | | else return -0.07579420743485248;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.11378380865235166;  // std dev = 0.831, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.25087804146787346;  // std dev = 0.085, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5152985209717522;  // std dev = 0.083, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.09747170976746854;  // std dev = 0.394, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(A, C), tweets(A, E) )
%   | | | then return 0.17652530037938605;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.21160289528283163;  // std dev = 0.007, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( recursion_accounttype(D, B), follows(C, D) )
%   | | | then return 0.013193501250099927;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.16601298103284495;  // std dev = 0.974, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else return 0.22864610103483982;  // std dev = 0.121, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(F, A) )
%   | then return -0.05021746158024336;  // std dev = 0.102, 238.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=23 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2070906581927211;  // std dev = 0.075, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.0017627129699710623;  // std dev = 1.354, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.03329436052895492;  // std dev = 1.220, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then return 0.15766066249294036;  // std dev = 0.157, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return 0.1917192186160796;  // std dev = 0.044, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return -0.1402845575881699;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1940567756248374;  // std dev = 0.106, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then return -0.04342476940673696;  // std dev = 0.108, 217.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.33015150579108415;  // std dev = 0.353, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.13768403062152668;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.09485446508557104;  // std dev = 0.711, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.12494716995016085;  // std dev = 0.805, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.11111494567842412;  // std dev = 1.868, 67.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=63 */
%   | | | else return 0.19604051297917469;  // std dev = 0.231, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.21227472154238938;  // std dev = 0.219, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.3326624545562646;  // std dev = 0.117, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.08614656099222782;  // std dev = 0.431, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.0485846574273912;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.07147452839134918;  // std dev = 4.56e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(C, A) )
%   | | | then return 0.1207602221391696;  // std dev = 0.985, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.003574576870244983;  // std dev = 0.862, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.16306871571978393;  // std dev = 0.039, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.003454398402095582;  // std dev = 0.832, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( follows(A, F) )
%   | | then return -0.05359599683114396;  // std dev = 0.099, 228.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=18 */
%   | | else return -0.016189669634279612;  // std dev = 0.142, 56.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=13 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.14978893783549782;  // std dev = 0.030, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.06672886735272011;  // std dev = 0.002, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.02638388153960501;  // std dev = 0.879, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '29.155', 'seconds']
Refined model CLL: -0.102239


******************************************
Best model found
******************************************
Results 

CLL : -0.106244 

AUC ROC : 0.994389 

AUC PR : 0.354481 

Precision : 0.338785 

Recall : 0.929487 

F1 : 0.496575 

Total Learning Time : 49.96 

Total Inference Time : 24.7613308429718 

Total revision time: 89.72768200874329
Best scored revision CLL: -0.102239


Results 

CLL : -0.106244 

AUC ROC : 0.994389 

AUC PR : 0.354481 

Precision : 0.338785 

Recall : 0.929487 

F1 : 0.496575 

Total Learning Time : 89.81929291725159 

Total Inference Time : 24.7613308429718 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.889
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8410549180054936;  // std dev = 1.402, 117.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=115 */
%   | | else return 0.8116373071925351;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | else return -0.1418510649004879;  // std dev = 1.86e-09, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15357615915530673;  // std dev = 8.715, 473.000 (wgt'ed) examples reached here.  /* #neg=317 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12365053223314526;  // std dev = 7.816, 399.000 (wgt'ed) examples reached here.  /* #neg=271 #pos=128 */
%   | | | else return 0.1199270436567709;  // std dev = 3.665, 89.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6427666224913567;  // std dev = 1.715, 131.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=128 */
%   | else return -0.15914220609956614;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13340213176690535;  // std dev = 3.537, 78.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07858112544460179;  // std dev = 5.247, 286.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=97 */
%   | | else return 0.09497400654075423;  // std dev = 0.352, 170.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48135346501523624;  // std dev = 2.329, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15668771850381555;  // std dev = 0.283, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03724400508128834;  // std dev = 4.699, 348.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.051501786157741584;  // std dev = 2.955, 112.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.027395824579951805;  // std dev = 4.707, 387.000 (wgt'ed) examples reached here.  /* #neg=259 #pos=128 */
%   | | | else return 0.04048331376051944;  // std dev = 2.870, 86.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.31997772131017876;  // std dev = 2.194, 133.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=128 */
%   | | | else return -0.1382202381602767;  // std dev = 0.026, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04361425285589942;  // std dev = 2.819, 82.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.005316277057147322;  // std dev = 4.979, 492.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.331', 'seconds']
Parameter learned model CLL:-0.159393 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.402, 2, 115], 'false,true,false': [1.381, 2, 41], 'false,false': [1.86e-09, 289, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.715, 317, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.816, 271, 128], 'false,false,false,false': [3.665, 61, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.715, 3, 128], 'true,false': [0.0, 238, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.537, 50, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.247, 189, 97], 'false,false,false': [0.352, 111, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.329, 5, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.283, 305, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.699, 233, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.955, 71, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.707, 259, 128], 'false,false,false,false': [2.87, 58, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.194, 5, 128], 'false,false,true,false': [0.026, 275, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.819, 54, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.979, 336, 156]}]
{'': [nan, 0.22672506584789082], 'false': [0.024375000000006076, 0.0], 'false,true': [0.016801811673609827, 0.044348296376420925]}
{'': [nan, 0.16057198276009393], 'false': [nan, 0.16057198276009857], 'false,false': [nan, 0.16057198276009393], 'false,false,false': [nan, 0.16057198276009857]}
{'': [nan, 0.15271750768290432], 'false': [nan, 0.15271750768290532], 'false,false': [nan, 0.15271750768290532], 'false,false,false': [0.15311263262752747, 0.15093476901647848]}
{'': [0.1552184366964506, 0.16035687634991774], 'false': [nan, 0.16035687634991774], 'false,false': [nan, 0.16035687634991774], 'false,false,false': [nan, 0.16035687634991774], 'true': [0.022454796862641308, -1.7539657868027682e-16]}
{'': [nan, 0.1065562333306208], 'false': [nan, 0.1065562333306209], 'false,false': [0.09626029269852963, 0.12370909592844118], 'false,false,true': [nan, 0.09626029269852963]}
{'': [nan, 0.10386648778315885], 'false': [nan, 0.10386648778315885], 'false,false': [0.03368825624365019, 0.00026215245693858515], 'false,false,false': [nan, 0.00026215245693858515]}
{'': [0.06343706614274795, 0.07797743079896946], 'false': [nan, 0.07797743079896946], 'false,false': [nan, 0.07797743079896946], 'false,false,false': [nan, 0.07797743079896946], 'true': [nan, 0.06343706614274795]}
{'': [nan, 0.06428394642804652], 'false': [nan, 0.06428394642804652], 'false,false': [nan, 0.06428394642804652], 'false,false,false': [0.05724674999937456, 0.0958111902336643]}
{'': [nan, 0.06459084685765991], 'false': [nan, 0.06459084685765977], 'false,false': [0.05792412390194289, 0.09688394090943873], 'false,false,false': [nan, 0.09688394090943873], 'false,false,true': [0.03617982730422847, 2.3823736734097555e-06]}
{'': [nan, 0.05038573166469069], 'false': [nan, 0.05038573166469076], 'false,false': [nan, 0.05038573166469069]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 34.599
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, D), tweets(A, F) )
%   | | | then return 0.7929315437951642;  // std dev = 1.675, 46.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=43 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( tweets(A, G), follows(A, D) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.3581489350995122;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.8581489350995121;  // std dev = 1.69e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.14185106490048763;  // std dev = 1.93e-07, 333.000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7260360405558394;  // std dev = 0.060, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.6861917381529561;  // std dev = 1.000, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12544463852839188;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.16122398582960118;  // std dev = 2.994, 56.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=19 */
%   | | | else return 0.1294567689537191;  // std dev = 3.245, 69.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.561866750307434;  // std dev = 0.074, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.5752531229216222;  // std dev = 0.157, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.15793507563843;  // std dev = 1.208, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.11231637819360678;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.0999039766401144;  // std dev = 2.701, 51.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=15 */
%   | | | else return 0.1343163185342196;  // std dev = 3.417, 75.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.39769650852430927;  // std dev = 0.173, 94.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=91 */
%   | | else return 0.6148672704325924;  // std dev = 0.094, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else return -0.11940071541926284;  // std dev = 0.420, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.3721819252937936;  // std dev = 0.821, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.6561786200911193;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11571676594447913;  // std dev = 0.148, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.4756111895673561;  // std dev = 0.150, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10159632948783626;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.04140977904232484;  // std dev = 0.361, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.329933222755459;  // std dev = 0.069, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.3188423907183255;  // std dev = 0.167, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.3196082072165664;  // std dev = 0.890, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09126190363772876;  // std dev = 0.003, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.019735261895470337;  // std dev = 2.253, 59.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=15 */
%   | | | else return 0.06167477787427628;  // std dev = 2.963, 82.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.2481357408658353;  // std dev = 0.989, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | | else return 0.20387969503669554;  // std dev = 0.976, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.1932175209516158;  // std dev = 1.399, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.08552593564369343;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.21982294764633825;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.05109082808563933;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.506148180617571;  // std dev = 0.030, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.582535447874968;  // std dev = 0.252, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.10476021999431263;  // std dev = 0.579, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B), follows(D, C) )
%   | | then return 0.20127614421673404;  // std dev = 0.128, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | else if ( follows(A, E), follows(E, C) )
%   | | | then return -0.09287564540895653;  // std dev = 2.182, 22.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | | | else return 0.250694969378984;  // std dev = 0.184, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.08023679734599108;  // std dev = 0.053, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.21784354897599786;  // std dev = 0.030, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.16931132026384038;  // std dev = 0.950, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.0766008165196842;  // std dev = 0.003, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.04104294427455884;  // std dev = 1.722, 56.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=21 */
%   | | | else return 0.02440438148414276;  // std dev = 2.427, 84.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=27 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, C) )
%   | | then return 0.16386936292199877;  // std dev = 0.151, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else return 0.1916937270411155;  // std dev = 0.088, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, C) )
%   | | then return 0.18125361587907673;  // std dev = 0.016, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -7.891018285735019E-4;  // std dev = 0.853, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A) )
%   | then return -0.03947196384065983;  // std dev = 0.106, 218.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=23 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.3333083549341605;  // std dev = 0.436, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.13806979335814767;  // std dev = 0.013, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.11830952366973604;  // std dev = 0.723, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.038134743827633544;  // std dev = 1.682, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.16357026305770406;  // std dev = 0.105, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.029740905562030417;  // std dev = 1.537, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.22561433636673212;  // std dev = 0.999, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.29987764518121707;  // std dev = 0.156, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.08432852429522969;  // std dev = 0.415, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.16119036317417812;  // std dev = 0.016, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(I, A) )
%   | | then return -0.048674685198665225;  // std dev = 0.095, 47.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.02451356341712142;  // std dev = 0.761, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.07317555695202134;  // std dev = 1.363, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(D, A), follows(D, C) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.14267706852079332;  // std dev = 0.014, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.07779950307152808;  // std dev = 0.965, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.13745903911487278;  // std dev = 0.016, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.18795396613781926;  // std dev = 0.054, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.13922393441525194;  // std dev = 0.043, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), follows(G, A) )
%   | | | then return -0.06166217326220722;  // std dev = 0.273, 148.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=1 */
%   | | | else return -0.009701056225161573;  // std dev = 1.081, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.017001221854215966;  // std dev = 1.691, 87.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=25 */
%   | | | else return 0.026363887799485765;  // std dev = 1.727, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.147', 'seconds']
Refined model CLL: -0.10563


******************************************
Best model found
******************************************
Results 

CLL : -0.101159 

AUC ROC : 0.993919 

AUC PR : 0.428932 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 34.599 

Total Inference Time : 28.879244804382324 

Total revision time: 81.43790992546081
Best scored revision CLL: -0.10563


Results 

CLL : -0.101159 

AUC ROC : 0.993919 

AUC PR : 0.428932 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 81.52952083396912 

Total Inference Time : 28.879244804382324 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 9.185
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8273797043302796;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048816;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6948722393290376;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839188;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5163624647558296;  // std dev = 0.223, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360686;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4158344477672079;  // std dev = 1.710, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4406278361969606;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.28898006557994965;  // std dev = 2.576, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926051;  // std dev = 6.14e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | | else return -0.09269127618926087;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2798924743556447;  // std dev = 0.014, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.59e-09, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19628376378698692;  // std dev = 1.971, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 6.99e-08, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1712283975935497;  // std dev = 1.711, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333661;  // std dev = 1.31e-07, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333699;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1023950800742965;  // std dev = 0.249, 135.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442028;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   | | else return -0.06842697784420267;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10970167824660204;  // std dev = 0.208, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202607;  // std dev = 5.43e-09, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '32.946', 'seconds']
Parameter learned model CLL:-0.092127 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 258, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 253, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.223, 7, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 253, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.71, 3, 118], 'true,false': [0.0, 237, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.576, 7, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 205, 0], 'false,false,false': [0.0, 24, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.014, 0, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 222, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.971, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.99e-08, 221, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.711, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.31e-07, 219, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.249, 9, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 263, 0], 'false,false,false': [0.0, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.208, 6, 126], 'false,true': [0.0, 0, 0], 'false,false': [5.43e-09, 279, 0]}]
{'': [0.02982248520710475, -9.639145640156398e-17], 'false': [-9.639145640156398e-17, nan]}
{'': [0.0298224852071024, -6.49458528239222e-17], 'false': [-6.49458528239222e-17, nan]}
{'': [0.0498614958448742, -9.47858392565351e-17], 'false': [nan, -9.47858392565351e-17]}
{'': [0.06807837840821518, 0.0705616910046177], 'false': [0.0705616910046177, nan], 'false,true': [-2.7755575615628914e-17, 0.0], 'true': [0.024178676319924416, -7.495176537553799e-17]}
{'': [0.04990742726196435, 2.617993158504736e-17], 'true': [0.04990742726196435, nan], 'false': [nan, 2.617993158504736e-17], 'false,false': [1.8413455042563573e-17, -1.1564823173178713e-18], 'false,false,true': [nan, 1.8413455042563573e-17]}
{'': [1.4706642588462292e-06, 3.100622861565752e-17], 'false': [nan, 3.100622861565752e-17], 'false,false': [nan, 3.100622861565752e-17]}
{'': [0.02987181262757862, 2.210398782059135e-17], 'false': [nan, 2.210398782059135e-17], 'false,false': [nan, 2.210398782059135e-17], 'false,false,false': [2.210398782059135e-17, nan]}
{'': [0.02270471782859924, 6.491982093147102e-17], 'true': [0.02270471782859924, nan], 'false': [7.807047753071877e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.062195567854448096, -4.300159602421381e-17], 'false': [nan, -4.300159602421381e-17], 'false,false': [-2.110690160884328e-17, -1.982541115402065e-18], 'false,false,true': [nan, -2.110690160884328e-17]}
{'': [0.043371250210340044, 2.944677556353462e-17], 'false': [nan, 2.944677556353462e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 46.146
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995128;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7581489350995123;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   else return -0.1418510649004885;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7199566846782861;  // std dev = 0.032, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.6401874857915268;  // std dev = 1.361, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else return 0.23566303986657847;  // std dev = 1.001, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.7383620354652111;  // std dev = 0.072, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.12544463852839188;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5585552629705784;  // std dev = 0.086, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.4866188176280141;  // std dev = 0.967, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( tweets(A, G), tweets(D, G) )
%   | | | then return 0.16950232775400484;  // std dev = 1.054, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.5762894755636688;  // std dev = 0.104, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.579770183685706;  // std dev = 0.160, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.1123163781936069;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.38743806708321815;  // std dev = 1.707, 75.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=72 */
%   | | | else return 0.149917007224512;  // std dev = 1.164, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.437937827842351;  // std dev = 0.168, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.427282345353634;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.32901911857223853;  // std dev = 0.036, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.21528989536684068;  // std dev = 1.595, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | else return 0.3535055692163747;  // std dev = 0.200, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.34221783186990057;  // std dev = 0.164, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926046;  // std dev = 1.10e-07, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | else return -0.09269127618926086;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.26318885657154795;  // std dev = 0.053, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.28693595581123715;  // std dev = 0.166, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.1435821888597908;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return -0.033250873345359984;  // std dev = 1.398, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.156526702069035;  // std dev = 0.887, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2577913759291457;  // std dev = 0.000792, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2669336152769726;  // std dev = 0.048, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, I) )
%   | then return -0.08518475138839678;  // std dev = 5.35e-09, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.19648518845894458;  // std dev = 0.983, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.07615808176819255;  // std dev = 0.929, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.29551727247613163;  // std dev = 0.087, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.216201535389279;  // std dev = 0.073, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.15050426672048461;  // std dev = 0.949, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.23540613588884748;  // std dev = 0.086, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.030654877226590167;  // std dev = 1.196, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.21631193648818975;  // std dev = 0.051, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109143;  // std dev = 3.95e-09, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.1933336529543429;  // std dev = 0.181, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | | else return 0.04932606025454973;  // std dev = 0.935, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return -0.05422392104098969;  // std dev = 0.885, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.1910418926125979;  // std dev = 0.060, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return 0.04416286976654595;  // std dev = 0.872, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.10850321545002654;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09218062963119122;  // std dev = 0.955, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.18440048801517192;  // std dev = 0.035, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.07324622576333681;  // std dev = 7.21e-09, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, F) )
%   | | then if ( follows(A, G), follows(G, D) )
%   | | | then return 0.16011987642483885;  // std dev = 0.107, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.17777181299862369;  // std dev = 0.103, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, H) )
%   | | | then return 0.1747644252363795;  // std dev = 0.026, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2312602614051083;  // std dev = 0.104, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(I, A), follows(A, J) )
%   | | then if ( follows(A, K), follows(J, K) )
%   | | | then return 0.1923824268422109;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12377456129776028;  // std dev = 0.715, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.23909121362634783;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15938754482655917;  // std dev = 0.028, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420278;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.1460532710243834;  // std dev = 0.153, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 7.793116739758021E-4;  // std dev = 0.857, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(D, G) )
%   | | | then return -0.5527173080038996;  // std dev = 0.873, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.019128650527281344;  // std dev = 0.842, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, A) )
%   | | | then return 0.13168350580373833;  // std dev = 0.005, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.14277095472361906;  // std dev = 0.060, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.17587329161209345;  // std dev = 0.050, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.13608902995008548;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06419184008202625;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.866', 'seconds']
Refined model CLL: -0.09045


******************************************
Best model found
******************************************
Results 

CLL : -0.084401 

AUC ROC : 0.996592 

AUC PR : 0.512129 

Precision : 0.332618 

Recall : 0.99359 

F1 : 0.498392 

Total Learning Time : 46.146 

Total Inference Time : 16.75757622718811 

Total revision time: 95.85341325378418
Best scored revision CLL: -0.09045


Results 

CLL : -0.084401 

AUC ROC : 0.996592 

AUC PR : 0.512129 

Precision : 0.332618 

Recall : 0.99359 

F1 : 0.498392 

Total Learning Time : 95.9542373714447 

Total Inference Time : 16.75757622718811 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 10.65
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8093684472946316;  // std dev = 2.759, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048777;  // std dev = 1.33e-07, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7103447232558464;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839205;  // std dev = 0.000, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.520836054792064;  // std dev = 0.215, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360697;  // std dev = 0.000, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4172502438642934;  // std dev = 1.712, 131.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=128 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.40566824860238204;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.10159632948783616;  // std dev = 3.23e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3166905599036199;  // std dev = 1.976, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 9.19e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.261737568520641;  // std dev = 1.406, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20659502276410505;  // std dev = 1.715, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 3.65e-08, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.166445534629452;  // std dev = 1.974, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333678;  // std dev = 1.18e-07, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12403279303594095;  // std dev = 0.203, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.66e-08, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | | else return -0.06842697784420262;  // std dev = 2.28e-09, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11937725096197216;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202591;  // std dev = 7.15e-09, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.447', 'seconds']
Parameter learned model CLL:-0.087097 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.759, 8, 156], 'false,true': [1.33e-07, 310, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 322, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.215, 8, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 275, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.712, 3, 128], 'true,false': [0.0, 230, 0], 'false,true,true': [0.182, 1, 28], 'false,true,false': [3.23e-09, 60, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.976, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.19e-08, 243, 0], 'false,false,false': [0.0, 57, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.406, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 313, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.715, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.65e-08, 298, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.974, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.18e-07, 251, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 74, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.203, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.66e-08, 221, 0], 'false,false,false': [2.28e-09, 63, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.15e-09, 311, 0]}]
{'': [0.04640095181440217, 5.730183352904034e-17], 'false': [5.730183352904034e-17, nan]}
{'': [0.01851192595229339, -9.102449642889482e-17], 'false': [-9.102449642889482e-17, nan]}
{'': [0.046400951814394804, -1.0012193094801412e-16], 'false': [nan, -1.0012193094801412e-16]}
{'': [0.07035894217607393, 0.06737321389783377], 'true': [0.022376318396364076, -7.723290606088045e-17], 'false': [0.06737321389783377, nan], 'false,true': [0.03329369797859682, 7.401486830834377e-18]}
{'': [0.02439880506044121, 8.733754460384564e-17], 'true': [0.02439880506044121, nan], 'false': [nan, 8.733754460384564e-17], 'false,false': [3.4723024638482264e-17, -2.921639538487254e-17], 'false,false,true': [nan, 3.4723024638482264e-17]}
{'': [0.012509138311151434, 3.688919954026079e-17], 'false': [nan, 3.688919954026079e-17], 'false,false': [nan, 3.688919954026079e-17]}
{'': [0.018500994775372055, 4.470696743457006e-18], 'false': [nan, 4.470696743457006e-18], 'false,false': [nan, 4.470696743457006e-18], 'false,false,false': [4.470696743457006e-18, nan]}
{'': [0.024347416479642902, 2.1862853408003083e-17], 'true': [0.024347416479642902, nan], 'false': [5.57323111963226e-17, -1.2752561769343015e-17], 'false,false': [nan, -1.2752561769343015e-17]}
{'': [0.041105775015890765, -4.378344322465406e-17], 'false': [nan, -4.378344322465406e-17], 'false,false': [2.0094534382355774e-17, 5.28677630773884e-18], 'false,false,true': [nan, 2.0094534382355774e-17]}
{'': [0.030089924821827336, 5.140582493441239e-17], 'false': [nan, 5.140582493441239e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 83.727
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.832507909458486;  // std dev = 0.987, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.8581489350995118;  // std dev = 1.88e-07, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7547006592374433;  // std dev = 1.640, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.14185106490048796;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7220139171375232;  // std dev = 0.030, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.7194734122109544;  // std dev = 2.98e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3861400788776211;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.6956590569972145;  // std dev = 0.974, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.7282153308922135;  // std dev = 0.053, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.12544463852839208;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(G, F) )
%   | | | then return 0.5583726950732772;  // std dev = 0.025, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.3509426876013069;  // std dev = 1.279, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( follows(D, H), follows(H, D) )
%   | | | then return -0.10961044624804396;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.32523286236422144;  // std dev = 0.796, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.38807234370376437;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5563256175802777;  // std dev = 0.025, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.5684103051707836;  // std dev = 0.100, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else return -0.11231637819360682;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4232219719951416;  // std dev = 0.166, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.3234029345528017;  // std dev = 1.348, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else return 0.4495826978399297;  // std dev = 0.181, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(H, A) )
%   | | then if ( tweets(A, I), recursion_accounttype(H, B) )
%   | | | then return 0.4166627211035078;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.081110567640285;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.41222508084372883;  // std dev = 2.58e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.10159632948783617;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.30523108010479727;  // std dev = 0.990, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.34704985844234587;  // std dev = 0.138, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( recursion_accounttype(D, B), follows(F, E) )
%   | | | then return -0.0030030518038646945;  // std dev = 0.838, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.34536964969839273;  // std dev = 0.038, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.3370006413730908;  // std dev = 0.220, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926047;  // std dev = 8.43e-08, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else return -0.092691276189261;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.26053051078873574;  // std dev = 0.008, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.25597619100127866;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2903911035322533;  // std dev = 0.150, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.26887375809200453;  // std dev = 0.120, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3047491511878516;  // std dev = 0.031, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.20291571191659757;  // std dev = 0.966, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.25446747506163986;  // std dev = 0.035, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(J, A) )
%   | then return -0.08518475138839678;  // std dev = 5.51e-09, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else return -0.08518475138839678;  // std dev = 3.33e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.21347154233109572;  // std dev = 0.007, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.21032545251857226;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.08269113696330357;  // std dev = 1.624, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | | else return 0.1862145458195842;  // std dev = 0.990, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.22654889823501426;  // std dev = 0.102, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.0567076937473205;  // std dev = 0.712, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(J, A), tweets(J, K) )
%   | | | then return 0.25116820848148547;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21612050152372383;  // std dev = 0.068, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.07877675473109141;  // std dev = 4.21e-08, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.17921510287171633;  // std dev = 0.009, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.19659585024677034;  // std dev = 0.118, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(F, A), tweets(F, D) )
%   | | | then return 0.1997947266889887;  // std dev = 0.080, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1889125160448675;  // std dev = 0.057, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.1773037228135498;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.00905480704501258;  // std dev = 0.912, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.2081954178934673;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1827000349961218;  // std dev = 0.099, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.073246225763337;  // std dev = 5.27e-09, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.11490683608382635;  // std dev = 1.313, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.1671741683882704;  // std dev = 0.114, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.15193526224412818;  // std dev = 1.143, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return 0.15311313593365666;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.18294660381383654;  // std dev = 0.079, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.16428527230286702;  // std dev = 0.018, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.15496041727287746;  // std dev = 0.064, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, K) )
%   | then return -0.06842697784420292;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return -0.06842697784420262;  // std dev = 2.11e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.1408548646767612;  // std dev = 0.102, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | | else return 0.14770122274063144;  // std dev = 0.071, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.20069892148474508;  // std dev = 0.065, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(G, I) )
%   | | | then return 0.14383532202364033;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.3195825441740578;  // std dev = 1.011, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1406284924357784;  // std dev = 0.021, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.12846430407045759;  // std dev = 0.008, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(L, A) )
%   | then return -0.06419184008202625;  // std dev = 9.31e-10, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.157', 'seconds']
Refined model CLL: -0.085681


******************************************
Best model found
******************************************
Results 

CLL : -0.091832 

AUC ROC : 0.994886 

AUC PR : 0.461146 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 83.727 

Total Inference Time : 30.003666877746582 

Total revision time: 159.8806189556122
Best scored revision CLL: -0.085681


Results 

CLL : -0.091832 

AUC ROC : 0.994886 

AUC PR : 0.461146 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 159.98144307327271 

Total Inference Time : 30.003666877746582 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.448
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8581489350995115;  // std dev = 3.58e-07, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | | else return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else return -0.14185106490048852;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15547625427922707;  // std dev = 7.779, 378.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1428966868368457;  // std dev = 7.348, 340.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=118 */
%   | | | else return 0.2256245357970618;  // std dev = 1.751, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6407444560803227;  // std dev = 1.400, 120.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=118 */
%   | else return -0.16199234913650493;  // std dev = 2.98e-07, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1865343797053393;  // std dev = 1.708, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06190060585756103;  // std dev = 5.066, 276.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=89 */
%   | | else return 0.0447792896679219;  // std dev = 0.328, 120.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4792231954520302;  // std dev = 1.375, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15267877098739324;  // std dev = 0.249, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.021525826678750585;  // std dev = 4.315, 307.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.047117511402685136;  // std dev = 2.218, 84.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.028496259849583382;  // std dev = 4.631, 348.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=118 */
%   | | | else return 0.026840663018788735;  // std dev = 1.491, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.30237381912025973;  // std dev = 2.572, 125.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=118 */
%   | | | else return -0.13658898213687065;  // std dev = 0.007, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.02838989390935082;  // std dev = 1.684, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.002291380686255138;  // std dev = 4.401, 391.000 (wgt'ed) examples reached here.  /* #neg=265 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.793', 'seconds']
Parameter learned model CLL:-0.152555 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [3.58e-07, 0, 97], 'false,true,false': [0.983, 1, 29], 'false,false': [0.0, 225, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.779, 252, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.348, 222, 118], 'false,false,false,false': [1.751, 10, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.4, 2, 118], 'true,false': [2.98e-07, 252, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.708, 10, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.066, 187, 89], 'false,false,false': [0.328, 83, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.375, 2, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.249, 257, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.315, 210, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.218, 55, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.631, 230, 118], 'false,false,false,false': [1.491, 16, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.572, 7, 118], 'false,false,true,false': [0.007, 235, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.684, 19, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.401, 265, 126]}]
{'': [nan, 0.22982308884297806], 'false': [0.007812015624035403, -2.329001189435884e-16], 'false,true': [1.3185329117197736e-15, 0.03222222222222335]}
{'': [nan, 0.1601057110600169], 'false': [nan, 0.16010571106002153], 'false,false': [nan, 0.1601057110600169], 'false,false,false': [nan, 0.16010571106002153]}
{'': [nan, 0.15971220527035274], 'false': [nan, 0.1597122052703522], 'false,false': [nan, 0.1597122052703522], 'false,false,false': [0.15880584564949315, 0.17033254100131626]}
{'': [0.1460828419627425, 0.1620660609117528], 'false': [nan, 0.1620660609117528], 'false,false': [nan, 0.1620660609117528], 'false,false,false': [nan, 0.1620660609117528], 'true': [0.016337005328244204, 3.5245175384925603e-16]}
{'': [nan, 0.09751074586346767], 'false': [nan, 0.09751074586346736], 'false,false': [0.0930038287175816, 0.10767234597277806], 'false,false,true': [nan, 0.0930038287175816]}
{'': [nan, 0.09369050264246989], 'false': [nan, 0.09369050264246989], 'false,false': [0.014772290991389214, 0.0002417537293816819], 'false,false,false': [nan, 0.00024175372938165082]}
{'': [0.06065083612736268, 0.058560970640208876], 'true': [nan, 0.06065083612736268], 'false': [nan, 0.058560970640208876], 'false,false': [nan, 0.058560970640208876], 'false,false,false': [nan, 0.058560970640208876]}
{'': [nan, 0.0636192926603726], 'false': [nan, 0.0636192926603726], 'false,false': [nan, 0.0636192926603726], 'false,false,false': [0.06161786478154085, 0.0926374327413325]}
{'': [nan, 0.06518072520900753], 'false': [nan, 0.06518072520900821], 'false,false': [0.062053936434727064, 0.10505237684017034], 'false,false,false': [nan, 0.10505237684017034], 'false,false,true': [0.0529322971569665, 1.9830149536432522e-07]}
{'': [nan, 0.04952997455662841], 'false': [nan, 0.04952997455662822], 'false,false': [nan, 0.04952997455662841]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 38.965
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, F) )
%   | | | then return 0.7993254056877476;  // std dev = 1.680, 51.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=48 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.14185106490048843;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(E, C), follows(A, E) )
%   | | then if ( follows(A, C), follows(E, A) )
%   | | | then return 0.6771371371923727;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.44045500023122414;  // std dev = 1.187, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.7225981532870802;  // std dev = 0.020, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.729293726556641;  // std dev = 0.034, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.6929186012770482;  // std dev = 0.206, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return -0.1217654483909124;  // std dev = 0.061, 210.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.4254697804636667;  // std dev = 1.151, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2588553795148504;  // std dev = 1.900, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | | | else return 0.16843990085920738;  // std dev = 1.930, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5620170899058954;  // std dev = 0.116, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(C, F) )
%   | | | then return 0.272719568045975;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.6771853671189756;  // std dev = 0.123, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.14238480678698265;  // std dev = 1.227, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else if ( follows(G, A), follows(A, G) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.5290424299413794;  // std dev = 0.215, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return -0.11268372218674798;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.5543189414297736;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.1126837221867477;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.1495439504390239;  // std dev = 2.733, 47.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.42414838042129965;  // std dev = 1.010, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | | | else return 0.4783347391562969;  // std dev = 0.299, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.6258575642994362;  // std dev = 0.227, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.11236341979198666;  // std dev = 0.389, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.4170084930430651;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10189901574270128;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3357764863725089;  // std dev = 0.149, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return -0.017101520621574752;  // std dev = 1.117, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.4096454174718367;  // std dev = 0.138, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.43885936654112934;  // std dev = 0.116, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.285746885849865;  // std dev = 0.638, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.09214946062306249;  // std dev = 0.004, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.027016819534542245;  // std dev = 1.643, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.07049332877173348;  // std dev = 1.538, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.25172372661068704;  // std dev = 1.339, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | | else return 0.15938504030294026;  // std dev = 1.716, 33.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=29 */
%   | | else return 0.0852896550734186;  // std dev = 0.355, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2960525131178756;  // std dev = 0.110, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4816908049968705;  // std dev = 0.000763, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.09708403107356582;  // std dev = 0.454, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.22578901206633742;  // std dev = 0.126, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(E, A), follows(E, C) )
%   | | then return -0.11362112551069381;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2228872021741462;  // std dev = 0.021, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.30522156332653794;  // std dev = 0.049, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.007227648886018734;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.2373748564208971;  // std dev = 0.013, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.07746419234415926;  // std dev = 0.002, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07906964484104728;  // std dev = 1.084, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | | else return -1.4657601862156348E-4;  // std dev = 1.300, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.17633624243334892;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.03808546201262413;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.18337012806093378;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18551780801796147;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then return -0.04568496702127262;  // std dev = 0.098, 228.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3144904374876993;  // std dev = 0.244, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.15848934837315454;  // std dev = 0.029, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.22093164876299276;  // std dev = 0.436, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.01291135982414944;  // std dev = 1.195, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( tweets(E, F), follows(G, E) )
%   | | | then return 0.1793227039079851;  // std dev = 0.326, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | | else return -0.08738614142425878;  // std dev = 0.616, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.19369091358142368;  // std dev = 0.154, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3124433399919552;  // std dev = 0.151, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.08702352612321089;  // std dev = 0.510, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.17146698863789744;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.06974701822249453;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.13734793051633917;  // std dev = 0.010, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.09267298265076276;  // std dev = 0.978, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0.16209678503488564;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.14826526212415914;  // std dev = 0.076, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, G) )
%   | | | then return 0.09861351731551127;  // std dev = 1.729, 37.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=33 */
%   | | | else return 0.2671232782193073;  // std dev = 0.107, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.0636810091224019;  // std dev = 2.98e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | | else return -0.1515603607765143;  // std dev = 0.476, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.06535523879531369;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '34.085', 'seconds']
Refined model CLL: -0.099878


******************************************
Best model found
******************************************
Results 

CLL : -0.105827 

AUC ROC : 0.99486 

AUC PR : 0.377752 

Precision : 0.345882 

Recall : 0.942308 

F1 : 0.506024 

Total Learning Time : 38.965 

Total Inference Time : 28.51827573776245 

Total revision time: 82.72077978897096
Best scored revision CLL: -0.099878


Results 

CLL : -0.105827 

AUC ROC : 0.99486 

AUC PR : 0.377752 

Precision : 0.345882 

Recall : 0.942308 

F1 : 0.506024 

Total Learning Time : 82.77994478988649 

Total Inference Time : 28.51827573776245 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.064
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8085621582400064;  // std dev = 2.388, 121.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=115 */
%   | | else return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.14185106490048785;  // std dev = 5.27e-09, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16008412908199798;  // std dev = 8.699, 463.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1310518934600743;  // std dev = 7.795, 387.000 (wgt'ed) examples reached here.  /* #neg=259 #pos=128 */
%   | | | else return 0.11452886910299118;  // std dev = 3.691, 90.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6577534498250972;  // std dev = 1.006, 129.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=128 */
%   | else return -0.16101233297611625;  // std dev = 3.37e-07, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1379941050680935;  // std dev = 3.503, 78.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06915250172307398;  // std dev = 5.317, 298.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=97 */
%   | | else return 0.09139226627356749;  // std dev = 0.351, 169.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49223496842741965;  // std dev = 1.871, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15663847875135423;  // std dev = 0.276, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.042939842298870046;  // std dev = 4.782, 329.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0268709406626656;  // std dev = 2.881, 127.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.028317873528149545;  // std dev = 4.768, 372.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=128 */
%   | | | else return 0.03106760511123448;  // std dev = 2.895, 90.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3457132153598772;  // std dev = 1.008, 129.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=128 */
%   | | | else return -0.13865510776902165;  // std dev = 0.005, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.038646997461589554;  // std dev = 2.872, 83.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01001366307288496;  // std dev = 4.810, 470.000 (wgt'ed) examples reached here.  /* #neg=314 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.882', 'seconds']
Parameter learned model CLL:-0.160006 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.388, 6, 115], 'false,true,false': [2.46e-07, 0, 41], 'false,false': [5.27e-09, 300, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.699, 307, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.795, 259, 128], 'false,false,false,false': [3.691, 62, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.006, 1, 128], 'true,false': [3.37e-07, 278, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.503, 50, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.317, 201, 97], 'false,false,false': [0.351, 110, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.871, 3, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.276, 310, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.782, 214, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.881, 86, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.768, 244, 128], 'false,false,false,false': [2.895, 62, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.008, 1, 128], 'false,false,true,false': [0.005, 260, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.872, 55, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.81, 314, 156]}]
{'': [nan, 0.2236464833867462], 'false': [0.03566529492456011, 3.256654205567126e-17], 'false,true': [0.04712792842019318, 1.4730764034050857e-15]}
{'': [nan, 0.16342466176360126], 'false': [nan, 0.16342466176360554], 'false,false': [nan, 0.16342466176360126], 'false,false,false': [nan, 0.16342466176360554]}
{'': [nan, 0.1559737307602269], 'false': [nan, 0.15597373076023135], 'false,false': [nan, 0.15597373076023135], 'false,false,false': [0.157000727388353, 0.15133614630914644]}
{'': [0.14761879764474636, 0.15730009552296204], 'false': [nan, 0.15730009552296204], 'false,false': [nan, 0.15730009552296204], 'false,false,false': [nan, 0.15730009552296204], 'true': [0.007843963928406653, 4.089454594302735e-16]}
{'': [nan, 0.10518421244893614], 'false': [nan, 0.10518421244893644], 'false,false': [0.0948687277596984, 0.12305803045026671], 'false,false,true': [nan, 0.0948687277596984]}
{'': [nan, 0.10197218877121732], 'false': [nan, 0.10197218877121732], 'false,false': [0.02200944338642826, 0.0002458008231321309], 'false,false,false': [nan, 0.0002458008231320564]}
{'': [0.06949936461894157, 0.06534772663010861], 'true': [nan, 0.06949936461894157], 'false': [nan, 0.06534772663010861], 'false,false': [nan, 0.06534772663010861], 'false,false,false': [nan, 0.06534772663010861]}
{'': [nan, 0.06734638291809394], 'false': [nan, 0.06734638291809394], 'false,false': [nan, 0.06734638291809394], 'false,false,false': [0.061115389821203354, 0.09309506628817357]}
{'': [nan, 0.06251902462812223], 'false': [nan, 0.06251902462812234], 'false,false': [0.05461127729664136, 0.09935144496399487], 'false,false,false': [nan, 0.09935144496399487], 'false,false,true': [0.007869794741501422, 9.776433974168369e-08]}
{'': [nan, 0.04922140358049226], 'false': [nan, 0.049221403580492075], 'false,false': [nan, 0.04922140358049226]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 38.897
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(F, B), follows(E, F) )
%   | | | then return 0.8466546822259488;  // std dev = 0.994, 87.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=86 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.858148935099512;  // std dev = 1.33e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(G, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.14185106490048802;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.7065711185584259;  // std dev = 0.120, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(A, C) )
%   | | then return 0.4166673328467166;  // std dev = 0.745, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.6626916813279597;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A) )
%   | | then return 0.7362797314172393;  // std dev = 0.079, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6113082021073163;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.12058824567423801;  // std dev = 0.859, 143.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=1 */
%   | | | else return 0.02608912851303215;  // std dev = 3.093, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.1182817222618048;  // std dev = 2.760, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
%   | | | else return 0.14541366882579526;  // std dev = 3.524, 78.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.5315394427657186;  // std dev = 0.176, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else return 0.5662597086350089;  // std dev = 0.094, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(A, F) )
%   | | then return 0.26834003546064145;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( follows(E, G), follows(G, E) )
%   | | | then return 0.44364162285011044;  // std dev = 0.931, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6110682548920302;  // std dev = 0.071, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10671533984102367;  // std dev = 0.855, 141.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=1 */
%   | | | else return -0.0023985674001166185;  // std dev = 3.139, 108.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=16 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.042523190740849114;  // std dev = 2.867, 68.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=15 */
%   | | | else return 0.12242983998588933;  // std dev = 3.486, 78.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.41387457325536564;  // std dev = 0.118, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.6382917331482569;  // std dev = 0.691, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.544475559160853;  // std dev = 1.442, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | else return -0.12555314539013393;  // std dev = 0.322, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4391224383915283;  // std dev = 0.011, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1049888156896885;  // std dev = 0.055, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.08290892229394581;  // std dev = 1.034, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14039686861296527;  // std dev = 1.309, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.07387291300253966;  // std dev = 1.858, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.33173394133012196;  // std dev = 0.093, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.3292311439105539;  // std dev = 0.062, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.0029774279575220572;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.5985686623579229;  // std dev = 0.193, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.10194604444116741;  // std dev = 0.179, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.04048922428604756;  // std dev = 3.131, 112.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=29 */
%   | | | else return 0.12053166192250371;  // std dev = 2.173, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.2622837018187496;  // std dev = 0.079, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.1368836322255426;  // std dev = 0.946, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.26400002833633934;  // std dev = 0.022, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.41119399942716695;  // std dev = 0.741, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.2613804212305501;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5416033879983299;  // std dev = 0.136, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.5205414429540709;  // std dev = 0.941, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   else return -0.11298671219361957;  // std dev = 0.593, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then return 0.21517993687530002;  // std dev = 0.003, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(D, A), tweets(C, E) )
%   | | | then return 0.09716975567963276;  // std dev = 1.329, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.2107753033705423;  // std dev = 0.011, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.21691452980732148;  // std dev = 0.069, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.23141178047493816;  // std dev = 0.127, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.09855418652265853;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then return -0.0500373482224243;  // std dev = 0.115, 233.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=17 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.021865162418517586;  // std dev = 1.998, 67.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=19 */
%   | | | else return -0.008859015615669066;  // std dev = 2.338, 89.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.1855392200291556;  // std dev = 0.062, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else return 0.14282567478428615;  // std dev = 0.176, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.06840834248875874;  // std dev = 0.051, 136.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.2838222363959875;  // std dev = 1.030, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.09130603373282957;  // std dev = 0.036, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(I, H), follows(A, I) )
%   | | | then return -0.0063322679253004464;  // std dev = 1.427, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | | else return 0.0365567507355278;  // std dev = 1.963, 66.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=21 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.2165446081845919;  // std dev = 0.417, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.040870607424393204;  // std dev = 1.881, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, G) )
%   | | | then return 0.1508958824488459;  // std dev = 1.014, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | | | else return -0.12998311915281635;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.31455022309060027;  // std dev = 0.152, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return -0.09131249163475803;  // std dev = 0.455, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(I, A) )
%   | | then return 0.1572177379289106;  // std dev = 0.001, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.14843372503371155;  // std dev = 0.755, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(J, A), tweets(A, K) )
%   | | then return -0.05525721392474608;  // std dev = 0.089, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( follows(L, A) )
%   | | | then return 0.00582464740151196;  // std dev = 0.441, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.03913148476563028;  // std dev = 1.755, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.1395926402903628;  // std dev = 0.079, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return -0.18064523080952213;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.25623437995053044;  // std dev = 0.070, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.08151410206170918;  // std dev = 0.497, 231.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.1419944600985106;  // std dev = 0.061, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.37602017920021735;  // std dev = 0.076, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.07134521550103622;  // std dev = 0.071, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.06622906718196486;  // std dev = 0.408, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.029512847937725555;  // std dev = 1.821, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.358', 'seconds']
Refined model CLL: -0.109467


******************************************
Best model found
******************************************
Results 

CLL : -0.102681 

AUC ROC : 0.993993 

AUC PR : 0.440899 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 38.897 

Total Inference Time : 29.251728773117065 

Total revision time: 86.70573071098327
Best scored revision CLL: -0.109467


Results 

CLL : -0.102681 

AUC ROC : 0.993993 

AUC PR : 0.440899 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 86.7648957118988 

Total Inference Time : 29.251728773117065 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.984
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.809129327256374;  // std dev = 2.181, 102.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=97 */
%   | | else return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else return -0.14185106490048827;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.164197769773345;  // std dev = 7.797, 371.000 (wgt'ed) examples reached here.  /* #neg=245 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13305831632372733;  // std dev = 7.474, 355.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=118 */
%   | | | else return 0.15368853889405693;  // std dev = 1.928, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6411396456801434;  // std dev = 1.709, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | else return -0.16184079237223933;  // std dev = 2.11e-07, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13600660831587416;  // std dev = 1.866, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06344173866204253;  // std dev = 5.135, 283.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=89 */
%   | | else return 0.05274299526675017;  // std dev = 0.323, 122.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4746217378304445;  // std dev = 1.955, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15090118569051666;  // std dev = 0.154, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.034662502787299605;  // std dev = 4.353, 295.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.015537762504893186;  // std dev = 2.476, 93.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.05107596625727009;  // std dev = 4.433, 321.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=118 */
%   | | | else return 0.09256934996908477;  // std dev = 1.465, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.32107716659314656;  // std dev = 2.191, 123.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=118 */
%   | | | else return -0.1400568340657951;  // std dev = 0.022, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01692051294066729;  // std dev = 1.606, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.016661341877386694;  // std dev = 4.129, 363.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.738', 'seconds']
Parameter learned model CLL:-0.157595 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.181, 5, 97], 'false,true,false': [0.983, 1, 29], 'false,false': [0.0, 247, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.797, 245, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.474, 237, 118], 'false,false,false,false': [1.928, 14, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.709, 3, 118], 'true,false': [2.11e-07, 218, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.866, 14, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.135, 194, 89], 'false,false,false': [0.323, 85, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.955, 4, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.154, 239, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.353, 198, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.476, 64, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.433, 203, 118], 'false,false,false,false': [1.465, 12, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.191, 5, 118], 'false,false,true,false': [0.022, 222, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.606, 16, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.129, 237, 126]}]
{'': [nan, 0.2219282795302204], 'false': [0.043388429752070364, -1.4023869784738819e-16], 'false,true': [0.04661668589004392, 0.03222222222222335]}
{'': [nan, 0.16385067363821712], 'false': [nan, 0.16385067363822173], 'false,false': [nan, 0.16385067363821712], 'false,false,false': [nan, 0.16385067363822173]}
{'': [nan, 0.15804737891555753], 'false': [nan, 0.15804737891555695], 'false,false': [nan, 0.15804737891555695], 'false,false,false': [0.1573488020667169, 0.1689190993223497]}
{'': [0.15661294318756197, 0.15819946136465446], 'false': [nan, 0.15819946136465446], 'false,false': [nan, 0.15819946136465446], 'false,false,false': [nan, 0.15819946136465446], 'true': [0.02413937287795238, 2.0371064672021222e-16]}
{'': [nan, 0.09655681202781408], 'false': [nan, 0.09655681202781384], 'false,false': [0.09318532078746591, 0.10429758343377284], 'false,false,true': [nan, 0.09318532078746591]}
{'': [nan, 0.0997095448882813], 'false': [nan, 0.0997095448882813], 'false,false': [0.02940991771533528, 9.88910480947233e-05], 'false,false,false': [nan, 9.88910480947493e-05]}
{'': [0.06422573911048957, 0.06593700802206362], 'false': [nan, 0.06593700802206362], 'false,false': [nan, 0.06593700802206362], 'false,false,false': [nan, 0.06593700802206362], 'true': [nan, 0.06422573911048957]}
{'': [nan, 0.06401215063063857], 'false': [nan, 0.06401215063063857], 'false,false': [nan, 0.06401215063063857], 'false,false,false': [0.06121467990590577, 0.107290834395194]}
{'': [nan, 0.0656085970123411], 'false': [nan, 0.0656085970123413], 'false,false': [0.06269354666600374, 0.10746087378555663], 'false,false,false': [nan, 0.10746087378555663], 'false,false,true': [0.03901158138801734, 2.2248483035511477e-06]}
{'': [nan, 0.04697027193735819], 'false': [nan, 0.04697027193735801], 'false,false': [nan, 0.04697027193735819]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 33.51
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.769260046210623;  // std dev = 1.909, 45.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.1418510649004882;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7162463552456463;  // std dev = 0.110, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.3861400788776211;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(E, G), tweets(A, G) )
%   | | | then return -0.10544739312538791;  // std dev = 1.455, 119.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=3 */
%   | | | else return -0.13079229195117256;  // std dev = 0.152, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.12544463852839113;  // std dev = 6.66e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09259872940434323;  // std dev = 2.058, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.22020365495588673;  // std dev = 1.948, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, C) )
%   | | then return 0.528203848803437;  // std dev = 0.205, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | else return 0.5676134804856838;  // std dev = 0.113, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0.44505205447603946;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.39234430772234885;  // std dev = 0.729, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.0981815344202166;  // std dev = 1.474, 152.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=3 */
%   | | | else return -0.005487127803223746;  // std dev = 2.120, 75.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=12 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.15495094151473804;  // std dev = 1.910, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return 0.06261110862717822;  // std dev = 2.160, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.436697312046645;  // std dev = 0.118, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.23087916795177973;  // std dev = 1.551, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.46524296830960193;  // std dev = 1.303, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return 0.6627517492171903;  // std dev = 0.016, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.11298220556619032;  // std dev = 0.255, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4453572744286088;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10475435675751238;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then return 0.3121952152773994;  // std dev = 0.157, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.27504808250147256;  // std dev = 0.959, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.1469117585724868;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.3325919807540671;  // std dev = 0.099, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.37547168858793056;  // std dev = 0.063, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4855043640797954;  // std dev = 0.345, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.0967206707297007;  // std dev = 0.043, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.058680484391059995;  // std dev = 1.527, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.10685040988550472;  // std dev = 1.508, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.27323562782169425;  // std dev = 0.067, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.19635694915898247;  // std dev = 0.948, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( tweets(A, G), tweets(D, G) )
%   | | | then return -0.03163922735366179;  // std dev = 0.848, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06511408877992186;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2629548699707279;  // std dev = 0.068, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.37111281398228096;  // std dev = 0.344, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.4821895054816171;  // std dev = 0.043, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.09869775050256446;  // std dev = 0.395, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2129309912987755;  // std dev = 0.093, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | else if ( follows(E, A), follows(E, C) )
%   | | then return -0.36096985956760314;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.3113418749700473;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.21030741282069781;  // std dev = 0.055, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.10980228344380948;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.0677724941026332;  // std dev = 0.917, 144.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=3 */
%   | | | else return -0.03780691824566138;  // std dev = 1.078, 86.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.031066233682365486;  // std dev = 1.347, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
%   | | | else return -0.012847862831178178;  // std dev = 1.235, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( follows(C, A), recursion_accounttype(D, B) )
%   | | then return 0.18849845549445562;  // std dev = 0.025, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.09362997952579111;  // std dev = 1.200, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.09923196632862898;  // std dev = 1.336, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else return 0.21947238729014296;  // std dev = 0.054, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(E, A) )
%   | then return -0.03597097903524392;  // std dev = 0.124, 235.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=32 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.3739943613117759;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.13488480738596495;  // std dev = 0.023, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.17314771662061415;  // std dev = 0.562, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0351703429408622;  // std dev = 0.903, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.1300005710670116;  // std dev = 1.381, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.1763110894429091;  // std dev = 0.085, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.1954513870522161;  // std dev = 0.154, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3130475208960331;  // std dev = 0.357, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.08750886946715877;  // std dev = 0.408, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.20846832695629575;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.07246705672759898;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(F, C) )
%   | | then if ( recursion_accounttype(E, B), follows(E, C) )
%   | | | then return 0.15036605288409932;  // std dev = 0.093, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.10335207745896247;  // std dev = 0.970, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0.17757529562729946;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(C, G), follows(G, A) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return -0.004092573224859294;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.16852924343382267;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.15222339490846293;  // std dev = 0.050, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then if ( follows(I, A), follows(J, I) )
%   | | then return 0.1729001670144364;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.01411822145793613;  // std dev = 0.756, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.03960431244002476;  // std dev = 0.119, 266.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=32 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '29.782', 'seconds']
Refined model CLL: -0.102897


******************************************
Best model found
******************************************
Results 

CLL : -0.106515 

AUC ROC : 0.995162 

AUC PR : 0.428235 

Precision : 0.344907 

Recall : 0.955128 

F1 : 0.506803 

Total Learning Time : 33.51 

Total Inference Time : 23.835418224334717 

Total revision time: 71.87616519355774
Best scored revision CLL: -0.102897


Results 

CLL : -0.106515 

AUC ROC : 0.995162 

AUC PR : 0.428235 

Precision : 0.344907 

Recall : 0.955128 

F1 : 0.506803 

Total Learning Time : 76.8710534992218 

Total Inference Time : 23.835418224334717 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.053
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8327252062859514;  // std dev = 1.710, 118.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=115 */
%   | | else return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else return -0.14185106490048768;  // std dev = 9.50e-09, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14833873846160806;  // std dev = 8.762, 481.000 (wgt'ed) examples reached here.  /* #neg=325 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.14544001211720511;  // std dev = 7.678, 370.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=128 */
%   | | | else return 0.11870017396271818;  // std dev = 3.680, 89.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6468148074606758;  // std dev = 1.403, 130.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=128 */
%   | else return -0.16136965203114778;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1050014026281847;  // std dev = 3.609, 88.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0646983600877524;  // std dev = 5.287, 304.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=97 */
%   | | else return 0.06764374711407602;  // std dev = 0.340, 191.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.502122089449457;  // std dev = 1.586, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15555309177890134;  // std dev = 0.252, 355.000 (wgt'ed) examples reached here.  /* #neg=355 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.028566928895543655;  // std dev = 4.873, 353.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.043452032415035036;  // std dev = 2.865, 121.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.012154660189184955;  // std dev = 4.798, 423.000 (wgt'ed) examples reached here.  /* #neg=295 #pos=128 */
%   | | | else return 0.046953597402866726;  // std dev = 2.924, 86.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.32738391786266596;  // std dev = 1.967, 132.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=128 */
%   | | | else return -0.13525820830058205;  // std dev = 0.015, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06791411474427046;  // std dev = 2.773, 77.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01640385345168506;  // std dev = 4.828, 471.000 (wgt'ed) examples reached here.  /* #neg=315 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.848', 'seconds']
Parameter learned model CLL:-0.157462 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.71, 3, 115], 'false,true,false': [0.988, 1, 41], 'false,false': [9.5e-09, 324, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.762, 325, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.678, 242, 128], 'false,false,false,false': [3.68, 61, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.403, 2, 128], 'true,false': [0.0, 254, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.609, 60, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.287, 207, 97], 'false,false,false': [0.34, 132, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.586, 2, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.252, 355, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.873, 238, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.865, 80, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.798, 295, 128], 'false,false,false,false': [2.924, 58, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.967, 4, 128], 'false,false,true,false': [0.015, 269, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.773, 49, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.828, 315, 156]}]
{'': [nan, 0.21842770302575254], 'false': [0.024375000000006076, 9.046261682130905e-17], 'false,true': [0.024777362826777165, 0.023242630385488926]}
{'': [nan, 0.15961245127612703], 'false': [nan, 0.1596124512761315], 'false,false': [nan, 0.15961245127612703], 'false,false,false': [nan, 0.1596124512761315]}
{'': [nan, 0.15805491053178847], 'false': [nan, 0.15805491053178738], 'false,false': [nan, 0.15805491053178738], 'false,false,false': [0.1593351129312578, 0.15215634385422225]}
{'': [0.15139069786216525, 0.14797711553408596], 'true': [0.015145302943459336, -1.7483827159451284e-17], 'false': [nan, 0.14797711553408596], 'false,false': [nan, 0.14797711553408596], 'false,false,false': [nan, 0.14797711553408596]}
{'': [nan, 0.10117342023281525], 'false': [nan, 0.10117342023281502], 'false,false': [0.0919426486314603, 0.11586000109566154], 'false,false,true': [nan, 0.0919426486314603]}
{'': [nan, 0.09721284508762464], 'false': [nan, 0.09721284508762464], 'false,false': [0.015912407087864372, 0.0001793516327326352], 'false,false,false': [nan, 0.00017935163273260016]}
{'': [0.06728098192913479, 0.06783995693938699], 'false': [nan, 0.06783995693938699], 'false,false': [nan, 0.06783995693938699], 'false,false,false': [nan, 0.06783995693938699], 'true': [nan, 0.06728098192913479]}
{'': [nan, 0.062199584395718044], 'false': [nan, 0.062199584395718044], 'false,false': [nan, 0.062199584395718044], 'false,false,false': [0.05442575359528433, 0.09942962199488466]}
{'': [nan, 0.06419015441181508], 'false': [nan, 0.06419015441181493], 'false,false': [0.05691731406309867, 0.09989374333424395], 'false,false,false': [nan, 0.09989374333424395], 'false,false,true': [0.029324841426432824, 8.023658423868216e-07]}
{'': [nan, 0.04948436197078767], 'false': [nan, 0.04948436197078766], 'false,false': [nan, 0.04948436197078767]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 33.36
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else return -0.14185106490048782;  // std dev = 1.07e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.6778067455442888;  // std dev = 0.200, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else return 0.7194734122109553;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.11947341221095495;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.7194734122109553;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.1254446385283917;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6681913609289043;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return -0.12544463852839116;  // std dev = 6.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0857848741564452;  // std dev = 1.463, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.10203329820912505;  // std dev = 1.911, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.5325279716501986;  // std dev = 0.171, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return 0.22203310341295138;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(C, F), follows(F, A) )
%   | | | then return 0.48869977007961807;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.5553664367462847;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.5725358631071452;  // std dev = 0.129, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5152969233924796;  // std dev = 0.855, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11231637819360676;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09259552349146255;  // std dev = 2.843, 83.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=25 */
%   | | | else return 0.12780541552849725;  // std dev = 2.543, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.4472140911629223;  // std dev = 0.106, 123.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=122 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.09287104926787852;  // std dev = 0.827, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.31428570135383854;  // std dev = 0.993, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.10789518704009696;  // std dev = 0.148, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.43163734535513415;  // std dev = 0.021, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.14358373490305357;  // std dev = 0.695, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.21596034204569503;  // std dev = 1.230, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.09780319371910856;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then return 0.3050852577889117;  // std dev = 0.151, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else return 0.1283410717423999;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.32909895916659;  // std dev = 0.130, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.02487360373891323;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.3036536424193073;  // std dev = 0.884, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.09223170080895626;  // std dev = 0.002, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.32167381184682986;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.03868579738584023;  // std dev = 2.278, 69.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=19 */
%   | | | else return 0.10539180660263164;  // std dev = 2.358, 58.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, D), tweets(D, E) )
%   | | | then return 0.24508787353453423;  // std dev = 0.990, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.2690214150178933;  // std dev = 0.124, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.18626765502467466;  // std dev = 1.043, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.28057102536010825;  // std dev = 0.122, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.25582853022673774;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4165963062011736;  // std dev = 0.040, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.42542924106267904;  // std dev = 0.895, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.48601710281400934;  // std dev = 0.939, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.09793934430747225;  // std dev = 0.418, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.22518143210332425;  // std dev = 0.220, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(C, A) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.08390288722647155;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.20890288722647155;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.28977879930314643;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(A, F), follows(G, A) )
%   | then return -0.048682795620899375;  // std dev = 0.091, 225.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=21 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.32972514034187994;  // std dev = 0.026, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11136105192509461;  // std dev = 0.250, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.0534381490437113;  // std dev = 1.245, 36.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=14 */
%   | | | else return 0.04045268494716947;  // std dev = 2.097, 78.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(C, E) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(A, C), follows(D, C) )
%   | | | then return 0.1117861868929056;  // std dev = 1.665, 40.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=37 */
%   | | | else return 0.18643394114935652;  // std dev = 0.095, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( tweets(F, E), follows(D, F) )
%   | | | then return 0.20590161888491018;  // std dev = 0.081, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.41318488465354913;  // std dev = 0.859, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.20485491388441732;  // std dev = 0.038, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, G) )
%   | | then return 0.21726433586380126;  // std dev = 0.055, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1484068036759052;  // std dev = 0.835, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(I, A) )
%   | | then return -0.05110954272268695;  // std dev = 0.085, 223.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=17 */
%   | | else return 0.008265076404134809;  // std dev = 0.226, 137.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=40 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.1544633774688273;  // std dev = 1.012, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | | else return 0.040077072402366465;  // std dev = 1.142, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return 0.26370060541886226;  // std dev = 0.048, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return -0.08119758716324951;  // std dev = 0.252, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.17507037671900663;  // std dev = 0.012, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.07712713541108317;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.037570573812931406;  // std dev = 0.281, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.02985149005458102;  // std dev = 1.130, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.00930928144835623;  // std dev = 1.561, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then return 0.15411232449668627;  // std dev = 0.177, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(D, A), tweets(A, E) )
%   | | | then return 0.0847260997937612;  // std dev = 0.969, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.1464255999237867;  // std dev = 0.060, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.19724365435083369;  // std dev = 0.827, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then return -0.04025442845257984;  // std dev = 0.083, 234.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=23 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.16345786989660416;  // std dev = 1.352, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return -0.10018664763736014;  // std dev = 0.091, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.15446523079432933;  // std dev = 0.956, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.014569228136281094;  // std dev = 1.501, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '24.470', 'seconds']
Refined model CLL: -0.102306


******************************************
Best model found
******************************************
Results 

CLL : -0.095942 

AUC ROC : 0.993693 

AUC PR : 0.372541 

Precision : 0.348066 

Recall : 1.0 

F1 : 0.516393 

Total Learning Time : 33.36 

Total Inference Time : 31.708894968032837 

Total revision time: 82.91431916999817
Best scored revision CLL: -0.102306


Results 

CLL : -0.095942 

AUC ROC : 0.993693 

AUC PR : 0.372541 

Precision : 0.348066 

Recall : 1.0 

F1 : 0.516393 

Total Learning Time : 87.90920747566223 

Total Inference Time : 31.708894968032837 

