Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.417
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13818558596518707;  // std dev = 3.935, 97.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=31 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.09074376513335251;  // std dev = 3.409, 81.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=23 */
%   | | | else return 0.22844497713357376;  // std dev = 1.754, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.555661814654995;  // std dev = 1.629, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | else return -0.1527851399701401;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21038083901002744;  // std dev = 1.670, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07034731302491967;  // std dev = 2.317, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
%   | | else return 0.16302222342394557;  // std dev = 0.369, 31.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46312263670509257;  // std dev = 1.394, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16817330077641837;  // std dev = 0.323, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0391561485145103;  // std dev = 2.161, 62.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=21 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08860804277541763;  // std dev = 1.338, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.03445036757941955;  // std dev = 2.135, 69.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=23 */
%   | | | else return 0.017242372333838282;  // std dev = 1.426, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.26507718347379466;  // std dev = 1.635, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | | else return -0.1356916128170954;  // std dev = 0.053, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.02731434726691277;  // std dev = 1.492, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.016145789494675142;  // std dev = 2.266, 97.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=31 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.505', 'seconds']
Parameter learned model CLL:-0.165558 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 10], 'false,false': [7.9e-09, 59, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.935, 66, 31]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.409, 58, 23], 'false,false,false,false': [1.754, 10, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.629, 3, 23], 'true,false': [0.0, 47, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.67, 9, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.317, 39, 17], 'false,false,false': [0.369, 17, 14]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.394, 2, 31], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.323, 70, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.161, 41, 21], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.338, 13, 10]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.135, 46, 23], 'false,false,false,false': [1.426, 14, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.635, 3, 23], 'false,false,true,false': [0.053, 50, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.492, 19, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.266, 66, 31]}]
{'': [nan, 0.22580246913580385], 'false': [1.375244004696968e-15, 6.39789539614497e-17], 'false,true': [0.0, -8.881784197001253e-17]}
{'': [nan, 0.159640172056831], 'false': [nan, 0.15964017205682993], 'false,false': [nan, 0.159640172056831], 'false,false,false': [nan, 0.15964017205682993]}
{'': [nan, 0.1512667300687967], 'false': [nan, 0.1512667300687968], 'false,false': [nan, 0.1512667300687968], 'false,false,false': [0.14343695171921583, 0.17098667681673163]}
{'': [0.15144473825808002, 0.1640392775133282], 'false': [nan, 0.1640392775133282], 'false,false': [nan, 0.1640392775133282], 'false,false,false': [nan, 0.1640392775133282], 'true': [0.10207100591715981, 0.0]}
{'': [nan, 0.11220623597311413], 'false': [nan, 0.112206235973114], 'false,false': [0.09583417265335128, 0.13625325679608813], 'false,false,true': [nan, 0.09583417265335128]}
{'': [nan, 0.10665871338987173], 'false': [nan, 0.10665871338987173], 'false,false': [0.05888799171108899, 0.001493366346023566], 'false,false,false': [nan, 0.0014933663460235818]}
{'': [0.07531198567571348, 0.07781511640065708], 'false': [nan, 0.07781511640065708], 'false,false': [nan, 0.07781511640065708], 'false,false,false': [nan, 0.07781511640065708], 'true': [nan, 0.07531198567571348]}
{'': [nan, 0.0724896841719158], 'false': [nan, 0.0724896841719158], 'false,false': [nan, 0.0724896841719158], 'false,false,false': [0.06605312554342609, 0.09245254576328565]}
{'': [nan, 0.07442589214433384], 'false': [nan, 0.07442589214433384], 'false,false': [0.07134791109791394, 0.08248088746059011], 'false,false,false': [nan, 0.08248088746059011], 'false,false,true': [0.10277941728429309, 5.60761692640388e-05]}
{'': [nan, 0.05293294934665888], 'false': [nan, 0.05293294934665891], 'false,false': [nan, 0.05293294934665888]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 4.447
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995121;  // std dev = 4.21e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7194734122109542;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.1254446385283914;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.7505511758931249;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1254446385283914;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.43783406196450586;  // std dev = 0.690, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3352111119997128;  // std dev = 1.181, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.564265673284907;  // std dev = 0.107, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.5879550920336302;  // std dev = 0.081, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11231637819360635;  // std dev = 1.67e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then return -0.0375448748267282;  // std dev = 0.225, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.07845014036064814;  // std dev = 0.798, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.17533870561153395;  // std dev = 1.504, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.4218989844718912;  // std dev = 0.094, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.5606603458595778;  // std dev = 0.058, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10628477978728874;  // std dev = 0.097, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.4659463034544329;  // std dev = 0.078, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.46200841382011193;  // std dev = 0.736, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32512761419934527;  // std dev = 0.088, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.3412267171323825;  // std dev = 0.080, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09238010142145532;  // std dev = 0.001, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0.006070731427064155;  // std dev = 0.469, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.21249527422526604;  // std dev = 0.623, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.057342795308525804;  // std dev = 1.346, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.25829852350441024;  // std dev = 0.078, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.0634005131072453;  // std dev = 0.925, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then return 0.39706600985221635;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.45270917233123464;  // std dev = 0.070, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then return -0.08489858057804121;  // std dev = 0.000890, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(A, H) )
%   | | then return -0.11511674584260952;  // std dev = 0.054, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.319870035714574;  // std dev = 0.061, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21203518678151345;  // std dev = 0.069, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.07848037042491568;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.06936824913495057;  // std dev = 0.405, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.2797481967355203;  // std dev = 0.104, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11020765700800576;  // std dev = 0.306, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.02168677349726711;  // std dev = 0.501, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.0015604262827594911;  // std dev = 0.915, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.007087866627943103;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.17375453329460977;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.18386768215628363;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.24163119350639792;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.07721606138660046;  // std dev = 0.030, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.1619413513572142;  // std dev = 0.257, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(I, A) )
%   | | then return -0.07878180748386113;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.04602404916478352;  // std dev = 0.593, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.36837400291115613;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.15779285917362387;  // std dev = 0.042, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.17633426556392673;  // std dev = 0.801, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.1901210279766637;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.305119331981962;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return -0.07142270734619127;  // std dev = 0.032, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.09770200272866854;  // std dev = 0.027, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( tweets(A, I) )
%   | then return 0.07829535973116525;  // std dev = 0.403, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(J, A) )
%   | | then return 0.014350585255227236;  // std dev = 0.214, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.053980312511993624;  // std dev = 0.640, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, E) )
%   | then return 0.1369415656152327;  // std dev = 0.010, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.16496929671401464;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.11270565948015548;  // std dev = 0.678, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.18572152343757564;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.06662108017742119;  // std dev = 0.025, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.12216359427042038;  // std dev = 0.243, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(J, A) )
%   | | then return -0.06702352597067589;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.030845930257773307;  // std dev = 0.469, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.015552251782970872;  // std dev = 0.716, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.468', 'seconds']
Refined model CLL: -0.107784


******************************************
Best model found
******************************************
Results 

CLL : -0.095376 

AUC ROC : 0.994265 

AUC PR : 0.423864 

Precision : 0.376147 

Recall : 0.97619 

F1 : 0.543046 

Total Learning Time : 4.447 

Total Inference Time : 3.0446622371673584 

Total revision time: 10.517168678283692
Best scored revision CLL: -0.107784


Results 

CLL : -0.095376 

AUC ROC : 0.994265 

AUC PR : 0.423864 

Precision : 0.376147 

Recall : 0.97619 

F1 : 0.543046 

Total Learning Time : 12.21511951828003 

Total Inference Time : 3.0446622371673584 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.479
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8364098046647294;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.14185106490048774;  // std dev = 4.56e-09, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15482026317220002;  // std dev = 5.482, 186.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=62 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1243811247204566;  // std dev = 4.819, 152.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=49 */
%   | | | else return 0.1951700012237596;  // std dev = 2.316, 32.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6241671268201241;  // std dev = 1.391, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | else return -0.15940662991183163;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08960071234065617;  // std dev = 2.431, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0701201505328842;  // std dev = 3.311, 114.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=37 */
%   | | else return 0.10206749779141779;  // std dev = 0.366, 67.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5006429772863331;  // std dev = 1.069, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16035396484379016;  // std dev = 0.219, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.029352560675932702;  // std dev = 2.988, 144.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=45 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05738981762816452;  // std dev = 1.771, 46.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.022735315087625264;  // std dev = 2.882, 156.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=49 */
%   | | | else return 0.06823240031563872;  // std dev = 1.835, 34.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.35836556123844826;  // std dev = 0.056, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.13590251432659387;  // std dev = 0.028, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04858214314204294;  // std dev = 1.832, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.013531304254283182;  // std dev = 2.985, 187.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=62 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.468', 'seconds']
Parameter learned model CLL:-0.161141 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.989, 1, 45], 'false,true,false': [0.0, 0, 17], 'false,false': [4.56e-09, 119, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.482, 124, 62]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.819, 103, 49], 'false,false,false,false': [2.316, 19, 13]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.391, 2, 49], 'true,false': [0.0, 114, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.431, 28, 13]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.311, 77, 37], 'false,false,false': [0.366, 42, 25]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.069, 1, 62], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.219, 111, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.988, 99, 45], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.771, 29, 17]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.882, 107, 49], 'false,false,false,false': [1.835, 21, 13]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.056, 0, 49], 'false,false,true,false': [0.028, 111, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.832, 22, 13]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.985, 125, 62]}]
{'': [nan, 0.22461055428088414], 'false': [0.015621063240110127, 1.8659210497901792e-17], 'false,true': [0.021266540642723226, -2.0898315757650005e-16]}
{'': [nan, 0.16156995808451305], 'false': [nan, 0.1615699580845128], 'false,false': [nan, 0.16156995808451305], 'false,false,false': [nan, 0.1615699580845128]}
{'': [nan, 0.15605328762392143], 'false': [nan, 0.1560532876239207], 'false,false': [nan, 0.1560532876239207], 'false,false,false': [0.15275628415714, 0.1675744786261142]}
{'': [0.14285222497079533, 0.14417509088744293], 'false': [nan, 0.14417509088744293], 'false,false': [nan, 0.14417509088744293], 'false,false,false': [nan, 0.14417509088744293], 'true': [0.03795918813929946, -7.401486830834377e-17]}
{'': [nan, 0.11044816198897778], 'false': [nan, 0.11044816198897847], 'false,false': [0.09616032010216573, 0.13411598871137273], 'false,false,true': [nan, 0.09616032010216573]}
{'': [nan, 0.10776297220509243], 'false': [nan, 0.10776297220509243], 'false,false': [0.018148654068797256, 0.00043108194802395045], 'false,false,false': [nan, 0.00043108194802393045]}
{'': [0.06200698189764174, 0.06820217029125389], 'false': [nan, 0.06820217029125389], 'false,false': [nan, 0.06820217029125389], 'false,false,false': [nan, 0.06820217029125389], 'true': [nan, 0.06200698189764174]}
{'': [nan, 0.06174229572924153], 'false': [nan, 0.06174229572924153], 'false,false': [nan, 0.06174229572924153], 'false,false,false': [0.05323625165634606, 0.0990704609198098]}
{'': [nan, 0.059974158413669605], 'false': [nan, 0.059974158413669244], 'false,false': [0.051929182793523744, 0.09585140959094714], 'false,false,false': [nan, 0.09585140959094714], 'false,false,true': [6.450061929126475e-05, 7.242879820538143e-06]}
{'': [nan, 0.04763676000001048], 'false': [nan, 0.04763676000001043], 'false,false': [nan, 0.04763676000001048]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 10.06
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7331489350995122;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7282320558301922;  // std dev = 0.044, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.04879618280853678;  // std dev = 0.828, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.21776842053025927;  // std dev = 1.505, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5626360275708494;  // std dev = 0.098, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.3886997700796179;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.11231637819360626;  // std dev = 4.94e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(G, I), follows(I, A) )
%   | | | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.11024456011969057;  // std dev = 0.771, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1505387631657022;  // std dev = 1.817, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | | else return 0.10310318707350259;  // std dev = 2.013, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.4243830470925269;  // std dev = 0.106, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.326163040514056;  // std dev = 0.978, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.5437128345606066;  // std dev = 0.176, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.11139598617563146;  // std dev = 0.118, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(G, I), follows(I, A) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.09347695474044693;  // std dev = 0.532, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.018129463472772615;  // std dev = 1.071, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.06561888796164572;  // std dev = 1.350, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then return 0.33035617594520694;  // std dev = 0.151, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(D, C), follows(E, D) )
%   | | then if ( follows(C, D), tweets(A, F) )
%   | | | then return -0.06617867599718999;  // std dev = 0.748, 51.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=3 */
%   | | | else return -0.09825345987987207;  // std dev = 0.041, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(C, G), recursion_accounttype(G, B) )
%   | | | then return 0.36428551268728765;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09187041198418801;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(I, A) )
%   | | then return 0.02389656464080544;  // std dev = 0.243, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.042198387011646785;  // std dev = 1.220, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.08344473399227151;  // std dev = 1.924, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.23113033934996774;  // std dev = 1.016, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.048014486383182675;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.26250572239000186;  // std dev = 0.076, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.45776564993111934;  // std dev = 0.111, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return 0.3833976030089882;  // std dev = 0.051, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.6170280079114581;  // std dev = 0.066, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.10267494536912566;  // std dev = 0.273, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.21566810109428278;  // std dev = 0.126, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.290715108349402;  // std dev = 0.119, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.4587480385942649;  // std dev = 0.089, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.09180197637633634;  // std dev = 0.209, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.23181070914745563;  // std dev = 0.055, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then return -0.0765257922080175;  // std dev = 0.000563, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.060405426559310194;  // std dev = 0.857, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | else return 0.11422970113987792;  // std dev = 0.895, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.18074592076333873;  // std dev = 0.060, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.2810693838401153;  // std dev = 1.027, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.2841856250912221;  // std dev = 1.205, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.19203543990139746;  // std dev = 0.106, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return -0.0688800161076124;  // std dev = 0.353, 67.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=1 */
%   | | | else return -0.016064121573653323;  // std dev = 0.734, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.010053610105955077;  // std dev = 1.164, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
%   | | | else return 0.09361024398850647;  // std dev = 0.973, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.0938855138681673;  // std dev = 1.391, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return -0.13973601590034032;  // std dev = 1.027, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.18803824017794538;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2801552955154382;  // std dev = 0.131, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.07818267695296736;  // std dev = 0.180, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.14879275249534477;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(I, A), tweets(A, J) )
%   | | then return -0.09569078308040921;  // std dev = 0.206, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.04118430396623814;  // std dev = 0.583, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.02509855892327315;  // std dev = 1.014, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15633923147816056;  // std dev = 0.031, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F), follows(E, D) )
%   | | | then return -0.04824386030281628;  // std dev = 0.431, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   | | | else return -0.061684888032974276;  // std dev = 0.002, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.26120785859347473;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.06506864045209107;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.17671646578405342;  // std dev = 0.270, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.0821817768337095;  // std dev = 0.080, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.014469043106644722;  // std dev = 0.982, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return -0.05027893755610666;  // std dev = 1.225, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.758', 'seconds']
Refined model CLL: -0.102728


******************************************
Best model found
******************************************
Results 

CLL : -0.096562 

AUC ROC : 0.993191 

AUC PR : 0.372638 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 10.06 

Total Inference Time : 8.28122091293335 

Total revision time: 22.123094524383546
Best scored revision CLL: -0.102728


Results 

CLL : -0.096562 

AUC ROC : 0.993191 

AUC PR : 0.372638 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 23.821045364379884 

Total Inference Time : 8.28122091293335 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.93
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.830371157321735;  // std dev = 1.394, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.8164822684328453;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17045829788025818;  // std dev = 6.655, 265.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=93 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.14679444667763059;  // std dev = 5.844, 214.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=75 */
%   | | | else return 0.09728477697549298;  // std dev = 3.022, 60.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6582530498435811;  // std dev = 0.011, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else return -0.16457168152569315;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12856726652807987;  // std dev = 2.839, 52.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07196367257562791;  // std dev = 3.985, 173.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=58 */
%   | | else return 0.0732368247656558;  // std dev = 0.347, 109.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=35 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48715826776794485;  // std dev = 1.538, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15740682065110287;  // std dev = 0.170, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03290130910473747;  // std dev = 3.674, 213.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=70 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03550961397872254;  // std dev = 2.161, 71.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.030065448573350594;  // std dev = 3.515, 218.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=75 */
%   | | | else return 0.08980158869461105;  // std dev = 2.249, 45.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3224999898747346;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | | | else return -0.14056587386350292;  // std dev = 0.002, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02531315531185826;  // std dev = 2.299, 57.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02335362042719137;  // std dev = 3.673, 259.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=93 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.848', 'seconds']
Parameter learned model CLL:-0.163969 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.394, 2, 70], 'false,true,false': [0.979, 1, 23], 'false,false': [0.0, 173, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.655, 172, 93]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.844, 139, 75], 'false,false,false,false': [3.022, 42, 18]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.011, 0, 75], 'true,false': [0.0, 152, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.839, 34, 18]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.985, 115, 58], 'false,false,false': [0.347, 74, 35]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.538, 2, 93], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.17, 194, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.674, 143, 70], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.161, 48, 23]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.515, 143, 75], 'false,false,false,false': [2.249, 27, 18]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.396, 2, 75], 'false,false,true,false': [0.002, 126, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.299, 39, 18]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.673, 166, 93]}]
{'': [nan, 0.22619919569934221], 'false': [0.030273437500001037, -1.8225626531418756e-16], 'false,true': [0.027006172839504967, 0.039930555555556024]}
{'': [nan, 0.1671173857623517], 'false': [nan, 0.16711738576235122], 'false,false': [nan, 0.1671173857623517], 'false,false,false': [nan, 0.16711738576235122]}
{'': [nan, 0.15841089738243327], 'false': [nan, 0.15841089738243344], 'false,false': [nan, 0.15841089738243344], 'false,false,false': [0.15961321744034962, 0.1522081758583988]}
{'': [0.14978538689310464, 0.15498492424207055], 'false': [nan, 0.15498492424207055], 'false,false': [nan, 0.15498492424207055], 'false,false,false': [nan, 0.15498492424207055], 'true': [1.7070021509842566e-06, -1.7529837230923525e-16]}
{'': [nan, 0.10281475231790187], 'false': [nan, 0.10281475231790205], 'false,false': [0.09177087092095489, 0.12034212014303637], 'false,false,true': [nan, 0.09177087092095489]}
{'': [nan, 0.0999587925460056], 'false': [nan, 0.0999587925460056], 'false,false': [0.024886538222339282, 0.0001497175062440186], 'false,false,false': [nan, 0.0001497175062440186]}
{'': [0.06337933941997789, 0.06578968494022874], 'false': [nan, 0.06578968494022874], 'false,false': [nan, 0.06578968494022874], 'false,false,false': [nan, 0.06578968494022874], 'true': [nan, 0.06337933941997789]}
{'': [nan, 0.06670999186059529], 'false': [nan, 0.06670999186059529], 'false,false': [nan, 0.06670999186059529], 'false,false,false': [0.05666956804052056, 0.11239242465799879]}
{'': [nan, 0.06726010323597757], 'false': [nan, 0.0672601032359775], 'false,false': [0.06009068480856596, 0.0927188196940498], 'false,false,false': [nan, 0.0927188196940498], 'false,false,true': [0.025326346199718904, 4.3376790998589996e-08]}
{'': [nan, 0.052084449631499], 'false': [nan, 0.052084449631499025], 'false,false': [nan, 0.052084449631499]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 14.473
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.7975428744934516;  // std dev = 1.371, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | else return 0.6914822684328454;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7152917922423694;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.14185106490048827;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7245265190497682;  // std dev = 0.061, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.7352343613833789;  // std dev = 0.026, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.39946625004972414;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12544463852839108;  // std dev = 7.60e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7347484459992029;  // std dev = 0.032, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.11596051882570745;  // std dev = 1.010, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.12393495347245688;  // std dev = 1.475, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5561077045986335;  // std dev = 0.034, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return 0.48870956996110304;  // std dev = 0.288, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.5830367405992631;  // std dev = 0.109, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.11231637819360615;  // std dev = 1.03e-07, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.5665303028815849;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.004214497913869995;  // std dev = 1.645, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
%   | | | else return 0.1329956123126841;  // std dev = 2.383, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.41821091995503745;  // std dev = 0.030, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.23580077627805682;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5324767878579737;  // std dev = 0.214, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.10714295748100425;  // std dev = 0.114, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4583237008425488;  // std dev = 0.010, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.09554858631671521;  // std dev = 0.483, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.25560755101199933;  // std dev = 0.822, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.0617729931093413;  // std dev = 1.571, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(D, B) )
%   | | then return 0.32140149713218225;  // std dev = 0.021, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(D, C), tweets(A, F) )
%   | | | then return 0.20843791309923887;  // std dev = 1.324, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.3233388606893958;  // std dev = 0.026, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.3319375372851882;  // std dev = 0.078, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(G, A) )
%   | then return -0.05146376034357118;  // std dev = 0.132, 142.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=13 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.2974348211081311;  // std dev = 1.061, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.10245641777960833;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.08101350315039056;  // std dev = 1.240, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | | else return 0.04504172265425351;  // std dev = 1.748, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.268235158917998;  // std dev = 0.212, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return -0.005605045852604795;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.29097385028057465;  // std dev = 0.052, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.3697283200620101;  // std dev = 0.108, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.6108385972501004;  // std dev = 0.202, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.09617547965936203;  // std dev = 0.270, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2163241992228447;  // std dev = 0.108, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, D) )
%   | | then return 0.2676269719474612;  // std dev = 0.038, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.02114601394751055;  // std dev = 0.772, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.08084468404963767;  // std dev = 0.013, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return -0.03425212212234677;  // std dev = 0.988, 63.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=8 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -4.230908830728519E-4;  // std dev = 1.218, 52.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=13 */
%   | | | else return 0.011930289329571395;  // std dev = 1.583, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18670934925551513;  // std dev = 0.208, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(D, F), follows(A, F) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.07042588546479706;  // std dev = 0.251, 58.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=1 */
%   | | | else return -0.051164222613320744;  // std dev = 0.525, 35.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=3 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.25039378694448094;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.03290069637814911;  // std dev = 0.380, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2122918204989543;  // std dev = 1.083, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.09936640380242834;  // std dev = 0.253, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.020627171312204755;  // std dev = 1.033, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | | else return 0.03344943815491419;  // std dev = 1.240, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.15847527291622537;  // std dev = 0.178, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return -0.05494426826196214;  // std dev = 0.836, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2594649043527101;  // std dev = 0.043, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877173566831337;  // std dev = 0.186, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.170311832401268;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.10604543786893889;  // std dev = 0.879, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.09192707463832038;  // std dev = 0.043, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(I, A) )
%   | | then return 0.057549284839078674;  // std dev = 0.428, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.0173954763112117;  // std dev = 0.301, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.13638669645353896;  // std dev = 0.056, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(A, C), tweets(A, E) )
%   | | then return -0.014847815522530292;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.1409390247180204;  // std dev = 0.051, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.22024907820557227;  // std dev = 0.057, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.06713400327853468;  // std dev = 0.052, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.21718663828044962;  // std dev = 0.104, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.09056462381216263;  // std dev = 0.109, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.008564286838591654;  // std dev = 0.666, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.08313540837569075;  // std dev = 1.133, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.024', 'seconds']
Refined model CLL: -0.10106


******************************************
Best model found
******************************************
Results 

CLL : -0.096953 

AUC ROC : 0.993852 

AUC PR : 0.43051 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 14.473 

Total Inference Time : 8.377597332000732 

Total revision time: 27.957290294647215
Best scored revision CLL: -0.10106


Results 

CLL : -0.096953 

AUC ROC : 0.993852 

AUC PR : 0.43051 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 29.655241134643553 

Total Inference Time : 8.377597332000732 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.994
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8265699877310905;  // std dev = 1.704, 95.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=92 */
%   | | else return 0.8278459047964812;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return -0.14185106490048846;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1273422329451944;  // std dev = 7.970, 414.000 (wgt'ed) examples reached here.  /* #neg=290 #pos=124 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12620065908293812;  // std dev = 6.915, 311.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=99 */
%   | | | else return 0.175559802286347;  // std dev = 3.328, 66.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6244403815913926;  // std dev = 2.182, 104.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=99 */
%   | else return -0.15599846144309754;  // std dev = 1.66e-07, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13343694871221023;  // std dev = 3.311, 69.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=25 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08902171986747894;  // std dev = 4.692, 221.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=76 */
%   | | else return 0.08132106449065059;  // std dev = 0.354, 145.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=48 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.501447703340135;  // std dev = 1.723, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15839366349514442;  // std dev = 0.322, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04065809787454304;  // std dev = 4.348, 268.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=92 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.013732955043032473;  // std dev = 2.768, 110.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=32 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.02218094312475417;  // std dev = 4.284, 313.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=99 */
%   | | | else return 0.03643794091891301;  // std dev = 2.734, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3363793750591975;  // std dev = 1.710, 102.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=99 */
%   | | | else return -0.13477136045484886;  // std dev = 0.025, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09163918426396685;  // std dev = 2.488, 60.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=25 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0017899804318402322;  // std dev = 4.568, 397.000 (wgt'ed) examples reached here.  /* #neg=273 #pos=124 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.449', 'seconds']
Parameter learned model CLL:-0.158388 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.704, 3, 92], 'false,true,false': [0.985, 1, 32], 'false,false': [0.0, 230, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.97, 290, 124]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.915, 212, 99], 'false,false,false,false': [3.328, 41, 25]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.182, 5, 99], 'true,false': [1.66e-07, 202, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.311, 44, 25]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.692, 145, 76], 'false,false,false': [0.354, 97, 48]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.723, 3, 124], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.322, 259, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.348, 176, 92], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.768, 78, 32]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.284, 214, 99], 'false,false,false,false': [2.734, 51, 25]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.71, 3, 99], 'false,false,true,false': [0.025, 200, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.488, 35, 25]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.568, 273, 124]}]
{'': [nan, 0.2263974282949998], 'false': [0.030273437500004108, -2.0852884636437723e-16], 'false,true': [0.030581717451524295, 0.02938475665748541]}
{'': [nan, 0.15342276913779643], 'false': [nan, 0.15342276913780137], 'false,false': [nan, 0.15342276913779643], 'false,false,false': [nan, 0.15342276913780137]}
{'': [nan, 0.1565685766761155], 'false': [nan, 0.1565685766761155], 'false,false': [nan, 0.1565685766761155], 'false,false,false': [0.15374537607334524, 0.16786203354285334]}
{'': [0.15220715871452506, 0.15888795632059682], 'false': [nan, 0.15888795632059682], 'false,false': [nan, 0.15888795632059682], 'false,false,false': [nan, 0.15888795632059682], 'true': [0.04576471509031052, 1.363046089638806e-16]}
{'': [nan, 0.10971957781947536], 'false': [nan, 0.10971957781947557], 'false,false': [0.09961707722427529, 0.125081375288021], 'false,false,true': [nan, 0.09961707722427529]}
{'': [nan, 0.10407444277889032], 'false': [nan, 0.10407444277889032], 'false,false': [0.023366199860674255, 0.00039924234586454784], 'false,false,false': [nan, 0.00039924234586459587]}
{'': [0.07053024421038036, 0.06965023852605703], 'true': [nan, 0.07053024421038036], 'false': [nan, 0.06965023852605703], 'false,false': [nan, 0.06965023852605703], 'false,false,false': [nan, 0.06965023852605703]}
{'': [nan, 0.06642924703248747], 'false': [nan, 0.06642924703248747], 'false,false': [nan, 0.06642924703248747], 'false,false,false': [0.05864524099077189, 0.09832351125572188]}
{'': [nan, 0.06722258069983385], 'false': [nan, 0.06722258069983418], 'false,false': [0.05933381334824217, 0.1031530245043371], 'false,false,false': [nan, 0.1031530245043371], 'false,false,true': [0.028660086602523012, 3.017999507268776e-06]}
{'': [nan, 0.05255969122151628], 'false': [nan, 0.05255969122151574], 'false,false': [nan, 0.05255969122151628]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 13.711
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.6081489350995122;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return 0.8581489350995116;  // std dev = 2.92e-07, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else return -0.14185106490048832;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7226307231434584;  // std dev = 0.047, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return 0.6528067455442876;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then return 0.7459170511141586;  // std dev = 0.071, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.10040529557005502;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6425503352878774;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.12544463852839122;  // std dev = 6.32e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.05908165904704042;  // std dev = 3.088, 77.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=17 */
%   | | | else return 0.21780331958446802;  // std dev = 2.347, 32.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.5584754440160079;  // std dev = 0.052, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else return 0.5185975360383959;  // std dev = 0.217, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.10711052170574333;  // std dev = 0.058, 127.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=1 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.5285390863993151;  // std dev = 0.874, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.11231637819360626;  // std dev = 4.59e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.6676518796432512;  // std dev = 0.167, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.13421325596430456;  // std dev = 0.026, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.09610395438561176;  // std dev = 1.195, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.14810789262293989;  // std dev = 2.857, 52.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.4264017411392667;  // std dev = 0.177, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.20624774010313504;  // std dev = 0.989, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.43526378184287645;  // std dev = 0.041, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.6162733384750334;  // std dev = 0.292, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.11493481867561882;  // std dev = 0.352, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.434448990052328;  // std dev = 0.013, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, I), follows(J, A) )
%   | | then return -0.08502595627730855;  // std dev = 0.095, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.1856600409862535;  // std dev = 1.069, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.07310197694411248;  // std dev = 1.722, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32644374615408056;  // std dev = 0.115, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, F) )
%   | | | then return 0.10644638888629787;  // std dev = 0.736, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.367979618576087;  // std dev = 0.173, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.09641384253042079;  // std dev = 0.566, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | | else return -0.07484818309428001;  // std dev = 0.797, 56.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.35958237808232607;  // std dev = 1.111, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12620987385174426;  // std dev = 0.235, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.11849145130925921;  // std dev = 1.791, 31.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
%   | | | else return 0.07554738698216572;  // std dev = 1.653, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.2607214748834292;  // std dev = 0.156, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.2313535521785077;  // std dev = 0.997, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0.38493777696316345;  // std dev = 0.265, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then return 0.29871090973781306;  // std dev = 0.085, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.49337465450487034;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5770388402400103;  // std dev = 0.120, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09688544576981858;  // std dev = 0.399, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.21277610766030028;  // std dev = 0.078, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( tweets(A, E), tweets(C, F) )
%   | | then return -0.285025699830199;  // std dev = 0.981, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.21445504199565463;  // std dev = 0.037, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.028593276622042724;  // std dev = 0.749, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.26283798612804277;  // std dev = 0.296, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.07844180967260084;  // std dev = 0.048, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.22093485404009852;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.02894889122228597;  // std dev = 1.399, 56.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=12 */
%   | | | else return 0.07223037822899962;  // std dev = 1.823, 45.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=18 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(E, A), follows(E, C) )
%   | | | then return 0.1330758493071653;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.1837064069225216;  // std dev = 0.028, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.21427362052725704;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1833364821794794;  // std dev = 0.057, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.12160095989966803;  // std dev = 0.296, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return -0.0723605126956573;  // std dev = 0.030, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18529702070741574;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.007228589780981801;  // std dev = 1.590, 69.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=17 */
%   | | | else return 0.016191008496738813;  // std dev = 1.647, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.14995659589644858;  // std dev = 1.048, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return -0.07018997288064333;  // std dev = 0.965, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.24670509928219786;  // std dev = 0.087, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else return -0.08179221659321491;  // std dev = 0.027, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.16080252446104343;  // std dev = 0.007, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08951961789319002;  // std dev = 0.471, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.022851173403941643;  // std dev = 0.360, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.02239818301222739;  // std dev = 0.763, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.07905682122866584;  // std dev = 1.172, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.13730142621264124;  // std dev = 0.102, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return 0.07355679359252192;  // std dev = 0.250, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(F, E) )
%   | | then return 0.2355750017183868;  // std dev = 0.163, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.017443535094504137;  // std dev = 0.828, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.14858978417366442;  // std dev = 0.128, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.06313150004583441;  // std dev = 0.045, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015725349495950527;  // std dev = 1.109, 53.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=12 */
%   | | | else return 0.018984660390860556;  // std dev = 1.739, 50.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.105', 'seconds']
Refined model CLL: -0.104221


******************************************
Best model found
******************************************
Results 

CLL : -0.096926 

AUC ROC : 0.994633 

AUC PR : 0.465269 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 13.711 

Total Inference Time : 12.432641744613647 

Total revision time: 32.313335256576536
Best scored revision CLL: -0.104221


Results 

CLL : -0.096926 

AUC ROC : 0.994633 

AUC PR : 0.465269 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 34.011286096572874 

Total Inference Time : 12.432641744613647 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.4
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8245354897213594;  // std dev = 1.966, 119.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=115 */
%   | | else return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else return -0.14185106490048782;  // std dev = 6.45e-09, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15024820973865774;  // std dev = 8.752, 480.000 (wgt'ed) examples reached here.  /* #neg=324 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12832056754597276;  // std dev = 7.812, 393.000 (wgt'ed) examples reached here.  /* #neg=265 #pos=128 */
%   | | | else return 0.21241638107129754;  // std dev = 3.363, 66.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6151306870836246;  // std dev = 2.576, 135.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=128 */
%   | else return -0.1599778617016571;  // std dev = 0.173, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08176253039316042;  // std dev = 3.613, 90.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07834149537478521;  // std dev = 5.389, 288.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=97 */
%   | | else return 0.07999711962062313;  // std dev = 0.350, 177.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5006591423467865;  // std dev = 1.826, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15722710020666406;  // std dev = 0.322, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.041353680598888984;  // std dev = 4.681, 343.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0373489192186588;  // std dev = 2.977, 120.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.02147758629636787;  // std dev = 4.791, 406.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=128 */
%   | | | else return 0.023942831860264555;  // std dev = 2.880, 91.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3416740212667237;  // std dev = 1.610, 131.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=128 */
%   | | | else return -0.13706821473878392;  // std dev = 0.002, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.007273240933685274;  // std dev = 2.908, 97.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.012211546743055515;  // std dev = 4.998, 468.000 (wgt'ed) examples reached here.  /* #neg=312 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.569', 'seconds']
Parameter learned model CLL:-0.158345 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.966, 4, 115], 'false,true,false': [0.988, 1, 41], 'false,false': [6.45e-09, 304, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.752, 324, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.812, 265, 128], 'false,false,false,false': [3.363, 38, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.576, 7, 128], 'true,false': [0.173, 264, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.613, 62, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.389, 191, 97], 'false,false,false': [0.35, 118, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.826, 3, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.322, 322, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.681, 228, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.977, 79, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.791, 278, 128], 'false,false,false,false': [2.88, 63, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.61, 3, 128], 'false,false,true,false': [0.002, 264, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.908, 69, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.998, 312, 156]}]
{'': [nan, 0.22293444328824447], 'false': [0.030091431657735174, 4.382459307730881e-17], 'false,true': [0.03248358166796465, 0.023242630385488926]}
{'': [nan, 0.15957319928328126], 'false': [nan, 0.1595731992832855], 'false,false': [nan, 0.15957319928328126], 'false,false,false': [nan, 0.1595731992832855]}
{'': [nan, 0.15845998280034257], 'false': [nan, 0.15845998280033846], 'false,false': [nan, 0.15845998280033846], 'false,false,false': [0.15528396790798057, 0.1713165060982315]}
{'': [0.1512004973854571, 0.14505129485448714], 'true': [0.049142809790494686, 0.00011317178324658321], 'false': [nan, 0.14505129485448714], 'false,false': [nan, 0.14505129485448714], 'false,false,false': [nan, 0.14505129485448714]}
{'': [nan, 0.10899221299264392], 'false': [nan, 0.10899221299264368], 'false,false': [0.1008327640660196, 0.12226690675809988], 'false,false,true': [nan, 0.1008327640660196]}
{'': [nan, 0.10292445031154088], 'false': [nan, 0.10292445031154088], 'false,false': [0.02096954481812661, 0.00032119279306034774], 'false,false,false': [nan, 0.00032119279306044976]}
{'': [0.0638908288223794, 0.07387469550312013], 'false': [nan, 0.07387469550312013], 'false,false': [nan, 0.07387469550312013], 'false,false,false': [nan, 0.07387469550312013], 'true': [nan, 0.0638908288223794]}
{'': [nan, 0.06286283804780804], 'false': [nan, 0.06286283804780804], 'false,false': [nan, 0.06286283804780804], 'false,false,false': [0.05652621917903178, 0.09112894218118933]}
{'': [nan, 0.06327959089297752], 'false': [nan, 0.06327959089297754], 'false,false': [0.057368438140326584, 0.08718357771187119], 'false,false,false': [nan, 0.08718357771187119], 'false,false,true': [0.01979822959643297, 1.3704483615268949e-08]}
{'': [nan, 0.053380948622168835], 'false': [nan, 0.053380948622169015], 'false,false': [nan, 0.053380948622168835]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 16.867
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.822434649385226;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.8581489350995121;  // std dev = 1.33e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.7956489350995123;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.724815601766179;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.7936328060672536;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0.8236661764788226;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   else return -0.14185106490048766;  // std dev = 1.88e-07, 331.000 (wgt'ed) examples reached here.  /* #neg=331 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.722271805475331;  // std dev = 0.029, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else return 0.6716261567717121;  // std dev = 0.238, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then if ( follows(G, F) )
%   | | | then return -0.1192202697550566;  // std dev = 0.868, 114.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=1 */
%   | | | else return -0.07960115259782097;  // std dev = 0.848, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.7393307676492868;  // std dev = 0.111, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.12544463852839155;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.6344704830413357;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10942008369290801;  // std dev = 3.640, 91.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=25 */
%   | | | else return 0.17197928890654982;  // std dev = 2.665, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.5175938939228394;  // std dev = 0.199, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else return 0.566569963799282;  // std dev = 0.081, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.10014384525012726;  // std dev = 0.106, 132.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.5300177927224561;  // std dev = 0.998, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.11231637819360624;  // std dev = 5.87e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.15461308822548758;  // std dev = 2.857, 53.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=19 */
%   | | | else return 0.10880384853072693;  // std dev = 2.600, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.41633519420411846;  // std dev = 0.688, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.16945609133375508;  // std dev = 2.398, 34.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.4177901937128969;  // std dev = 0.145, 93.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=91 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.5962439327284517;  // std dev = 0.966, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.6651853464645082;  // std dev = 0.130, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.11739503118864227;  // std dev = 0.407, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.37416784471921877;  // std dev = 0.965, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.6535993380813694;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11616665424466091;  // std dev = 0.153, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(J, A) )
%   | | then return 0.16711688847429437;  // std dev = 0.661, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.030375096956347325;  // std dev = 0.352, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.3129422920143414;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else return -0.1743596120128314;  // std dev = 0.995, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.4270615110903077;  // std dev = 0.085, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.3581180149003366;  // std dev = 0.089, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.09255110022023619;  // std dev = 0.015, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.47513459809252667;  // std dev = 0.406, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.13177556752470612;  // std dev = 0.207, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.3002068773793993;  // std dev = 0.930, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.02728915158885489;  // std dev = 3.085, 112.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=27 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.2753892716487118;  // std dev = 0.369, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.07361571928209017;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.249845151911191;  // std dev = 1.042, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.3748561381430138;  // std dev = 0.997, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(H, A) )
%   | | then return 0.2766573900303003;  // std dev = 0.172, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.48782510893181336;  // std dev = 0.259, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.6404307465833273;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.1065866549689218;  // std dev = 0.516, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.21137274969811795;  // std dev = 0.091, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return 0.2759426420154267;  // std dev = 0.047, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.12986681457898328;  // std dev = 1.035, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.21488290138003696;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07707206538666994;  // std dev = 0.014, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.1716568030204799;  // std dev = 0.964, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.25129542974403135;  // std dev = 0.054, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.07199269583920023;  // std dev = 0.672, 56.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=3 */
%   | | | else return 0.0024541492802799257;  // std dev = 2.821, 154.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=40 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.18545840710323042;  // std dev = 2.11e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1216140459070818;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.015235317922625113;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.013446990461189889;  // std dev = 0.842, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.1888157061854058;  // std dev = 0.143, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(G, A) )
%   | then return -0.04350379164039343;  // std dev = 0.102, 219.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=23 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.12481267157734201;  // std dev = 0.310, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.027525770854451022;  // std dev = 1.663, 57.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=19 */
%   | | | else return 0.051069024113297765;  // std dev = 2.103, 62.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.1686449294123936;  // std dev = 0.087, 92.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=91 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1107876264092709;  // std dev = 0.866, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.34621206010950223;  // std dev = 0.196, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.08646379352648415;  // std dev = 0.449, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.18171807742834656;  // std dev = 0.020, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.20828606663139423;  // std dev = 0.901, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.10559613657992481;  // std dev = 0.189, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.06278209926148572;  // std dev = 0.424, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.026038888926739102;  // std dev = 1.411, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.13793831433492623;  // std dev = 0.026, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(D, A), tweets(A, E) )
%   | | | then return 0.005585904844522046;  // std dev = 1.313, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.1354710218793103;  // std dev = 0.048, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.14983076169892987;  // std dev = 0.123, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(F, A) )
%   | then return -0.0415012831363494;  // std dev = 0.100, 228.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2526361923505146;  // std dev = 0.219, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.11662952616281153;  // std dev = 0.092, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.007952668851780652;  // std dev = 1.524, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | | | else return 0.07532579448894453;  // std dev = 1.317, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.715', 'seconds']
Refined model CLL: -0.104026


******************************************
Best model found
******************************************
Results 

CLL : -0.098834 

AUC ROC : 0.994645 

AUC PR : 0.47607 

Precision : 0.345205 

Recall : 1.0 

F1 : 0.513238 

Total Learning Time : 16.867 

Total Inference Time : 12.554186820983887 

Total revision time: 36.67039183807373
Best scored revision CLL: -0.104026


Results 

CLL : -0.098834 

AUC ROC : 0.994645 

AUC PR : 0.47607 

Precision : 0.345205 

Recall : 1.0 

F1 : 0.513238 

Total Learning Time : 38.36834267807007 

Total Inference Time : 12.554186820983887 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.074
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1183677954160618;  // std dev = 3.572, 86.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.10149267773344775;  // std dev = 3.527, 86.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=25 */
%   | | | else return -0.13901643295812116;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6730452082396583;  // std dev = 7.30e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.15161494051464944;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12319677695336807;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03678805524859154;  // std dev = 2.160, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | else return 0.08942426350498946;  // std dev = 0.306, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.42311738364223167;  // std dev = 1.362, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13752035553855282;  // std dev = 0.042, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.008801557962426055;  // std dev = 1.685, 56.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09840225396438555;  // std dev = 1.275, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.04501824756425253;  // std dev = 2.072, 74.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=25 */
%   | | | else return -0.10669145043456447;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.37128301871341335;  // std dev = 0.082, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.13407069809501282;  // std dev = 0.061, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09694125204843591;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.019930762590615235;  // std dev = 1.660, 74.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=25 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.466', 'seconds']
Parameter learned model CLL:-0.142563 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 14], 'false,true,false': [0.0, 0, 11], 'false,false': [7.21e-09, 48, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.572, 61, 25]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.527, 61, 25], 'false,false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [7.3e-08, 0, 25], 'true,false': [0.0, 43, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.16, 35, 14], 'false,false,false': [0.306, 21, 11]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.362, 2, 25], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.042, 54, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.685, 42, 14], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.275, 14, 11]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.072, 49, 25], 'false,false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.082, 0, 25], 'false,false,true,false': [0.061, 56, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.66, 49, 25]}]
{'': [nan, 0.22518296115594033], 'false': [7.105427357601002e-16, 5.3198186596622086e-17], 'false,true': [-2.5376526277146434e-16, -1.6148698540002277e-16]}
{'': [nan, 0.14836030196821914], 'false': [nan, 0.14836030196821978], 'false,false': [nan, 0.14836030196821914], 'false,false,false': [nan, 0.14836030196821978]}
{'': [nan, 0.1426651494069412], 'false': [nan, 0.14266514940694128], 'false,false': [nan, 0.14266514940694128], 'false,false,false': [0.14466829284452185, 0.0]}
{'': [0.15810319809996512, 0.0], 'true': [2.1316282072803005e-16, -3.6146796150586495e-17], 'false': [nan, 0.0], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}
{'': [nan, 0.09528808531705225], 'false': [nan, 0.09528808531705231], 'false,false': [0.09525963972492488, 0.09365561854899815], 'false,false,true': [nan, 0.09525963972492488]}
{'': [nan, 0.09278211140467207], 'false': [nan, 0.09278211140467207], 'false,false': [0.0687381453960877, 3.2536211050428864e-05], 'false,false,false': [nan, 3.253621105043709e-05]}
{'': [0.050677686073170754, 0.0650485030626063], 'false': [nan, 0.0650485030626063], 'false,false': [nan, 0.0650485030626063], 'false,false,false': [nan, 0.0650485030626063], 'true': [nan, 0.050677686073170754]}
{'': [nan, 0.056608814444856735], 'false': [nan, 0.056608814444856735], 'false,false': [nan, 0.056608814444856735], 'false,false,false': [0.058007045636347065, -2.3129646346357427e-18]}
{'': [nan, 0.05363859201671219], 'false': [nan, 0.053638592016712124], 'false,false': [0.05462266728373847, 0.0], 'false,false,true': [0.00027016237340042436, 6.54564624218463e-05], 'false,false,false': [nan, 0.0]}
{'': [nan, 0.03722817465635185], 'false': [nan, 0.037228174656351885], 'false,false': [nan, 0.03722817465635185]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
2;;accounttype(A, B) :- follows(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(A, E).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 8.26
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7250732416257504;  // std dev = 0.063, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then return -0.1254446385283914;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(D, E) )
%   | | | then return 0.09173469290966596;  // std dev = 1.064, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( tweets(A, G) )
%   | | then return 0.11596051882570745;  // std dev = 0.382, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.1561947117180572;  // std dev = 0.976, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.4378340619645058;  // std dev = 0.690, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.5611170562559292;  // std dev = 0.081, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.4782022875853871;  // std dev = 0.798, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.12850111821525975;  // std dev = 0.154, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.18162499279298824;  // std dev = 1.239, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return -0.03145913177108566;  // std dev = 0.787, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.35925844472454005;  // std dev = 0.713, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4726179838327066;  // std dev = 0.243, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.6084361924084118;  // std dev = 0.226, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5248566656796277;  // std dev = 0.135, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.1231820893730407;  // std dev = 0.203, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then if ( tweets(C, D), tweets(A, D) )
%   | | then return 0.16434839291854406;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.3187124996788761;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.4869545723187865;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.1967271876341202;  // std dev = 0.994, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.10220816295123238;  // std dev = 0.083, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( tweets(A, G) )
%   | | then return 0.44973081362428613;  // std dev = 0.213, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.16263328274286887;  // std dev = 0.657, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.16290580880599914;  // std dev = 0.928, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.27026739206096856;  // std dev = 0.082, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.08356631182521128;  // std dev = 0.770, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.4076741098374269;  // std dev = 0.120, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.1069567408156078;  // std dev = 0.244, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.24489291328343787;  // std dev = 0.120, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.09721492415971704;  // std dev = 0.953, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.08373135499037902;  // std dev = 0.074, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.28960914272104715;  // std dev = 0.102, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.18947859548368923;  // std dev = 0.029, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.058227825088399014;  // std dev = 0.515, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.05586539531396847;  // std dev = 0.387, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.20496322348771234;  // std dev = 0.140, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(E, F) )
%   | | | then return -0.05506797012450312;  // std dev = 0.525, 40.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=2 */
%   | | | else return 0.025540466935041226;  // std dev = 0.230, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.05550909153464337;  // std dev = 0.629, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return -0.08146569153031581;  // std dev = 0.407, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.07780806104724938;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.17345863349314536;  // std dev = 0.083, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.06655243469498295;  // std dev = 0.843, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.23179136840036915;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.30115595231192815;  // std dev = 0.101, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08113360258491492;  // std dev = 0.183, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.07240523210761167;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.1443802003578361;  // std dev = 0.056, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.17784029876162533;  // std dev = 0.100, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), tweets(D, F) )
%   | | then if ( follows(E, A), tweets(A, G) )
%   | | | then return -0.060195360478661426;  // std dev = 5.27e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.03028058485415225;  // std dev = 0.443, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.20622467591198862;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.16855521725529188;  // std dev = 0.075, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( tweets(A, H) )
%   | | then return -0.02810190841469763;  // std dev = 0.311, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.139260410337561;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.397', 'seconds']
Refined model CLL: -0.104998


******************************************
Best model found
******************************************
Results 

CLL : -0.116549 

AUC ROC : 0.994008 

AUC PR : 0.363949 

Precision : 0.335025 

Recall : 0.846154 

F1 : 0.48 

Total Learning Time : 8.26 

Total Inference Time : 3.878941535949707 

Total revision time: 14.6424237575531
Best scored revision CLL: -0.104998


Results 

CLL : -0.116549 

AUC ROC : 0.994008 

AUC PR : 0.363949 

Precision : 0.335025 

Recall : 0.846154 

F1 : 0.48 

Total Learning Time : 16.340374597549438 

Total Inference Time : 3.878941535949707 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.399
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8068668838174602;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.14185106490048766;  // std dev = 8.54e-09, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1758296263866952;  // std dev = 4.854, 141.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=50 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1367975318600374;  // std dev = 4.717, 142.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=48 */
%   | | | else return 0.13386268210168514;  // std dev = 0.970, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6401468356216309;  // std dev = 0.999, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | else return -0.16393670597055798;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0434754183572052;  // std dev = 1.014, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07790126702571228;  // std dev = 3.174, 102.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=35 */
%   | | else return 0.041332748065243216;  // std dev = 0.301, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47606624265754666;  // std dev = 1.022, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1522886868380015;  // std dev = 0.057, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02831218025847669;  // std dev = 2.617, 117.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=37 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.051111484117220635;  // std dev = 1.443, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.02168612375144143;  // std dev = 2.934, 149.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=48 */
%   | | | else return 0.012201039402834481;  // std dev = 0.835, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3400167255669826;  // std dev = 0.988, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return -0.13925000744605961;  // std dev = 0.007, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06268204232240988;  // std dev = 0.891, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.013967945741848226;  // std dev = 2.466, 151.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=50 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.485', 'seconds']
Parameter learned model CLL:-0.152287 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.377, 2, 37], 'false,true,false': [0.0, 0, 13], 'false,false': [8.54e-09, 85, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.854, 91, 50]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.717, 94, 48], 'false,false,false,false': [0.97, 4, 2]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.999, 1, 48], 'true,false': [0.0, 89, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.014, 6, 2]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.174, 67, 35], 'false,false,false': [0.301, 38, 15]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.022, 1, 50], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.057, 105, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.617, 80, 37], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.443, 23, 13]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.934, 101, 48], 'false,false,false,false': [0.835, 6, 2]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.988, 1, 48], 'false,false,true,false': [0.007, 93, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.891, 12, 2]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.466, 101, 50]}]
{'': [nan, 0.23176514465341833], 'false': [0.03698224852071041, 7.314410515177502e-17], 'false,true': [0.04865220249835817, -2.7328566760003855e-16]}
{'': [nan, 0.16709894738923192], 'false': [nan, 0.16709894738923167], 'false,false': [nan, 0.16709894738923192], 'false,false,false': [nan, 0.16709894738923167]}
{'': [nan, 0.15666780006662306], 'false': [nan, 0.1566678000666235], 'false,false': [nan, 0.1566678000666235], 'false,false,false': [0.1566665737086484, 0.15668855971851367]}
{'': [0.155285029175556, 0.1285597508958352], 'true': [0.020355228448729015, -1.197543936674326e-16], 'false': [nan, 0.1285597508958352], 'false,false': [nan, 0.1285597508958352], 'false,false,false': [nan, 0.1285597508958352]}
{'': [nan, 0.0962804657642668], 'false': [nan, 0.09628046576426698], 'false,false': [0.09873900986246695, 0.0906689269622688], 'false,false,true': [nan, 0.09873900986246695]}
{'': [nan, 0.09359739333254151], 'false': [nan, 0.09359739333254151], 'false,false': [0.020482899051422906, 3.1136232982454884e-05], 'false,false,false': [nan, 3.1136232982433735e-05]}
{'': [0.0585347760796206, 0.057804805739247386], 'true': [nan, 0.0585347760796206], 'false': [nan, 0.057804805739247386], 'false,false': [nan, 0.057804805739247386], 'false,false,false': [nan, 0.057804805739247386]}
{'': [nan, 0.05928031665456815], 'false': [nan, 0.05928031665456815], 'false,false': [nan, 0.05928031665456815], 'false,false,false': [0.05777894762256465, 0.08715793234735564]}
{'': [nan, 0.05923839544459258], 'false': [nan, 0.059238395444592605], 'false,false': [0.058782375474415484, 0.05668389768572114], 'false,false,true': [0.019912766106082478, 5.58840167751942e-07], 'false,false,false': [nan, 0.05668389768572114]}
{'': [nan, 0.04027890089933159], 'false': [nan, 0.040278900899331525], 'false,false': [nan, 0.04027890089933159]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 7.598
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.14185106490048763;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7284743502458214;  // std dev = 0.081, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7374463313511526;  // std dev = 0.062, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.1091021511073017;  // std dev = 0.891, 55.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=1 */
%   | | | else return -0.04373220142294229;  // std dev = 1.212, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.25007449513354013;  // std dev = 1.260, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.039477830217733476;  // std dev = 1.160, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.5146534680759008;  // std dev = 0.224, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return 0.5600055033709801;  // std dev = 0.066, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5798857875049132;  // std dev = 0.093, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.21980936757545613;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return -0.09590244238528521;  // std dev = 1.262, 90.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=2 */
%   | | | else return -0.026494655791045152;  // std dev = 0.851, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1450688176843111;  // std dev = 1.414, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.08663096858176707;  // std dev = 0.970, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4310873452843448;  // std dev = 0.108, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4374169710806226;  // std dev = 0.088, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7163448617624318;  // std dev = 0.212, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.11256634229869783;  // std dev = 0.144, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return 0.010631832866521673;  // std dev = 0.244, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.33952861413817587;  // std dev = 0.248, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.34634775126101613;  // std dev = 0.070, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6567929083516766;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G), tweets(D, G) )
%   | | | then return -0.11156260253716824;  // std dev = 0.510, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return -0.09848596479034628;  // std dev = 0.019, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.4823794194259842;  // std dev = 0.234, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1545989076567945;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2640971588089668;  // std dev = 0.510, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.0643009127586907;  // std dev = 0.406, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.2604954997621927;  // std dev = 0.077, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return -0.07667178368337084;  // std dev = 0.857, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.24284859949759385;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3604997761652898;  // std dev = 0.103, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.49818058250646025;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4076005824513511;  // std dev = 0.130, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.09854257329979633;  // std dev = 0.230, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(A, C) )
%   | | then if ( follows(E, C), recursion_accounttype(E, B) )
%   | | | then return 0.1438593092212442;  // std dev = 0.963, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.21447458738922834;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.0025635079561741937;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.23400767241259168;  // std dev = 0.049, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), tweets(A, H) )
%   | | then return -0.08054554437659285;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.24247680588330844;  // std dev = 0.119, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A) )
%   | | then return -0.06722696493609916;  // std dev = 0.100, 74.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.03665880728429608;  // std dev = 0.741, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return -0.01227168565567103;  // std dev = 0.611, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1912323883441315;  // std dev = 0.143, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return -0.2879558209570922;  // std dev = 0.899, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.07425530780484696;  // std dev = 0.024, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.271080404201369;  // std dev = 0.223, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.07923363578219964;  // std dev = 0.011, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2947478211028645;  // std dev = 0.161, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11924291987897821;  // std dev = 0.023, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.15791084773673217;  // std dev = 0.401, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.05177277136535345;  // std dev = 0.369, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.11449408061528774;  // std dev = 0.982, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.15621252645444092;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.1904077247996927;  // std dev = 0.152, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.30485417016171457;  // std dev = 0.222, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07681936289021746;  // std dev = 0.213, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -8.619735395934032E-4;  // std dev = 0.140, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.14222370806244203;  // std dev = 0.056, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else return -0.0912829405941686;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), tweets(A, F) )
%   | then if ( follows(A, E), tweets(E, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.1455856356505774;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.05444489733523346;  // std dev = 0.841, 56.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=3 */
%   | | else return -0.0726198755925869;  // std dev = 0.028, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.15176946422580634;  // std dev = 0.129, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.06681732924953035;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.02557481400235762;  // std dev = 0.707, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.829', 'seconds']
Refined model CLL: -0.096842


******************************************
Best model found
******************************************
Results 

CLL : -0.101873 

AUC ROC : 0.994594 

AUC PR : 0.377075 

Precision : 0.344262 

Recall : 0.942308 

F1 : 0.504288 

Total Learning Time : 7.598 

Total Inference Time : 5.272693634033203 

Total revision time: 16.283991834640503
Best scored revision CLL: -0.096842


Results 

CLL : -0.101873 

AUC ROC : 0.994594 

AUC PR : 0.377075 

Precision : 0.344262 

Recall : 0.942308 

F1 : 0.504288 

Total Learning Time : 17.98194267463684 

Total Inference Time : 5.272693634033203 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.463
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8411997825571396;  // std dev = 0.991, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15245247214979163;  // std dev = 6.045, 226.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=75 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12392327320392284;  // std dev = 5.679, 211.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=68 */
%   | | | else return 0.14892053204841046;  // std dev = 1.780, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6347876619144154;  // std dev = 1.393, 70.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=68 */
%   | else return -0.15902836896083986;  // std dev = 7.60e-08, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3165646133898519;  // std dev = 1.402, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.078039421582278;  // std dev = 3.795, 153.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=51 */
%   | | else return 0.10416443359596138;  // std dev = 0.331, 64.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=24 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4708194569137715;  // std dev = 1.375, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15534747666552093;  // std dev = 0.239, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05878310994652764;  // std dev = 3.144, 156.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=58 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.007489100400564316;  // std dev = 1.838, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.020232596239523115;  // std dev = 3.560, 208.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=68 */
%   | | | else return 0.13249668978638937;  // std dev = 1.148, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.29087754737229876;  // std dev = 2.158, 73.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=68 */
%   | | | else return -0.13808849922860078;  // std dev = 0.016, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.024876994140941525;  // std dev = 1.278, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.006139558303935499;  // std dev = 3.331, 254.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=75 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.442', 'seconds']
Parameter learned model CLL:-0.156513 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.991, 1, 58], 'false,true,false': [0.0, 0, 17], 'false,false': [0.0, 162, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.045, 151, 75]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.679, 143, 68], 'false,false,false,false': [1.78, 13, 7]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.393, 2, 68], 'true,false': [7.6e-08, 145, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.402, 5, 7]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.795, 102, 51], 'false,false,false': [0.331, 40, 24]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.375, 2, 75], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.239, 133, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.144, 98, 58], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.838, 40, 17]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.56, 140, 68], 'false,false,false,false': [1.148, 6, 7]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.158, 5, 68], 'false,false,true,false': [0.016, 136, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.278, 10, 7]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.331, 179, 75]}]
{'': [nan, 0.2158216227667539], 'false': [0.012984764542935068, -1.507710280355151e-16], 'false,true': [0.016661878770467882, -2.0898315757650005e-16]}
{'': [nan, 0.16167701488958036], 'false': [nan, 0.16167701488958003], 'false,false': [nan, 0.16167701488958036], 'false,false,false': [nan, 0.16167701488958003]}
{'': [nan, 0.15339391453647927], 'false': [nan, 0.15339391453647927], 'false,false': [nan, 0.15339391453647927], 'false,false,false': [0.1528633972815813, 0.15842010931420372]}
{'': [0.14738610920305015, 0.16386223084147952], 'false': [nan, 0.16386223084147952], 'false,false': [nan, 0.16386223084147952], 'false,false,false': [nan, 0.16386223084147952], 'true': [0.027705143224876494, 3.981489467621251e-17]}
{'': [nan, 0.09886966418480762], 'false': [nan, 0.09886966418480765], 'false,false': [0.0941205165238335, 0.10974187417511694], 'false,false,true': [nan, 0.0941205165238335]}
{'': [nan, 0.10032441431289053], 'false': [nan, 0.10032441431289053], 'false,false': [0.024547064702958216, 0.00043100092918234355], 'false,false,false': [nan, 0.0004310009291823869]}
{'': [0.06334628426351213, 0.059263179949915645], 'true': [nan, 0.06334628426351213], 'false': [nan, 0.059263179949915645], 'false,false': [nan, 0.059263179949915645], 'false,false,false': [nan, 0.059263179949915645]}
{'': [nan, 0.06401989846961793], 'false': [nan, 0.06401989846961793], 'false,false': [nan, 0.06401989846961793], 'false,false,false': [0.06094296406242967, 0.10138898856119592]}
{'': [nan, 0.06650930690016614], 'false': [nan, 0.06650930690016611], 'false,false': [0.06409672033990593, 0.09601037345650659], 'false,false,false': [nan, 0.09601037345650659], 'false,false,true': [0.06376628766214072, 1.996676045896575e-06]}
{'': [nan, 0.04369548618199844], 'false': [nan, 0.04369548618199872], 'false,false': [nan, 0.04369548618199844]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 9.145
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then return 0.8581489350995122;  // std dev = 1.19e-07, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else return 0.6359267128772901;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(F, G) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.14185106490048807;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.699283459598557;  // std dev = 0.150, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | else if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.7620720642963899;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.501422401275031;  // std dev = 0.854, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3954435859654955;  // std dev = 0.828, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then return -0.07105242232318576;  // std dev = 0.210, 153.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=10 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1561947117180572;  // std dev = 0.976, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.0435389716194778;  // std dev = 0.756, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5746650606487379;  // std dev = 0.200, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, D) )
%   | | | then return -0.10433981707857194;  // std dev = 0.845, 63.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=1 */
%   | | | else return -0.11785478157637685;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.5542219421703073;  // std dev = 1.283, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return -0.1216639414901794;  // std dev = 0.147, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.18859550611332443;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.053853981822104546;  // std dev = 0.802, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.41523218733673384;  // std dev = 1.336, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.235695402340128;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.44741171964218934;  // std dev = 0.115, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.6471547873081797;  // std dev = 0.089, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10735708316364587;  // std dev = 0.093, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4755241957307441;  // std dev = 0.078, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10614302815611677;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(C, D), tweets(A, D) )
%   | | then return 0.32305470590317853;  // std dev = 0.044, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.12778697403445247;  // std dev = 0.866, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.3517122688135634;  // std dev = 0.091, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.47161857780415095;  // std dev = 0.071, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.31841296931495505;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.23362598895118963;  // std dev = 0.337, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(H, A) )
%   | | then return -0.07384322796494222;  // std dev = 0.119, 136.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07496254037554569;  // std dev = 0.954, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return -0.053320360332064144;  // std dev = 0.821, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.26299084654778454;  // std dev = 0.123, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.18907001211711805;  // std dev = 0.318, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.3945635895387139;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5681636668709344;  // std dev = 0.135, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.3259046403323818;  // std dev = 0.104, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4409415622915512;  // std dev = 0.152, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.09282469730134478;  // std dev = 0.079, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.12670758749560795;  // std dev = 1.357, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return 0.2086016164033253;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2426680024485497;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.23453979871831152;  // std dev = 0.154, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( tweets(A, F), follows(G, A) )
%   | then return -0.057750160354597374;  // std dev = 0.114, 116.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=7 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.1987927681116506;  // std dev = 1.061, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.09120983493747045;  // std dev = 0.097, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.04444620029013822;  // std dev = 0.884, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.023932439096535352;  // std dev = 0.412, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then return 0.18800260486596854;  // std dev = 0.025, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( tweets(A, E), follows(D, C) )
%   | | | then return 0.06274281781985798;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.17213590471239643;  // std dev = 0.019, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.2252004532064511;  // std dev = 0.059, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(G, F) )
%   | | then return -0.016043469035360747;  // std dev = 1.103, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.22953895241399924;  // std dev = 0.152, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then return -0.058316631185575334;  // std dev = 0.099, 124.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.011037357490582824;  // std dev = 0.770, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | | else return -0.048811044873238355;  // std dev = 0.599, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.1310229790933701;  // std dev = 0.968, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.16355175925094662;  // std dev = 0.070, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, G), follows(H, A) )
%   | | | then return 0.39923050838004925;  // std dev = 0.228, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2563466745246916;  // std dev = 0.254, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07812777135967994;  // std dev = 0.098, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.1897192871690287;  // std dev = 0.049, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.07449303588263535;  // std dev = 4.56e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.14399741148170395;  // std dev = 0.076, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return 0.035998722174354236;  // std dev = 0.335, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07000189955240729;  // std dev = 0.095, 67.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=1 */
%   | | else if ( tweets(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.28256674984050717;  // std dev = 0.102, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.06895926900363922;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.1883554318400068;  // std dev = 0.131, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.07886682779280921;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(K, A), follows(A, K) )
%   | | | then return -0.003814877541420422;  // std dev = 0.427, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return -0.06013080629168985;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.113', 'seconds']
Refined model CLL: -0.095122


******************************************
Best model found
******************************************
Results 

CLL : -0.093071 

AUC ROC : 0.995284 

AUC PR : 0.443338 

Precision : 0.343458 

Recall : 0.942308 

F1 : 0.503425 

Total Learning Time : 9.145 

Total Inference Time : 6.210600137710571 

Total revision time: 19.419764478683472
Best scored revision CLL: -0.095122


Results 

CLL : -0.093071 

AUC ROC : 0.995284 

AUC PR : 0.443338 

Precision : 0.343458 

Recall : 0.942308 

F1 : 0.503425 

Total Learning Time : 21.11771531867981 

Total Inference Time : 6.210600137710571 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.91
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8068668838174616;  // std dev = 1.948, 78.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=74 */
%   | | else return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.14185106490048835;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1581474278325343;  // std dev = 6.978, 299.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=100 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13441520080954128;  // std dev = 6.617, 279.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=93 */
%   | | | else return 0.24873902415710372;  // std dev = 1.625, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6238860792869023;  // std dev = 1.958, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   | else return -0.1612051426406318;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07222734879584887;  // std dev = 1.809, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08964335631471387;  // std dev = 4.357, 192.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=67 */
%   | | else return 0.09104311172669134;  // std dev = 0.333, 92.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=33 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.44491158012844806;  // std dev = 2.371, 106.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=100 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15600135116362895;  // std dev = 0.200, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02898357319895113;  // std dev = 3.829, 239.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=74 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04423760747311488;  // std dev = 2.242, 69.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=26 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.03323916838721603;  // std dev = 4.122, 275.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=93 */
%   | | | else return 0.021262072666683954;  // std dev = 1.478, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.32737347640853776;  // std dev = 1.951, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   | | | else return -0.1406408721016377;  // std dev = 0.012, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08915346490549445;  // std dev = 1.355, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.011437245539222823;  // std dev = 3.829, 294.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=100 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.542', 'seconds']
Parameter learned model CLL:-0.157579 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.948, 4, 74], 'false,true,false': [1.46e-07, 0, 26], 'false,false': [0.0, 189, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.978, 199, 100]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.617, 186, 93], 'false,false,false,false': [1.625, 8, 7]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.958, 4, 93], 'true,false': [0.0, 202, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.809, 16, 7]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.357, 125, 67], 'false,false,false': [0.333, 59, 33]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.371, 6, 100], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.2, 205, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.829, 165, 74], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.242, 43, 26]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.122, 182, 93], 'false,false,false,false': [1.478, 16, 7]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.951, 4, 93], 'false,false,true,false': [0.012, 169, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.355, 10, 7]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.829, 194, 100]}]
{'': [nan, 0.22481333504176126], 'false': [0.036982248520711906, -2.2086976574553378e-16], 'false,true': [0.0486522024983549, 8.198570028001156e-16]}
{'': [nan, 0.16287014278814327], 'false': [nan, 0.16287014278814296], 'false,false': [nan, 0.16287014278814327], 'false,false,false': [nan, 0.16287014278814296]}
{'': [nan, 0.15856337103221038], 'false': [nan, 0.15856337103221074], 'false,false': [nan, 0.15856337103221074], 'false,false,false': [0.1569515068022284, 0.1761409426242967]}
{'': [0.14791543370057467, 0.14228151054949081], 'true': [0.03953620843951536, -1.934646062713144e-16], 'false': [nan, 0.14228151054949081], 'false,false': [nan, 0.14228151054949081], 'false,false,false': [nan, 0.14228151054949081]}
{'': [nan, 0.10278858869615841], 'false': [nan, 0.10278858869615856], 'false,false': [0.09888450601525728, 0.11093491490100545], 'false,false,true': [nan, 0.09888450601525728]}
{'': [nan, 0.09933644918725809], 'false': [nan, 0.09933644918725809], 'false,false': [0.05305205619737579, 0.00019422649420022253], 'false,false,false': [nan, 0.0001942264942002182]}
{'': [0.061352108347261174, 0.07286738745384075], 'false': [nan, 0.07286738745384075], 'false,false': [nan, 0.07286738745384075], 'false,false,false': [nan, 0.07286738745384075], 'true': [nan, 0.061352108347261174]}
{'': [nan, 0.06436903162453775], 'false': [nan, 0.06436903162453775], 'false,false': [nan, 0.06436903162453775], 'false,false,false': [0.06179524312308704, 0.09501021067989136]}
{'': [nan, 0.06783380891887444], 'false': [nan, 0.06783380891887454], 'false,false': [0.06505619208122179, 0.10800929795717285], 'false,false,false': [nan, 0.10800929795717285], 'false,false,true': [0.0392372131066639, 8.176710995494671e-07]}
{'': [nan, 0.04985896239433457], 'false': [nan, 0.04985896239433452], 'false,false': [nan, 0.04985896239433457]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 26.002
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.8368723393548312;  // std dev = 0.989, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.14185106490048843;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then return 0.6709664724246855;  // std dev = 0.227, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | else return 0.7271310183217154;  // std dev = 0.073, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, F) )
%   | | | then return 0.4737475776875624;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7228645980273476;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12544463852839127;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7289931222161078;  // std dev = 0.060, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2970143868412815;  // std dev = 1.195, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.12040019935173178;  // std dev = 1.455, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then return 0.5503406924725257;  // std dev = 0.132, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else return 0.5846165052751987;  // std dev = 0.075, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(G, F) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.3699603848605003;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.0932243990577009;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.6403024582989064;  // std dev = 0.142, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.10614188506846761;  // std dev = 0.664, 108.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=1 */
%   | | | else return -0.04333238603688547;  // std dev = 1.547, 58.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=6 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.05295449932605035;  // std dev = 1.944, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.12107397875985199;  // std dev = 1.519, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.37820129903578514;  // std dev = 1.679, 52.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   | | | else return 0.4324163607218746;  // std dev = 0.084, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.5341745637716787;  // std dev = 0.197, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.65073225570299;  // std dev = 0.042, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10966320145392947;  // std dev = 0.219, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.4168736652013615;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10216129133294573;  // std dev = 9.13e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.32278869667111953;  // std dev = 0.989, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return 0.419800043230619;  // std dev = 0.052, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.19527804600123108;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.09387123531838786;  // std dev = 0.027, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.3697126723822555;  // std dev = 0.043, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.1002791234492181;  // std dev = 0.051, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.48529172548180965;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.15426353730910877;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.073179129243316;  // std dev = 0.303, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), tweets(E, F) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.28028083880203686;  // std dev = 0.137, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.23255019675268196;  // std dev = 0.969, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.06260578860759557;  // std dev = 0.493, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.30306341451708113;  // std dev = 0.083, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.367224620550343;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3212984234775215;  // std dev = 0.722, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.09352570374667718;  // std dev = 0.222, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( tweets(A, E), follows(A, C) )
%   | | | then return 0.17945985097887707;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.22629759967279658;  // std dev = 0.006, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.223985814026202;  // std dev = 0.018, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, C), tweets(A, F) )
%   | | then return -0.03789350911003139;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.21732247426037796;  // std dev = 0.084, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(G, A) )
%   | then return -0.05604415722990116;  // std dev = 0.088, 179.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=12 */
%   | else if ( tweets(A, H) )
%   | | then return 0.02246401522721692;  // std dev = 0.172, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.03298069920766949;  // std dev = 0.469, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.024138327120242168;  // std dev = 0.963, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.19292320602526183;  // std dev = 0.016, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.07521055068072319;  // std dev = 0.941, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.19128293120688053;  // std dev = 0.049, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.1893871825921793;  // std dev = 0.080, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(F, A) )
%   | then return -0.05019751639929667;  // std dev = 0.091, 173.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=12 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.14990172912058203;  // std dev = 0.941, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.09375947273972512;  // std dev = 0.014, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.021719223871967508;  // std dev = 0.653, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.0825457829747596;  // std dev = 0.845, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.1426422792400821;  // std dev = 0.979, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.1620494054547574;  // std dev = 0.071, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.23268453856428134;  // std dev = 0.595, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.3336894793821633;  // std dev = 0.163, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.08039392973262606;  // std dev = 0.283, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.16201355218024172;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.07114467647631106;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.14630974014220235;  // std dev = 0.017, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.0584693821448121;  // std dev = 0.946, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.1536502488240646;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.14056039866351577;  // std dev = 0.064, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(F, A), tweets(A, G) )
%   | then return -0.05626264185673897;  // std dev = 0.091, 138.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.25858556959940654;  // std dev = 0.078, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.06763086704714741;  // std dev = 0.011, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.008086437053233978;  // std dev = 1.108, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | | | else return 0.011661511715797462;  // std dev = 0.825, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '45.522', 'seconds']
Refined model CLL: -0.098074


******************************************
Best model found
******************************************
Results 

CLL : -0.096012 

AUC ROC : 0.99552 

AUC PR : 0.445713 

Precision : 0.353222 

Recall : 0.948718 

F1 : 0.514783 

Total Learning Time : 26.002 

Total Inference Time : 31.59096050262451 

Total revision time: 62.92091351699829
Best scored revision CLL: -0.098074


Results 

CLL : -0.096012 

AUC ROC : 0.99552 

AUC PR : 0.445713 

Precision : 0.353222 

Recall : 0.948718 

F1 : 0.514783 

Total Learning Time : 64.61886435699464 

Total Inference Time : 31.59096050262451 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.137
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8281489350995114;  // std dev = 1.706, 100.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=97 */
%   | | else return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else return -0.1418510649004884;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15601674596777215;  // std dev = 7.816, 381.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13979473735237738;  // std dev = 7.401, 348.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=118 */
%   | | | else return 0.1353943170224069;  // std dev = 1.933, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6302503949365974;  // std dev = 1.967, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else return -0.16164493010261866;  // std dev = 1.95e-07, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07687560040899113;  // std dev = 1.986, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07895094906090759;  // std dev = 5.147, 253.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=89 */
%   | | else return 0.055791251925061444;  // std dev = 0.324, 122.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.44332739955498107;  // std dev = 2.740, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15088997522307693;  // std dev = 0.080, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04380102922392656;  // std dev = 4.299, 286.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05469563040759673;  // std dev = 2.315, 79.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.02934555450788185;  // std dev = 4.556, 362.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=118 */
%   | | | else return 0.07914208530343293;  // std dev = 1.597, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3261536199320861;  // std dev = 2.192, 123.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=118 */
%   | | | else return -0.14075858403926436;  // std dev = 0.009, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06832419292345107;  // std dev = 1.514, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.008042365116029605;  // std dev = 4.137, 396.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.550', 'seconds']
Parameter learned model CLL:-0.156464 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.706, 3, 97], 'false,true,false': [0.983, 1, 29], 'false,false': [0.0, 234, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.816, 255, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.401, 230, 118], 'false,false,false,false': [1.933, 16, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.967, 4, 118], 'true,false': [1.95e-07, 195, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.986, 19, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.147, 164, 89], 'false,false,false': [0.324, 85, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.74, 8, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.08, 233, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.299, 189, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.315, 50, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.556, 244, 118], 'false,false,false,false': [1.597, 13, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.192, 5, 118], 'false,false,true,false': [0.009, 208, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.514, 14, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.137, 270, 126]}]
{'': [nan, 0.22633136094674833], 'false': [0.02982248520710475, -1.8978171361113786e-16], 'false,true': [0.029100000000001527, 0.03222222222222335]}
{'': [nan, 0.16032725035158102], 'false': [nan, 0.1603272503515858], 'false,false': [nan, 0.16032725035158102], 'false,false,false': [nan, 0.1603272503515858]}
{'': [nan, 0.15727410504833272], 'false': [nan, 0.15727410504833492], 'false,false': [nan, 0.15727410504833492], 'false,false,false': [0.15738430890256727, 0.1556580347337659]}
{'': [0.160665234832046, 0.14613850887576746], 'true': [0.03171180810374189, 1.9585472844669428e-16], 'false': [nan, 0.14613850887576746], 'false,false': [nan, 0.14613850887576746], 'false,false,false': [nan, 0.14613850887576746]}
{'': [nan, 0.10494842530090312], 'false': [nan, 0.10494842530090343], 'false,false': [0.10471056810096518, 0.10507981452320972], 'false,false,true': [nan, 0.10471056810096518]}
{'': [nan, 0.10231937306582117], 'false': [nan, 0.10231937306582117], 'false,false': [0.056013567604121725, 2.746940218815407e-05], 'false,false,false': [nan, 2.7469402188074017e-05]}
{'': [0.0646163355504955, 0.0678289865501493], 'false': [nan, 0.0678289865501493], 'false,false': [nan, 0.0678289865501493], 'false,false,false': [nan, 0.0678289865501493], 'true': [nan, 0.0646163355504955]}
{'': [nan, 0.06098762787491873], 'false': [nan, 0.06098762787491873], 'false,false': [nan, 0.06098762787491873], 'false,false,false': [0.057341298021838814, 0.121499677033031]}
{'': [nan, 0.06791754480324041], 'false': [nan, 0.06791754480324061], 'false,false': [0.0654262595963897, 0.10421318124675909], 'false,false,false': [nan, 0.10421318124675909], 'false,false,true': [0.039069841671180966, 3.5900266745705687e-07]}
{'': [nan, 0.04321884658818881], 'false': [nan, 0.043218846588188704], 'false,false': [nan, 0.04321884658818881]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 11.214
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.7470378239884012;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048818;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, C), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.5994734122109544;  // std dev = 0.325, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | else return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(F, G) )
%   | | then return 0.5564517289197889;  // std dev = 0.917, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.7319704980698152;  // std dev = 0.029, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10974828491263698;  // std dev = 1.457, 153.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=3 */
%   | | | else return -0.0053902113562598174;  // std dev = 2.730, 85.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07523963065136133;  // std dev = 2.272, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return 0.15892844924968322;  // std dev = 1.970, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then return 0.5326391640190112;  // std dev = 0.149, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return 0.5762320391017695;  // std dev = 0.074, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0.4442553256351735;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then return 0.5851140312846514;  // std dev = 0.063, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3227440289446266;  // std dev = 0.858, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7290275145607695;  // std dev = 0.040, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11806135742820438;  // std dev = 0.160, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07482792565715142;  // std dev = 2.228, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return 0.16115987403122273;  // std dev = 1.893, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.3848596673930726;  // std dev = 1.688, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | | | else return 0.47105649217250406;  // std dev = 1.092, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.47632212160603343;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6817635356924264;  // std dev = 0.098, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.11431177221145634;  // std dev = 0.279, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.44475702894584124;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10250824427150225;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.3134968085053244;  // std dev = 0.142, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | else if ( tweets(C, E), follows(D, A) )
%   | | | then return 0.1110621093524043;  // std dev = 1.521, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.33891136696432966;  // std dev = 0.036, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, F), tweets(C, F) )
%   | | then if ( follows(A, C) )
%   | | | then return 0.011014254683052541;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.22813968530046402;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.32700486616917035;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then return -0.04962486805059956;  // std dev = 0.161, 230.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.06035216088124766;  // std dev = 0.295, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | | else return 0.22966135052070968;  // std dev = 0.312, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.25716503199177143;  // std dev = 0.948, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | | else return 0.2859812275870266;  // std dev = 0.093, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.28870010045729366;  // std dev = 0.088, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.34022840596334875;  // std dev = 0.084, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.47236736491845815;  // std dev = 0.199, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.1014566060445497;  // std dev = 0.380, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(A, C), follows(D, C) )
%   | | then if ( tweets(C, E), tweets(A, E) )
%   | | | then return 0.17394843665896226;  // std dev = 1.354, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.22474813735546775;  // std dev = 0.064, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.2282637193253673;  // std dev = 0.106, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.12331693819047285;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A) )
%   | then return -0.04505288698776691;  // std dev = 0.118, 244.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2775357917322771;  // std dev = 1.101, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.12916180429420202;  // std dev = 0.039, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.019256349796950012;  // std dev = 1.031, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return -0.009597255381950233;  // std dev = 0.947, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.20389193262709188;  // std dev = 0.274, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.20356708325580286;  // std dev = 0.076, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3573133446905047;  // std dev = 0.047, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.07948143381962441;  // std dev = 0.047, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.001630103091209274;  // std dev = 1.250, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return -0.03285970363086631;  // std dev = 1.220, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.14541635083674656;  // std dev = 1.335, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | | else return 0.03082732545154837;  // std dev = 0.946, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.16523470379260705;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.28495788885078116;  // std dev = 0.962, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return -0.08509420761930182;  // std dev = 0.381, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.1808856682007821;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.07257544910309655;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(D, A), follows(D, C) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.12622065494121246;  // std dev = 0.998, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.034341944656485816;  // std dev = 0.914, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return -0.1976064164975958;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13432389243675333;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.20229156490094266;  // std dev = 0.098, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return 0.15768669221037027;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.03390807050534387;  // std dev = 0.894, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(I, A) )
%   | | then return -0.051784457168818604;  // std dev = 0.090, 217.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=15 */
%   | | else return 0.013767509804736882;  // std dev = 0.194, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.395', 'seconds']
Refined model CLL: -0.10476


******************************************
Best model found
******************************************
Results 

CLL : -0.106869 

AUC ROC : 0.99467 

AUC PR : 0.428416 

Precision : 0.338028 

Recall : 0.923077 

F1 : 0.494845 

Total Learning Time : 11.214 

Total Inference Time : 10.920971870422363 

Total revision time: 27.92603008842468
Best scored revision CLL: -0.10476


Results 

CLL : -0.106869 

AUC ROC : 0.99467 

AUC PR : 0.428416 

Precision : 0.338028 

Recall : 0.923077 

F1 : 0.494845 

Total Learning Time : 29.62398092842102 

Total Inference Time : 10.920971870422363 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.736
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995116;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 6.99e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7257371741022817;  // std dev = 1.19e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5615275585769441;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360629;  // std dev = 5.27e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.38043209483375356;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return -0.10159632948783628;  // std dev = 2.47e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3109876503893091;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.24844662609655768;  // std dev = 1.661, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return -0.09269127618926096;  // std dev = 1.32e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2530355769704683;  // std dev = 0.974, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.28e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20407597136034733;  // std dev = 0.988, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109169;  // std dev = 3.16e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.20069500017594583;  // std dev = 0.027, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.29e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1390943193821147;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442027;  // std dev = 1.49e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12032952799735178;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.427', 'seconds']
Parameter learned model CLL:-0.090283 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.984, 1, 31], 'false,true': [6.99e-08, 70, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.19e-07, 0, 31], 'false,true': [0.0, 55, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [5.27e-09, 56, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.979, 1, 23], 'true,false': [2.47e-08, 46, 0], 'false,true,true': [0.314, 1, 8], 'false,true,false': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.661, 3, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 38, 0], 'false,false,false': [1.32e-09, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.974, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.28e-09, 61, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.988, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.16e-08, 66, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.027, 0, 31], 'true,false': [0.0, 0, 0], 'false,true': [1.29e-08, 47, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.49e-08, 52, 0], 'false,false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 46, 0]}]
{'': [0.030273437500001332, 6.97854472621527e-17], 'false': [6.97854472621527e-17, nan]}
{'': [4.584146682323227e-16, -3.633457171500512e-17], 'false': [-3.633457171500512e-17, nan]}
{'': [-1.1460366705808067e-16, 2.7755575615628914e-17], 'false': [nan, 2.7755575615628914e-17]}
{'': [0.06604066958777541, 0.07271541242626417], 'false': [0.07271541242626417, nan], 'false,true': [0.09876543209876548, -4.89804275569922e-18], 'true': [0.03993055555555549, 1.3274405729213829e-17]}
{'': [0.08114133135913323, -5.442269728554689e-18], 'true': [0.08114133135913323, nan], 'false': [nan, -5.442269728554689e-18], 'false,false': [-8.764918615461762e-18, 2.135044278125301e-18], 'false,false,true': [nan, -8.764918615461762e-18]}
{'': [0.02967552484504074, 4.550094363217854e-18], 'false': [nan, 4.550094363217854e-18], 'false,false': [nan, 4.550094363217854e-18]}
{'': [0.03050026821923906, 1.5139404881252134e-17], 'false': [nan, 1.5139404881252134e-17], 'false,false': [nan, 1.5139404881252134e-17], 'false,false,false': [1.5139404881252134e-17, nan]}
{'': [2.4234060581693107e-05, 0.0], 'true': [2.4234060581693107e-05, nan], 'false': [3.543264972207946e-18, 1.1564823173178713e-18], 'false,false': [nan, 1.1564823173178713e-18]}
{'': [0.03044699098299331, 7.93016446160826e-18], 'false': [nan, 7.93016446160826e-18], 'false,false': [4.270088556250602e-18, 6.30808536718839e-19], 'false,false,true': [nan, 4.270088556250602e-18]}
{'': [0.030429963589385187, -1.8101462358018856e-18], 'false': [nan, -1.8101462358018856e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 6.151
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.14185106490048768;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.561648452785218;  // std dev = 0.091, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.11231637819360628;  // std dev = 4.21e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.41598661930677205;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.41598661930677194;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08265328597343861;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.10159632948783624;  // std dev = 3.16e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.440612544189577;  // std dev = 0.070, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A) )
%   | | then return 0.3196768162174858;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.11967681621748567;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3402884268298395;  // std dev = 0.110, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return -0.09269127618926096;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.2544658620291203;  // std dev = 1.29e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.25057539861251976;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.08715078479302028;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.25446586202912036;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2459794231630419;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.3022077851834574;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2849228960431811;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, J) )
%   | then return -0.08518475138839679;  // std dev = 2.28e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.08518475138839687;  // std dev = 1.61e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.2084325966704375;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.20324239066770688;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.23754444228458488;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.21636245683088184;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return -0.009208747685636925;  // std dev = 0.872, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2365514971202285;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( follows(A, G) )
%   | | then return -0.07877675473109179;  // std dev = 9.31e-10, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then return 0.03399341529247351;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.1750347831612032;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17230285817879398;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2173553459650174;  // std dev = 0.070, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.19927990471291188;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1888008128072273;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.07324622576333704;  // std dev = 1.61e-09, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.07324622576333704;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return -0.07324622576333704;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.17195622117346898;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.16687761140882462;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.14936965316067938;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15674887389231215;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2063800309960984;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.16767463466776514;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.06842697784420275;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.06842697784420272;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then if ( follows(F, E) )
%   | | | then return -0.06398989528410828;  // std dev = 1.527, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.1498862700970454;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1349541827935684;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.13166262978929344;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13112296160352943;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.16301724124481878;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1430386443694919;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202625;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.373', 'seconds']
Refined model CLL: -0.089725


******************************************
Best model found
******************************************
Results 

CLL : -0.092111 

AUC ROC : 0.992638 

AUC PR : 0.345703 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 6.151 

Total Inference Time : 2.403923511505127 

Total revision time: 14.907989418029786
Best scored revision CLL: -0.089725


Results 

CLL : -0.092111 

AUC ROC : 0.992638 

AUC PR : 0.345703 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 14.944995319366456 

Total Inference Time : 2.403923511505127 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.722
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6882234122109542;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839127;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5169153413704993;  // std dev = 0.210, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936062;  // std dev = 8.23e-09, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4345556939316814;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.10159632948783621;  // std dev = 5.27e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43455569393168125;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30104055097976845;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926083;  // std dev = 7.30e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23791090992222053;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.96e-09, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1788405361671537;  // std dev = 1.692, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109154;  // std dev = 7.52e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17947371448509525;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 4.83e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 6.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13741629688147936;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 4.89e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1343918236364895;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 1.61e-09, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.822', 'seconds']
Parameter learned model CLL:-0.088446 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 62], 'false,true': [8.69e-08, 105, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.392, 2, 62], 'false,true': [0.0, 125, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.21, 3, 62], 'false,true': [0.0, 0, 0], 'false,false': [8.23e-09, 126, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 44], 'true,false': [5.27e-08, 89, 0], 'false,true,true': [0.0, 0, 18], 'false,true,false': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.392, 2, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.3e-08, 121, 0], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.392, 2, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 144, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.692, 3, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.52e-08, 132, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.992, 1, 62], 'true,false': [0.0, 0, 0], 'false,true': [4.83e-08, 108, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.45e-09, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.174, 2, 62], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.89e-08, 99, 0], 'false,false,false': [0.0, 20, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false': [1.61e-09, 95, 0]}]
{'': [-6.87622002348484e-16, 7.190015778524824e-17], 'false': [7.190015778524824e-17, nan]}
{'': [0.030273437500000056, -1.7763568394002505e-18], 'false': [-1.7763568394002505e-18, nan]}
{'': [0.044023668639053264, 6.696583323135864e-17], 'false': [nan, 6.696583323135864e-17]}
{'': [0.06363782087857757, 0.07186474805421068], 'false': [0.07186474805421068, nan], 'false,true': [-7.401486830834377e-17, -4.625929269271485e-18], 'true': [-2.0185873175002846e-16, 3.118604001756058e-17]}
{'': [0.030273437500000333, 4.50525285355136e-17], 'true': [0.030273437500000333, nan], 'false': [nan, 4.50525285355136e-17], 'false,false': [4.404190510909712e-17, -1.6326809185664067e-18], 'false,false,true': [nan, 4.404190510909712e-17]}
{'': [0.030273437499999993, 3.5465457731081387e-17], 'false': [nan, 3.5465457731081387e-17], 'false,false': [nan, 3.5465457731081387e-17]}
{'': [0.044023668639053215, 4.289498049688105e-17], 'false': [nan, 4.289498049688105e-17], 'false,false': [nan, 4.289498049688105e-17], 'false,false,false': [4.289498049688105e-17, nan]}
{'': [0.015621063240110882, -1.7483827159451284e-18], 'true': [0.015621063240110882, nan], 'false': [2.1587669923266933e-17, 2.1912296538654404e-18], 'false,false': [nan, 2.1912296538654404e-18]}
{'': [0.030273437499999976, 2.5189934172167417e-17], 'false': [nan, 2.5189934172167417e-17], 'false,false': [2.411090407014229e-17, -2.7755575615628915e-18], 'false,false,true': [nan, 2.411090407014229e-17]}
{'': [0.0156210632401108, 1.7529837230923525e-18], 'false': [nan, 1.7529837230923525e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 15.049
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else return -0.14185106490048793;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5194734122109543;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.7194734122109542;  // std dev = 5.96e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.12544463852839108;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, D) )
%   | | | then return 0.3709092882651428;  // std dev = 1.536, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | | else return 0.5748406864669782;  // std dev = 0.053, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5692766151182085;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.11231637819360617;  // std dev = 9.88e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.4381950168013987;  // std dev = 0.131, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.21413461605565126;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4289704777161679;  // std dev = 0.056, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783623;  // std dev = 5.05e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4175135841583098;  // std dev = 2.98e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.3310849240425591;  // std dev = 0.126, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.16330834334575522;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.32524032159985067;  // std dev = 0.053, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926085;  // std dev = 7.15e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, D), tweets(D, E) )
%   | | | then return 0.2854040104534878;  // std dev = 1.49e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.25430613144022707;  // std dev = 0.034, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.3264375796677964;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.1376209858875826;  // std dev = 0.921, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.3936288328157265;  // std dev = 0.783, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.12431504509299907;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.2522471743648634;  // std dev = 0.008, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( tweets(A, J) )
%   | then return -0.08518475138839682;  // std dev = 5.59e-09, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return -0.08518475138839689;  // std dev = 5.27e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.15388228761739822;  // std dev = 0.962, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.09475364022703019;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.24484086298752014;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.22404006922448147;  // std dev = 0.018, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.27265213754595763;  // std dev = 0.059, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.20633350432074912;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.20940592469470168;  // std dev = 0.018, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( tweets(A, J) )
%   | then return -0.07877675473109162;  // std dev = 5.27e-09, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.1922478946456516;  // std dev = 0.087, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.01602029614651528;  // std dev = 0.888, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2276785032817222;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1817985678361206;  // std dev = 0.031, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then return 0.20686016597819679;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.02300203797172704;  // std dev = 1.179, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.17691416939432536;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333707;  // std dev = 2.95e-09, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return -0.07324622576333706;  // std dev = 5.27e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.17001819845173052;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.19018931506281334;  // std dev = 0.039, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.15375208345042346;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return -0.11547447375497005;  // std dev = 1.106, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.19127822975557518;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.16360396242697806;  // std dev = 0.049, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.15268804329955446;  // std dev = 0.014, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, K) )
%   | then return -0.06842697784420267;  // std dev = 4.66e-09, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return -0.06842697784420276;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), follows(A, E) )
%   | | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.16341789346017094;  // std dev = 0.079, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.14069008937912075;  // std dev = 0.022, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0952619833185018;  // std dev = 1.178, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.09187022251061266;  // std dev = 0.968, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then return 0.13509487555558483;  // std dev = 0.008, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1320598082498423;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1333170083071081;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202626;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.424', 'seconds']
Refined model CLL: -0.085234


******************************************
Best model found
******************************************
Results 

CLL : -0.090344 

AUC ROC : 0.994694 

AUC PR : 0.458621 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 15.049 

Total Inference Time : 4.651944637298584 

Total revision time: 29.764620157241822
Best scored revision CLL: -0.085234


Results 

CLL : -0.090344 

AUC ROC : 0.994694 

AUC PR : 0.458621 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 29.801626058578492 

Total Inference Time : 4.651944637298584 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.504
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8475106372271711;  // std dev = 0.995, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6903655333137714;  // std dev = 1.705, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839136;  // std dev = 3.65e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5441056726912366;  // std dev = 0.144, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360661;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41626933776965075;  // std dev = 0.993, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3845134224520908;  // std dev = 0.208, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2924961753050407;  // std dev = 1.962, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926068;  // std dev = 7.45e-08, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else return -0.09269127618926094;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2511079531767578;  // std dev = 1.401, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.19e-09, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21471932870993438;  // std dev = 0.996, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109147;  // std dev = 7.45e-08, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1690774761632352;  // std dev = 1.398, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333675;  // std dev = 8.94e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14434896789296536;  // std dev = 0.144, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.05e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else return -0.06842697784420265;  // std dev = 2.95e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13579612253522044;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 9.31e-10, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.788', 'seconds']
Parameter learned model CLL:-0.087584 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.995, 1, 93], 'false,true': [0.0, 191, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.705, 3, 93], 'false,true': [3.65e-08, 157, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.144, 2, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 195, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.993, 1, 72], 'true,false': [0.0, 160, 0], 'false,true,true': [0.208, 1, 21], 'false,true,false': [0.0, 39, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.962, 4, 93], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-08, 150, 0], 'false,false,false': [0.0, 30, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.401, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.19e-09, 172, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.996, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.45e-08, 195, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.398, 2, 93], 'true,false': [0.0, 0, 0], 'false,true': [8.94e-08, 163, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 36, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.144, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.05e-08, 132, 0], 'false,false,false': [2.95e-09, 28, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false': [9.31e-10, 216, 0]}]
{'': [0.010525124490720615, -2.2320714212359167e-16], 'false': [-2.2320714212359167e-16, nan]}
{'': [0.030273437499998668, 8.485781079937502e-18], 'false': [8.485781079937502e-18, nan]}
{'': [0.02060941828254711, -2.2773805633336544e-17], 'false': [nan, -2.2773805633336544e-17]}
{'': [0.061931648387019214, 0.0701357112459432], 'false': [0.0701357112459432, nan], 'false,true': [0.04338842975206614, -8.540177112501205e-18], 'true': [0.013510977669355335, -6.800116025829084e-17]}
{'': [0.03967157171723593, 4.3175339846533866e-17], 'true': [0.03967157171723593, nan], 'false': [nan, 4.3175339846533866e-17], 'false,false': [3.700743415417188e-17, -1.8503717077085942e-18], 'false,false,true': [nan, 3.700743415417188e-17]}
{'': [0.02067506961281205, 2.7110097112939868e-17], 'false': [nan, 2.7110097112939868e-17], 'false,false': [nan, 2.7110097112939868e-17]}
{'': [0.010556984651221235, 2.846725704167068e-17], 'false': [nan, 2.846725704167068e-17], 'false,false': [nan, 2.846725704167068e-17], 'false,false,false': [2.846725704167068e-17, nan]}
{'': [0.020558163384703506, 7.029552819234659e-17], 'true': [0.020558163384703506, nan], 'false': [4.904052624111121e-17, -9.25185853854297e-18], 'false,false': [nan, -9.25185853854297e-18]}
{'': [0.020653808521215122, 2.3592239273284576e-17], 'false': [nan, 2.3592239273284576e-17], 'false,false': [2.7755575615628914e-17, 8.921435019309294e-18], 'false,false,true': [nan, 2.7755575615628914e-17]}
{'': [0.010546875305593237, 1.02798428206033e-18], 'false': [nan, 1.02798428206033e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 44.001
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.14185106490048824;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then return 0.7241643954082634;  // std dev = 0.120, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2194734122109545;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6730688616836629;  // std dev = 0.960, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.7273384579325044;  // std dev = 0.036, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.12544463852839172;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.5065887244591556;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.554207772078203;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.56960498420102;  // std dev = 0.143, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( recursion_accounttype(G, B), tweets(G, H) )
%   | | | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.31536547867678244;  // std dev = 1.232, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.40978464006020954;  // std dev = 1.238, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.5786920844334439;  // std dev = 0.153, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.1123163781936065;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.4360816665627211;  // std dev = 0.259, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.10626239432605145;  // std dev = 0.845, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4337077224962405;  // std dev = 0.055, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.10159632948783624;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.3362254613822028;  // std dev = 0.276, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | else if ( follows(E, A) )
%   | | then return 0.32986597503166404;  // std dev = 0.046, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.09237943998210682;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3302669111283448;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, G) )
%   | then return -0.0926912761892607;  // std dev = 7.30e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | else return -0.09269127618926092;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F), follows(A, G) )
%   | | then if ( follows(E, A), tweets(E, F) )
%   | | | then return 0.21355597396713355;  // std dev = 0.977, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.2630425759311743;  // std dev = 0.127, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.21531290153234717;  // std dev = 0.985, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.027017176029823415;  // std dev = 0.766, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( follows(A, J), follows(H, J) )
%   | | | then return 0.2672455983884152;  // std dev = 0.067, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1208218797245825;  // std dev = 0.913, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.32189255201257927;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2630916187996467;  // std dev = 0.133, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.08518475138839678;  // std dev = 5.35e-09, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, F) )
%   | | then if ( follows(F, A), follows(D, F) )
%   | | | then return 0.2168127772008399;  // std dev = 0.017, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.20099710361404216;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.25847024935070817;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21266206541691535;  // std dev = 0.059, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.20220953752263682;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2741761531243089;  // std dev = 0.090, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.24542698102226737;  // std dev = 0.073, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2155767139542557;  // std dev = 0.118, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.07877675473109147;  // std dev = 5.67e-09, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.18284073921863575;  // std dev = 0.014, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.17131167412814882;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.3957147886527254;  // std dev = 1.077, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.18467564187900345;  // std dev = 0.073, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.17154014669042794;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22330171322244396;  // std dev = 0.080, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2047603201113947;  // std dev = 0.069, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1817033881600182;  // std dev = 0.100, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.07324622576333673;  // std dev = 7.57e-09, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.15788268906410427;  // std dev = 0.018, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.2090482259766276;  // std dev = 0.112, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.0043440397872942516;  // std dev = 1.286, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.15120680034406675;  // std dev = 0.056, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.1467119072300165;  // std dev = 0.000455, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15864604502260074;  // std dev = 0.010, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.17868357961637957;  // std dev = 0.092, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.15943596359881942;  // std dev = 0.108, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.06842697784420262;  // std dev = 5.74e-09, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( tweets(D, E), follows(A, D) )
%   | | | then return 0.13930304317923425;  // std dev = 0.025, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.13496340239902818;  // std dev = 0.016, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.1602633130212902;  // std dev = 0.128, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.14948713412203532;  // std dev = 0.063, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.019555830366629594;  // std dev = 0.937, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.16151045279599432;  // std dev = 0.063, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.12865935154746694;  // std dev = 0.021, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.06419184008202626;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.971', 'seconds']
Refined model CLL: -0.085615


******************************************
Best model found
******************************************
Results 

CLL : -0.091419 

AUC ROC : 0.994479 

AUC PR : 0.459402 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 44.001 

Total Inference Time : 8.033975839614868 

Total revision time: 67.906207447052
Best scored revision CLL: -0.085615


Results 

CLL : -0.091419 

AUC ROC : 0.994479 

AUC PR : 0.459402 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 67.94321334838867 

Total Inference Time : 8.033975839614868 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.102
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995105;  // std dev = 7.05e-07, 124.000 (wgt'ed) examples reached here.  /* #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048813;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.695851364966861;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5224319571317064;  // std dev = 0.193, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360675;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42152475032591313;  // std dev = 0.995, 102.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=101 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3896620052278739;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.10159632948783626;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.317745965336299;  // std dev = 1.400, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926053;  // std dev = 5.96e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22822261693118015;  // std dev = 2.195, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.51e-09, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17142634905727142;  // std dev = 2.571, 131.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109146;  // std dev = 6.50e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.19632944931912122;  // std dev = 0.022, 124.000 (wgt'ed) examples reached here.  /* #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333666;  // std dev = 1.19e-07, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15921275135637772;  // std dev = 0.089, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 7.88e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | else return -0.06842697784420264;  // std dev = 2.08e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11493207633003287;  // std dev = 0.174, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202622;  // std dev = 2.79e-09, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.349', 'seconds']
Parameter learned model CLL:-0.086833 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [7.05e-07, 0, 124], 'false,true': [0.0, 261, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.711, 3, 124], 'false,true': [0.0, 247, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.193, 5, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 227, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.995, 1, 101], 'true,false': [0.0, 206, 0], 'false,true,true': [0.2, 1, 23], 'false,true,false': [0.0, 34, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.4, 2, 124], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.96e-08, 200, 0], 'false,false,false': [0.0, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.195, 5, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 209, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.571, 7, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.5e-08, 226, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.022, 0, 124], 'true,false': [0.0, 0, 0], 'false,true': [1.19e-07, 200, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 45, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.089, 1, 124], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.88e-08, 189, 0], 'false,false,false': [2.08e-09, 37, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 4, 124], 'false,true': [0.0, 0, 0], 'false,false': [2.79e-09, 255, 0]}]
{'': [4.011128347032824e-15, -8.847754372491668e-17], 'false': [-8.847754372491668e-17, nan]}
{'': [0.02306404612809076, -6.292762082895624e-17], 'false': [-6.292762082895624e-17, nan]}
{'': [0.037257376359593176, -7.23845848654287e-17], 'false': [nan, -7.23845848654287e-17]}
{'': [0.0638285672877188, 0.07506316602208629], 'false': [0.07506316602208629, nan], 'false,true': [0.03993055555555556, -1.469412826709766e-17], 'true': [0.009707804690503183, -8.838668739734256e-17]}
{'': [0.015559020051071317, 4.674623261579606e-17], 'true': [0.015559020051071317, nan], 'false': [nan, 4.674623261579606e-17], 'false,false': [1.7763568394002505e-17, -2.4802854805455624e-17], 'false,false,true': [nan, 1.7763568394002505e-17]}
{'': [0.03734972036647518, 2.9747602573688406e-17], 'false': [nan, 2.9747602573688406e-17], 'false,false': [nan, 2.9747602573688406e-17]}
{'': [0.0504474757283963, 1.8667466785732722e-17], 'false': [nan, 1.8667466785732722e-17], 'false,false': [nan, 1.8667466785732722e-17], 'false,false,false': [1.8667466785732722e-17, nan]}
{'': [3.864998075737129e-06, 5.981609765327374e-17], 'true': [3.864998075737129e-06, nan], 'false': [7.105427357601002e-17, -9.86864910777917e-18], 'false,false': [nan, -9.86864910777917e-18]}
{'': [0.007881359352747377, 2.456245629701674e-17], 'false': [nan, 2.456245629701674e-17], 'false,false': [3.289549702593056e-17, 4.50090415388577e-18], 'false,false,true': [nan, 3.289549702593056e-17]}
{'': [0.030260237001348878, 7.836868409118752e-18], 'false': [nan, 7.836868409118752e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 42.369
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | | else if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.14185106490048835;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(F, D) )
%   | | then if ( follows(F, A), follows(D, F) )
%   | | | then return 0.6405260437899022;  // std dev = 1.662, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | | | else return 0.7229264970645289;  // std dev = 0.085, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.726317511898053;  // std dev = 0.073, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   else return -0.12544463852839188;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5713537127726669;  // std dev = 0.136, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5613425622296634;  // std dev = 0.077, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4524510206735297;  // std dev = 1.887, 39.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=35 */
%   | | else return 0.5746607898812656;  // std dev = 0.054, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360696;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.43366123164374953;  // std dev = 0.162, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.3411889815712174;  // std dev = 0.949, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.43754893542972184;  // std dev = 0.035, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4304671256699161;  // std dev = 0.061, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.10159632948783624;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.3321116999183368;  // std dev = 0.072, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.23183847070483182;  // std dev = 1.348, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.34640692426958575;  // std dev = 0.047, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.3335673304606729;  // std dev = 0.130, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926054;  // std dev = 5.37e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return -0.09269127618926076;  // std dev = 2.11e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), follows(G, F) )
%   | | | then return 0.26052888908796895;  // std dev = 0.065, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.281467569396033;  // std dev = 0.080, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.24730502517665853;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.26239940882706764;  // std dev = 0.035, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.2798095070086848;  // std dev = 0.020, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.08122979379745132;  // std dev = 0.803, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.26898692377943295;  // std dev = 0.020, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.26383221635772025;  // std dev = 0.038, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.08518475138839678;  // std dev = 5.59e-09, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.1757997586952748;  // std dev = 0.980, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.21512840394876842;  // std dev = 0.051, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.21221577450953835;  // std dev = 0.021, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.22740729102567184;  // std dev = 0.059, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(I, A), follows(A, J) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2118332297401649;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.22949663553567637;  // std dev = 0.045, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.21268132030843134;  // std dev = 0.036, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.22299261762122854;  // std dev = 0.062, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.07877675473109143;  // std dev = 3.84e-09, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), follows(F, D) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.18272151345028162;  // std dev = 0.056, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.18855180483710673;  // std dev = 0.046, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.20393298392649958;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.19021730509819307;  // std dev = 0.056, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.47034731185317485;  // std dev = 0.787, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.13686436236284744;  // std dev = 0.978, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.17858756715718985;  // std dev = 0.036, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, K) )
%   | then return -0.0732462257633367;  // std dev = 7.79e-09, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return -0.07324622576333703;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.13134769482097203;  // std dev = 0.985, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.00812410807179141;  // std dev = 0.923, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(F, A), follows(E, F) )
%   | | | then return 0.1596357701649717;  // std dev = 0.054, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.1693406793055143;  // std dev = 0.100, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( follows(A, G) )
%   | | then return -0.026106071679461683;  // std dev = 0.818, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.0719358184912658;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.152807341783052;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420261;  // std dev = 4.66e-09, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else return -0.06842697784420262;  // std dev = 2.79e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.14378752045642362;  // std dev = 0.029, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.1401077182978218;  // std dev = 0.038, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.1493405950727314;  // std dev = 0.085, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.14324194281781263;  // std dev = 0.048, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.1485952746031165;  // std dev = 0.026, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.14940942816789174;  // std dev = 0.702, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.14517247330537633;  // std dev = 0.027, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1364922533145697;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202625;  // std dev = 1.86e-09, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.645', 'seconds']
Refined model CLL: -0.08591


******************************************
Best model found
******************************************
Results 

CLL : -0.092295 

AUC ROC : 0.993677 

AUC PR : 0.375802 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 42.369 

Total Inference Time : 9.781036376953125 

Total revision time: 69.90797619438172
Best scored revision CLL: -0.08591


Results 

CLL : -0.092295 

AUC ROC : 0.993677 

AUC PR : 0.375802 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 69.94498209571839 

Total Inference Time : 9.781036376953125 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.995
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8211118980624726;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 1.74e-07, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6958316351366824;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839208;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5639259709124763;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360692;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4073398550880789;  // std dev = 1.712, 131.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=128 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3957578598261668;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.10159632948783615;  // std dev = 3.48e-09, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3038408755651514;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 7.15e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23984994256306127;  // std dev = 2.202, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20735161262358737;  // std dev = 1.715, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17311043334224177;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333661;  // std dev = 1.30e-07, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13548530101233353;  // std dev = 0.174, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420283;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   | | else return -0.06842697784420262;  // std dev = 2.79e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12359433310397076;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202589;  // std dev = 7.45e-09, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.851', 'seconds']
Parameter learned model CLL:-0.087287 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.404, 6, 156], 'false,true': [1.74e-07, 325, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 285, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.08, 1, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 292, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.712, 3, 128], 'true,false': [0.0, 247, 0], 'false,true,true': [0.182, 1, 28], 'false,true,false': [3.48e-09, 63, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.201, 5, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.15e-08, 226, 0], 'false,false,false': [0.0, 54, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.202, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 295, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.715, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 323, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.716, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.3e-07, 216, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.174, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 265, 0], 'false,false,false': [2.79e-09, 54, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.45e-09, 316, 0]}]
{'': [0.03566529492456011, 9.29171269840131e-17], 'false': [9.29171269840131e-17, nan]}
{'': [0.030091431657733054, -1.0595812726247108e-16], 'false': [-1.0595812726247108e-16, nan]}
{'': [0.006328857154447974, -8.820950058665627e-17], 'false': [nan, -8.820950058665627e-17]}
{'': [0.06641060258449297, 0.0638889980691871], 'true': [0.02237631839636291, -7.011934892369409e-17], 'false': [0.0638889980691871, nan], 'false,true': [0.03329369797859707, 1.2335811384723961e-17]}
{'': [0.030089228227582778, 7.454354593911765e-17], 'true': [0.030089228227582778, nan], 'false': [nan, 7.454354593911765e-17], 'false,false': [2.25974597932554e-17, -2.7755575615628914e-17], 'false,false,true': [nan, 2.25974597932554e-17]}
{'': [0.03011693982975653, 3.612929164881865e-17], 'false': [nan, 3.612929164881865e-17], 'false,false': [nan, 3.612929164881865e-17]}
{'': [0.018500970323230666, 0.0], 'false': [nan, 0.0], 'false,false': [nan, 0.0], 'false,false,false': [0.0, nan]}
{'': [0.018524363162541, 4.4245050427866016e-17], 'true': [0.018524363162541, nan], 'false': [7.812680543658509e-17, -1.0092936587501423e-17], 'false,false': [nan, -1.0092936587501423e-17]}
{'': [0.030109214369277944, -6.612613626294036e-17], 'false': [nan, -6.612613626294036e-17], 'false,false': [-1.424437088198314e-17, 8.22387425648264e-18], 'false,false,true': [nan, -1.424437088198314e-17]}
{'': [0.024352375484639248, 5.410580563046649e-17], 'false': [nan, 5.410580563046649e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 30.085
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else if ( tweets(A, F), follows(D, A) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return 0.7331489350995123;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.14185106490048768;  // std dev = 1.79e-07, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.7198962988967665;  // std dev = 0.028, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | | else return 0.6083623010998435;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, G), follows(D, H) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.030526587789045476;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.7256643280595733;  // std dev = 0.097, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.12544463852839216;  // std dev = 0.000, 335.000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.5552111708661447;  // std dev = 0.002, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( tweets(A, F), follows(G, D) )
%   | | | then return 0.4963571500826656;  // std dev = 1.366, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return 0.5787808348704838;  // std dev = 0.159, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4951672366140799;  // std dev = 0.951, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.2787753447144948;  // std dev = 0.678, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(J, A), follows(A, J) )
%   | | | then return 0.4988277657873706;  // std dev = 0.980, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.5545497617332052;  // std dev = 0.030, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.11231637819360676;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4080737871319947;  // std dev = 0.940, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.435464946910047;  // std dev = 0.137, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.30657898924257115;  // std dev = 1.308, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.41668991136108546;  // std dev = 0.015, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.4573655625269221;  // std dev = 0.049, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.11096728219251617;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4185651349382379;  // std dev = 0.029, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.10159632948783616;  // std dev = 1.83e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.2941419073354491;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.33409097097958224;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.3483959222498708;  // std dev = 0.197, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.34954173293558716;  // std dev = 0.068, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.07436425343170623;  // std dev = 0.917, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.32550516790747924;  // std dev = 0.088, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.27401668487635955;  // std dev = 0.856, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( follows(A, K) )
%   | then return -0.09269127618926049;  // std dev = 1.30e-07, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.23345550781153784;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.2643211027566173;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.26316179133890527;  // std dev = 0.039, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.28165131992704956;  // std dev = 0.031, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.28691432553971985;  // std dev = 0.032, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4014984455500554;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.25312720205809147;  // std dev = 0.027, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.273445292745068;  // std dev = 0.100, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.1914323210179821;  // std dev = 0.966, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.2162237715525115;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), follows(H, D) )
%   | | | then return 0.2168443651503353;  // std dev = 0.038, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.2328444032074556;  // std dev = 0.120, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I), follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.28263591522467224;  // std dev = 0.989, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.17134223692029865;  // std dev = 0.831, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.24860323238993454;  // std dev = 0.096, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.18761112649625655;  // std dev = 0.991, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   else return -0.07877675473109143;  // std dev = 3.65e-08, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( follows(A, D), follows(F, A) )
%   | | | then return 0.18820712598365938;  // std dev = 0.003, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.18081319940824384;  // std dev = 0.041, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.1850914807096268;  // std dev = 0.028, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2230190735071674;  // std dev = 0.077, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.13031015637659413;  // std dev = 0.911, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.1280046810699933;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.18519789908448658;  // std dev = 0.098, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.11358462655621092;  // std dev = 0.965, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.073246225763337;  // std dev = 5.35e-09, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.16004002486908678;  // std dev = 0.029, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.1515462902097558;  // std dev = 0.020, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.158791742222534;  // std dev = 0.025, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.18703692637689476;  // std dev = 0.068, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.1230508076669657;  // std dev = 1.322, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.006581218021381193;  // std dev = 0.900, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.16353818786975816;  // std dev = 0.096, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.16720235688022123;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.0684269778442032;  // std dev = 0.000, 348.000 (wgt'ed) examples reached here.  /* #neg=348 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( follows(A, D), follows(F, A) )
%   | | | then return 0.14064430531495686;  // std dev = 0.002, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.1360138163439622;  // std dev = 0.032, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.13871746555449144;  // std dev = 0.022, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.16042147922793504;  // std dev = 0.060, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.16318608101536006;  // std dev = 0.084, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.2563368020584621;  // std dev = 0.939, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14863928913495997;  // std dev = 0.095, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.061380326948276276;  // std dev = 1.308, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   else return -0.06419184008202594;  // std dev = 6.84e-09, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.665', 'seconds']
Refined model CLL: -0.084259


******************************************
Best model found
******************************************
Results 

CLL : -0.090364 

AUC ROC : 0.994619 

AUC PR : 0.436784 

Precision : 0.34349 

Recall : 0.984127 

F1 : 0.50924 

Total Learning Time : 30.085 

Total Inference Time : 10.104879140853882 

Total revision time: 62.81399305343628
Best scored revision CLL: -0.084259


Results 

CLL : -0.090364 

AUC ROC : 0.994619 

AUC PR : 0.436784 

Precision : 0.34349 

Recall : 0.984127 

F1 : 0.50924 

Total Learning Time : 62.85099895477295 

Total Inference Time : 10.104879140853882 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.494
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379734;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7271702392772513;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5244882536030138;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360632;  // std dev = 4.37e-09, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.35257671100341637;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | else return -0.10159632948783624;  // std dev = 3.65e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.09924337767008289;  // std dev = 0.471, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2792238287227824;  // std dev = 1.370, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21837672886261966;  // std dev = 1.369, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 3.36e-09, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21302527483158323;  // std dev = 0.938, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.10447000653847462;  // std dev = 1.644, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1950841263963183;  // std dev = 0.011, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420271;  // std dev = 1.05e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16627843448265023;  // std dev = 0.010, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.275', 'seconds']
Parameter learned model CLL:-0.092879 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.981, 1, 25], 'false,true': [5.58e-08, 53, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 53, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false': [4.37e-09, 50, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.356, 2, 23], 'true,false': [3.65e-08, 54, 0], 'false,true,true': [0.471, 1, 2], 'false,true,false': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.37, 2, 25], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 48, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.369, 2, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.36e-09, 44, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.938, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 49, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.644, 3, 25], 'true,false': [0.0, 0, 0], 'false,true': [1.05e-08, 49, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.011, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.05e-08, 45, 0], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.01, 0, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 64, 0]}]
{'': [0.03698224852071082, 5.86532918669894e-17], 'false': [5.86532918669894e-17, nan]}
{'': [-1.4210854715202004e-16, -3.561092720495785e-17], 'false': [-3.561092720495785e-17, nan]}
{'': [0.03698224852071007, 1.7763568394002505e-17], 'false': [nan, 1.7763568394002505e-17]}
{'': [0.06791039151694338, 0.1211952581039308], 'false': [0.1211952581039308, nan], 'false,true': [0.22222222222222224, -1.1564823173178713e-18], 'true': [0.0735999999999999, 2.4671622769447922e-17]}
{'': [0.06948303872898741, -2.135044278125301e-18], 'true': [0.06948303872898741, nan], 'false': [nan, -2.135044278125301e-18], 'false,false': [-3.469446951953614e-18, 0.0], 'false,false,true': [nan, -3.469446951953614e-18]}
{'': [0.0693912562362986, 1.1354553660939102e-17], 'false': [nan, 1.1354553660939102e-17], 'false,false': [nan, 1.1354553660939102e-17]}
{'': [0.033840714684632164, -1.1328806373726086e-18], 'false': [nan, -1.1328806373726086e-18], 'false,false': [nan, -1.1328806373726086e-18], 'false,false,false': [-1.1328806373726086e-18, nan]}
{'': [0.09648354786671635, 2.0185873175002845e-18], 'true': [0.09648354786671635, nan], 'false': [2.2657612747452172e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [0.0001319044312693629, 5.13992141030165e-18], 'false': [nan, 5.13992141030165e-18], 'false,false': [2.4671622769447924e-18, 0.0], 'false,false,true': [nan, 2.4671622769447924e-18]}
{'': [0.00010414330591372423, -3.469446951953614e-18], 'false': [nan, -3.469446951953614e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 5.503
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.8581489350995122;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.8581489350995121;  // std dev = 2.98e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.14185106490048766;  // std dev = 6.14e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7316367533455189;  // std dev = 0.085, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839155;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.5714008358628544;  // std dev = 0.102, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.3728874248204984;  // std dev = 0.828, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.21902756715391783;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.11231637819360636;  // std dev = 1.05e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.4315103606332646;  // std dev = 0.062, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.12104356393420261;  // std dev = 0.770, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4434507660107495;  // std dev = 0.099, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783628;  // std dev = 1.83e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.49779670036173906;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.34456061759071605;  // std dev = 0.128, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return -0.016980656389894638;  // std dev = 1.168, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.3576484134920117;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926101;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.13492692228397574;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.2719656158113176;  // std dev = 0.097, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.022385923115412504;  // std dev = 0.860, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.3065659462841846;  // std dev = 0.053, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F) )
%   | then if ( follows(F, A) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.0851847513883968;  // std dev = 1.97e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.23182750060745785;  // std dev = 0.038, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.21169065576850138;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.242860046406175;  // std dev = 0.056, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.2919340278470046;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F) )
%   | then if ( follows(F, A) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.1869103474266731;  // std dev = 0.068, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.20711259571705362;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.23604416513379378;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.13385596571048328;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( tweets(D, E), recursion_accounttype(F, B) )
%   | | | then return 0.16797977251609617;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.14993273489732414;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.20919350404299383;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.19866991384335017;  // std dev = 0.060, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.15421029641198924;  // std dev = 1.077, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.06842697784420274;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( tweets(D, E), recursion_accounttype(F, B) )
%   | | | then return 0.14579210224590552;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1318282489917455;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1767160507152318;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.1690719869959217;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17794553343864966;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.06419184008202623;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( tweets(A, J) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.750', 'seconds']
Refined model CLL: -0.093125


******************************************
Best model found
******************************************
Results 

CLL : -0.086174 

AUC ROC : 0.993814 

AUC PR : 0.338532 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 5.503 

Total Inference Time : 1.9671807289123535 

Total revision time: 11.978638431549072
Best scored revision CLL: -0.092879


Results 

CLL : -0.086174 

AUC ROC : 0.993814 

AUC PR : 0.338532 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 12.015644332885742 

Total Inference Time : 1.9671807289123535 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.298
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8385410919622573;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6849522692547485;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839136;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5686895726434326;  // std dev = 3.16e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360621;  // std dev = 7.57e-09, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4066361995732551;  // std dev = 0.990, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else return -0.10159632948783627;  // std dev = 4.21e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.1774695329065882;  // std dev = 0.433, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.27844905974611156;  // std dev = 1.690, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926098;  // std dev = 4.59e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2566381468345506;  // std dev = 0.996, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839682;  // std dev = 5.59e-09, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13768115516143456;  // std dev = 2.121, 55.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109158;  // std dev = 5.96e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1312162754484689;  // std dev = 1.912, 54.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1645544423957181;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 4.89e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10404363093536871;  // std dev = 0.232, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.879', 'seconds']
Parameter learned model CLL:-0.092833 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.99, 1, 50], 'false,true': [8.94e-08, 99, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.387, 2, 50], 'false,true': [0.0, 103, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [3.16e-08, 0, 50], 'false,true': [0.0, 0, 0], 'false,false': [7.57e-09, 86, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.99, 1, 47], 'true,false': [4.21e-08, 98, 0], 'false,true,true': [0.433, 1, 3], 'false,true,false': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.69, 3, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.59e-08, 99, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.996, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 101, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.121, 5, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.96e-08, 103, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.912, 4, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 94, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.86e-09, 5, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.89e-08, 102, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.232, 3, 50], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 94, 0]}]
{'': [0.019223375624760057, 8.074349270001139e-17], 'false': [8.074349270001139e-17, nan]}
{'': [0.036982248520710956, -1.0778864316749092e-17], 'false': [-1.0778864316749092e-17, nan]}
{'': [9.947598300641404e-16, 5.680210823663592e-17], 'false': [nan, 5.680210823663592e-17]}
{'': [0.06370815169113034, 0.10256240877875157], 'false': [0.10256240877875157, nan], 'false,true': [0.18749999999999997, 0.0], 'true': [0.020399305555555452, 1.8126090197961738e-17]}
{'': [0.053884883825932185, 2.5869274360197823e-17], 'true': [0.053884883825932185, nan], 'false': [nan, 2.5869274360197823e-17], 'false,false': [2.1307310573614114e-17, 0.0], 'false,false,true': [nan, 2.1307310573614114e-17]}
{'': [0.019460144377976423, 3.0778460088618204e-17], 'false': [nan, 3.0778460088618204e-17], 'false,false': [nan, 3.0778460088618204e-17]}
{'': [0.08178275613909725, 3.4492365813597093e-17], 'false': [nan, 3.4492365813597093e-17], 'false,false': [nan, 3.4492365813597093e-17], 'false,false,false': [3.4492365813597093e-17, nan]}
{'': [0.06766436428171081, -6.7286243916676156e-18], 'true': [0.06766436428171081, nan], 'false': [-8.267618268485208e-18, 6.938893903907229e-19], 'false,false': [nan, 6.938893903907229e-19]}
{'': [0.019382142438057116, 2.4019248128909638e-17], 'false': [nan, 2.4019248128909638e-17], 'false,false': [2.3401759832785162e-17, 0.0], 'false,false,true': [nan, 2.3401759832785162e-17]}
{'': [0.05366988713290293, -1.4173059888831785e-17], 'false': [nan, -1.4173059888831785e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 25.678
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), follows(D, A) )
%   | | | then return 0.7280664501703005;  // std dev = 0.020, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.5824751588715477;  // std dev = 1.301, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return 0.3900460052227785;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.7194734122109542;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.12544463852839136;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5724680601939987;  // std dev = 0.124, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.3324826677059868;  // std dev = 0.861, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.11231637819360621;  // std dev = 6.99e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.3033090462972977;  // std dev = 1.738, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | | else return 0.4451985298411986;  // std dev = 0.149, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.09329275390291118;  // std dev = 1.146, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.41647531253624276;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10159632948783623;  // std dev = 5.05e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.4133604976700411;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.35198975307915153;  // std dev = 0.218, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, D) )
%   | then return -0.09269127618926108;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.28475076191212045;  // std dev = 0.070, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.3047499170779709;  // std dev = 0.052, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.24867125432471135;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2619479618148309;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.08342447881713475;  // std dev = 1.082, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.27941050363098036;  // std dev = 0.071, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.24946758589178186;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, K) )
%   | then return -0.08518475138839682;  // std dev = 5.27e-09, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return -0.08518475138839694;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(D, E), follows(D, F) )
%   | | | then return 0.23498497539123825;  // std dev = 0.069, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2225394681314775;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.32836579814690875;  // std dev = 0.062, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( recursion_accounttype(G, B), follows(A, H) )
%   | | | then return 0.21594441137120154;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.19920924419107966;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.25777573445989244;  // std dev = 5.64e-05, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20452186640867942;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(K, A) )
%   | then return -0.07877675473109162;  // std dev = 5.27e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A), tweets(A, G) )
%   | | then if ( recursion_accounttype(F, B), tweets(D, G) )
%   | | | then return 0.19285980660146151;  // std dev = 0.049, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.1761903151278658;  // std dev = 0.033, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.2535034090351862;  // std dev = 0.060, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.19319687962011933;  // std dev = 0.050, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then return -0.15335017034402063;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.17278966168248444;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333706;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return -0.07324622576333707;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), follows(G, A) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.11485920962157921;  // std dev = 0.961, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.15634713414239196;  // std dev = 0.043, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.20876548773630918;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16493268851961324;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, H) )
%   | | then return 0.1692763842724624;  // std dev = 0.059, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.06801367113753637;  // std dev = 0.758, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.06842697784420267;  // std dev = 4.06e-09, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.06842697784420275;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.1438149488877454;  // std dev = 0.063, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.16702452451689892;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.12801063177557603;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then return -0.027279141952170228;  // std dev = 0.872, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.1526699605839925;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202626;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.918', 'seconds']
Refined model CLL: -0.09292


******************************************
Best model found
******************************************
Results 

CLL : -0.085921 

AUC ROC : 0.993814 

AUC PR : 0.338532 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 25.678 

Total Inference Time : 5.798012018203735 

Total revision time: 38.92115037536621
Best scored revision CLL: -0.092833


Results 

CLL : -0.085921 

AUC ROC : 0.993814 

AUC PR : 0.338532 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 38.95815627670288 

Total Inference Time : 5.798012018203735 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.942
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8449910403626706;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048816;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6961473777383888;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283913;  // std dev = 4.71e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5511985281178282;  // std dev = 0.114, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360618;  // std dev = 8.33e-09, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.38689129990554316;  // std dev = 1.697, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4274318404460843;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10159632948783627;  // std dev = 1.32e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3359541226458275;  // std dev = 0.017, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892607;  // std dev = 7.74e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23958562029805455;  // std dev = 1.395, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.27e-09, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15902985717610774;  // std dev = 2.164, 80.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109153;  // std dev = 7.38e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14460402189268953;  // std dev = 1.951, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333685;  // std dev = 7.30e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14760353706734364;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.05e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12743843866682963;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.705', 'seconds']
Parameter learned model CLL:-0.092621 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.993, 1, 75], 'false,true': [0.0, 161, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.396, 2, 75], 'false,true': [4.71e-08, 151, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.114, 1, 75], 'false,true': [0.0, 0, 0], 'false,false': [8.33e-09, 117, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.697, 3, 71], 'true,false': [0.0, 141, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [1.32e-09, 6, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.017, 0, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.74e-08, 152, 0], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.395, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.27e-09, 144, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.164, 5, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.38e-08, 134, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.951, 4, 75], 'true,false': [0.0, 0, 0], 'false,true': [7.3e-08, 142, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.05e-08, 130, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 178, 0]}]
{'': [0.012984764542935068, -1.5170749404815803e-16], 'false': [-1.5170749404815803e-16, nan]}
{'': [0.025299375948727054, 1.4704940723512008e-17], 'false': [1.4704940723512008e-17, nan]}
{'': [0.012984764542935769, 7.021923403612101e-17], 'false': [nan, 7.021923403612101e-17]}
{'': [0.06724962992453304, 0.06716899310007197], 'true': [0.03889700511322184, -5.039310182695746e-17], 'false': [0.06716899310007197, nan], 'false,true': [0.0, 0.0]}
{'': [4.080219397171921e-06, 4.06179155350667e-17], 'true': [4.080219397171921e-06, nan], 'false': [nan, 4.06179155350667e-17], 'false,false': [3.944213376957793e-17, 2.3129646346357427e-18], 'false,false,true': [nan, 3.944213376957793e-17]}
{'': [0.025281247577423657, 2.7755575615628914e-17], 'false': [nan, 2.7755575615628914e-17], 'false,false': [nan, 2.7755575615628914e-17]}
{'': [0.058552773340273055, 4.059770761689005e-17], 'false': [nan, 4.059770761689005e-17], 'false,false': [nan, 4.059770761689005e-17], 'false,false,false': [4.059770761689005e-17, nan]}
{'': [0.048190706820673786, 4.644070168366668e-17], 'true': [0.048190706820673786, nan], 'false': [3.752866562113205e-17, 6.30808536718839e-19], 'false,false': [nan, 6.30808536718839e-19]}
{'': [0.025285494540375392, 2.9341608507950566e-17], 'false': [nan, 2.9341608507950566e-17], 'false,false': [2.818258447125397e-17, 6.938893903907229e-19], 'false,false,true': [nan, 2.818258447125397e-17]}
{'': [0.025286676756541813, -4.989766402809692e-18], 'false': [nan, -4.989766402809692e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 23.276
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.14185106490048813;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.7292285415464107;  // std dev = 0.036, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.6617736220336526;  // std dev = 0.974, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.4862154161469526;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7236513806382122;  // std dev = 0.060, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.12544463852839147;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return 0.48063314353127423;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.5560460986640345;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.5706026001181277;  // std dev = 0.090, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.5850621876498371;  // std dev = 0.123, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.11231637819360625;  // std dev = 9.06e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(F, A), follows(E, A) )
%   | | | then return 0.43935873717024165;  // std dev = 0.079, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.35406016697055864;  // std dev = 1.343, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | else return 0.4474111839400308;  // std dev = 0.081, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10159632948783641;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.41633270341907713;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.29532544239958397;  // std dev = 0.978, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.333145735895684;  // std dev = 0.092, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.09652666681909469;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.34339309586997063;  // std dev = 0.097, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926083;  // std dev = 6.14e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(F, D), follows(F, A) )
%   | | | then return 0.27543879376993907;  // std dev = 0.053, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.32047350585697454;  // std dev = 0.065, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.2613917283367922;  // std dev = 0.056, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.24853270513213632;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.2799157739965825;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1809148886660627;  // std dev = 0.986, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.25383123083428255;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2707145811756172;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839678;  // std dev = 5.02e-09, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.22399579479935322;  // std dev = 0.046, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.209999608184679;  // std dev = 0.025, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.2675168660188561;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then return -0.018829424588301558;  // std dev = 0.789, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.11089471766160212;  // std dev = 0.938, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.24317475877846711;  // std dev = 0.173, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.07877675473109154;  // std dev = 6.11e-09, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.07877675473109176;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.1870517933889511;  // std dev = 0.067, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.17438315519500483;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.07436381833185628;  // std dev = 0.955, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.18432713066791692;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.003930243070759798;  // std dev = 0.398, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.2127338439329848;  // std dev = 0.096, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.19719351376638267;  // std dev = 0.119, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, K) )
%   | then return -0.0732462257633369;  // std dev = 5.10e-09, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.1182968895079296;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.1643958337902163;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2026731288109759;  // std dev = 0.060, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.15490746613102183;  // std dev = 0.042, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(G, B), follows(G, H) )
%   | | | then return -0.1086027875235357;  // std dev = 0.749, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09519078425963766;  // std dev = 0.990, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.15184021122614633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420264;  // std dev = 5.27e-09, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.14981908802943106;  // std dev = 0.088, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return -0.0726063170545908;  // std dev = 1.230, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return -0.21148854855689253;  // std dev = 1.144, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.13153008754731424;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1396854914064406;  // std dev = 0.022, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.13724390815643295;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1496226073044294;  // std dev = 0.044, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202626;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.094', 'seconds']
Refined model CLL: -0.09093


******************************************
Best model found
******************************************
Results 

CLL : -0.085043 

AUC ROC : 0.99525 

AUC PR : 0.37756 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 23.276 

Total Inference Time : 5.1286396980285645 

Total revision time: 38.573186939239505
Best scored revision CLL: -0.09093


Results 

CLL : -0.085043 

AUC ROC : 0.99525 

AUC PR : 0.37756 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 38.610192840576175 

Total Inference Time : 5.1286396980285645 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.679
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379727;  // std dev = 1.961, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004884;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7172692491782411;  // std dev = 0.995, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839174;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5362580543662543;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360658;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4215917458980168;  // std dev = 0.995, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4321180616874915;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1015963294878362;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2955631051159885;  // std dev = 1.903, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926055;  // std dev = 9.31e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2415920747718837;  // std dev = 1.706, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.27e-09, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19660516947724016;  // std dev = 1.706, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109147;  // std dev = 7.45e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15476615381778308;  // std dev = 1.961, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.13e-07, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13177691397893937;  // std dev = 0.192, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 7.96e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11396237633363748;  // std dev = 0.192, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.531', 'seconds']
Parameter learned model CLL:-0.093151 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.961, 4, 100], 'false,true': [0.0, 204, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.995, 1, 100], 'false,true': [0.0, 218, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 196, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.995, 1, 94], 'true,false': [0.0, 179, 0], 'false,true,true': [0.0, 0, 6], 'false,true,false': [1.86e-09, 15, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.903, 4, 100], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.31e-08, 202, 0], 'false,false,false': [1.32e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.706, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.27e-09, 189, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.706, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.45e-08, 197, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.961, 4, 100], 'true,false': [0.0, 0, 0], 'false,true': [1.13e-07, 192, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 4, 100], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.96e-08, 191, 0], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 4, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 205, 0]}]
{'': [0.036982248520711906, -2.394598680564063e-16], 'false': [-2.394598680564063e-16, nan]}
{'': [0.009802960494069183, -6.111319401606367e-17], 'false': [-6.111319401606367e-17, nan]}
{'': [0.028277877274014186, -3.8517941670668696e-17], 'false': [nan, -3.8517941670668696e-17]}
{'': [0.06561114572068343, 0.058132867621969474], 'true': [0.010415512465374564, -8.683308572487257e-17], 'false': [0.058132867621969474, nan], 'false,true': [-3.700743415417188e-17, 3.7007434154171884e-18]}
{'': [0.03482223342640237, 4.378344322465406e-17], 'true': [0.03482223342640237, nan], 'false': [nan, 4.378344322465406e-17], 'false,false': [4.286999798057535e-17, 1.261617073437678e-18], 'false,false,true': [nan, 4.286999798057535e-17]}
{'': [0.02827107617636713, 2.819614030794048e-17], 'false': [nan, 2.819614030794048e-17], 'false,false': [nan, 2.819614030794048e-17]}
{'': [0.02827183501885769, 2.817824935596844e-17], 'false': [nan, 2.817824935596844e-17], 'false,false': [nan, 2.817824935596844e-17], 'false,false,false': [2.817824935596844e-17, nan]}
{'': [0.03697513253064209, 7.25492273517429e-17], 'true': [0.03697513253064209, nan], 'false': [6.707597440443654e-17, -6.938893903907229e-19], 'false,false': [nan, -6.938893903907229e-19]}
{'': [0.03697578948037549, 3.1173749952529025e-17], 'false': [nan, 3.1173749952529025e-17], 'false,false': [3.313231015897064e-17, -2.3129646346357427e-18], 'false,false,true': [nan, 3.313231015897064e-17]}
{'': [0.03697633285288158, -1.0831444142684454e-18], 'false': [nan, -1.0831444142684454e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 22.617
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(E, F), follows(E, A) )
%   | | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return 0.6816783468642181;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.8581489350995121;  // std dev = 5.96e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.1418510649004885;  // std dev = 0.000, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7291768661057799;  // std dev = 0.147, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   else return -0.12544463852839158;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.5572090389019407;  // std dev = 0.093, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.46266592868005;  // std dev = 0.927, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.24307363523754588;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.5692331205138048;  // std dev = 0.121, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.1123163781936066;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(E, F) )
%   | | | then return 0.3937418548083412;  // std dev = 0.993, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.47490893528382155;  // std dev = 0.135, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.40098110657806746;  // std dev = 0.993, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.33486973151466926;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4117928084377462;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10159632948783623;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.328304891104099;  // std dev = 0.143, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(A, F) )
%   | | | then return 0.2539617687734238;  // std dev = 0.944, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.13191814674239188;  // std dev = 1.017, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.3456238017999721;  // std dev = 0.049, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.24280624670573278;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926068;  // std dev = 7.45e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return -0.09269127618926087;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), follows(E, A) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.23140145417101132;  // std dev = 0.990, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.289798239024518;  // std dev = 0.096, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(G, A), follows(E, G) )
%   | | | then return -0.111545185788959;  // std dev = 1.081, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.21924096609828847;  // std dev = 0.881, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.25785883351852246;  // std dev = 0.011, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2503668668893208;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3628539055775712;  // std dev = 0.110, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.28206633550404264;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839678;  // std dev = 5.59e-09, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.16255710334779971;  // std dev = 1.340, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.037907955120687786;  // std dev = 0.881, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.20947661141762122;  // std dev = 0.012, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.252631858366125;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.24241046620145293;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.30440063989220567;  // std dev = 0.072, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.22926886763325532;  // std dev = 0.085, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2262057958509029;  // std dev = 0.010, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07877675473109146;  // std dev = 5.74e-09, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.17052563964228373;  // std dev = 1.001, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.005594028303082223;  // std dev = 1.262, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( recursion_accounttype(D, B), follows(D, G) )
%   | | | then return 0.17662024669659543;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1935642112537312;  // std dev = 0.129, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else return 0.0312922908578766;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.0732462257633369;  // std dev = 5.27e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | | else return -0.07324622576333698;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.07324622576333702;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return -0.073246225763337;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.13771341417246613;  // std dev = 0.989, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.18361511741304026;  // std dev = 0.065, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.21993434399497394;  // std dev = 0.063, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.16178523608440476;  // std dev = 0.068, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.04198293026062854;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.16761727666099538;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.07974161022423279;  // std dev = 0.841, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.038856122382630365;  // std dev = 0.874, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.06842697784420261;  // std dev = 4.06e-09, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.14726701106316814;  // std dev = 0.047, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.18043940462153474;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.002177449286416317;  // std dev = 1.296, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.1087233138214954;  // std dev = 0.962, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19987680340692157;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.14326453093731656;  // std dev = 0.018, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.16027198002364065;  // std dev = 0.038, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202625;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.149', 'seconds']
Refined model CLL: -0.09201


******************************************
Best model found
******************************************
Results 

CLL : -0.085816 

AUC ROC : 0.995585 

AUC PR : 0.431138 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 22.617 

Total Inference Time : 6.569417476654053 

Total revision time: 44.554328676223754
Best scored revision CLL: -0.09201


Results 

CLL : -0.085816 

AUC ROC : 0.995585 

AUC PR : 0.431138 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 44.591334577560424 

Total Inference Time : 6.569417476654053 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.2
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8273797043302796;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004881;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6874735311669706;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283918;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5253530221043278;  // std dev = 0.208, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936068;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4154421339856975;  // std dev = 1.710, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4402355224154508;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783623;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3181174996682975;  // std dev = 1.711, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892605;  // std dev = 6.83e-08, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2448075782117398;  // std dev = 1.860, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.67e-09, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22791221870348205;  // std dev = 0.012, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 5.58e-08, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16705186510434344;  // std dev = 1.711, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333661;  // std dev = 1.31e-07, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12772212625724003;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 8.56e-08, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | | else return -0.06842697784420268;  // std dev = 1.86e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11819182421615296;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 1.61e-09, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.234', 'seconds']
Parameter learned model CLL:-0.09282 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 265, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 231, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.208, 6, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 240, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.71, 3, 118], 'true,false': [0.0, 235, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.711, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.83e-08, 219, 0], 'false,false,false': [1.32e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.86, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.67e-09, 227, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.012, 0, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.58e-08, 254, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.711, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.31e-07, 218, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.56e-08, 215, 0], 'false,false,false': [1.86e-09, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.61e-09, 245, 0]}]
{'': [0.02982248520710475, -7.373556691850096e-17], 'false': [-7.373556691850096e-17, nan]}
{'': [0.036711147369036225, -5.3828995133340925e-17], 'false': [-5.3828995133340925e-17, nan]}
{'': [0.043388429752066596, -8.511709855459534e-17], 'false': [nan, -8.511709855459534e-17]}
{'': [0.0681969946439561, 0.07248932240418404], 'false': [0.07248932240418404, nan], 'false,true': [-5.551115123125783e-17, -2.7755575615628915e-18], 'true': [0.024178676319924798, -7.558965274043619e-17]}
{'': [0.0227007527533236, 2.413528314402514e-17], 'true': [0.0227007527533236, nan], 'false': [nan, 2.413528314402514e-17], 'false,false': [2.1291948417468754e-17, 1.261617073437678e-18], 'false,false,true': [nan, 2.1291948417468754e-17]}
{'': [0.026613159194980248, 3.1301442103969174e-17], 'false': [nan, 3.1301442103969174e-17], 'false,false': [nan, 3.1301442103969174e-17]}
{'': [1.1184900424749814e-06, 1.2238679011615899e-17], 'false': [nan, 1.2238679011615899e-17], 'false,false': [nan, 1.2238679011615899e-17], 'false,false,false': [1.2238679011615899e-17, nan]}
{'': [0.022704873025680736, 6.950961545479241e-17], 'true': [0.022704873025680736, nan], 'false': [7.84285989872817e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.03669593575669583, 2.191856615139794e-17], 'false': [nan, 2.191856615139794e-17], 'false,false': [3.408126494198155e-17, 3.854941057726238e-18], 'false,false,true': [nan, 3.408126494198155e-17]}
{'': [0.02981123492135559, 1.812609019796174e-18], 'false': [nan, 1.812609019796174e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 36.155
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7043027812533584;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else return -0.14185106490048813;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.7194734122109541;  // std dev = 1.69e-07, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(E, F), follows(F, A) )
%   | | | then return 0.4782722315525007;  // std dev = 0.836, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7335515231574282;  // std dev = 0.067, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.733574808201656;  // std dev = 0.111, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.12544463852839177;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.5186643865382015;  // std dev = 1.650, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | | else return -0.07857244932905107;  // std dev = 0.828, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.5666558735534141;  // std dev = 0.118, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(A, H) )
%   | | | then return 0.3502884464864919;  // std dev = 1.533, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.4550179582501478;  // std dev = 0.948, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.5921153418902553;  // std dev = 0.022, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.11231637819360676;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4105103132775642;  // std dev = 0.992, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | | else return 0.49240758670474255;  // std dev = 0.142, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, G), follows(H, A) )
%   | | | then return 0.4229778841828302;  // std dev = 0.098, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.3319431964795324;  // std dev = 1.625, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.44210082095646797;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783624;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.270306961569427;  // std dev = 1.679, 50.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | | else return 0.3339804644105391;  // std dev = 0.074, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, G) )
%   | | | then return 0.042369967821422216;  // std dev = 1.194, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.25698594770748256;  // std dev = 1.405, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | else return 0.35720219621017213;  // std dev = 0.138, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926049;  // std dev = 1.30e-07, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return -0.09269127618926087;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.24940441027569066;  // std dev = 0.990, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.2808086359197073;  // std dev = 0.168, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.2641979564569992;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.06592956278154535;  // std dev = 0.875, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.2589449516178889;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3018125571884566;  // std dev = 0.058, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.3080037650378271;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2945717940535421;  // std dev = 0.050, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.08518475138839678;  // std dev = 5.74e-09, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), follows(E, A) )
%   | | | then return 0.2238586076178155;  // std dev = 0.034, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.1048814542732615;  // std dev = 2.071, 39.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=34 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return -0.20904800100152646;  // std dev = 0.994, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.23480915109925393;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.20712224520578026;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.235735940293129;  // std dev = 0.075, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return 0.10370403850277815;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.07877675473109144;  // std dev = 5.37e-08, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | then if ( follows(A, G), follows(G, D) )
%   | | | then return 0.15235049220145572;  // std dev = 1.378, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | | else return 0.2010568438506018;  // std dev = 0.077, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(D, H), follows(H, A) )
%   | | | then return -0.17981534924681306;  // std dev = 1.303, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.15706781812288934;  // std dev = 1.005, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.22243641059910194;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2021710772551546;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(K, A), follows(A, K) )
%   | | | then return 0.20107482832460088;  // std dev = 0.100, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.18753696840463902;  // std dev = 0.017, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333666;  // std dev = 8.38e-09, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(D, F) )
%   | | | then return 0.16748577832179215;  // std dev = 0.076, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.21640389329645915;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G), tweets(D, G) )
%   | | | then return -0.07920297176826376;  // std dev = 1.071, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.18006945393082677;  // std dev = 0.068, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return -0.08428470596939332;  // std dev = 1.493, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.17241419863012988;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.137265101431479;  // std dev = 0.932, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.06697578736414589;  // std dev = 0.953, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.06842697784420271;  // std dev = 2.95e-09, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.11927002434309744;  // std dev = 1.364, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return 0.1824769523101418;  // std dev = 0.252, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, G), tweets(G, D) )
%   | | | then return 0.1674024130196701;  // std dev = 0.097, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.14523448209996892;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.14691195981248936;  // std dev = 0.071, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.24793360718671212;  // std dev = 1.087, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.13319900878977106;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15253173462891673;  // std dev = 0.016, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202626;  // std dev = 1.05e-08, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.847', 'seconds']
Refined model CLL: -0.088952


******************************************
Best model found
******************************************
Results 

CLL : -0.083667 

AUC ROC : 0.996619 

AUC PR : 0.499219 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 36.155 

Total Inference Time : 9.665401220321655 

Total revision time: 61.68232152938843
Best scored revision CLL: -0.088952


Results 

CLL : -0.083667 

AUC ROC : 0.996619 

AUC PR : 0.499219 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 61.7193274307251 

Total Inference Time : 9.665401220321655 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.047
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.7547006592374428;  // std dev = 1.640, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1926839643237841;  // std dev = 3.813, 84.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=31 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.17733676128231313;  // std dev = 3.589, 75.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=29 */
%   | | | else return -0.029988071892956516;  // std dev = 1.083, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6602532187924888;  // std dev = 0.039, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.17195561892133354;  // std dev = 1.49e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.008978714462003616;  // std dev = 1.098, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13874889172107083;  // std dev = 2.489, 59.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=26 */
%   | | else return -0.024226077038909846;  // std dev = 0.271, 29.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.3953306002089411;  // std dev = 1.707, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1585243961669724;  // std dev = 0.091, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03661719953700576;  // std dev = 2.219, 71.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=26 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.050622762075824876;  // std dev = 1.150, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.07904343333785441;  // std dev = 2.062, 66.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=29 */
%   | | | else return -0.04219876891406322;  // std dev = 0.997, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.34751580687014594;  // std dev = 0.017, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.15834461737347041;  // std dev = 0.046, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05656610328038759;  // std dev = 0.975, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.016745110032096434;  // std dev = 1.979, 89.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=31 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.570', 'seconds']
Parameter learned model CLL:-0.158176 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.64, 3, 26], 'false,true,false': [0.0, 0, 5], 'false,false': [8.33e-09, 74, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.813, 53, 31]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.589, 46, 29], 'false,false,false,false': [1.083, 12, 2]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.039, 0, 29], 'true,false': [1.49e-08, 54, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.098, 9, 2]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.489, 33, 26], 'false,false,false': [0.271, 24, 5]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.707, 3, 31], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.091, 59, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.219, 45, 26], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.15, 12, 5]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.062, 37, 29], 'false,false,false,false': [0.997, 12, 2]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.017, 0, 29], 'false,false,true,false': [0.046, 44, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.975, 20, 2]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.979, 58, 31]}]
{'': [nan, 0.20464677640603698], 'false': [0.08044982698962092, 7.201446646217232e-17], 'false,true': [0.09274673008323524, 0.0]}
{'': [nan, 0.17305005614114619], 'false': [nan, 0.17305005614114513], 'false,false': [nan, 0.17305005614114619], 'false,false,false': [nan, 0.17305005614114513]}
{'': [nan, 0.16361963897298412], 'false': [nan, 0.16361963897298437], 'false,false': [nan, 0.16361963897298437], 'false,false,false': [0.17176219438363627, 0.08377668300202538]}
{'': [0.15745250662669988, 0.10951526530169242], 'true': [5.1213762480934855e-05, 4.11193712824132e-18], 'false': [nan, 0.10951526530169242], 'false,false': [nan, 0.10951526530169242], 'false,false,false': [nan, 0.10951526530169242]}
{'': [nan, 0.10041781116729691], 'false': [nan, 0.10041781116729727], 'false,false': [0.10496940003057154, 0.07334984589499059], 'false,false,true': [nan, 0.10496940003057154]}
{'': [nan, 0.10258618490985674], 'false': [nan, 0.10258618490985674], 'false,false': [0.08575002800555703, 0.00014125725689622943], 'false,false,false': [nan, 0.0001412572568962031]}
{'': [0.06936321014273063, 0.07775096034192192], 'false': [nan, 0.07775096034192192], 'false,false': [nan, 0.07775096034192192], 'false,false,false': [nan, 0.07775096034192192], 'true': [nan, 0.06936321014273063]}
{'': [nan, 0.06769596120660742], 'false': [nan, 0.06769596120660742], 'false,false': [nan, 0.06769596120660742], 'false,false,false': [0.06442433318433105, 0.07099212137879353]}
{'': [nan, 0.05886530792668177], 'false': [nan, 0.0588653079266819], 'false,false': [0.061306178219705, 0.04320739048310345], 'false,false,true': [9.988405527602924e-06, 4.911372016715785e-05], 'false,false,false': [nan, 0.04320739048310345]}
{'': [nan, 0.044018602000397714], 'false': [nan, 0.044018602000397734], 'false,false': [nan, 0.044018602000397714]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 6.611
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A), tweets(A, H) )
%   | | | then return -0.1254446385283914;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.0214976311654079;  // std dev = 1.536, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.11231637819360638;  // std dev = 1.05e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.044785460615779746;  // std dev = 1.168, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.0990561256724967;  // std dev = 0.904, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.007402691360174685;  // std dev = 1.352, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4175135841583098;  // std dev = 5.58e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.49505737796129257;  // std dev = 0.170, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7166198302645578;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return -0.10709113415486346;  // std dev = 0.007, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.12539149594484147;  // std dev = 0.002, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( follows(I, A) )
%   | then if ( follows(I, J), follows(J, A) )
%   | | then if ( tweets(A, K) )
%   | | | then return -0.10159632948783634;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.13927827908758952;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.3242489860864614;  // std dev = 0.601, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.1269991512057299;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3207118471601496;  // std dev = 2.11e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.38221520271052856;  // std dev = 0.135, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.09241462950694036;  // std dev = 0.001, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.10625284024251333;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4188264523219285;  // std dev = 0.246, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11313923483204813;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.00268078862505148;  // std dev = 1.054, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return -0.113613255614496;  // std dev = 0.000140, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.2551722425694894;  // std dev = 2.11e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.23420078488104337;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.3279160638334976;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5448250357716283;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A), follows(A, I) )
%   | then if ( tweets(A, J), follows(I, H) )
%   | | then return -0.08803351714234992;  // std dev = 0.005, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.098836881666969;  // std dev = 0.005, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(K, A) )
%   | | then return -0.12618732913919095;  // std dev = 0.061, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11005017681246425;  // std dev = 0.005, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.20975771563253567;  // std dev = 2.79e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( follows(A, D) )
%   | | | then return -0.07819331586388761;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.15390094191868847;  // std dev = 0.584, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.23931866818901582;  // std dev = 0.084, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08894544384080302;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(H, A) )
%   | | then return 0.18775247784102472;  // std dev = 0.347, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0013136994064003723;  // std dev = 0.807, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | | else return -0.09296005563711357;  // std dev = 0.000117, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17709649774527744;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16362328198901166;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.2857491389243638;  // std dev = 0.229, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08395302505904623;  // std dev = 0.080, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.06821322982886417;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.0439944606847496;  // std dev = 0.705, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.09024385809367091;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.09725614190632909;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.056044540275664884;  // std dev = 0.938, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.376284713898044;  // std dev = 0.064, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then return -0.07113787901747824;  // std dev = 0.004, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.10045535363251873;  // std dev = 0.006, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( follows(J, A), tweets(A, K) )
%   | then return -0.2178442185476556;  // std dev = 0.698, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(L, A) )
%   | | then return 0.11416754588028931;  // std dev = 0.373, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.08164691970217133;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.1414274245569838;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.16575939739650558;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.13391877874270186;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.2197482414609287;  // std dev = 0.175, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.07487990958647663;  // std dev = 0.091, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.051698080307227355;  // std dev = 0.431, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return -0.07531233332256618;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.170', 'seconds']
Refined model CLL: -0.093246


******************************************
Best model found
******************************************
Results 

CLL : -0.097759 

AUC ROC : 0.992299 

AUC PR : 0.380857 

Precision : 0.346154 

Recall : 1.0 

F1 : 0.514286 

Total Learning Time : 6.611 

Total Inference Time : 6.266580820083618 

Total revision time: 15.564691312789916
Best scored revision CLL: -0.093246


Results 

CLL : -0.097759 

AUC ROC : 0.992299 

AUC PR : 0.380857 

Precision : 0.346154 

Recall : 1.0 

F1 : 0.514286 

Total Learning Time : 15.591157205581665 

Total Inference Time : 6.266580820083618 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.58
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8364098046647294;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | else return 0.7528857772047755;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | else return -0.1418510649004879;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18053290987924464;  // std dev = 5.385, 173.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=62 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1116639003005112;  // std dev = 4.986, 164.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=51 */
%   | | | else return 0.08465166642400093;  // std dev = 2.375, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6110387576902295;  // std dev = 1.671, 54.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=51 */
%   | else return -0.1611556835138561;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1699767422152791;  // std dev = 2.155, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1006800116958559;  // std dev = 3.255, 106.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=39 */
%   | | else return 0.06659359923846589;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=23 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4874037545759922;  // std dev = 1.465, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15880241682339494;  // std dev = 0.170, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.023464319630419322;  // std dev = 3.004, 143.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=45 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07167623247447871;  // std dev = 1.968, 44.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.023349970085392847;  // std dev = 3.170, 150.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=51 */
%   | | | else return 0.054357392405018023;  // std dev = 1.791, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.34468371024239425;  // std dev = 0.995, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | | else return -0.13955791770512774;  // std dev = 0.007, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04378018238436629;  // std dev = 1.779, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.017647986403925203;  // std dev = 3.156, 175.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=62 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.854', 'seconds']
Parameter learned model CLL:-0.160941 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.989, 1, 45], 'false,true,false': [1.338, 2, 17], 'false,false': [0.0, 134, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.385, 111, 62]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.986, 113, 51], 'false,false,false,false': [2.375, 29, 11]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.671, 3, 51], 'true,false': [0.0, 79, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.155, 17, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.255, 67, 39], 'false,false,false': [0.346, 52, 23]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.465, 2, 62], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.17, 130, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.004, 98, 45], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.968, 27, 17]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.17, 99, 51], 'false,false,false,false': [1.791, 21, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.995, 1, 51], 'false,false,true,false': [0.007, 90, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.779, 21, 11]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.156, 113, 62]}]
{'': [nan, 0.21448953309259897], 'false': [0.044023668639052445, -5.633967587650048e-17], 'false,true': [0.021266540642723226, 0.09418282548476423]}
{'': [nan, 0.16763318312056094], 'false': [nan, 0.16763318312056047], 'false,false': [nan, 0.16763318312056094], 'false,false,false': [nan, 0.16763318312056047]}
{'': [nan, 0.14962049322606888], 'false': [nan, 0.14962049322606916], 'false,false': [nan, 0.14962049322606916], 'false,false,false': [0.15157073073679234, 0.1410379293940831]}
{'': [0.16479493003577977, 0.1658064431128998], 'false': [nan, 0.1658064431128998], 'false,false': [nan, 0.1658064431128998], 'false,false,false': [nan, 0.1658064431128998], 'true': [0.051699928356990554, -5.6213824031653495e-18]}
{'': [nan, 0.10847124284373734], 'false': [nan, 0.10847124284373748], 'false,false': [0.09996266396042537, 0.1198162609297196], 'false,false,true': [nan, 0.09996266396042537]}
{'': [nan, 0.10352300277232297], 'false': [nan, 0.10352300277232297], 'false,false': [0.03353190153762686, 0.00022101277181782496], 'false,false,false': [nan, 0.0002210127718177942]}
{'': [0.06312434481304212, 0.08805615745369753], 'false': [nan, 0.08805615745369753], 'false,false': [nan, 0.08805615745369753], 'false,false,false': [nan, 0.08805615745369753], 'true': [nan, 0.06312434481304212]}
{'': [nan, 0.07295873693638508], 'false': [nan, 0.07295873693638508], 'false,false': [nan, 0.07295873693638508], 'false,false,false': [0.0669721461629451, 0.10022846890207202]}
{'': [nan, 0.06829528050106799], 'false': [nan, 0.06829528050106815], 'false,false': [0.06140092261697877, 0.09885951452304163], 'false,false,false': [nan, 0.09885951452304163], 'false,false,true': [0.019050491143760888, 5.00094900414262e-07]}
{'': [nan, 0.056921824853413946], 'false': [nan, 0.056921824853414], 'false,false': [nan, 0.056921824853413946]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 6.623
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else return -0.14185106490048768;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109542;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.12544463852839152;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.19952384252520308;  // std dev = 1.482, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.02817682524239874;  // std dev = 1.081, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.483937865317713;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.5553664367462843;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.5553664367462844;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.5553664367462843;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1123163781936062;  // std dev = 7.88e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.5025676307096263;  // std dev = 1.006, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.13189034994550544;  // std dev = 0.100, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07332042844634502;  // std dev = 1.067, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.41748762630588293;  // std dev = 0.964, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4410880695714042;  // std dev = 0.324, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else return -0.10922720914025395;  // std dev = 0.235, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then return 0.21751358415830985;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( tweets(A, G) )
%   | | then return 0.3181846652725546;  // std dev = 0.536, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.15795862733523677;  // std dev = 0.636, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.2192838938814925;  // std dev = 0.805, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.33037292282179265;  // std dev = 0.117, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.32360692971684585;  // std dev = 0.060, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.09296469704810921;  // std dev = 0.042, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.3811323129315575;  // std dev = 0.236, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.10337365534219774;  // std dev = 0.117, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.08853525552902808;  // std dev = 0.674, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.09702181325605387;  // std dev = 1.024, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(A, E) )
%   | | | then return 0.11575830542865291;  // std dev = 0.936, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.25359091850707377;  // std dev = 0.031, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.08387675259249124;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return 0.25686340156138593;  // std dev = 0.085, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.28766163225487734;  // std dev = 0.063, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3480510007897424;  // std dev = 0.841, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.09567954415091352;  // std dev = 0.340, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22038027760898976;  // std dev = 0.104, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.21016409048893947;  // std dev = 0.042, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07777794953695324;  // std dev = 0.021, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.219996509480387;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.027881177652440515;  // std dev = 0.789, 38.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=7 */
%   | | | else return 0.05935353391086338;  // std dev = 1.109, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18490434252562402;  // std dev = 0.092, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.06854451288551855;  // std dev = 0.245, 62.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=1 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.17800369812809722;  // std dev = 0.037, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.07318481211646875;  // std dev = 0.028, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.18469526576778583;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.01629891769792109;  // std dev = 0.783, 33.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=7 */
%   | | | else return 0.04881481504451;  // std dev = 1.097, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.11634481983494645;  // std dev = 0.944, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.15288649145878613;  // std dev = 0.056, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.19358983489648374;  // std dev = 0.112, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2863850026042517;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0733781294388582;  // std dev = 0.142, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.17455063709127358;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then return -0.0681046446357487;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.004778089816205385;  // std dev = 0.578, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.03282570687339654;  // std dev = 0.871, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.14961022288417625;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.020230502949111773;  // std dev = 0.940, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.13242676711853263;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.13997125547132033;  // std dev = 0.055, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(F, A) )
%   | then return -0.05410337973923379;  // std dev = 0.107, 85.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=8 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.19526406563311827;  // std dev = 0.232, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.0847642772138285;  // std dev = 0.133, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.010251746177430377;  // std dev = 0.634, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return -0.09313392082816149;  // std dev = 0.893, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.014', 'seconds']
Refined model CLL: -0.095808


******************************************
Best model found
******************************************
Results 

CLL : -0.097345 

AUC ROC : 0.993928 

AUC PR : 0.386724 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 6.623 

Total Inference Time : 4.022241830825806 

Total revision time: 14.719648530960082
Best scored revision CLL: -0.095808


Results 

CLL : -0.097345 

AUC ROC : 0.993928 

AUC PR : 0.386724 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 14.74611442375183 

Total Inference Time : 4.022241830825806 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.693
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8444503049625265;  // std dev = 0.993, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | else return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else return -0.1418510649004883;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15867390893885316;  // std dev = 6.703, 278.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=93 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1316290018320957;  // std dev = 5.974, 230.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=76 */
%   | | | else return 0.18413945706764429;  // std dev = 2.717, 43.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.613684171920805;  // std dev = 1.940, 80.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=76 */
%   | else return -0.16089982188631752;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14297603908999443;  // std dev = 2.678, 45.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08204150046475095;  // std dev = 4.224, 179.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=62 */
%   | | else return 0.06774248327686787;  // std dev = 0.346, 100.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=31 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5056155204412909;  // std dev = 1.101, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16181387025625132;  // std dev = 0.284, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.030975931960247793;  // std dev = 3.792, 213.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=72 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03582785696390637;  // std dev = 2.241, 63.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.022559461500485767;  // std dev = 3.695, 236.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=76 */
%   | | | else return 0.04685412737790014;  // std dev = 2.177, 49.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.28706032930792663;  // std dev = 2.360, 82.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=76 */
%   | | | else return -0.13694423534529004;  // std dev = 0.006, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.022308015595054544;  // std dev = 2.247, 51.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.009060236444949231;  // std dev = 3.843, 290.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=93 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.741', 'seconds']
Parameter learned model CLL:-0.158441 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.993, 1, 72], 'false,true,false': [1.351, 2, 21], 'false,false': [0.0, 182, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.703, 185, 93]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.974, 154, 76], 'false,false,false,false': [2.717, 26, 17]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.94, 4, 76], 'true,false': [0.0, 159, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.678, 28, 17]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.224, 117, 62], 'false,false,false': [0.346, 69, 31]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.101, 1, 93], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.284, 183, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.792, 141, 72], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.241, 42, 21]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.695, 160, 76], 'false,false,false,false': [2.177, 32, 17]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.36, 6, 76], 'false,false,true,false': [0.006, 157, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.247, 34, 17]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.843, 197, 93]}]
{'': [nan, 0.22262046477925707], 'false': [0.030273437500001037, -2.049642507000289e-16], 'false,true': [0.013510977669354995, 0.07939508506616269]}
{'': [nan, 0.161606006196676], 'false': [nan, 0.1616060061966755], 'false,false': [nan, 0.161606006196676], 'false,false,false': [nan, 0.1616060061966755]}
{'': [nan, 0.1581591573489279], 'false': [nan, 0.15815915734892824], 'false,false': [nan, 0.15815915734892824], 'false,false,false': [0.15518660024460768, 0.17173584103236197]}
{'': [0.14935743711393965, 0.15942458167971135], 'false': [nan, 0.15942458167971135], 'false,false': [nan, 0.15942458167971135], 'false,false,false': [nan, 0.15942458167971135], 'true': [0.04705522709969312, -2.1226905628053308e-16]}
{'': [nan, 0.10683767936046895], 'false': [nan, 0.10683767936046894], 'false,false': [0.09968785586434792, 0.11950468535843786], 'false,false,true': [nan, 0.09968785586434792]}
{'': [nan, 0.1045367259290146], 'false': [nan, 0.1045367259290146], 'false,false': [0.012897368305426022, 0.00044070128695451077], 'false,false,false': [nan, 0.00044070128695445254]}
{'': [0.06749174183109014, 0.07974481140094342], 'false': [nan, 0.07974481140094342], 'false,false': [nan, 0.07974481140094342], 'false,false,false': [nan, 0.07974481140094342], 'true': [nan, 0.06749174183109014]}
{'': [nan, 0.06460173414455443], 'false': [nan, 0.06460173414455443], 'false,false': [nan, 0.06460173414455443], 'false,false,false': [0.057836870652054256, 0.09669477314554963]}
{'': [nan, 0.070040908246969], 'false': [nan, 0.07004090824696856], 'false,false': [0.06382139686837296, 0.09903079976562497], 'false,false,false': [nan, 0.09903079976562497], 'false,false,true': [0.06791752002202671, 2.2375197602162332e-07]}
{'': [nan, 0.05091982095995851], 'false': [nan, 0.05091982095995857], 'false,false': [nan, 0.05091982095995851]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 12.245
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.1418510649004884;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return 0.5376552303927724;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then if ( follows(G, A), follows(F, E) )
%   | | | then return 0.23745065957449762;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.7422198280150731;  // std dev = 0.102, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.058799161332135474;  // std dev = 0.831, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.12544463852839113;  // std dev = 3.33e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | | else return 0.026126012220607113;  // std dev = 2.338, 51.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=9 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.06658219118509659;  // std dev = 2.877, 66.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=15 */
%   | | | else return 0.26885045181663686;  // std dev = 1.633, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.5597993266423116;  // std dev = 0.084, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( tweets(A, E), follows(A, C) )
%   | | then return 0.3886997700796176;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.5799936028353265;  // std dev = 0.066, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.10248154489884397;  // std dev = 0.089, 83.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=1 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.6421296962705944;  // std dev = 0.994, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.12833903732869958;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.5497427206538619;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.164304160316371;  // std dev = 2.306, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | | | else return 0.06486628108882075;  // std dev = 2.279, 40.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.42729886969429315;  // std dev = 0.126, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5046178851166342;  // std dev = 0.300, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6472864545948969;  // std dev = 0.215, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.11894341587537834;  // std dev = 0.238, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.42527701528981277;  // std dev = 0.054, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10424626718287781;  // std dev = 0.034, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.05600367590321653;  // std dev = 0.591, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1209802791225206;  // std dev = 1.103, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.12928416501341972;  // std dev = 1.299, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.31770196816040347;  // std dev = 0.000793, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.25101404695274604;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.33694487031193326;  // std dev = 0.063, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.35579612911004405;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.45132428324696233;  // std dev = 0.059, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.09783249927593254;  // std dev = 0.085, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.29844170648144186;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.004977192005963998;  // std dev = 2.064, 55.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=12 */
%   | | | else return 0.08841656668663062;  // std dev = 1.949, 29.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.27891006026270376;  // std dev = 0.347, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.23991034992562088;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5415767718678683;  // std dev = 0.156, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.10873055395973981;  // std dev = 0.490, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.212588281355536;  // std dev = 0.076, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(D, E) )
%   | | | then return -0.07640426373348125;  // std dev = 0.003, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return -0.019631690238319347;  // std dev = 0.481, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.2735932054940606;  // std dev = 0.111, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.0874416269206174;  // std dev = 0.034, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3418402208555986;  // std dev = 0.332, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.12171947660563733;  // std dev = 0.030, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.030131298272196665;  // std dev = 0.407, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.09734770728702438;  // std dev = 1.381, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.17918867766371174;  // std dev = 0.067, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.21643312091131736;  // std dev = 0.251, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08575732732869538;  // std dev = 0.685, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.07160372953759427;  // std dev = 0.010, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return -0.03067951977467956;  // std dev = 0.717, 42.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=7 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.020175548346570198;  // std dev = 1.450, 57.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=13 */
%   | | | else return 0.016744209998321057;  // std dev = 1.564, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.14285254315189452;  // std dev = 0.637, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.23006888016718474;  // std dev = 0.191, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.26712924148721007;  // std dev = 0.069, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.08332017016291106;  // std dev = 0.240, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.02444827437990449;  // std dev = 0.937, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.41183879204060725;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10814641213626258;  // std dev = 0.065, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(J, A) )
%   | | then return 0.09467759889264282;  // std dev = 0.346, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.11694081704419779;  // std dev = 0.317, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.1355491712572211;  // std dev = 0.065, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( follows(A, E) )
%   | | then return 0.14421387534617885;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.18000628527338233;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.18916076018738112;  // std dev = 0.156, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.07551462742580306;  // std dev = 0.746, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.06503207496793205;  // std dev = 0.034, 119.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1179522441967582;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.016107544752978386;  // std dev = 1.196, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
%   | | | else return -0.030748466977014347;  // std dev = 1.282, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.374', 'seconds']
Refined model CLL: -0.10568


******************************************
Best model found
******************************************
Results 

CLL : -0.098678 

AUC ROC : 0.994495 

AUC PR : 0.444179 

Precision : 0.345506 

Recall : 0.97619 

F1 : 0.510373 

Total Learning Time : 12.245 

Total Inference Time : 8.087152481079102 

Total revision time: 25.095575130462645
Best scored revision CLL: -0.10568


Results 

CLL : -0.098678 

AUC ROC : 0.994495 

AUC PR : 0.444179 

Precision : 0.345506 

Recall : 0.97619 

F1 : 0.510373 

Total Learning Time : 25.122041023254393 

Total Inference Time : 8.087152481079102 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.94
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.7987429945054518;  // std dev = 2.376, 101.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=95 */
%   | | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18197004485973697;  // std dev = 7.612, 344.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=124 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12934911219178735;  // std dev = 6.870, 303.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=100 */
%   | | | else return 0.16673462265168626;  // std dev = 3.238, 64.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=24 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6434673470061358;  // std dev = 1.416, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   | else return -0.16466330284316935;  // std dev = 0.170, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1343685037612573;  // std dev = 3.196, 65.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=24 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07849955827945071;  // std dev = 4.862, 229.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=80 */
%   | | else return 0.06932570784226674;  // std dev = 0.342, 138.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=44 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4722224235639253;  // std dev = 2.299, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16067132200409373;  // std dev = 0.281, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.050464969427824684;  // std dev = 4.292, 261.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=95 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.023774384157106195;  // std dev = 2.526, 91.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.02963663729007309;  // std dev = 4.228, 289.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=100 */
%   | | | else return 0.024998433074090862;  // std dev = 2.779, 72.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3371607529437684;  // std dev = 1.406, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   | | | else return -0.1412048384064334;  // std dev = 0.025, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06944101678604257;  // std dev = 2.521, 62.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.014292215444511492;  // std dev = 4.374, 357.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=124 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.546', 'seconds']
Parameter learned model CLL:-0.1648 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.376, 6, 95], 'false,true,false': [1.79e-07, 0, 29], 'false,false': [0.0, 252, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.612, 220, 124]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.87, 203, 100], 'false,false,false,false': [3.238, 40, 24]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.416, 2, 100], 'true,false': [0.17, 188, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.196, 41, 24]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.862, 149, 80], 'false,false,false': [0.342, 94, 44]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.299, 5, 124], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.281, 237, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.292, 166, 95], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.526, 62, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.228, 189, 100], 'false,false,false,false': [2.779, 48, 24]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.406, 2, 100], 'false,false,true,false': [0.025, 194, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.521, 38, 24]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.374, 233, 124]}]
{'': [nan, 0.21923741125517654], 'false': [0.044023668639057364, -1.1983359630874705e-16], 'false,true': [0.05587687481619579, 1.1025663141105003e-15]}
{'': [nan, 0.1684474612830792], 'false': [nan, 0.16844746128308336], 'false,false': [nan, 0.1684474612830792], 'false,false,false': [nan, 0.16844746128308336]}
{'': [nan, 0.1573919199782167], 'false': [nan, 0.1573919199782172], 'false,false': [nan, 0.1573919199782172], 'false,false,false': [0.15578204866344103, 0.16385971457435045]}
{'': [0.15592617993343794, 0.15717742687100422], 'false': [nan, 0.15717742687100422], 'false,false': [nan, 0.15717742687100422], 'false,false,false': [nan, 0.15717742687100422], 'true': [0.019663890555857096, 0.00015342675269217597]}
{'': [nan, 0.1083656134079939], 'false': [nan, 0.10836561340799188], 'false,false': [0.10324457318731485, 0.11681105774202179], 'false,false,true': [nan, 0.10324457318731485]}
{'': [nan, 0.10607774987647563], 'false': [nan, 0.10607774987647563], 'false,false': [0.040975202441950506, 0.0003342709920644473], 'false,false,false': [nan, 0.00033427099206447355]}
{'': [0.07058705168014445, 0.07009343753426199], 'true': [nan, 0.07058705168014445], 'false': [nan, 0.07009343753426199], 'false,false': [nan, 0.07009343753426199], 'false,false,false': [nan, 0.07009343753426199]}
{'': [nan, 0.07092976751901049], 'false': [nan, 0.07092976751901049], 'false,false': [nan, 0.07092976751901049], 'false,false,false': [0.061866166624324585, 0.10729283217430764]}
{'': [nan, 0.06630864339605443], 'false': [nan, 0.06630864339605515], 'false,false': [0.05836714297057463, 0.1024882648600362], 'false,false,false': [nan, 0.1024882648600362], 'false,false,true': [0.019394136014286554, 3.27033427450579e-06]}
{'': [nan, 0.05358971128995911], 'false': [nan, 0.05358971128995898], 'false,false': [nan, 0.05358971128995911]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 14.685
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.7561081187729816;  // std dev = 2.119, 49.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=44 */
%   | | | else return 0.825890870583383;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.14185106490048816;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, C) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.7054074419942413;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else return 0.7237829883024793;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.7351072366926145;  // std dev = 0.039, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.1188719109848779;  // std dev = 0.082, 109.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=1 */
%   | | else if ( tweets(A, H), follows(A, F) )
%   | | | then return 0.1647993665431885;  // std dev = 2.677, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | | else return -0.010742385930861856;  // std dev = 1.765, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.12574721439411712;  // std dev = 2.349, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
%   | | | else return 0.21252258176734715;  // std dev = 2.927, 50.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=20 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return 0.5765317922182297;  // std dev = 0.065, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return 0.5002796574646019;  // std dev = 0.237, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.10722068083016048;  // std dev = 0.087, 103.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=1 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.6523276515076118;  // std dev = 0.986, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.13493990148808288;  // std dev = 0.082, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6551479570131192;  // std dev = 0.260, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.14221020648595323;  // std dev = 0.023, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.13392353669766366;  // std dev = 2.113, 29.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
%   | | | else return 0.03978759568569146;  // std dev = 1.773, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4361288600526923;  // std dev = 0.067, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.27884001041819045;  // std dev = 0.932, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5544519042390434;  // std dev = 0.077, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.11928395200027891;  // std dev = 0.316, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4324066184294415;  // std dev = 0.008, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10266632129293111;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.23406299364447566;  // std dev = 0.689, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.15636973443844113;  // std dev = 0.972, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.22341039465802173;  // std dev = 1.477, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.33499888397590166;  // std dev = 0.085, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.4527467317821129;  // std dev = 0.227, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2714610924876981;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08907029216883756;  // std dev = 0.943, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.42292016237755004;  // std dev = 0.157, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09841431762265802;  // std dev = 0.121, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.005937137279887183;  // std dev = 2.364, 90.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=21 */
%   | | | else return 0.2061515105840218;  // std dev = 1.641, 19.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), tweets(E, G) )
%   | | | then return 0.2716895256390928;  // std dev = 0.292, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.07356238254995735;  // std dev = 0.885, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.15340454606440102;  // std dev = 1.044, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then return 0.29432252164674566;  // std dev = 0.222, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.4086382985045722;  // std dev = 0.046, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.529707348115805;  // std dev = 0.108, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.10604685564579318;  // std dev = 0.453, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then return 0.22382105455124576;  // std dev = 0.081, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | else return -0.0820425584025835;  // std dev = 0.105, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), tweets(A, H) )
%   | | | then return -0.12454518790571907;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.26577133328659885;  // std dev = 1.029, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return -0.10666327374851696;  // std dev = 0.235, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3276462090211513;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.15422915999828593;  // std dev = 0.082, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.2058396156344744;  // std dev = 0.424, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06054786123894364;  // std dev = 1.277, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.1800155282963424;  // std dev = 0.049, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( tweets(A, E), follows(A, C) )
%   | | then if ( follows(A, F), follows(F, C) )
%   | | | then return 0.1696331878965808;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.4715809109454154;  // std dev = 0.786, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.1858898541664496;  // std dev = 0.061, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, G) )
%   | | then return 0.2412951757547841;  // std dev = 0.066, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.019630664739467618;  // std dev = 0.888, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(I, A) )
%   | | then return -0.05493429844237473;  // std dev = 0.094, 188.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=15 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.0029007613206820998;  // std dev = 1.565, 78.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=21 */
%   | | | else return 0.02151244991565094;  // std dev = 1.378, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.19678595327820395;  // std dev = 0.061, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.09917440707160015;  // std dev = 0.880, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.021217356418548234;  // std dev = 0.762, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.08291464408253742;  // std dev = 0.296, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.07595157710576667;  // std dev = 0.267, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.0693663758492836;  // std dev = 0.016, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.01604126322742785;  // std dev = 0.521, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.12386920956754673;  // std dev = 0.471, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.027928549853376554;  // std dev = 1.291, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.135437670589528;  // std dev = 0.118, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.21737214427275675;  // std dev = 0.261, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.03445046497364793;  // std dev = 0.735, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), follows(G, A) )
%   | | | then return -0.06284380512345304;  // std dev = 0.023, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | | else return -0.02355300010917818;  // std dev = 1.277, 68.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=15 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.02583922890097822;  // std dev = 1.310, 85.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=18 */
%   | | | else return 0.007440570066881855;  // std dev = 1.528, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.439', 'seconds']
Refined model CLL: -0.106366


******************************************
Best model found
******************************************
Results 

CLL : -0.098986 

AUC ROC : 0.993505 

AUC PR : 0.359805 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 14.685 

Total Inference Time : 20.1899311542511 

Total revision time: 40.62824010848999
Best scored revision CLL: -0.106366


Results 

CLL : -0.098986 

AUC ROC : 0.993505 

AUC PR : 0.359805 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 40.65470600128174 

Total Inference Time : 20.1899311542511 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.399
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8327252062859514;  // std dev = 1.710, 118.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=115 */
%   | | else return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.1418510649004877;  // std dev = 9.31e-09, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17137741174561427;  // std dev = 8.564, 444.000 (wgt'ed) examples reached here.  /* #neg=288 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13534937328746324;  // std dev = 7.691, 378.000 (wgt'ed) examples reached here.  /* #neg=250 #pos=128 */
%   | | | else return 0.11460736272307882;  // std dev = 3.663, 89.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6203670184047174;  // std dev = 2.196, 133.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=128 */
%   | else return -0.16312959495026286;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0964129863930985;  // std dev = 3.619, 89.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04897655858691521;  // std dev = 5.487, 322.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=97 */
%   | | else return 0.09501894390738667;  // std dev = 0.348, 170.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48397688569515424;  // std dev = 2.336, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15586476742401725;  // std dev = 0.253, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04522668758091025;  // std dev = 4.791, 330.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03359227644092239;  // std dev = 2.848, 125.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.030485020136066496;  // std dev = 4.741, 377.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=128 */
%   | | | else return 0.046504147186450635;  // std dev = 2.859, 85.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.33523623244563905;  // std dev = 1.723, 131.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=128 */
%   | | | else return -0.1393053628325387;  // std dev = 0.028, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08312705893825184;  // std dev = 2.728, 69.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.00918179561967424;  // std dev = 4.904, 470.000 (wgt'ed) examples reached here.  /* #neg=314 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.468', 'seconds']
Parameter learned model CLL:-0.161483 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.71, 3, 115], 'false,true,false': [2.46e-07, 0, 41], 'false,false': [9.31e-09, 322, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.564, 288, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.691, 250, 128], 'false,false,false,false': [3.663, 61, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.196, 5, 128], 'true,false': [0.0, 239, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.619, 61, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.487, 225, 97], 'false,false,false': [0.348, 111, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.336, 5, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.253, 303, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.791, 215, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.848, 84, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.741, 249, 128], 'false,false,false,false': [2.859, 57, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.723, 3, 128], 'false,false,true,false': [0.028, 241, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.728, 41, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.904, 314, 156]}]
{'': [nan, 0.21913805697589778], 'false': [0.018511925952302145, 8.550786028168908e-17], 'false,true': [0.024777362826777165, 1.4730764034050857e-15]}
{'': [nan, 0.16516786084390842], 'false': [nan, 0.165167860843913], 'false,false': [nan, 0.16516786084390842], 'false,false,false': [nan, 0.165167860843913]}
{'': [nan, 0.15544805455018876], 'false': [nan, 0.15544805455018476], 'false,false': [nan, 0.15544805455018476], 'false,false,false': [0.1564679614598505, 0.15076807672103826]}
{'': [0.15396726635754562, 0.14717359335076918], 'true': [0.036252277186350566, -2.564197111268144e-16], 'false': [nan, 0.14717359335076918], 'false,false': [nan, 0.14717359335076918], 'false,false,false': [nan, 0.14717359335076918]}
{'': [nan, 0.10343567092318247], 'false': [nan, 0.10343567092318218], 'false,false': [0.09348450277662712, 0.12089693907531374], 'false,false,true': [nan, 0.09348450277662712]}
{'': [nan, 0.10465893149422681], 'false': [nan, 0.10465893149422681], 'false,false': [0.03388482947115345, 0.00021115372803666492], 'false,false,false': [nan, 0.00021115372803670596]}
{'': [0.06955826874504818, 0.06489849958374044], 'true': [nan, 0.06955826874504818], 'false': [nan, 0.06489849958374044], 'false,false': [nan, 0.06489849958374044], 'false,false,false': [nan, 0.06489849958374044]}
{'': [nan, 0.06637340220553112], 'false': [nan, 0.06637340220553112], 'false,false': [nan, 0.06637340220553112], 'false,false,false': [0.05961116112657903, 0.09615653009754581]}
{'': [nan, 0.06734785234660219], 'false': [nan, 0.06734785234660205], 'false,false': [0.05936083244430055, 0.10782660914150304], 'false,false,false': [nan, 0.10782660914150304], 'false,false,true': [0.022671800534462983, 3.150234875570987e-06]}
{'': [nan, 0.05116933692600723], 'false': [nan, 0.05116933692600722], 'false,false': [nan, 0.05116933692600723]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 13.523
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7152917922423694;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.8581489350995117;  // std dev = 1.88e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.14185106490048777;  // std dev = 1.37e-07, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.7194734122109542;  // std dev = 8.43e-08, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E), follows(A, C) )
%   | | then return 0.608362301099843;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.7194734122109543;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.11521104575392783;  // std dev = 0.102, 143.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=2 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.7261187744165789;  // std dev = 0.054, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.1254446385283911;  // std dev = 7.15e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7404063031586718;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13772655760353625;  // std dev = 3.056, 61.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=19 */
%   | | | else return 0.11432940289763945;  // std dev = 3.277, 74.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, C), follows(D, A) )
%   | | then return 0.5337495826829015;  // std dev = 0.148, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | else return 0.5627007048245359;  // std dev = 0.062, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.4928664367462845;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then return 0.595007696949592;  // std dev = 0.052, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.02797907649635419;  // std dev = 0.763, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.10709643437655732;  // std dev = 0.852, 137.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=1 */
%   | | | else return -0.0025004079151401165;  // std dev = 2.465, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.14308873786632442;  // std dev = 2.956, 55.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=19 */
%   | | | else return 0.09508825961334542;  // std dev = 3.244, 75.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4084691908641553;  // std dev = 0.995, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.27488783332124844;  // std dev = 0.920, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4020360595430576;  // std dev = 0.876, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.5914099746720316;  // std dev = 1.387, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | else return -0.12110587207167282;  // std dev = 0.357, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.43278710319860436;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(I, A), tweets(A, J) )
%   | | then return -0.07395852224072944;  // std dev = 0.137, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.023025028209200493;  // std dev = 0.594, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11277095658330306;  // std dev = 2.246, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.32842807945681474;  // std dev = 0.042, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else return 0.2938882119169648;  // std dev = 0.201, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return 0.14559602528436172;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4482150023808136;  // std dev = 0.313, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.09606850196270711;  // std dev = 0.059, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.4250536773222992;  // std dev = 1.356, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return -0.1525747420408624;  // std dev = 0.103, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.08470143192020169;  // std dev = 2.223, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | | | else return 0.1065463055498036;  // std dev = 1.761, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.2641768683609551;  // std dev = 0.086, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | | else return 0.20151866377761107;  // std dev = 0.963, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.32604953296663913;  // std dev = 0.247, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.3974343009948216;  // std dev = 0.119, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.26372144594811553;  // std dev = 0.048, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.4120667954719944;  // std dev = 3.65e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.5479554877114209;  // std dev = 0.244, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.1064975175160681;  // std dev = 0.483, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.21636782895971413;  // std dev = 0.056, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else return 0.18365896221618555;  // std dev = 0.191, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.06990699477577078;  // std dev = 0.060, 127.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.20900017467083554;  // std dev = 1.003, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.08395835954753757;  // std dev = 0.016, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.31521553423415644;  // std dev = 0.361, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.1144289364595644;  // std dev = 1.204, 89.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.006874697639184685;  // std dev = 0.929, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.06453406244701738;  // std dev = 1.400, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then return 0.17816729300260017;  // std dev = 2.79e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(D, A), follows(A, C) )
%   | | | then return 0.029284003425408562;  // std dev = 1.599, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return 0.1893983775694734;  // std dev = 0.040, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.1905618226059448;  // std dev = 0.044, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(E, A) )
%   | then return -0.0486874294281697;  // std dev = 0.114, 228.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=23 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.1903506063490403;  // std dev = 0.991, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.10380509736263242;  // std dev = 3.16e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.039825461685055887;  // std dev = 1.214, 36.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=14 */
%   | | | else return 0.058877623055338085;  // std dev = 1.730, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.16253884591416348;  // std dev = 0.088, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.24124747791125004;  // std dev = 0.068, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.08140796661589547;  // std dev = 0.277, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.0913553655266428;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return -0.16776948429768526;  // std dev = 0.820, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return -0.07180568099326305;  // std dev = 9.13e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.02418209406414537;  // std dev = 0.352, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.015823153148734767;  // std dev = 0.883, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.018147005113704602;  // std dev = 1.630, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then return 0.14151074613922027;  // std dev = 0.062, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(C, F), follows(F, A) )
%   | | | then return -0.06719996374418699;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.14585068372884177;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1478359969366865;  // std dev = 0.080, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(G, A) )
%   | then return -0.04749330599775002;  // std dev = 0.105, 248.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.15994803879863595;  // std dev = 1.106, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.10011335374975174;  // std dev = 0.097, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.0015945203673568685;  // std dev = 0.997, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return -0.020342117162078392;  // std dev = 1.640, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.744', 'seconds']
Refined model CLL: -0.100637


******************************************
Best model found
******************************************
Results 

CLL : -0.096137 

AUC ROC : 0.994219 

AUC PR : 0.432544 

Precision : 0.345205 

Recall : 1.0 

F1 : 0.513238 

Total Learning Time : 13.523 

Total Inference Time : 12.617700576782227 

Total revision time: 33.280834266662595
Best scored revision CLL: -0.100637


Results 

CLL : -0.096137 

AUC ROC : 0.994219 

AUC PR : 0.432544 

Precision : 0.345205 

Recall : 1.0 

F1 : 0.513238 

Total Learning Time : 33.30730015945434 

Total Inference Time : 12.617700576782227 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 0.992
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10667570508131916;  // std dev = 3.598, 91.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.0850627094345177;  // std dev = 3.503, 90.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=24 */
%   | | | else return 0.07114485921493716;  // std dev = 0.723, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6792032446347886;  // std dev = 4.21e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.1480329900892825;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1298852086775039;  // std dev = 0.676, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04644291141377736;  // std dev = 2.384, 64.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=18 */
%   | | else return 0.1255752959839416;  // std dev = 0.330, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5061034599882925;  // std dev = 0.128, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14162638427989452;  // std dev = 0.078, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.039595575917414486;  // std dev = 1.842, 60.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=19 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08229542514937464;  // std dev = 0.911, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.013446415916964766;  // std dev = 2.048, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.002199210827838735;  // std dev = 0.569, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3624506334027639;  // std dev = 0.059, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.12943533320782602;  // std dev = 0.041, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08401664843157187;  // std dev = 0.615, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01585175846085224;  // std dev = 1.708, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.454', 'seconds']
Parameter learned model CLL:-0.149216 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 19], 'false,true,false': [0.0, 0, 6], 'false,false': [7.21e-09, 48, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.598, 66, 25]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.503, 66, 24], 'false,false,false,false': [0.723, 3, 1]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [4.21e-08, 0, 24], 'true,false': [0.0, 42, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.676, 2, 1]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.384, 46, 18], 'false,false,false': [0.33, 11, 7]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.128, 0, 25], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.078, 55, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.842, 41, 19], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.911, 8, 6]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.048, 59, 24], 'false,false,false,false': [0.569, 3, 1]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.059, 0, 24], 'false,false,true,false': [0.041, 44, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.615, 7, 1]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.708, 51, 25]}]
{'': [nan, 0.22518296115594033], 'false': [7.105427357601002e-16, 5.3198186596622086e-17], 'false,true': [-2.8047739569477637e-16, -1.4802973661668753e-16]}
{'': [nan, 0.14224281434217306], 'false': [nan, 0.14224281434217326], 'false,false': [nan, 0.14224281434217306], 'false,false,false': [nan, 0.14224281434217326]}
{'': [nan, 0.1361382644751458], 'false': [nan, 0.136138264475146], 'false,false': [nan, 0.136138264475146], 'false,false,false': [0.13636941453321777, 0.13075192444591147]}
{'': [0.1583549922738247, 0.15254136724839615], 'true': [7.401486830834377e-17, 0.0], 'false': [nan, 0.15254136724839615], 'false,false': [nan, 0.15254136724839615], 'false,false,false': [nan, 0.15254136724839615]}
{'': [nan, 0.09425424029988495], 'false': [nan, 0.09425424029988491], 'false,false': [0.08880298788778959, 0.10874910775190144], 'false,false,true': [nan, 0.08880298788778959]}
{'': [nan, 0.0904189766704854], 'false': [nan, 0.0904189766704854], 'false,false': [0.0006542086556709137, 0.00011053421379342187], 'false,false,false': [nan, 0.00011053421379344609]}
{'': [0.056565674043382384, 0.059251962168483], 'false': [nan, 0.059251962168483], 'false,false': [nan, 0.059251962168483], 'false,false,false': [nan, 0.059251962168483], 'true': [nan, 0.056565674043382384]}
{'': [nan, 0.05192220447386215], 'false': [nan, 0.05192220447386215], 'false,false': [nan, 0.05192220447386215], 'false,false,false': [0.0505101217192562, 0.08098939050771013]}
{'': [nan, 0.056032049991201274], 'false': [nan, 0.056032049991201364], 'false,false': [0.055332117057977706, 0.0472789888589982], 'false,false,true': [0.00014597802505419052, 3.8893034242688934e-05], 'false,false,false': [nan, 0.0472789888589982]}
{'': [nan, 0.03839117883331273], 'false': [nan, 0.03839117883331273], 'false,false': [nan, 0.03839117883331273]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 11.01
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.7194734122109542;  // std dev = 1.49e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.3861400788776211;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.21252258176734692;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.5792247285038032;  // std dev = 0.107, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, E), follows(A, F) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.6354595655938855;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11231637819360642;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.11024456011969057;  // std dev = 0.545, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.027289422000507307;  // std dev = 0.759, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(E, A) )
%   | | | then return 0.41627274762592686;  // std dev = 0.009, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.14975492984449956;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.4800734148057263;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.48328993672678944;  // std dev = 0.228, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.18065305191124995;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.14721442950054273;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.03916108205454086;  // std dev = 0.564, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.3374199540834371;  // std dev = 0.055, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.33085106738032;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.18341426556660134;  // std dev = 0.806, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.092691276189261;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.12809703669068703;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3065541546459074;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14654483490068576;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.09154926040356874;  // std dev = 0.768, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, F) )
%   | | | then return 0.2522436911888483;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.24899660869112916;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(E, A), follows(E, D) )
%   | | | then return 0.2933224096262484;  // std dev = 0.085, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.37103433750082865;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2013607008716217;  // std dev = 0.624, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, G), follows(A, H) )
%   | then return -0.0851847513883968;  // std dev = 1.90e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, I), follows(I, A) )
%   | | then return -0.13715455529868822;  // std dev = 9.13e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.11760449348656833;  // std dev = 0.049, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then return 0.20768686838372893;  // std dev = 1.05e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.20538564538683757;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.028195664056573626;  // std dev = 0.901, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then if ( tweets(A, G), tweets(E, G) )
%   | | | then return -0.057489798402598075;  // std dev = 0.330, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return -0.10740276379094743;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(F, E) )
%   | | | then return 0.06814729094697836;  // std dev = 0.526, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return -0.034940808644810174;  // std dev = 0.247, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05917975707392928;  // std dev = 0.626, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then return 0.17521333730949676;  // std dev = 0.000695, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.2754198374832957;  // std dev = 0.111, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F) )
%   | | then return -0.07609001961135163;  // std dev = 0.003, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.10866875319799733;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.14570535379735763;  // std dev = 0.257, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( follows(G, I), recursion_accounttype(I, B) )
%   | | | then return 0.18606280794274022;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11304989520242337;  // std dev = 0.049, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( tweets(A, J) )
%   | | then return -0.08317996528614569;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09442399828684475;  // std dev = 0.624, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.16030444322413523;  // std dev = 0.122, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.022078586717826847;  // std dev = 0.766, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.20317498623436672;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.22341333196112692;  // std dev = 0.221, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.07111198465657563;  // std dev = 0.020, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.07705254967710838;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.1021981163084113;  // std dev = 0.050, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.14476261480248265;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.0035480630192693333;  // std dev = 0.354, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.13417660238521573;  // std dev = 0.006, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.21111096425010123;  // std dev = 0.251, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.172277013244301;  // std dev = 0.021, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18936310879106502;  // std dev = 0.199, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.06677932162458074;  // std dev = 0.019, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.1008387940567175;  // std dev = 0.067, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.03712813782625005;  // std dev = 0.333, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '40.783', 'seconds']
Refined model CLL: -0.105679


******************************************
Best model found
******************************************
Results 

CLL : -0.104567 

AUC ROC : 0.994543 

AUC PR : 0.403823 

Precision : 0.335648 

Recall : 0.929487 

F1 : 0.493197 

Total Learning Time : 11.01 

Total Inference Time : 7.111279249191284 

Total revision time: 20.5006674785614
Best scored revision CLL: -0.105679


Results 

CLL : -0.104567 

AUC ROC : 0.994543 

AUC PR : 0.403823 

Precision : 0.335648 

Recall : 0.929487 

F1 : 0.493197 

Total Learning Time : 20.52713337135315 

Total Inference Time : 7.111279249191284 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.321
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.832507909458486;  // std dev = 0.987, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.14185106490048763;  // std dev = 8.33e-09, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1365396061967272;  // std dev = 4.991, 162.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=50 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.14042891182275738;  // std dev = 4.677, 139.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=47 */
%   | | | else return 0.11012287342253882;  // std dev = 1.214, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6237476380104685;  // std dev = 1.387, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | else return -0.15910766142136812;  // std dev = 7.88e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17512494018712177;  // std dev = 1.150, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0804924633951349;  // std dev = 3.194, 103.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=35 */
%   | | else return 0.10163352408816037;  // std dev = 0.331, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46191095409665756;  // std dev = 1.406, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15175909820801325;  // std dev = 0.100, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05072609376124685;  // std dev = 2.645, 107.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=38 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03538551615237839;  // std dev = 1.429, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.024841478564066027;  // std dev = 3.083, 135.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=47 */
%   | | | else return 0.0011155442916497686;  // std dev = 0.978, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3229926497964044;  // std dev = 1.383, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | | else return -0.13967551694148533;  // std dev = 0.003, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10413430718170805;  // std dev = 0.867, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.003713512539958267;  // std dev = 2.950, 151.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=50 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.456', 'seconds']
Parameter learned model CLL:-0.155351 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.987, 1, 38], 'false,true,false': [0.0, 0, 12], 'false,false': [8.33e-09, 106, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.991, 112, 50]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.677, 92, 47], 'false,false,false,false': [1.214, 7, 3]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.387, 2, 47], 'true,false': [7.88e-08, 88, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.15, 4, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.194, 68, 35], 'false,false,false': [0.331, 26, 15]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.406, 2, 50], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.1, 103, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.645, 69, 38], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.429, 24, 12]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.083, 88, 47], 'false,false,false,false': [0.978, 8, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.383, 2, 47], 'false,false,true,false': [0.003, 99, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.867, 4, 3]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.95, 101, 50]}]
{'': [nan, 0.2170473447198676], 'false': [0.019223375624760057, 6.70323335622736e-17], 'false,true': [0.024983563445103548, -1.4802973661668753e-16]}
{'': [nan, 0.1537455584005136], 'false': [nan, 0.1537455584005135], 'false,false': [nan, 0.1537455584005136], 'false,false,false': [nan, 0.1537455584005135]}
{'': [nan, 0.15678602820300055], 'false': [nan, 0.15678602820300044], 'false,false': [nan, 0.15678602820300044], 'false,false,false': [0.1574005404226948, 0.14738749372556742]}
{'': [0.15484354883227053, 0.18892661954577503], 'false': [nan, 0.18892661954577503], 'false,false': [nan, 0.18892661954577503], 'false,false,false': [nan, 0.18892661954577503], 'true': [0.039266470079862684, 7.065055611250996e-17]}
{'': [nan, 0.10208331237679086], 'false': [nan, 0.10208331237679097], 'false,false': [0.09906555800628816, 0.10934481075461254], 'false,false,true': [nan, 0.09906555800628816]}
{'': [nan, 0.09677552091088683], 'false': [nan, 0.09677552091088683], 'false,false': [0.03802398380576993, 9.630709360582094e-05], 'false,false,false': [nan, 9.63070936058382e-05]}
{'': [0.06536162564852671, 0.05675196814655614], 'true': [nan, 0.06536162564852671], 'false': [nan, 0.05675196814655614], 'false,false': [nan, 0.05675196814655614], 'false,false,false': [nan, 0.05675196814655614]}
{'': [nan, 0.07168762095980642], 'false': [nan, 0.07168762095980642], 'false,false': [nan, 0.07168762095980642], 'false,false,false': [0.070395004875442, 0.08703103745204178]}
{'': [nan, 0.06280573646174899], 'false': [nan, 0.06280573646174908], 'false,false': [0.06032468019138892, 0.10741965109575433], 'false,false,false': [nan, 0.10741965109575433], 'false,false,true': [0.03901494324892915, 1.0080209684244008e-07]}
{'': [nan, 0.057622790691309045], 'false': [nan, 0.05762279069130903], 'false,false': [nan, 0.057622790691309045]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 10.513
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.8196873966379734;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7288381062812517;  // std dev = 0.079, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( follows(A, F), tweets(D, E) )
%   | | | then return -0.09904094944278684;  // std dev = 0.832, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | | else return -0.1254446385283914;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.7210127776242138;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, H) )
%   | | then return 0.38150619191521606;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.04353897161947778;  // std dev = 1.690, 25.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=5 */
%   | | | else return 0.090889198104098;  // std dev = 1.285, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.574411123621346;  // std dev = 0.216, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(D, A), follows(A, E) )
%   | then if ( follows(F, D), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.5917934423588218;  // std dev = 0.165, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7106025138079604;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.11671006154687674;  // std dev = 0.055, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.553052787463201;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.019879544715511496;  // std dev = 1.245, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | | else return 0.28505343862763444;  // std dev = 1.026, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.3372705423345247;  // std dev = 1.679, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   | | | else return 0.01286285479795618;  // std dev = 1.044, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(G, A), tweets(A, H) )
%   | | | then return 0.44873317208210073;  // std dev = 0.181, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6097831382454267;  // std dev = 0.134, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.11390265760175132;  // std dev = 0.221, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.4157998021946492;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.11034958238364911;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( tweets(C, E), tweets(A, E) )
%   | | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | | then return 0.28197307079438116;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.09069307547010044;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.35174963126307923;  // std dev = 0.046, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.4883269281579587;  // std dev = 0.110, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, F), follows(G, A) )
%   | then return -0.042917411940710214;  // std dev = 0.174, 56.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=8 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.44569210183656044;  // std dev = 0.122, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12702663125874777;  // std dev = 0.113, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.00672731923861046;  // std dev = 0.561, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.027494819152158297;  // std dev = 0.772, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.28591697259266524;  // std dev = 0.117, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.3447180459939707;  // std dev = 0.179, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.41922596157841924;  // std dev = 0.088, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.05914477641605671;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.3376184298003235;  // std dev = 0.115, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.26648445788625175;  // std dev = 0.704, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.10087117847464386;  // std dev = 0.239, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.23422830424575608;  // std dev = 0.112, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.04795234639751496;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.0829665434029856;  // std dev = 0.107, 46.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=1 */
%   | | else if ( tweets(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.24216588232453934;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08004785470999941;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.2556904860831297;  // std dev = 0.087, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08652499972260566;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.02024119382881324;  // std dev = 0.691, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return -0.05169497562309321;  // std dev = 1.071, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.19712916427277932;  // std dev = 0.106, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return -0.10447623739578478;  // std dev = 0.867, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.09533437978201419;  // std dev = 0.368, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.07577017199388372;  // std dev = 0.013, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.25092179636951945;  // std dev = 0.148, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10136308338562924;  // std dev = 0.104, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.037077442330486106;  // std dev = 0.436, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 9.889013979397677E-4;  // std dev = 0.892, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.14117717908753818;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.0333632419612837;  // std dev = 1.343, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.25439658846179053;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.40827665038972083;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.07921300829225983;  // std dev = 0.203, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.18407220977718264;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.07585466535219704;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(C, A) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( tweets(C, D), tweets(E, F) )
%   | | | then return 0.03758095855499434;  // std dev = 1.307, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return 0.13487442104532119;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.17012789937243308;  // std dev = 0.096, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.21064991322413656;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, G), follows(A, H) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then return -0.05035783960932705;  // std dev = 0.076, 71.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=4 */
%   | | else return -0.014332625527901901;  // std dev = 0.135, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | else if ( follows(J, A) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.15332437369692603;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.0687384484357679;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.08771210525523145;  // std dev = 0.521, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '33.636', 'seconds']
Refined model CLL: -0.100153


******************************************
Best model found
******************************************
Results 

CLL : -0.102629 

AUC ROC : 0.995365 

AUC PR : 0.457163 

Precision : 0.344498 

Recall : 0.923077 

F1 : 0.501742 

Total Learning Time : 10.513 

Total Inference Time : 10.747983932495117 

Total revision time: 24.54361356163025
Best scored revision CLL: -0.100153


Results 

CLL : -0.102629 

AUC ROC : 0.995365 

AUC PR : 0.457163 

Precision : 0.344498 

Recall : 0.923077 

F1 : 0.501742 

Total Learning Time : 24.570079454421997 

Total Inference Time : 10.747983932495117 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.679
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8230612158012668;  // std dev = 1.389, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | else return 0.8105298874804645;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return -0.14185106490048802;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16451595008469022;  // std dev = 6.014, 219.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=75 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1188183246763571;  // std dev = 5.864, 224.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=71 */
%   | | | else return 0.0945840832960416;  // std dev = 1.415, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6401703137870263;  // std dev = 1.394, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | else return -0.15996120070968325;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11955595226987199;  // std dev = 1.354, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07163046588942049;  // std dev = 3.861, 156.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=51 */
%   | | else return 0.05666145790967726;  // std dev = 0.317, 80.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=24 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.44422125291660997;  // std dev = 2.114, 80.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=75 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14954777007505518;  // std dev = 0.081, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04362868844700951;  // std dev = 3.316, 159.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=55 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05109662657229768;  // std dev = 1.889, 58.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=20 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.031800585467390424;  // std dev = 3.636, 212.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=71 */
%   | | | else return -0.015206593509649004;  // std dev = 1.199, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.35609828860476156;  // std dev = 0.994, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | | | else return -0.1390863201428394;  // std dev = 0.005, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10840430572073352;  // std dev = 1.056, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0018046144870342566;  // std dev = 3.204, 245.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=75 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.530', 'seconds']
Parameter learned model CLL:-0.153417 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.389, 2, 55], 'false,true,false': [0.976, 1, 20], 'false,false': [0.0, 145, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.014, 144, 75]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.864, 153, 71], 'false,false,false,false': [1.415, 10, 4]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.394, 2, 71], 'true,false': [0.0, 148, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.354, 8, 4]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.861, 105, 51], 'false,false,false': [0.317, 56, 24]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.114, 5, 75], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.081, 125, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.316, 104, 55], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.889, 38, 20]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.636, 141, 71], 'false,false,false,false': [1.199, 14, 4]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.994, 1, 71], 'false,false,true,false': [0.005, 151, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.056, 6, 4]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.204, 170, 75]}]
{'': [nan, 0.22320979710028363], 'false': [0.03698224852070899, -9.800589458760002e-17], 'false,true': [0.03385657125269298, 0.04535147392290242]}
{'': [nan, 0.16517522490662348], 'false': [nan, 0.16517522490662329], 'false,false': [nan, 0.16517522490662348], 'false,false,false': [nan, 0.16517522490662329]}
{'': [nan, 0.15295177469557897], 'false': [nan, 0.1529517746955813], 'false,false': [nan, 0.1529517746955813], 'false,false,false': [0.15353537359564928, 0.14306144080716915]}
{'': [0.15041108937139946, 0.15266954628811324], 'false': [nan, 0.15266954628811324], 'false,false': [nan, 0.15266954628811324], 'false,false,false': [nan, 0.15266954628811324], 'true': [0.026615906336454265, -2.4304882430983155e-16]}
{'': [nan, 0.09722566932351079], 'false': [nan, 0.09722566932351065], 'false,false': [0.09553762982748952, 0.10036923147980277], 'false,false,true': [nan, 0.09553762982748952]}
{'': [nan, 0.1057309584107887], 'false': [nan, 0.1057309584107887], 'false,false': [0.05587773181159741, 5.1988248134897216e-05], 'false,false,false': [nan, 5.1988248134883006e-05]}
{'': [0.06916879480922597, 0.06150822111334013], 'true': [nan, 0.06916879480922597], 'false': [nan, 0.06150822111334013], 'false,false': [nan, 0.06150822111334013], 'false,false,false': [nan, 0.06150822111334013]}
{'': [nan, 0.06388767154057388], 'false': [nan, 0.06388767154057388], 'false,false': [nan, 0.06388767154057388], 'false,false,false': [0.06235964709569356, 0.0798476600932111]}
{'': [nan, 0.06065026451674512], 'false': [nan, 0.06065026451674503], 'false,false': [0.058043730778223376, 0.11142980992550673], 'false,false,false': [nan, 0.11142980992550673], 'false,false,true': [0.013736443151816349, 1.5414313703000863e-07]}
{'': [nan, 0.04190578720836812], 'false': [nan, 0.04190578720836823], 'false,false': [nan, 0.04190578720836812]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 10.754
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.8211118980624748;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.8581489350995121;  // std dev = 8.43e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.14185106490048785;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.6947871421706874;  // std dev = 0.171, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return 0.7194734122109543;  // std dev = 5.96e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.38861145339323694;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7208214346740177;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.12544463852839122;  // std dev = 6.99e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.15619471171805724;  // std dev = 1.195, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.29701438684128156;  // std dev = 1.195, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5637977797906502;  // std dev = 0.048, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.5687228890537905;  // std dev = 0.102, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.11231637819360617;  // std dev = 9.54e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5888596173039234;  // std dev = 0.082, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.19616018557260942;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.07850242496489543;  // std dev = 1.436, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( tweets(E, G), recursion_accounttype(F, B) )
%   | | | then return 0.4309335477108774;  // std dev = 0.223, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.08162367212316606;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.6224985567874798;  // std dev = 0.117, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10893676737729477;  // std dev = 0.213, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4214719374865227;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32687887934311444;  // std dev = 0.108, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return -0.010676730525257824;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.32836084681445565;  // std dev = 0.097, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.09210945056253744;  // std dev = 0.002, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.32773237750600526;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.008278274105555929;  // std dev = 0.930, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.10720856206589416;  // std dev = 1.248, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, F) )
%   | | then return 0.26265964560257493;  // std dev = 0.126, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.16542503014310297;  // std dev = 0.963, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.012656118541667588;  // std dev = 0.877, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.27529655265455355;  // std dev = 0.064, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.44225403520864626;  // std dev = 0.082, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.095172707918231;  // std dev = 0.301, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( tweets(E, D), follows(E, A) )
%   | | | then return 0.21186911583009463;  // std dev = 0.022, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.1212522980510905;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.22164500577614085;  // std dev = 0.048, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.22770237525358034;  // std dev = 0.079, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( tweets(A, F), follows(G, A) )
%   | then return -0.05880351245896598;  // std dev = 0.135, 111.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=12 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.27082137501037246;  // std dev = 0.119, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09117139489024773;  // std dev = 0.172, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.037492744280354755;  // std dev = 0.782, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return -0.042712371181854336;  // std dev = 0.950, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.18572669063291872;  // std dev = 0.084, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(C, D), follows(A, E) )
%   | | | then return 0.024799066408567695;  // std dev = 1.296, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return -0.28795911960972276;  // std dev = 1.024, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.19902158749920212;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.1524114003823185;  // std dev = 0.247, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return -0.07308506063921782;  // std dev = 0.009, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17547372862505195;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.021910654049901297;  // std dev = 0.631, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.0024825181535012204;  // std dev = 1.061, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.17664361350530014;  // std dev = 0.266, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.3664551254035098;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3146817193773546;  // std dev = 0.165, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.07583732859519679;  // std dev = 0.236, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2101374642814051;  // std dev = 0.072, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.06911402335045687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.14518969668021314;  // std dev = 0.157, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(A, C), tweets(C, E) )
%   | | then return -0.11810931646601208;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.15691306122682114;  // std dev = 0.034, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.16935312319571144;  // std dev = 0.072, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.06356633159335064;  // std dev = 0.009, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.12470720797720099;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0020036666304099984;  // std dev = 0.702, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | | else return 0.015427888941975627;  // std dev = 0.731, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.003', 'seconds']
Refined model CLL: -0.099458


******************************************
Best model found
******************************************
Results 

CLL : -0.099689 

AUC ROC : 0.9942 

AUC PR : 0.35128 

Precision : 0.336427 

Recall : 0.929487 

F1 : 0.494037 

Total Learning Time : 10.754 

Total Inference Time : 6.741642713546753 

Total revision time: 21.72114387321472
Best scored revision CLL: -0.099458


Results 

CLL : -0.099689 

AUC ROC : 0.9942 

AUC PR : 0.35128 

Precision : 0.336427 

Recall : 0.929487 

F1 : 0.494037 

Total Learning Time : 21.74760976600647 

Total Inference Time : 6.741642713546753 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.794
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1418510649004884;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1730718195404492;  // std dev = 6.805, 282.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=100 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1542267580722946;  // std dev = 6.461, 262.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=95 */
%   | | | else return 0.04270373993741221;  // std dev = 1.629, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.5989785852385469;  // std dev = 2.179, 100.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=95 */
%   | else return -0.16595751958924856;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03641741241581282;  // std dev = 1.622, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03905708033293308;  // std dev = 4.714, 236.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=70 */
%   | | else return 0.043539236408063064;  // std dev = 0.312, 105.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=30 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45394757100944605;  // std dev = 2.228, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15016883443107054;  // std dev = 0.045, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03972842406315531;  // std dev = 3.757, 229.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=75 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.050906428478660594;  // std dev = 2.213, 65.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.032381187697058826;  // std dev = 4.173, 278.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=95 */
%   | | | else return 0.03581075243072935;  // std dev = 1.370, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3246147215905914;  // std dev = 1.959, 99.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=95 */
%   | | | else return -0.13988109979038868;  // std dev = 0.011, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13193347227906121;  // std dev = 1.163, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01873782676101972;  // std dev = 3.569, 291.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=100 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.549', 'seconds']
Parameter learned model CLL:-0.15549 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 75], 'false,true,false': [1.33e-07, 0, 25], 'false,false': [0.0, 202, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.805, 182, 100]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.461, 167, 95], 'false,false,false,false': [1.629, 17, 5]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.179, 5, 95], 'true,false': [0.0, 200, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.622, 17, 5]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.714, 166, 70], 'false,false,false': [0.312, 75, 30]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.228, 5, 100], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.045, 188, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.757, 154, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.213, 40, 25]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.173, 183, 95], 'false,false,false,false': [1.37, 12, 5]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.959, 4, 95], 'false,false,true,false': [0.011, 214, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.163, 7, 5]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.569, 191, 100]}]
{'': [nan, 0.22148151396868737], 'false': [1.7053025658242404e-15, -2.374338349693404e-16], 'false,true': [-1.4210854715202005e-15, 7.105427357601002e-16]}
{'': [nan, 0.16420974010774567], 'false': [nan, 0.1642097401077454], 'false,false': [nan, 0.16420974010774567], 'false,false,false': [nan, 0.1642097401077454]}
{'': [nan, 0.15721554284779043], 'false': [nan, 0.15721554284779019], 'false,false': [nan, 0.15721554284779019], 'false,false,false': [0.15932004809185413, 0.12067887429460003]}
{'': [0.1458616098820264, 0.11954102522794523], 'true': [0.04750000000000135, -1.3322676295501878e-16], 'false': [nan, 0.11954102522794523], 'false,false': [nan, 0.11954102522794523], 'false,false,false': [nan, 0.11954102522794523]}
{'': [nan, 0.09509573975577373], 'false': [nan, 0.09509573975577361], 'false,false': [0.09414897544148572, 0.09720980152420446], 'false,false,true': [nan, 0.09414897544148572]}
{'': [nan, 0.10086632148177357], 'false': [nan, 0.10086632148177357], 'false,false': [0.04727591758528163, 1.0626063357406188e-05], 'false,false,false': [nan, 1.0626063357448707e-05]}
{'': [0.06164224098595749, 0.07535387346965886], 'false': [nan, 0.07535387346965886], 'false,false': [nan, 0.07535387346965886], 'false,false,false': [nan, 0.07535387346965886], 'true': [nan, 0.06164224098595749]}
{'': [nan, 0.06540549190301667], 'false': [nan, 0.06540549190301667], 'false,false': [nan, 0.06540549190301667], 'false,false,false': [0.06265103089822618, 0.11043794657819826]}
{'': [nan, 0.06146090211260291], 'false': [nan, 0.0614609021126022], 'false,false': [0.058921004696989396, 0.11268651770579474], 'false,false,false': [nan, 0.11268651770579474], 'false,false,true': [0.03877040045087077, 5.836827366315105e-07]}
{'': [nan, 0.0437808819525212], 'false': [nan, 0.04378088195252134], 'false,false': [nan, 0.0437808819525212]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 15.089
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.6972511899887328;  // std dev = 0.147, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else return 0.722744755756446;  // std dev = 0.060, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.7194734122109543;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.12544463852839147;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7263795819181033;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1561947117180572;  // std dev = 1.195, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.17276173232078956;  // std dev = 1.665, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, D) )
%   | | then return 0.5067928488005441;  // std dev = 0.226, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | else return 0.5608469028545979;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.5587765327204794;  // std dev = 0.078, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.380377513195444;  // std dev = 0.783, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5692766151182088;  // std dev = 0.082, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.11046352940974023;  // std dev = 0.055, 181.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.6061257396183344;  // std dev = 0.111, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.04137057505918858;  // std dev = 1.431, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | | else return 0.14368591038194115;  // std dev = 1.895, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.425116988143678;  // std dev = 1.034, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | | else return 0.39806111563425745;  // std dev = 0.900, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.6403866195584684;  // std dev = 0.106, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.10817144512698626;  // std dev = 0.218, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4158895859240529;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10176557224604768;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(C, D) )
%   | | then return 0.2995608182254918;  // std dev = 0.173, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else return 0.3277808554204159;  // std dev = 0.036, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.013593361764181874;  // std dev = 0.847, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, F) )
%   | | | then return -0.0021057289020606886;  // std dev = 1.101, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3344034328189984;  // std dev = 0.089, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.09232414123916284;  // std dev = 0.002, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.34446538135607785;  // std dev = 0.076, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.02538964299965685;  // std dev = 1.168, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | | else return 0.08605619621726525;  // std dev = 1.460, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.27675695410760986;  // std dev = 0.275, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.1624407966349079;  // std dev = 0.950, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.032753366727423495;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then return 0.26093753942404624;  // std dev = 0.092, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.4584605423016006;  // std dev = 0.078, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.09215914235545923;  // std dev = 0.258, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), follows(F, C) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.18515595043616162;  // std dev = 0.981, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.21168845807207987;  // std dev = 0.019, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.23710651106053762;  // std dev = 0.105, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.04169654628098152;  // std dev = 0.915, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.18123505808183846;  // std dev = 0.211, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.07838980938554682;  // std dev = 0.056, 177.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2363579522827698;  // std dev = 0.099, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.0078494612642787;  // std dev = 0.994, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | | else return 0.006044820754014006;  // std dev = 1.160, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.1877753351786467;  // std dev = 0.107, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( follows(E, A), follows(E, C) )
%   | | then return 0.19616596464995442;  // std dev = 0.024, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.13383142788676997;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(A, G) )
%   | | then return -0.07796807431687804;  // std dev = 1.145, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.2431567169079894;  // std dev = 0.225, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.18497524764027465;  // std dev = 0.053, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.07254048819630343;  // std dev = 0.002, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.01201341213073738;  // std dev = 0.898, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return -0.03576045646881158;  // std dev = 1.393, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(F, A), follows(E, A) )
%   | | | then return 0.1081723550216558;  // std dev = 1.591, 56.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=53 */
%   | | | else return 0.18697913059818513;  // std dev = 0.972, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.37769978007361854;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3453874128363185;  // std dev = 0.138, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07779887651188831;  // std dev = 0.313, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.17210379954099572;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06818317727925492;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.15558159339452748;  // std dev = 0.033, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( follows(C, A) )
%   | | then return -0.1894477195160499;  // std dev = 0.831, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.14752448889724287;  // std dev = 0.084, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.13709099867568802;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.0451622219945582;  // std dev = 0.057, 157.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=14 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.22521108658443864;  // std dev = 0.231, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.08906593727234488;  // std dev = 0.149, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.01981830663415174;  // std dev = 0.552, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.029328729669426994;  // std dev = 0.755, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.129', 'seconds']
Refined model CLL: -0.097796


******************************************
Best model found
******************************************
Results 

CLL : -0.097755 

AUC ROC : 0.99452 

AUC PR : 0.36698 

Precision : 0.338785 

Recall : 0.929487 

F1 : 0.496575 

Total Learning Time : 15.089 

Total Inference Time : 10.664894819259644 

Total revision time: 31.02495775985718
Best scored revision CLL: -0.097796


Results 

CLL : -0.097755 

AUC ROC : 0.99452 

AUC PR : 0.36698 

Precision : 0.338785 

Recall : 0.929487 

F1 : 0.496575 

Total Learning Time : 31.05142365264893 

Total Inference Time : 10.664894819259644 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.07
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8379469148974912;  // std dev = 1.400, 99.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=97 */
%   | | else return 0.7936328060672536;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | else return -0.1418510649004885;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16232239885481947;  // std dev = 7.801, 369.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13048606347534467;  // std dev = 7.456, 358.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=118 */
%   | | | else return 0.1514797432575052;  // std dev = 1.916, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6553317954295198;  // std dev = 0.999, 119.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=118 */
%   | else return -0.1612383865598632;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08842957714109258;  // std dev = 1.931, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06561875239286291;  // std dev = 5.075, 272.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=89 */
%   | | else return 0.07859429968792306;  // std dev = 0.330, 111.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4824340297537508;  // std dev = 1.375, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15125436702187955;  // std dev = 0.138, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03529388979304233;  // std dev = 4.214, 292.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.016573779262137225;  // std dev = 2.373, 96.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.026573012330847676;  // std dev = 4.569, 356.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=118 */
%   | | | else return 0.02495454230201797;  // std dev = 1.571, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.2961975000621596;  // std dev = 2.676, 126.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=118 */
%   | | | else return -0.1376038725616312;  // std dev = 0.004, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.036225790130725063;  // std dev = 1.538, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0032842018676088377;  // std dev = 4.239, 404.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.518', 'seconds']
Parameter learned model CLL:-0.152862 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.4, 2, 97], 'false,true,false': [1.368, 2, 29], 'false,false': [0.0, 222, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.801, 243, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.456, 240, 118], 'false,false,false,false': [1.916, 14, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.999, 1, 118], 'true,false': [0.0, 212, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.931, 18, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.075, 183, 89], 'false,false,false': [0.33, 74, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.375, 2, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.138, 241, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.214, 195, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.373, 67, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.569, 238, 118], 'false,false,false,false': [1.571, 19, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.676, 8, 118], 'false,false,true,false': [0.004, 223, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.538, 17, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.239, 278, 126]}]
{'': [nan, 0.22982308884297806], 'false': [0.02982248520710475, -2.360474178482315e-16], 'false,true': [0.019793898581778793, 0.06035379812695236]}
{'': [nan, 0.16490001456103676], 'false': [nan, 0.16490001456104106], 'false,false': [nan, 0.16490001456103676], 'false,false,false': [nan, 0.16490001456104106]}
{'': [nan, 0.15598744466273837], 'false': [nan, 0.1559874446627383], 'false,false': [nan, 0.1559874446627383], 'false,false,false': [0.15529595596289333, 0.16682463330984287]}
{'': [0.15655399097869951, 0.14348268802642788], 'true': [0.008390993632762338, -8.3790416952842e-18], 'false': [nan, 0.14348268802642788], 'false,false': [nan, 0.14348268802642788], 'false,false,false': [nan, 0.14348268802642788]}
{'': [nan, 0.09884054998476671], 'false': [nan, 0.09884054998476467], 'false,false': [0.09470564459778132, 0.10885336095363497], 'false,false,true': [nan, 0.09470564459778132]}
{'': [nan, 0.09615313027671149], 'false': [nan, 0.09615313027671149], 'false,false': [0.014776994958293738, 7.87831290861136e-05], 'false,false,false': [nan, 7.878312908610992e-05]}
{'': [0.06080996500836712, 0.058666235972496705], 'true': [nan, 0.06080996500836712], 'false': [nan, 0.058666235972496705], 'false,false': [nan, 0.058666235972496705], 'false,false,false': [nan, 0.058666235972496705]}
{'': [nan, 0.06095817180440198], 'false': [nan, 0.06095817180440198], 'false,false': [nan, 0.06095817180440198], 'false,false,false': [0.058648953529958824, 0.091403207601344]}
{'': [nan, 0.066004193589469], 'false': [nan, 0.06600419358946917], 'false,false': [0.06393425099211018, 0.0946240878786297], 'false,false,false': [nan, 0.0946240878786297], 'false,false,true': [0.056844175369483094, 8.06485805253207e-08]}
{'': [nan, 0.044469795488700045], 'false': [nan, 0.044469795488699726], 'false,false': [nan, 0.044469795488700045]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 14.827
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.14185106490048827;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7218635644366888;  // std dev = 0.022, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7329647685906412;  // std dev = 0.055, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.10950278851444128;  // std dev = 1.450, 159.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=3 */
%   | | | else return 0.013221120632879581;  // std dev = 2.684, 72.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=12 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.1121885632420499;  // std dev = 2.149, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0.16843990085920743;  // std dev = 1.930, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5447316973340011;  // std dev = 0.114, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | else return 0.44366503661810536;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.6652206217214857;  // std dev = 0.296, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5504022863294465;  // std dev = 0.913, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.11790097416555322;  // std dev = 0.082, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5749755480810238;  // std dev = 1.086, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.13827848373690166;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08107508755376153;  // std dev = 1.225, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.12399447926801159;  // std dev = 1.619, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.4089619691284228;  // std dev = 0.997, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return 0.1571504032276372;  // std dev = 1.151, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.4833053239520404;  // std dev = 0.985, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.6090483668032327;  // std dev = 0.200, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.11133170694286804;  // std dev = 0.214, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4443126002501784;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10254559134857333;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.3140519248869436;  // std dev = 0.121, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.2227743947231214;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.3190234037425647;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.08274460444602143;  // std dev = 0.075, 169.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=3 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.35676901952018514;  // std dev = 1.097, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.1035987729287226;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.37120327402531805;  // std dev = 0.136, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07731528393284767;  // std dev = 1.256, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | | | else return 0.1478772935736365;  // std dev = 1.390, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.23972714083442262;  // std dev = 1.383, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | | | else return 0.3499389291474781;  // std dev = 0.365, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.024995236111824748;  // std dev = 0.723, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.29086449023913863;  // std dev = 0.122, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.43299128951590926;  // std dev = 0.172, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.09715985100085421;  // std dev = 0.332, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.2036290427100887;  // std dev = 0.129, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return -0.04605673021588175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.22116653083792134;  // std dev = 0.035, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, G), follows(G, C) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.23215053219368254;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.06258194806510613;  // std dev = 1.194, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.204972769039368;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A) )
%   | then return -0.048365762858148365;  // std dev = 0.118, 230.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.00824406870540758;  // std dev = 0.229, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | | else return 0.0016414408317373275;  // std dev = 0.250, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D) )
%   | | then return 0.16773792752250122;  // std dev = 0.136, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(C, E), follows(E, A) )
%   | | | then return 0.09338528209553898;  // std dev = 0.957, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.20450628339323823;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.22634846063452613;  // std dev = 0.130, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(F, A) )
%   | then return -0.05044470315689764;  // std dev = 0.152, 257.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=32 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.32882307495701013;  // std dev = 0.112, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11665526903112083;  // std dev = 0.096, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.015385357598972062;  // std dev = 0.675, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.00863321276969335;  // std dev = 0.990, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.16953240596833766;  // std dev = 0.130, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | | else return 0.06540368439984293;  // std dev = 0.973, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.19722667840606534;  // std dev = 0.077, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2923239086743558;  // std dev = 0.897, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return -0.08206205755092033;  // std dev = 0.287, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   else return -0.0023525821950708074;  // std dev = 0.119, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.15388656807221054;  // std dev = 0.187, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return -0.17461140404704292;  // std dev = 0.838, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1518692798813874;  // std dev = 0.057, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( recursion_accounttype(F, B), follows(F, G) )
%   | | | then return 0.025620385386586314;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.24942842437189328;  // std dev = 0.324, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return -0.07811280355948211;  // std dev = 0.313, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return -0.07223405187396724;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.181', 'seconds']
Refined model CLL: -0.100296


******************************************
Best model found
******************************************
Results 

CLL : -0.101289 

AUC ROC : 0.994859 

AUC PR : 0.392801 

Precision : 0.344907 

Recall : 0.955128 

F1 : 0.506803 

Total Learning Time : 14.827 

Total Inference Time : 11.424844741821289 

Total revision time: 32.03514306259155
Best scored revision CLL: -0.100296


Results 

CLL : -0.101289 

AUC ROC : 0.994859 

AUC PR : 0.392801 

Precision : 0.344907 

Recall : 0.955128 

F1 : 0.506803 

Total Learning Time : 32.0616089553833 

Total Inference Time : 11.424844741821289 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.11
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15619471171805727;  // std dev = 3.841, 93.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=31 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1648668204380777;  // std dev = 3.357, 70.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=26 */
%   | | | else return 0.17581852151896074;  // std dev = 1.457, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6503980941662033;  // std dev = 1.40e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.16509601275637203;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.047734906618339214;  // std dev = 1.563, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02921071838367434;  // std dev = 2.547, 81.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=22 */
%   | | else return -1.214924749872712E-4;  // std dev = 0.306, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4786636574992999;  // std dev = 1.055, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15161627423014226;  // std dev = 0.084, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04738104787777968;  // std dev = 1.972, 64.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=23 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05727882770868467;  // std dev = 1.426, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.03442044736033386;  // std dev = 2.037, 76.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=26 */
%   | | | else return 0.027964801413499885;  // std dev = 1.330, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3135640355244847;  // std dev = 0.982, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.13808078730703394;  // std dev = 0.008, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0917113634795972;  // std dev = 1.164, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0318039622153561;  // std dev = 2.026, 84.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=31 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.477', 'seconds']
Parameter learned model CLL:-0.159961 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [8.43e-08, 0, 23], 'false,true,false': [0.0, 0, 8], 'false,false': [7.9e-09, 57, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.841, 62, 31]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.357, 44, 26], 'false,false,false,false': [1.457, 8, 5]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.4e-07, 0, 26], 'true,false': [0.0, 54, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.563, 14, 5]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.547, 59, 22], 'false,false,false': [0.306, 32, 9]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.055, 1, 31], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.084, 62, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.972, 41, 23], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.426, 15, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.037, 50, 26], 'false,false,false,false': [1.33, 11, 5]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.982, 1, 26], 'false,false,true,false': [0.008, 60, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.164, 8, 5]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.026, 53, 31]}]
{'': [nan, 0.2281766528925634], 'false': [1.375244004696968e-15, 6.232831015439475e-17], 'false,true': [3.089316242435218e-16, -2.220446049250313e-16]}
{'': [nan, 0.15864144721448434], 'false': [nan, 0.15864144721448312], 'false,false': [nan, 0.15864144721448434], 'false,false,false': [nan, 0.15864144721448312]}
{'': [nan, 0.1613958295101295], 'false': [nan, 0.16139582951012957], 'false,false': [nan, 0.16139582951012957], 'false,false,false': [0.1610324498281515, 0.16325133532460417]}
{'': [0.14589109630458313, 0.1286438252391914], 'true': [7.51535585900106e-16, -4.9343245538895844e-17], 'false': [nan, 0.1286438252391914], 'false,false': [nan, 0.1286438252391914], 'false,false,false': [nan, 0.1286438252391914]}
{'': [nan, 0.08481081020053527], 'false': [nan, 0.08481081020053538], 'false,false': [0.08006812142135045, 0.09360927745477493], 'false,false,true': [nan, 0.08006812142135045]}
{'': [nan, 0.10112254190086971], 'false': [nan, 0.10112254190086971], 'false,false': [0.03480691237969499, 0.00011497045190044994], 'false,false,false': [nan, 0.00011497045190041054]}
{'': [0.060776372242180944, 0.08839714374381216], 'false': [nan, 0.08839714374381216], 'false,false': [nan, 0.08839714374381216], 'false,false,false': [nan, 0.08839714374381216], 'true': [nan, 0.060776372242180944]}
{'': [nan, 0.06435388324282901], 'false': [nan, 0.06435388324282901], 'false,false': [nan, 0.06435388324282901], 'false,false,false': [0.05461682877463667, 0.11057046449164484]}
{'': [nan, 0.06208495463603708], 'false': [nan, 0.06208495463603696], 'false,false': [0.05474377496789396, 0.10422575401970448], 'false,false,false': [nan, 0.10422575401970448], 'false,false,true': [0.03571643206334113, 9.960365075019814e-07]}
{'': [nan, 0.04885394195865103], 'false': [nan, 0.04885394195865104], 'false,false': [nan, 0.04885394195865103]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 8.193
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.14185106490048766;  // std dev = 5.37e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7313730497173961;  // std dev = 0.071, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.13061403683707987;  // std dev = 0.152, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1254446385283914;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109543;  // std dev = 4.21e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1254446385283914;  // std dev = 7.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.4780682548568556;  // std dev = 0.382, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(A, E) )
%   | then return 0.5613037204364478;  // std dev = 0.079, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.11882245699160474;  // std dev = 0.332, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.5746201473307809;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.32712939334388197;  // std dev = 0.632, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.27028234416231733;  // std dev = 1.050, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.30207109292957995;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.4253797660272018;  // std dev = 0.054, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.43070157027135897;  // std dev = 0.086, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.10217309285030028;  // std dev = 0.048, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else if ( follows(G, A) )
%   | then return -0.10063969663278387;  // std dev = 0.000584, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.4157292968996397;  // std dev = 0.710, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( follows(A, C), recursion_accounttype(D, B) )
%   | then return 0.3354346858993659;  // std dev = 0.058, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(C, E) )
%   | | | then return -0.09180977401159969;  // std dev = 0.001, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0.061988696628707984;  // std dev = 0.377, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(D, A), tweets(A, F) )
%   | | | then return -0.09176820157736977;  // std dev = 0.000114, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.289153238426829;  // std dev = 0.483, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.32623617951124784;  // std dev = 0.066, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.10195087205780355;  // std dev = 0.085, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.22391023359835782;  // std dev = 0.345, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then return 0.18052162939447475;  // std dev = 0.288, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.2627794387197861;  // std dev = 0.113, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.3875911389534437;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E) )
%   | then return -0.08762371821040757;  // std dev = 0.059, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( follows(F, A) )
%   | | then return -0.08442447901645832;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.3738181509572269;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then return 0.2266918326909331;  // std dev = 0.113, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.07854607563894432;  // std dev = 0.035, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then if ( follows(A, F) )
%   | | | then return -0.18143865868995918;  // std dev = 0.464, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07625442261359229;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.01597651108380869;  // std dev = 0.336, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then return -0.09972389555127885;  // std dev = 0.479, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.01654909957886563;  // std dev = 0.327, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.003594398906570009;  // std dev = 0.837, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.19887469152150994;  // std dev = 0.078, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07404247969810913;  // std dev = 0.034, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.17552223837290315;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2148569253681423;  // std dev = 0.116, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.07837472731379073;  // std dev = 0.046, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.2747697068977664;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return -0.022721926942128944;  // std dev = 0.252, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.03724194831224663;  // std dev = 0.264, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.1863597999286438;  // std dev = 0.524, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.17609285344371092;  // std dev = 0.048, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.10685491543944091;  // std dev = 0.897, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.16054841237567782;  // std dev = 0.079, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.06988560097653644;  // std dev = 0.046, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then return -0.06796250818324089;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.1006777077510177;  // std dev = 0.426, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.1481823425234579;  // std dev = 0.526, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1460523111333296;  // std dev = 0.036, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.14298188467311046;  // std dev = 0.063, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.18392447831384307;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.06528483094558205;  // std dev = 0.038, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( follows(G, A) )
%   | | then return -0.06296525429820296;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.10761615485341573;  // std dev = 0.442, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.10952300171604046;  // std dev = 1.044, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.366', 'seconds']
Refined model CLL: -0.100794


******************************************
Best model found
******************************************
Results 

CLL : -0.09098 

AUC ROC : 0.993678 

AUC PR : 0.366988 

Precision : 0.347059 

Recall : 0.936508 

F1 : 0.506438 

Total Learning Time : 8.193 

Total Inference Time : 5.118116140365601 

Total revision time: 16.08198907661438
Best scored revision CLL: -0.100794


Results 

CLL : -0.09098 

AUC ROC : 0.993678 

AUC PR : 0.366988 

Precision : 0.347059 

Recall : 0.936508 

F1 : 0.506438 

Total Learning Time : 21.244885709762574 

Total Inference Time : 5.118116140365601 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.407
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.14185106490048768;  // std dev = 6.18e-09, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13388664437180323;  // std dev = 5.539, 202.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=62 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13493306262163;  // std dev = 5.003, 163.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=54 */
%   | | | else return 0.14870172443031415;  // std dev = 1.902, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6621815982860727;  // std dev = 5.96e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else return -0.15978316363373238;  // std dev = 0.179, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05148242071511465;  // std dev = 1.995, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08518349811825514;  // std dev = 3.529, 126.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=45 */
%   | | else return 0.050102717908600644;  // std dev = 0.326, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5026313304277311;  // std dev = 0.405, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1508192116074829;  // std dev = 0.098, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03881492436102951;  // std dev = 2.954, 140.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=49 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.016990260791908303;  // std dev = 1.696, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.040887499882176055;  // std dev = 3.041, 142.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=54 */
%   | | | else return 0.003156739178486247;  // std dev = 1.637, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.30784906921680194;  // std dev = 1.392, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | | else return -0.13766241011918656;  // std dev = 0.031, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.054801359232664035;  // std dev = 1.548, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02978532627972007;  // std dev = 2.787, 170.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=62 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.530', 'seconds']
Parameter learned model CLL:-0.157273 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.69e-07, 0, 49], 'false,true,false': [0.0, 0, 13], 'false,false': [6.18e-09, 115, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.539, 140, 62]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.003, 109, 54], 'false,false,false,false': [1.902, 15, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [5.96e-08, 0, 54], 'true,false': [0.179, 102, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.995, 23, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.529, 81, 45], 'false,false,false': [0.326, 44, 17]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.405, 0, 62], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.098, 113, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.954, 91, 49], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.696, 34, 13]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.041, 88, 54], 'false,false,false,false': [1.637, 25, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.392, 2, 54], 'false,false,true,false': [0.031, 108, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.548, 17, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.787, 108, 62]}]
{'': [nan, 0.22758466596444205], 'false': [-6.87622002348484e-16, 3.8616453030440226e-17], 'false,true': [5.800348863347756e-16, -2.7328566760003855e-16]}
{'': [nan, 0.15186096775310667], 'false': [nan, 0.1518609677531064], 'false,false': [nan, 0.15186096775310667], 'false,false,false': [nan, 0.1518609677531064]}
{'': [nan, 0.1540346597435144], 'false': [nan, 0.15403465974351452], 'false,false': [nan, 0.15403465974351452], 'false,false,false': [0.15355926202064324, 0.15723764888751898]}
{'': [0.15312056257742082, 0.12841486445337194], 'true': [6.579099405186112e-17, 0.0003138271881017484], 'false': [nan, 0.12841486445337194], 'false,false': [nan, 0.12841486445337194], 'false,false,false': [nan, 0.12841486445337194]}
{'': [nan, 0.10157151810963248], 'false': [nan, 0.10157151810963347], 'false,false': [0.09884971127202634, 0.1063643953941707], 'false,false,true': [nan, 0.09884971127202634]}
{'': [nan, 0.09867380663276015], 'false': [nan, 0.09867380663276015], 'false,false': [0.002641072193925806, 8.517992192442385e-05], 'false,false,false': [nan, 8.517992192439241e-05]}
{'': [0.06233573753646701, 0.06122922410748226], 'true': [nan, 0.06233573753646701], 'false': [nan, 0.06122922410748226], 'false,false': [nan, 0.06122922410748226], 'false,false,false': [nan, 0.06122922410748226]}
{'': [nan, 0.06835192272752484], 'false': [nan, 0.06835192272752484], 'false,false': [nan, 0.06835192272752484], 'false,false,false': [0.06510508571106041, 0.08116800272371157]}
{'': [nan, 0.06184712835790145], 'false': [nan, 0.06184712835790141], 'false,false': [0.05645544364745517, 0.09580466497260674], 'false,false,false': [nan, 0.09580466497260674], 'false,false,true': [0.03460945099743172, 9.173560643963532e-06]}
{'': [nan, 0.045705298429380495], 'false': [nan, 0.04570529842938053], 'false,false': [nan, 0.045705298429380495]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 10.347
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.14185106490048793;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7221317516875684;  // std dev = 0.053, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.1254446385283911;  // std dev = 7.15e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | | else return -0.09545176455105696;  // std dev = 0.847, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.12999570239280647;  // std dev = 2.545, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | | else return 0.21637717400843695;  // std dev = 1.873, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5580689513378928;  // std dev = 0.066, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(A, D) )
%   | | | then return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.609324338246676;  // std dev = 0.150, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.11304118539584902;  // std dev = 0.013, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6657381297763558;  // std dev = 0.218, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.14148937755827187;  // std dev = 0.010, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.051529338095432586;  // std dev = 1.681, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.26132191479753164;  // std dev = 1.167, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3204042109143982;  // std dev = 1.287, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return 0.4429976619525199;  // std dev = 0.207, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.4995689396790081;  // std dev = 0.216, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.6814245130320631;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11235571055945268;  // std dev = 0.176, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), follows(I, A) )
%   | | then return 0.0096542662715913;  // std dev = 0.228, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return -0.10429908060765689;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, J) )
%   | | then return 0.21533892303177027;  // std dev = 0.698, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.1328996032335871;  // std dev = 0.393, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then return 0.33894344276889643;  // std dev = 0.026, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(D, C), follows(D, A) )
%   | | | then return 0.14101959760664567;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.3194275872940529;  // std dev = 0.034, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.12973308562005562;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.26060539754078826;  // std dev = 0.315, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.09294900633034338;  // std dev = 0.029, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.35809148991056466;  // std dev = 1.156, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.12239223251937908;  // std dev = 0.056, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0.3026215768708711;  // std dev = 0.363, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.26897220449772447;  // std dev = 0.102, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.3031765896202871;  // std dev = 0.231, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.40737637772447427;  // std dev = 0.127, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.47028081177015535;  // std dev = 0.104, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.10106717121435763;  // std dev = 0.446, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.22865602968001808;  // std dev = 0.161, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.02980224162468023;  // std dev = 0.825, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.29818822244264;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21832012716906243;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07895231268409515;  // std dev = 0.040, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.20900497837808443;  // std dev = 1.095, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.09654820896950485;  // std dev = 0.040, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.0012323610704794948;  // std dev = 0.301, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(C, D) )
%   | then return 0.1942907946174618;  // std dev = 0.026, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(D, A) )
%   | | | then return -0.07138137910121765;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return -0.13508482893375515;  // std dev = 0.728, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, F), tweets(A, G) )
%   | | | then return -0.04630377308138234;  // std dev = 0.353, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return -0.07734055373604783;  // std dev = 0.025, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | then return 0.22237249451909494;  // std dev = 0.050, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.09047883652179237;  // std dev = 0.055, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( tweets(A, J) )
%   | | then return 0.015992580465496915;  // std dev = 0.565, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.11869776401048317;  // std dev = 0.314, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.16267297582472615;  // std dev = 0.070, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.05592508372448727;  // std dev = 0.907, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.17177686620669702;  // std dev = 0.184, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.24639288128317194;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07403793985380905;  // std dev = 0.098, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else if ( follows(H, A), tweets(A, I) )
%   | then return -0.027721167241478797;  // std dev = 0.113, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( tweets(A, J) )
%   | | then return -0.04568204367741387;  // std dev = 0.232, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return -0.059199042682290766;  // std dev = 0.275, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.14212118793380735;  // std dev = 0.043, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.12655665192934568;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.14969468702081123;  // std dev = 0.047, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), follows(G, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.1622656368607817;  // std dev = 0.042, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.06354250287170779;  // std dev = 0.042, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.15925397642328107;  // std dev = 0.044, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.07169598312981806;  // std dev = 0.014, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.0237520062986964;  // std dev = 0.575, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | | else return -0.006541850308696301;  // std dev = 1.148, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.271', 'seconds']
Refined model CLL: -0.100932


******************************************
Best model found
******************************************
Results 

CLL : -0.093382 

AUC ROC : 0.993654 

AUC PR : 0.373334 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 10.347 

Total Inference Time : 7.3126747608184814 

Total revision time: 21.49588995361328
Best scored revision CLL: -0.100932


Results 

CLL : -0.093382 

AUC ROC : 0.993654 

AUC PR : 0.373334 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 26.658786586761472 

Total Inference Time : 7.3126747608184814 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.737
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8299799210150057;  // std dev = 1.394, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | | else return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17028935138062487;  // std dev = 6.631, 265.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=93 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1665890502567343;  // std dev = 5.834, 208.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=78 */
%   | | | else return 0.12032345332393668;  // std dev = 2.660, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6391642488243234;  // std dev = 0.993, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   | else return -0.16728776358148773;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11292505167369299;  // std dev = 2.598, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05820160379198401;  // std dev = 4.253, 186.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=61 */
%   | | else return 0.05160985744260821;  // std dev = 0.338, 106.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=32 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.483866048758078;  // std dev = 1.513, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1583095958240526;  // std dev = 0.161, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.026282689647524525;  // std dev = 3.648, 215.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=69 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07249923375191593;  // std dev = 2.097, 61.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=24 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.03727702724222277;  // std dev = 3.558, 218.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=78 */
%   | | | else return 0.036524240232819714;  // std dev = 2.165, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.34834885564542395;  // std dev = 0.056, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | | else return -0.14199758683291772;  // std dev = 0.027, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.005727202014337311;  // std dev = 2.213, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.020497869783984605;  // std dev = 3.639, 259.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=93 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.791', 'seconds']
Parameter learned model CLL:-0.160832 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.394, 2, 69], 'false,true,false': [1.03e-07, 0, 24], 'false,false': [0.0, 159, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.631, 172, 93]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.834, 130, 78], 'false,false,false,false': [2.66, 32, 15]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.993, 1, 78], 'true,false': [0.0, 161, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.598, 30, 15]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.253, 125, 61], 'false,false,false': [0.338, 74, 32]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.513, 2, 93], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.161, 168, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.648, 146, 69], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.097, 37, 24]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.558, 140, 78], 'false,false,false,false': [2.165, 32, 15]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.056, 0, 78], 'false,false,true,false': [0.027, 160, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.213, 38, 15]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.639, 166, 93]}]
{'': [nan, 0.23208196416392987], 'false': [0.02060941828254939, -1.424437088198314e-16], 'false,true': [0.027375520730012762, 4.440892098500626e-16]}
{'': [nan, 0.16590654207402428], 'false': [nan, 0.1659065420740241], 'false,false': [nan, 0.16590654207402428], 'false,false,false': [nan, 0.1659065420740241]}
{'': [nan, 0.16154334548226043], 'false': [nan, 0.16154334548226015], 'false,false': [nan, 0.16154334548226015], 'false,false,false': [0.16362687183846486, 0.15057665217348903]}
{'': [0.14771566151648713, 0.15000926797424846], 'false': [nan, 0.15000926797424846], 'false,false': [nan, 0.15000926797424846], 'false,false,false': [nan, 0.15000926797424846], 'true': [0.01247002097319424, -4.964972532485172e-17]}
{'': [nan, 0.10349161422668275], 'false': [nan, 0.1034916142266825], 'false,false': [0.0972444735715364, 0.11442590024961177], 'false,false,true': [nan, 0.0972444735715364]}
{'': [nan, 0.10396062135445609], 'false': [nan, 0.10396062135445609], 'false,false': [0.024106268534310298, 0.00015434875893505757], 'false,false,false': [nan, 0.00015434875893495184]}
{'': [0.06191361749712897, 0.0720997816961187], 'false': [nan, 0.0720997816961187], 'false,false': [nan, 0.0720997816961187], 'false,false,false': [nan, 0.0720997816961187], 'true': [nan, 0.06191361749712897]}
{'': [nan, 0.06546412775708403], 'false': [nan, 0.06546412775708403], 'false,false': [nan, 0.06546412775708403], 'false,false,false': [0.058068666034801666, 0.09976601594721751]}
{'': [nan, 0.060190090328126146], 'false': [nan, 0.060190090328125806], 'false,false': [0.05299053465231445, 0.09238243954298936], 'false,false,false': [nan, 0.09238243954298936], 'false,false,true': [3.988667500433343e-05, 4.4317396100557184e-06]}
{'': [nan, 0.05112409392022761], 'false': [nan, 0.051124093920227466], 'false,false': [nan, 0.05112409392022761]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 17.301
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.8311219080724844;  // std dev = 0.986, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.6706489350995123;  // std dev = 1.561, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.14185106490048827;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7277781331820729;  // std dev = 0.058, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7508863594287029;  // std dev = 0.048, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.12544463852839105;  // std dev = 8.02e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.12889963049886333;  // std dev = 1.600, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return 0.18584095911242038;  // std dev = 1.777, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.483061622055114;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.3099846989781909;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.5599846989781909;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.5786552546735215;  // std dev = 0.075, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(F, A), follows(G, F) )
%   | then return -0.033107541085612785;  // std dev = 0.229, 148.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=18 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.5552687389289309;  // std dev = 0.002, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1062963582110048;  // std dev = 1.206, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.17974389807745408;  // std dev = 1.941, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4421603967156441;  // std dev = 0.129, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.10340057862702662;  // std dev = 1.630, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else return 0.49540042045554955;  // std dev = 0.095, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.1081447523730237;  // std dev = 0.112, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5681255470084496;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.10905763414163352;  // std dev = 1.67e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.026636391482711935;  // std dev = 0.726, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.24491248528362577;  // std dev = 1.000, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.2713292920839118;  // std dev = 1.340, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.35471769020078003;  // std dev = 0.277, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.4105732127458524;  // std dev = 0.052, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E), follows(F, A) )
%   | | | then return -0.09725690194899556;  // std dev = 0.715, 91.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=1 */
%   | | | else return -0.008440298697713804;  // std dev = 1.607, 58.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=9 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.06665185487301771;  // std dev = 1.695, 60.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=23 */
%   | | | else return 0.11405076614741093;  // std dev = 1.828, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.2446893074977796;  // std dev = 1.009, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.030614112251464265;  // std dev = 0.858, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.11244784950960063;  // std dev = 1.099, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return 0.4488139205447994;  // std dev = 0.185, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.24204225823969028;  // std dev = 0.976, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.17663036994352344;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5498746741528591;  // std dev = 0.049, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.10577391990042195;  // std dev = 0.479, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(C, D) )
%   | | then return 0.21942832144097785;  // std dev = 0.058, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.16375206240527196;  // std dev = 0.237, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.2786817218984445;  // std dev = 0.107, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.3472437869035271;  // std dev = 0.181, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.09094980730816578;  // std dev = 0.082, 125.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.266957962931469;  // std dev = 0.255, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.09325987564487064;  // std dev = 0.096, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.036193215610719184;  // std dev = 0.866, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.006189551946748882;  // std dev = 1.233, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19773426727301838;  // std dev = 0.163, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.2806147793508611;  // std dev = 0.186, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07840235046845444;  // std dev = 0.037, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.20358346140862207;  // std dev = 0.082, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.09527309092828065;  // std dev = 0.456, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2895204570704968;  // std dev = 0.552, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.01912898879995423;  // std dev = 1.267, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return 0.16399530245217958;  // std dev = 0.074, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.07436985266516091;  // std dev = 0.966, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.19951179575106046;  // std dev = 0.282, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.07648081985008659;  // std dev = 0.181, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.2664398820477792;  // std dev = 0.068, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.07069312063009425;  // std dev = 0.006, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.2583993695838828;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(J, A) )
%   | | then return -0.02002037261902149;  // std dev = 0.334, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.06902593870837555;  // std dev = 0.311, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), follows(D, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.14480318250986368;  // std dev = 0.140, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.07257769410330275;  // std dev = 0.872, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.1821535285160376;  // std dev = 0.046, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.07787194317398531;  // std dev = 0.400, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14575337195628207;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return -0.06901271830651387;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.018820618915065927;  // std dev = 0.402, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02609180288497437;  // std dev = 0.492, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | | else return 0.05081522510630963;  // std dev = 1.171, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.028', 'seconds']
Refined model CLL: -0.101479


******************************************
Best model found
******************************************
Results 

CLL : -0.099583 

AUC ROC : 0.993597 

AUC PR : 0.386649 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 17.301 

Total Inference Time : 11.25150203704834 

Total revision time: 33.577267063140866
Best scored revision CLL: -0.101479


Results 

CLL : -0.099583 

AUC ROC : 0.993597 

AUC PR : 0.386649 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 38.74016369628906 

Total Inference Time : 11.25150203704834 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.07
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8262340414824904;  // std dev = 1.704, 94.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=91 */
%   | | else return 0.8581489350995116;  // std dev = 2.23e-07, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14109669077338194;  // std dev = 7.854, 393.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=124 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12590597425216674;  // std dev = 7.051, 324.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=104 */
%   | | | else return 0.12530490986183906;  // std dev = 3.095, 62.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=20 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6491436789112963;  // std dev = 1.399, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else return -0.1577788313066788;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10703242101587246;  // std dev = 3.064, 61.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06873476307404171;  // std dev = 4.832, 246.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=79 */
%   | | else return 0.09132596899248548;  // std dev = 0.347, 131.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=45 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5063926448008167;  // std dev = 1.142, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15470207825582563;  // std dev = 0.239, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04435493479952999;  // std dev = 4.145, 264.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=91 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04392004657708268;  // std dev = 2.505, 95.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=33 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.039256303891020035;  // std dev = 4.102, 294.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=104 */
%   | | | else return 0.038574495023097295;  // std dev = 2.424, 63.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3322109475970361;  // std dev = 1.406, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | | | else return -0.13821378534029918;  // std dev = 0.016, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.022353131965514063;  // std dev = 2.434, 66.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.002470245827936647;  // std dev = 4.331, 394.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=124 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.879', 'seconds']
Parameter learned model CLL:-0.157371 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.704, 3, 91], 'false,true,false': [2.23e-07, 0, 33], 'false,false': [0.0, 252, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.854, 269, 124]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.051, 220, 104], 'false,false,false,false': [3.095, 42, 20]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.399, 2, 104], 'true,false': [0.0, 212, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.064, 41, 20]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.832, 167, 79], 'false,false,false': [0.347, 86, 45]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.142, 1, 124], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.239, 238, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.145, 173, 91], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.505, 62, 33]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.102, 190, 104], 'false,false,false,false': [2.424, 43, 20]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.406, 2, 104], 'false,false,true,false': [0.016, 210, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.434, 46, 20]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.331, 270, 124]}]
{'': [nan, 0.22013213497539263], 'false': [0.0230640461280963, -1.1983359630874705e-16], 'false,true': [0.030896333182436186, 1.5072118637335459e-15]}
{'': [nan, 0.15694447707547737], 'false': [nan, 0.15694447707548215], 'false,false': [nan, 0.15694447707547737], 'false,false,false': [nan, 0.15694447707548215]}
{'': [nan, 0.15360294652229625], 'false': [nan, 0.15360294652229656], 'false,false': [nan, 0.15360294652229656], 'false,false,false': [0.1534252029746984, 0.15453149665083932]}
{'': [0.15084682045328252, 0.15387878820659523], 'false': [nan, 0.15387878820659523], 'false,false': [nan, 0.15387878820659523], 'false,false,false': [nan, 0.15387878820659523], 'true': [0.018457836362197905, -1.340646671245472e-16]}
{'': [nan, 0.10381971545168471], 'false': [nan, 0.10381971545168528], 'false,false': [0.09492814011601175, 0.12018385044918678], 'false,false,true': [nan, 0.09492814011601175]}
{'': [nan, 0.10242243334231714], 'false': [nan, 0.10242243334231714], 'false,false': [0.010429109681679392, 0.0002402405246960829], 'false,false,false': [nan, 0.00024024052469613888]}
{'': [0.06506773670337757, 0.06603528641345324], 'false': [nan, 0.06603528641345324], 'false,false': [nan, 0.06603528641345324], 'false,false,false': [nan, 0.06603528641345324], 'true': [nan, 0.06506773670337757]}
{'': [nan, 0.06359017859103654], 'false': [nan, 0.06359017859103654], 'false,false': [nan, 0.06359017859103654], 'false,false,false': [0.057225558033458856, 0.0932913583644361]}
{'': [nan, 0.061501913393742114], 'false': [nan, 0.06150191339374152], 'false,false': [0.055591670156572806, 0.08979311173519523], 'false,false,false': [nan, 0.08979311173519523], 'false,false,true': [0.018657690175085548, 1.1833561653917272e-06]}
{'': [nan, 0.04759999907379154], 'false': [nan, 0.0475999990737913], 'false,false': [nan, 0.04759999907379154]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 19.101
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.1418510649004882;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then return 0.7036003963379384;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else return 0.5694734122109542;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else return -0.12145714661232963;  // std dev = 0.065, 173.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=1 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then return 0.7681232322640719;  // std dev = 0.073, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4077262490851199;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.12544463852839133;  // std dev = 1.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.17436499237911865;  // std dev = 2.251, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
%   | | | else return 0.20735318345865864;  // std dev = 2.295, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5603332288477105;  // std dev = 0.071, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.6014889319132107;  // std dev = 0.146, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.3075774402367656;  // std dev = 0.697, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.11270512753418714;  // std dev = 0.000787, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4961032105098953;  // std dev = 0.300, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.09013313361416822;  // std dev = 2.975, 75.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=22 */
%   | | | else return 0.22984714133774478;  // std dev = 2.203, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.4236064971119171;  // std dev = 1.403, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | | | else return 0.18241980739525468;  // std dev = 0.773, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.42889794057957914;  // std dev = 0.092, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.6519257101029134;  // std dev = 0.086, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.11659748461879775;  // std dev = 0.294, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.4201682959642593;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, J), follows(K, A) )
%   | | then return -0.10192527424245383;  // std dev = 1.83e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.11109784062136839;  // std dev = 1.285, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.1235190068557781;  // std dev = 1.659, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.3216842675139467;  // std dev = 0.004, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else return 0.019804981108496933;  // std dev = 0.820, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.35949325017604006;  // std dev = 0.969, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.5971376941382921;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1016209801083874;  // std dev = 0.335, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.15678763241630042;  // std dev = 0.714, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.09663984874193254;  // std dev = 0.048, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02834204969750743;  // std dev = 2.040, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | | else return 0.07191573528433577;  // std dev = 1.756, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.25575917217995076;  // std dev = 0.002, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.1518881124251886;  // std dev = 0.939, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.2715499896737132;  // std dev = 0.263, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return 0.33426873438104604;  // std dev = 0.133, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5023704800847185;  // std dev = 0.242, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.10602209422671183;  // std dev = 0.638, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return 0.2128676308030507;  // std dev = 0.107, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( tweets(A, E), follows(A, C) )
%   | | then return -0.12390587525604117;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.20979248878880266;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.14680574315030548;  // std dev = 0.272, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return -0.07562343015775431;  // std dev = 0.520, 176.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2754013882413506;  // std dev = 0.161, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.10030255740135974;  // std dev = 0.144, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03925867134230963;  // std dev = 1.416, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | | else return -4.6194617380940006E-4;  // std dev = 1.441, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.18802979812439102;  // std dev = 0.091, 92.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=91 */
%   | else return -0.07815839635226916;  // std dev = 0.271, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.19692100994484607;  // std dev = 0.051, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.07103514207903773;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.23461812707700677;  // std dev = 0.506, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2845575596106641;  // std dev = 0.957, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.1379559670573727;  // std dev = 1.05e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.16465918670926533;  // std dev = 0.398, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10342278940822011;  // std dev = 1.164, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.1577356672042129;  // std dev = 0.095, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.09526102695893775;  // std dev = 0.803, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.10591972352988299;  // std dev = 0.858, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.23526305708680662;  // std dev = 0.328, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return -0.07276717634194109;  // std dev = 0.257, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.1496908779182358;  // std dev = 0.000697, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(I, A), tweets(A, J) )
%   | | then return -0.06664761771302753;  // std dev = 3.73e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.01784478422829633;  // std dev = 0.347, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.013904785484789664;  // std dev = 1.381, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.14167551831052988;  // std dev = 0.201, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0.024478506649362686;  // std dev = 0.330, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then if ( follows(A, E) )
%   | | | then return -0.05633293172219832;  // std dev = 0.278, 77.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=2 */
%   | | | else return -0.04238143017401987;  // std dev = 0.967, 37.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=8 */
%   | | else return -0.012587897363002473;  // std dev = 0.094, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2065333985633899;  // std dev = 0.234, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.09090934905039076;  // std dev = 0.135, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.02781709383498817;  // std dev = 0.588, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.008934992181546399;  // std dev = 1.388, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.642', 'seconds']
Refined model CLL: -0.100706


******************************************
Best model found
******************************************
Results 

CLL : -0.097571 

AUC ROC : 0.99293 

AUC PR : 0.353927 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 19.101 

Total Inference Time : 15.130459070205688 

Total revision time: 40.20748495674133
Best scored revision CLL: -0.100706


Results 

CLL : -0.097571 

AUC ROC : 0.99293 

AUC PR : 0.353927 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 45.370381589889526 

Total Inference Time : 15.130459070205688 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.283
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8327252062859514;  // std dev = 1.710, 118.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=115 */
%   | | else return 0.8116373071925351;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | else return -0.14185106490048785;  // std dev = 4.56e-09, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1676508718246288;  // std dev = 8.615, 452.000 (wgt'ed) examples reached here.  /* #neg=296 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.14365706257442507;  // std dev = 7.667, 369.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=128 */
%   | | | else return 0.1192685822043502;  // std dev = 3.671, 88.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6594986906578236;  // std dev = 0.023, 128.000 (wgt'ed) examples reached here.  /* #pos=128 */
%   | else return -0.16375597137433137;  // std dev = 2.33e-07, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10846599288414084;  // std dev = 3.589, 86.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06651781500254804;  // std dev = 5.209, 296.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=97 */
%   | | else return 0.08143285986385462;  // std dev = 0.352, 175.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.507837495246975;  // std dev = 0.667, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1574971566944398;  // std dev = 0.237, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0414394960948343;  // std dev = 4.646, 324.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06230731666631506;  // std dev = 2.794, 106.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.010146867578767815;  // std dev = 4.740, 408.000 (wgt'ed) examples reached here.  /* #neg=280 #pos=128 */
%   | | | else return 0.04202822111336935;  // std dev = 2.856, 86.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3390789429097969;  // std dev = 0.995, 129.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=128 */
%   | | | else return -0.13873599042651028;  // std dev = 0.029, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05362097324020615;  // std dev = 2.774, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.017151579415279082;  // std dev = 4.706, 445.000 (wgt'ed) examples reached here.  /* #neg=289 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.774', 'seconds']
Parameter learned model CLL:-0.16162 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.71, 3, 115], 'false,true,false': [1.381, 2, 41], 'false,false': [4.56e-09, 297, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.615, 296, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.667, 241, 128], 'false,false,false,false': [3.671, 60, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.023, 0, 128], 'true,false': [2.33e-07, 249, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.589, 58, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.209, 199, 97], 'false,false,false': [0.352, 116, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.667, 0, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.237, 300, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.646, 209, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.794, 65, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.74, 280, 128], 'false,false,false,false': [2.856, 58, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.995, 1, 128], 'false,false,true,false': [0.029, 262, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.774, 51, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.706, 289, 156]}]
{'': [nan, 0.22459525943441508], 'false': [0.030091431657735174, 2.392399783704041e-17], 'false,true': [0.024777362826777165, 0.044348296376420925]}
{'': [nan, 0.16420978944904793], 'false': [nan, 0.16420978944905254], 'false,false': [nan, 0.16420978944904793], 'false,false,false': [nan, 0.16420978944905254]}
{'': [nan, 0.15821539960393857], 'false': [nan, 0.1582153996039349], 'false,false': [nan, 0.1582153996039349], 'false,false,false': [0.15931726578230493, 0.15311481080611825]}
{'': [0.15198439286042856, 0.14979148658171765], 'true': [4.101325214778129e-06, 2.1758587791850457e-16], 'false': [nan, 0.14979148658171765], 'false,false': [nan, 0.14979148658171765], 'false,false,false': [nan, 0.14979148658171765]}
{'': [nan, 0.10364841994374593], 'false': [nan, 0.10364841994374602], 'false,false': [0.09165163570894799, 0.12380031945607904], 'false,false,true': [nan, 0.09165163570894799]}
{'': [nan, 0.10073023883186295], 'false': [nan, 0.10073023883186295], 'false,false': [0.0028515270745937816, 0.00018736399927439252], 'false,false,false': [nan, 0.0001873639992745198]}
{'': [0.06662849912752407, 0.0736313794490587], 'false': [nan, 0.0736313794490587], 'false,false': [nan, 0.0736313794490587], 'false,false,false': [nan, 0.0736313794490587], 'true': [nan, 0.06662849912752407]}
{'': [nan, 0.06215188144291703], 'false': [nan, 0.06215188144291703], 'false,false': [nan, 0.06215188144291703], 'false,false,false': [0.05507916806835339, 0.09486667657605521]}
{'': [nan, 0.060640147061820956], 'false': [nan, 0.060640147061821074], 'false,false': [0.05300915817092511, 0.09740616323802058], 'false,false,false': [nan, 0.09740616323802058], 'false,false,true': [0.007681475518700872, 3.157350639102598e-06]}
{'': [nan, 0.04976649336280214], 'false': [nan, 0.049766493362801666], 'false,false': [nan, 0.04976649336280214]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 33.202
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.8581489350995122;  // std dev = 1.19e-07, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.1418510649004877;  // std dev = 1.55e-07, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.7219861363457009;  // std dev = 0.021, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( follows(A, F), follows(C, F) )
%   | | | then return 0.7194734122109543;  // std dev = 5.96e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.6425503352878775;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | else return -0.1222197604721348;  // std dev = 0.052, 262.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.7310012243166282;  // std dev = 0.022, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.15619471171805724;  // std dev = 1.195, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.25007449513354013;  // std dev = 1.260, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.1756911752117082;  // std dev = 2.314, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.560315872991021;  // std dev = 0.051, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5809970599467088;  // std dev = 0.241, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.26587692626202425;  // std dev = 0.875, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.11394420767244881;  // std dev = 0.091, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.08093711758411039;  // std dev = 2.300, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
%   | | | else return 0.13013492364031015;  // std dev = 3.137, 72.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.40837454190523326;  // std dev = 1.002, 88.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=87 */
%   | | | else return 0.5002150748020593;  // std dev = 0.176, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.41751358415830986;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5562117614805157;  // std dev = 0.195, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.10832129211399585;  // std dev = 0.192, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3662571002533529;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( tweets(A, I), follows(J, A) )
%   | | then return -0.08709720134399895;  // std dev = 0.138, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.05482293296511444;  // std dev = 1.399, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.14315649343516723;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.29138982370273186;  // std dev = 0.172, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | else return 0.33384093023268724;  // std dev = 0.054, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.11658583239664728;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.36824535542147596;  // std dev = 0.377, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.09433892530595994;  // std dev = 0.124, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.38434991758523085;  // std dev = 0.214, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.11158702442657864;  // std dev = 0.020, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08791506269638891;  // std dev = 1.540, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.06918382673903349;  // std dev = 1.987, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(D, F) )
%   | | | then return 0.23150677659120528;  // std dev = 1.390, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | | | else return 0.05581962700118206;  // std dev = 0.909, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(G, A), follows(G, E) )
%   | | | then return 0.25576464091657164;  // std dev = 0.071, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.3170368808904685;  // std dev = 0.126, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.27127318062003086;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.06472245981967654;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.4582755857756037;  // std dev = 0.133, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5383675866912425;  // std dev = 0.956, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.10021898673008608;  // std dev = 0.553, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.19611571855561044;  // std dev = 0.158, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return 0.21801250879671405;  // std dev = 0.039, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.22449176637763196;  // std dev = 0.019, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return -0.2852838383706813;  // std dev = 0.973, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.23761137963055268;  // std dev = 0.232, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.07918185351604726;  // std dev = 0.117, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.20526277096881795;  // std dev = 0.032, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.00121494853917951;  // std dev = 1.718, 106.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=29 */
%   | | | else return 0.04774260708367099;  // std dev = 1.869, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(C, D) )
%   | | then if ( follows(E, C), follows(E, D) )
%   | | | then return 0.1758879303910662;  // std dev = 0.999, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | | else return 0.12554821103083472;  // std dev = 0.968, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.24633693997207926;  // std dev = 0.055, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.08029879370780267;  // std dev = 0.257, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.19229947248103246;  // std dev = 0.068, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.07296057429413275;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.008168636264445058;  // std dev = 0.502, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.08530492799040931;  // std dev = 1.011, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.011349057302752263;  // std dev = 1.507, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.12783112292408927;  // std dev = 0.181, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   | | else return 0.19583750370677477;  // std dev = 0.046, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return -0.07439309579768143;  // std dev = 0.269, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, F), recursion_accounttype(F, B) )
%   | | | then return 0.10140040353314805;  // std dev = 0.975, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.06333474095034879;  // std dev = 0.905, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07945454715959625;  // std dev = 0.106, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.45558533852634175;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.18839722077074852;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.017867050167713318;  // std dev = 0.311, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.1482303399976446;  // std dev = 0.023, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(D, A), tweets(A, E) )
%   | | | then return 0.07588569315298657;  // std dev = 0.963, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.14111998069324802;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.1452420282501797;  // std dev = 0.078, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(F, A) )
%   | then return -0.05428198389878946;  // std dev = 0.107, 270.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=23 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.177739101868986;  // std dev = 0.252, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.0852327642373008;  // std dev = 0.134, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.008047215780868476;  // std dev = 0.829, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.0715681188515695;  // std dev = 1.394, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.849', 'seconds']
Refined model CLL: -0.098784


******************************************
Best model found
******************************************
Results 

CLL : -0.095545 

AUC ROC : 0.994135 

AUC PR : 0.404059 

Precision : 0.346154 

Recall : 1.0 

F1 : 0.514286 

Total Learning Time : 33.202 

Total Inference Time : 20.471013069152832 

Total revision time: 60.86125598907471
Best scored revision CLL: -0.098784


Results 

CLL : -0.095545 

AUC ROC : 0.994135 

AUC PR : 0.404059 

Precision : 0.346154 

Recall : 1.0 

F1 : 0.514286 

Total Learning Time : 66.0241526222229 

Total Inference Time : 20.471013069152832 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 0.979
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12904875024852017;  // std dev = 3.532, 83.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.16381356395873664;  // std dev = 3.183, 63.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=23 */
%   | | | else return 0.415037632041711;  // std dev = 0.680, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.5767825437845251;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | else return -0.16124566965124038;  // std dev = 2.98e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.33270996781998624;  // std dev = 0.650, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09762657933469193;  // std dev = 2.170, 47.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=17 */
%   | | else return 0.13906724675836016;  // std dev = 0.340, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.38341647803437695;  // std dev = 1.631, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1623685927232664;  // std dev = 0.218, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.023983509247783957;  // std dev = 1.968, 62.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=19 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.011614993635338026;  // std dev = 1.220, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.004588623080705935;  // std dev = 2.361, 76.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=23 */
%   | | | else return 0.0627219466846337;  // std dev = 0.638, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3489645929091469;  // std dev = 0.977, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.13707206361987412;  // std dev = 0.010, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3672263253435283;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.00575238937228803;  // std dev = 1.853, 81.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=25 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.677', 'seconds']
Parameter learned model CLL:-0.166974 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 19], 'false,true,false': [0.0, 0, 6], 'false,false': [7.21e-09, 48, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.532, 58, 25]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.183, 40, 23], 'false,false,false,false': [0.68, 1, 2]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.356, 2, 23], 'true,false': [2.98e-08, 40, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.65, 1, 2]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.17, 30, 17], 'false,false,false': [0.34, 10, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.631, 3, 25], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.218, 48, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.968, 43, 19], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.22, 12, 6]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.361, 53, 23], 'false,false,false,false': [0.638, 2, 2]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.977, 1, 23], 'false,false,true,false': [0.01, 49, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 2]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.853, 56, 25]}]
{'': [nan, 0.22518296115594033], 'false': [7.105427357601002e-16, 5.3198186596622086e-17], 'false,true': [-2.8047739569477637e-16, -1.4802973661668753e-16]}
{'': [nan, 0.15025917304028177], 'false': [nan, 0.15025917304028186], 'false,false': [nan, 0.15025917304028177], 'false,false,false': [nan, 0.15025917304028186]}
{'': [nan, 0.16327976967073418], 'false': [nan, 0.1632797696707342], 'false,false': [nan, 0.1632797696707342], 'false,false,false': [0.160843351228327, 0.15419982150367886]}
{'': [0.15722737132004427, 0.14091733399922438], 'true': [0.0736000000000002, 2.2204460492503132e-17], 'false': [nan, 0.14091733399922438], 'false,false': [nan, 0.14091733399922438], 'false,false,false': [nan, 0.14091733399922438]}
{'': [nan, 0.10483920346367155], 'false': [nan, 0.10483920346367166], 'false,false': [0.10015865413519391, 0.11581887691249541], 'false,false,true': [nan, 0.10015865413519391]}
{'': [nan, 0.10494635880881505], 'false': [nan, 0.10494635880881505], 'false,false': [0.09502597601665201, 0.000987490653358537], 'false,false,false': [nan, 0.000987490653358537]}
{'': [0.06244224660478785, 0.08270920544728814], 'false': [nan, 0.08270920544728814], 'false,false': [nan, 0.08270920544728814], 'false,false,false': [nan, 0.08270920544728814], 'true': [nan, 0.06244224660478785]}
{'': [nan, 0.07491112211193077], 'false': [nan, 0.07491112211193077], 'false,false': [nan, 0.07491112211193077], 'false,false,false': [0.07332238985909612, 0.10188652576821182]}
{'': [nan, 0.06655771247539191], 'false': [nan, 0.0665577124753921], 'false,false': [0.06521630344017934, 0.0], 'false,false,true': [0.03979556676701668, 2.0825900946394413e-06], 'false,false,false': [nan, 0.0]}
{'': [nan, 0.0423698885568315], 'false': [nan, 0.04236988855683149], 'false,false': [nan, 0.0423698885568315]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 4.432
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.1254446385283914;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return 0.08578487415644506;  // std dev = 0.732, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.7609104304538484;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.1254446385283914;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.2970143868412815;  // std dev = 1.195, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.563530721093169;  // std dev = 0.095, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return -0.11231637819360642;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.06884910405875098;  // std dev = 0.801, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.02688137275322674;  // std dev = 1.242, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return -0.05960126052584484;  // std dev = 0.765, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.3033041814802936;  // std dev = 0.942, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.4155294101826435;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.46680171834956075;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.666894734420038;  // std dev = 0.057, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11550164218770843;  // std dev = 0.145, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return 0.1910276232232011;  // std dev = 0.593, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then return 0.22760129055143802;  // std dev = 0.312, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.33769711599285274;  // std dev = 0.050, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( follows(A, F), follows(E, A) )
%   | | then return -0.09152844960635344;  // std dev = 1.05e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0.4724798854169864;  // std dev = 0.167, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12352382239052823;  // std dev = 0.072, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.4632724141182489;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.27731276101690006;  // std dev = 0.069, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.30033702104328014;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3918595134401852;  // std dev = 0.064, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.1058507582977718;  // std dev = 0.209, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.22534617502292562;  // std dev = 0.060, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2416725360524508;  // std dev = 0.065, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return -0.07675490705348692;  // std dev = 0.013, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.0010302012670388092;  // std dev = 0.413, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.05233490258557093;  // std dev = 0.536, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.08921086445243234;  // std dev = 0.442, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18997200200086012;  // std dev = 0.079, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, D) )
%   | | | then return -0.09747732678309695;  // std dev = 0.724, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.1695632533716689;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.06451485851436886;  // std dev = 0.435, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.07599802577049289;  // std dev = 0.035, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.24206244681143946;  // std dev = 0.092, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12892506912653331;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.09143879858617439;  // std dev = 0.457, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.16243954347395317;  // std dev = 0.055, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.25100350071617666;  // std dev = 0.180, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A) )
%   | | then return -0.06787048895383355;  // std dev = 0.047, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.15030728976137162;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return 0.022616224773935392;  // std dev = 0.339, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(C, D), recursion_accounttype(C, B) )
%   | | | then return 0.15095517781148637;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.5202366028960879;  // std dev = 0.805, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.13629135747989732;  // std dev = 0.040, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(C, D), follows(A, C) )
%   | | then return -0.06305385217967112;  // std dev = 0.020, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(A, F), follows(D, G) )
%   | | | then return -0.0129911036432857;  // std dev = 0.365, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.0819931236272936;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( recursion_accounttype(I, B) )
%   | | then return 0.1678025866004249;  // std dev = 0.057, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1006766288825484;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.22301135801092434;  // std dev = 0.084, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.195', 'seconds']
Refined model CLL: -0.110005


******************************************
Best model found
******************************************
Results 

CLL : -0.124108 

AUC ROC : 0.995088 

AUC PR : 0.438915 

Precision : 0.350835 

Recall : 0.942308 

F1 : 0.511304 

Total Learning Time : 4.432 

Total Inference Time : 2.5632503032684326 

Total revision time: 9.418553577423097
Best scored revision CLL: -0.110005


Results 

CLL : -0.124108 

AUC ROC : 0.995088 

AUC PR : 0.438915 

Precision : 0.350835 

Recall : 0.942308 

F1 : 0.511304 

Total Learning Time : 14.58145021057129 

Total Inference Time : 2.5632503032684326 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.203
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8337586911970727;  // std dev = 0.988, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1304068068390974;  // std dev = 5.049, 166.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=50 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13402832845849527;  // std dev = 4.732, 144.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=47 */
%   | | | else return 0.12089227046234975;  // std dev = 1.232, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6307453163135601;  // std dev = 1.390, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | else return -0.15743794567257127;  // std dev = 7.30e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03518801936590247;  // std dev = 1.257, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.059091080888745554;  // std dev = 3.418, 118.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=37 */
%   | | else return 0.10225519642011709;  // std dev = 0.353, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4736984422065448;  // std dev = 1.414, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14629187980614797;  // std dev = 0.045, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03908158915944089;  // std dev = 2.813, 122.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=40 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0215606977858623;  // std dev = 1.565, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.00666449157703938;  // std dev = 3.157, 164.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=47 */
%   | | | else return 0.12420967690391234;  // std dev = 0.996, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.33984262986428765;  // std dev = 1.364, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | | else return -0.13237663866020213;  // std dev = 0.008, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04364285884420108;  // std dev = 0.937, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.013437760926511128;  // std dev = 2.654, 158.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=50 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.502', 'seconds']
Parameter learned model CLL:-0.151169 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.988, 1, 40], 'false,true,false': [0.953, 1, 10], 'false,false': [8.93e-09, 100, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.049, 116, 50]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.732, 97, 47], 'false,false,false,false': [1.232, 6, 3]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.39, 2, 47], 'true,false': [7.3e-08, 92, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.257, 10, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.418, 81, 37], 'false,false,false': [0.353, 23, 13]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.414, 2, 50], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.045, 100, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.813, 82, 40], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.565, 33, 10]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.157, 117, 47], 'false,false,false,false': [0.996, 3, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.364, 2, 47], 'false,false,true,false': [0.008, 87, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.937, 6, 3]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.654, 108, 50]}]
{'': [nan, 0.22074099722991755], 'false': [0.03698224852071041, 7.993605777301127e-17], 'false,true': [0.023795359904820054, 0.0826446280991734]}
{'': [nan, 0.15355096291393247], 'false': [nan, 0.1535509629139323], 'false,false': [nan, 0.15355096291393247], 'false,false,false': [nan, 0.1535509629139323]}
{'': [nan, 0.1562978454911465], 'false': [nan, 0.15629784549114611], 'false,false': [nan, 0.15629784549114611], 'false,false,false': [0.15551149864489305, 0.16871698936561674]}
{'': [0.1545658079452467, 0.121464937897057], 'true': [0.039427575594975464, 5.792467954566034e-17], 'false': [nan, 0.121464937897057], 'false,false': [nan, 0.121464937897057], 'false,false,false': [nan, 0.121464937897057]}
{'': [nan, 0.10529387856066971], 'false': [nan, 0.10529387856066932], 'false,false': [0.09900418359170793, 0.1244824995133913], 'false,false,true': [nan, 0.09900418359170793]}
{'': [nan, 0.09969042371381391], 'false': [nan, 0.09969042371381391], 'false,false': [0.03847681482066172, 2.0342652404354843e-05], 'false,false,false': [nan, 2.0342652404345963e-05]}
{'': [0.06486981792639454, 0.05695592857389593], 'true': [nan, 0.06486981792639454], 'false': [nan, 0.05695592857389593], 'false,false': [nan, 0.05695592857389593], 'false,false,false': [nan, 0.05695592857389593]}
{'': [nan, 0.06494930739241363], 'false': [nan, 0.06494930739241363], 'false,false': [nan, 0.06494930739241363], 'false,false,false': [0.06079000113559324, 0.16530779540822058]}
{'': [nan, 0.06709720189840204], 'false': [nan, 0.06709720189840213], 'false,false': [0.06508600309731598, 0.09745620359149493], 'false,false,false': [nan, 0.09745620359149493], 'false,false,true': [0.03799697482996571, 6.828835396899396e-07]}
{'': [nan, 0.04457975808184231], 'false': [nan, 0.04457975808184226], 'false,false': [nan, 0.04457975808184231]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 9.585
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.6914822684328454;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.724675515693896;  // std dev = 0.058, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.0743929157517866;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.733350235915775;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.12544463852839147;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.7287246280141682;  // std dev = 0.039, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1254446385283914;  // std dev = 7.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1561947117180572;  // std dev = 0.690, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.004742059851341998;  // std dev = 0.782, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.566308785218072;  // std dev = 0.087, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.5663364514025473;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.23096062457357927;  // std dev = 0.829, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, F), follows(G, A) )
%   | then if ( follows(G, F) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.08674860641074461;  // std dev = 1.036, 58.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=2 */
%   | | | else return -0.03252017801510018;  // std dev = 1.080, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | | else return 0.21981040576647087;  // std dev = 0.664, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.5540814904287394;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10948269369270852;  // std dev = 1.215, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return -0.05194707997110217;  // std dev = 1.137, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4271910053040912;  // std dev = 0.143, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.3131595317395203;  // std dev = 0.765, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5681238936317273;  // std dev = 0.237, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5941823335732611;  // std dev = 0.167, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.11347583279219055;  // std dev = 0.187, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else return 0.20704053575758366;  // std dev = 0.574, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.324830714604985;  // std dev = 0.132, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.14760570327033612;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, E), tweets(C, F) )
%   | | then return -0.1446115327204594;  // std dev = 1.055, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.3746353175985565;  // std dev = 0.067, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.08536379350606503;  // std dev = 0.092, 56.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=1 */
%   | | else return -0.0014705217175115795;  // std dev = 0.197, 34.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=7 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.3817911475827958;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11191887249420417;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.11699318603078034;  // std dev = 0.808, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.2593747010914778;  // std dev = 0.134, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.07648947461469352;  // std dev = 0.636, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.28193135649310425;  // std dev = 0.093, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3488751808776551;  // std dev = 0.069, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(H, A) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.46396238717337;  // std dev = 0.191, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.39869038433975434;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.29803727874412855;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.40682084401244706;  // std dev = 0.273, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09813476115719305;  // std dev = 0.154, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.2143227534159372;  // std dev = 0.110, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.29632915959896455;  // std dev = 0.098, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), tweets(D, F) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.0510134312272491;  // std dev = 0.902, 61.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=5 */
%   | | | else return 0.048773628474569376;  // std dev = 0.340, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.0878780798782732;  // std dev = 0.032, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.26182608588889666;  // std dev = 0.117, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.09870708972452433;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.0017599769045310175;  // std dev = 0.956, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.18051766339185757;  // std dev = 0.098, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.23884420651530236;  // std dev = 0.086, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.22586201872153794;  // std dev = 0.114, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return -0.03353792428519691;  // std dev = 0.918, 45.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=5 */
%   | | | else return -0.0831752579296126;  // std dev = 0.042, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.034918489152553474;  // std dev = 0.583, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.115249961830213;  // std dev = 0.617, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.13115080185038314;  // std dev = 0.985, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return -0.13097064479593626;  // std dev = 0.763, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.33078338540243934;  // std dev = 0.226, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2839648197709781;  // std dev = 0.232, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return -0.0793551163605317;  // std dev = 0.098, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else return -0.126952789543761;  // std dev = 0.022, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.1542324311132038;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.0929966097358934;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(C, A), tweets(A, E) )
%   | | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | | then return 0.13164166614478562;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.04463598792499177;  // std dev = 0.879, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.16901484535702907;  // std dev = 0.035, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.1691867682989585;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(F, H) )
%   | | | then return 0.28293328424054087;  // std dev = 0.195, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.23069041601004153;  // std dev = 0.208, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.07686187457249569;  // std dev = 0.015, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return -0.11657718720586976;  // std dev = 0.872, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.0854438242802798;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.966', 'seconds']
Refined model CLL: -0.100242


******************************************
Best model found
******************************************
Results 

CLL : -0.100055 

AUC ROC : 0.996264 

AUC PR : 0.550345 

Precision : 0.346247 

Recall : 0.916667 

F1 : 0.502636 

Total Learning Time : 9.585 

Total Inference Time : 5.248564004898071 

Total revision time: 18.125931156158448
Best scored revision CLL: -0.100242


Results 

CLL : -0.100055 

AUC ROC : 0.996264 

AUC PR : 0.550345 

Precision : 0.346247 

Recall : 0.916667 

F1 : 0.502636 

Total Learning Time : 23.28882778930664 

Total Inference Time : 5.248564004898071 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.508
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.7936328060672545;  // std dev = 1.934, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | | else return 0.8025933795439567;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return -0.141851064900488;  // std dev = 0.000, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14413234698780478;  // std dev = 6.153, 238.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=75 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12310285136594853;  // std dev = 5.959, 227.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=72 */
%   | | | else return 0.007033895738785106;  // std dev = 1.329, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6626502211218797;  // std dev = 0.993, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | else return -0.15780973388067573;  // std dev = 9.42e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13855981857416733;  // std dev = 1.195, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08689584499589159;  // std dev = 4.008, 157.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=55 */
%   | | else return 0.09150722899683958;  // std dev = 0.335, 57.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4660923871017192;  // std dev = 1.646, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15162770569125295;  // std dev = 0.093, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.044225565210413306;  // std dev = 3.333, 167.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=58 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07580989579808416;  // std dev = 1.625, 42.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.020466615743291096;  // std dev = 3.747, 220.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=72 */
%   | | | else return 0.013151858468821385;  // std dev = 1.031, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.36544446473500874;  // std dev = 0.038, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | | else return -0.13874817832498076;  // std dev = 0.018, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03185592941510112;  // std dev = 1.071, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.016296916489513525;  // std dev = 3.035, 220.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=75 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.699', 'seconds']
Parameter learned model CLL:-0.154875 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.934, 4, 58], 'false,true,false': [0.972, 1, 17], 'false,false': [0.0, 140, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.153, 163, 75]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.959, 155, 72], 'false,false,false,false': [1.329, 14, 3]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.993, 1, 72], 'true,false': [9.42e-08, 130, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.195, 6, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.008, 102, 55], 'false,false,false': [0.335, 37, 20]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.646, 3, 75], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.093, 137, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.333, 109, 58], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.625, 25, 17]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.747, 148, 72], 'false,false,false,false': [1.031, 9, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.038, 0, 72], 'false,false,true,false': [0.018, 114, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.071, 13, 3]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.035, 145, 75]}]
{'': [nan, 0.22469008264462814], 'false': [0.05859374999999893, -7.930164461608261e-17], 'false,true': [0.06035379812695064, 0.05246913580246885]}
{'': [nan, 0.1590488332838108], 'false': [nan, 0.15904883328381034], 'false,false': [nan, 0.1590488332838108], 'false,false,false': [nan, 0.15904883328381034]}
{'': [nan, 0.15365659311734142], 'false': [nan, 0.1536565931173419], 'false,false': [nan, 0.1536565931173419], 'false,false,false': [0.1564493787588132, 0.1038313113901419]}
{'': [0.15987479274233624, 0.15853922987535085], 'true': [0.013499141018287088, 6.832141690000964e-17], 'false': [nan, 0.15853922987535085], 'false,false': [nan, 0.15853922987535085], 'false,false,false': [nan, 0.15853922987535085]}
{'': [nan, 0.10488371241877104], 'false': [nan, 0.10488371241877124], 'false,false': [0.10233191872739986, 0.11189673629063791], 'false,false,true': [nan, 0.10233191872739986]}
{'': [nan, 0.10085893533005871], 'false': [nan, 0.10085893533005871], 'false,false': [0.034751697117668956, 6.364315129963227e-05], 'false,false,false': [nan, 6.36431512995869e-05]}
{'': [0.0665111248063332, 0.06286983894501426], 'true': [nan, 0.0665111248063332], 'false': [nan, 0.06286983894501426], 'false,false': [nan, 0.06286983894501426], 'false,false,false': [nan, 0.06286983894501426]}
{'': [nan, 0.06510734410762063], 'false': [nan, 0.06510734410762063], 'false,false': [nan, 0.06510734410762063], 'false,false,false': [0.0638238584683776, 0.08858717602128635]}
{'': [nan, 0.06178796930311148], 'false': [nan, 0.061787969303111465], 'false,false': [0.060321459626514334, 0.0716602284469401], 'false,false,false': [nan, 0.0716602284469401], 'false,false,true': [1.9647653654672778e-05, 2.857918360924703e-06]}
{'': [nan, 0.04187153151486903], 'false': [nan, 0.041871531514869], 'false,false': [nan, 0.04187153151486903]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 24.486
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.14185106490048813;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(A, E), tweets(A, D) )
%   | | then if ( follows(C, E), recursion_accounttype(C, B) )
%   | | | then return 0.7194734122109543;  // std dev = 5.96e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.5242332672135313;  // std dev = 1.273, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.7250732416257504;  // std dev = 0.089, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return -0.12544463852839105;  // std dev = 7.88e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.735339595552877;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.21252258176734692;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.5082438995261179;  // std dev = 0.732, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), tweets(D, E) )
%   | | then if ( follows(D, A), recursion_accounttype(C, B) )
%   | | | then return 0.5099827783559421;  // std dev = 0.932, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.5710476620898011;  // std dev = 0.221, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.3033487064248595;  // std dev = 0.865, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.11325191761007344;  // std dev = 0.066, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else if ( follows(F, A), follows(A, G) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.42779693829847304;  // std dev = 0.896, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.11231637819360635;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.07388672001129296;  // std dev = 0.377, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.32091796548876084;  // std dev = 1.897, 38.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=34 */
%   | | | else return 0.3944615599941532;  // std dev = 0.894, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.43976142775247834;  // std dev = 0.109, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5691787758909361;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10697274607204307;  // std dev = 0.233, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5097439874352756;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.35398333767790213;  // std dev = 0.148, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.34149719007700574;  // std dev = 0.056, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.23314112988282246;  // std dev = 0.957, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.0921618061723932;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | | else return -0.12087928357639459;  // std dev = 0.467, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3401738506913826;  // std dev = 0.107, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09511092298880856;  // std dev = 0.031, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0822864826775537;  // std dev = 0.478, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.052370890994900214;  // std dev = 1.089, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.2736085506750676;  // std dev = 0.103, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.17515448752507362;  // std dev = 1.379, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return 0.40678553121291905;  // std dev = 0.148, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.054757052304930665;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.089104411981641;  // std dev = 0.233, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), tweets(C, E) )
%   | | then return 0.2300790230446862;  // std dev = 0.094, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( tweets(A, F), tweets(C, G) )
%   | | | then return -0.03682475847590658;  // std dev = 0.865, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.22604786271706598;  // std dev = 0.083, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.04328067803558178;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(H, A) )
%   | then return -0.04536371962501555;  // std dev = 0.119, 120.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=15 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.235983546865434;  // std dev = 0.087, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08486208113405636;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.004057167189087786;  // std dev = 0.400, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.03171752046721031;  // std dev = 0.725, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, C) )
%   | then return 0.19169576099855973;  // std dev = 0.106, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.27561544348991107;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.22707223820336492;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1024354093074978;  // std dev = 0.726, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.06663834039031173;  // std dev = 0.443, 80.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=2 */
%   | | | else return -0.02147804640065144;  // std dev = 0.801, 47.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.0018317603175840894;  // std dev = 0.582, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return -0.03265362156751854;  // std dev = 0.895, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.13515694531751038;  // std dev = 0.974, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.020078812954152897;  // std dev = 1.574, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.16262664837834187;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21507947039611874;  // std dev = 0.745, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return -0.07153484435510214;  // std dev = 0.027, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.08677489723064978;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.16671296582729853;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(K, A), recursion_accounttype(K, B) )
%   | then return 0.2317600386186911;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.06893313190975632;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.14634046159376574;  // std dev = 0.046, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( tweets(A, E), tweets(C, E) )
%   | | | then return 0.0054539272353579015;  // std dev = 0.914, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.14839272211081478;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.17133727650140526;  // std dev = 0.023, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.1360320962344101;  // std dev = 0.246, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.06659595733152011;  // std dev = 0.014, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.1332460373087161;  // std dev = 0.834, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0028338853860109523;  // std dev = 0.497, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return -0.0042859080532569125;  // std dev = 0.758, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '43.519', 'seconds']
Refined model CLL: -0.097465


******************************************
Best model found
******************************************
Results 

CLL : -0.094036 

AUC ROC : 0.995955 

AUC PR : 0.517812 

Precision : 0.342043 

Recall : 0.923077 

F1 : 0.499133 

Total Learning Time : 24.486 

Total Inference Time : 23.918557167053223 

Total revision time: 52.710540575027466
Best scored revision CLL: -0.097465


Results 

CLL : -0.094036 

AUC ROC : 0.995955 

AUC PR : 0.517812 

Precision : 0.342043 

Recall : 0.923077 

F1 : 0.499133 

Total Learning Time : 57.87343720817566 

Total Inference Time : 23.918557167053223 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.756
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8456489350995124;  // std dev = 0.994, 80.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=79 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048832;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14627428971758552;  // std dev = 6.993, 310.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=100 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13462693413153354;  // std dev = 6.549, 275.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=92 */
%   | | | else return 0.08770340540911382;  // std dev = 2.008, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6403429439856548;  // std dev = 1.400, 94.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=92 */
%   | else return -0.15963453328669072;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12193657479957076;  // std dev = 1.908, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07286907431050745;  // std dev = 4.497, 215.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=71 */
%   | | else return 0.08154026999108942;  // std dev = 0.334, 86.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=29 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45172287394523136;  // std dev = 2.237, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.150198716445951;  // std dev = 0.097, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05239257065704877;  // std dev = 3.802, 223.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=79 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02946030348728302;  // std dev = 1.998, 63.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.021263328996103344;  // std dev = 4.124, 285.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=92 */
%   | | | else return 0.011224470437733454;  // std dev = 1.625, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.34117743957928576;  // std dev = 1.399, 94.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=92 */
%   | | | else return -0.13854331051527047;  // std dev = 0.009, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09860787165817739;  // std dev = 1.467, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.020770776083841064;  // std dev = 3.700, 280.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=100 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.606', 'seconds']
Parameter learned model CLL:-0.157265 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.994, 1, 79], 'false,true,false': [0.0, 0, 21], 'false,false': [0.0, 184, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.993, 210, 100]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.549, 183, 92], 'false,false,false,false': [2.008, 21, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.4, 2, 92], 'true,false': [0.0, 173, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.908, 16, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.497, 144, 71], 'false,false,false': [0.334, 57, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.237, 5, 100], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.097, 191, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.802, 144, 79], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.998, 42, 21]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.124, 193, 92], 'false,false,false,false': [1.625, 22, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.399, 2, 92], 'false,false,true,false': [0.009, 174, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.467, 12, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.7, 180, 100]}]
{'': [nan, 0.22776238842721036], 'false': [0.00980296049407087, -2.0756343503861623e-16], 'false,true': [0.012343749999999164, 0.0]}
{'': [nan, 0.15776512532031106], 'false': [nan, 0.1577651253203107], 'false,false': [nan, 0.15776512532031106], 'false,false,false': [nan, 0.1577651253203107]}
{'': [nan, 0.15453918169173245], 'false': [nan, 0.15453918169173253], 'false,false': [nan, 0.15453918169173253], 'false,false,false': [0.15597037573759054, 0.13897573827327267]}
{'': [0.1533274885857197, 0.1516642437914066], 'true': [0.020857014459053254, -2.721009031451251e-16], 'false': [nan, 0.1516642437914066], 'false,false': [nan, 0.1516642437914066], 'false,false,false': [nan, 0.1516642437914066]}
{'': [nan, 0.09906083329342812], 'false': [nan, 0.09906083329342823], 'false,false': [0.09404652739645597, 0.11154289115405089], 'false,false,true': [nan, 0.09404652739645597]}
{'': [nan, 0.09987425195052908], 'false': [nan, 0.09987425195052908], 'false,false': [0.047672576796631665, 4.952109140079532e-05], 'false,false,false': [nan, 4.952109140068372e-05]}
{'': [0.06481344763026549, 0.06333357372217993], 'true': [nan, 0.06481344763026549], 'false': [nan, 0.06333357372217993], 'false,false': [nan, 0.06333357372217993], 'false,false,false': [nan, 0.06333357372217993]}
{'': [nan, 0.06237080172050458], 'false': [nan, 0.06237080172050458], 'false,false': [nan, 0.06237080172050458], 'false,false,false': [0.05966204508345577, 0.08801280906094523]}
{'': [nan, 0.06334280834912241], 'false': [nan, 0.0633428083491224], 'false,false': [0.05970904952160667, 0.10761879837355048], 'false,false,false': [nan, 0.10761879837355048], 'false,false,true': [0.020819325726322856, 5.009154318513531e-07]}
{'': [nan, 0.04887987557601998], 'false': [nan, 0.048879875576019985], 'false,false': [nan, 0.04887987557601998]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 15.904
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8373156017661788;  // std dev = 0.990, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(G, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.14185106490048846;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7075112690830907;  // std dev = 0.122, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return -0.09193119488242568;  // std dev = 1.461, 77.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=3 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.7269881189064014;  // std dev = 0.028, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12544463852839124;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7337529772186846;  // std dev = 0.069, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.043538971619477854;  // std dev = 1.069, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.04353897161947782;  // std dev = 1.309, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(E, A), follows(C, E) )
%   | | then return 0.5346038532839194;  // std dev = 0.167, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else return 0.5598594686332706;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5592939839451778;  // std dev = 0.016, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5658683814525173;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.35831831303787537;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.09202907004025594;  // std dev = 1.482, 113.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=3 */
%   | | | else return 0.01581054918328354;  // std dev = 1.934, 53.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10749992770568519;  // std dev = 1.604, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | | else return 0.09099040682359184;  // std dev = 1.614, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.42663566514589946;  // std dev = 0.038, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.21824617685315179;  // std dev = 0.888, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.5265804853636814;  // std dev = 0.909, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.6915384784525553;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11261871413010437;  // std dev = 0.138, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.46904501045896996;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10346306766426777;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, C) )
%   | then if ( recursion_accounttype(D, B), follows(C, D) )
%   | | then return 0.3283700089856452;  // std dev = 0.023, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( follows(E, A), tweets(C, F) )
%   | | | then return 0.19942284501304455;  // std dev = 0.929, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.315917329053282;  // std dev = 0.038, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.35720481416418726;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.33519142689854386;  // std dev = 0.062, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4265548386735641;  // std dev = 0.867, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.0976250184049149;  // std dev = 0.038, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.021033669810311222;  // std dev = 1.270, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
%   | | | else return 0.053604062633635506;  // std dev = 1.298, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.26308551650215056;  // std dev = 0.063, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.060360657781990054;  // std dev = 1.154, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.26804900803553416;  // std dev = 0.064, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.32616975776370716;  // std dev = 0.867, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.3550934433525353;  // std dev = 0.149, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4428541952735574;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5187917397157651;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09609483646341821;  // std dev = 0.211, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2160553017793611;  // std dev = 0.079, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return -0.08049068637626747;  // std dev = 1.191, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.2665220059212506;  // std dev = 0.742, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.08181843312071288;  // std dev = 0.032, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | | else return -0.12107922275262874;  // std dev = 0.622, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.30523734190431173;  // std dev = 0.194, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10696125065318157;  // std dev = 0.024, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.08331794266623982;  // std dev = 0.583, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.004544294783096883;  // std dev = 0.766, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D), tweets(C, D) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.15102086426120714;  // std dev = 0.987, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.18382701037705987;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17718056737234814;  // std dev = 0.019, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.22637747578661002;  // std dev = 0.039, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.05674440827835504;  // std dev = 0.086, 112.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=5 */
%   | | else return -0.021007110238913457;  // std dev = 0.117, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.09562242844810614;  // std dev = 0.286, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.07284674804333864;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.02638187072831496;  // std dev = 1.255, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.13106019549239206;  // std dev = 1.238, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | | | else return -0.006893552038958306;  // std dev = 1.275, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.21222629710004415;  // std dev = 1.062, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.3561197106178744;  // std dev = 0.067, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07906984176031084;  // std dev = 0.202, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.17800025819776755;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.06596228570253895;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, D), follows(D, E) )
%   | | | then return 0.12179602115314343;  // std dev = 0.775, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.1612392608666029;  // std dev = 0.099, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.2155336768305422;  // std dev = 0.079, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.06792447950584614;  // std dev = 0.040, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.14919216358007878;  // std dev = 0.043, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return -0.20217585903227317;  // std dev = 0.604, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.06304643313814245;  // std dev = 0.008, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.02110956639189558;  // std dev = 0.773, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return 3.881823106913273E-4;  // std dev = 0.827, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.837', 'seconds']
Refined model CLL: -0.099118


******************************************
Best model found
******************************************
Results 

CLL : -0.097484 

AUC ROC : 0.995703 

AUC PR : 0.462331 

Precision : 0.345238 

Recall : 0.929487 

F1 : 0.503472 

Total Learning Time : 15.904 

Total Inference Time : 11.436004400253296 

Total revision time: 32.27948466300964
Best scored revision CLL: -0.099118


Results 

CLL : -0.097484 

AUC ROC : 0.995703 

AUC PR : 0.462331 

Precision : 0.345238 

Recall : 0.929487 

F1 : 0.503472 

Total Learning Time : 37.44238129615783 

Total Inference Time : 11.436004400253296 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.996
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8581489350995115;  // std dev = 3.58e-07, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.14185106490048832;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1881585206610864;  // std dev = 7.545, 337.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12964807207098827;  // std dev = 7.341, 351.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=118 */
%   | | | else return 0.12827287419218167;  // std dev = 1.911, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6263444524216147;  // std dev = 1.710, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | else return -0.16464784306366914;  // std dev = 4.21e-08, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09663207671918247;  // std dev = 1.903, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05452292550037254;  // std dev = 5.123, 282.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=89 */
%   | | else return 0.09818306659279341;  // std dev = 0.335, 99.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4675478998629924;  // std dev = 1.754, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15455689446592338;  // std dev = 0.164, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03465452954937622;  // std dev = 4.299, 287.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.017229656373357098;  // std dev = 2.231, 94.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.02089051413352645;  // std dev = 4.591, 365.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=118 */
%   | | | else return 0.0535508389169828;  // std dev = 1.501, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.31683465345981293;  // std dev = 2.190, 123.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=118 */
%   | | | else return -0.13867674637069086;  // std dev = 0.022, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.054077695303674164;  // std dev = 1.470, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015629078755884866;  // std dev = 4.016, 370.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.695', 'seconds']
Parameter learned model CLL:-0.156444 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [3.58e-07, 0, 97], 'false,true,false': [1.79e-07, 0, 29], 'false,false': [0.0, 241, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.545, 211, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.341, 233, 118], 'false,false,false,false': [1.911, 16, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.71, 3, 118], 'true,false': [4.21e-08, 236, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.903, 17, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.123, 193, 89], 'false,false,false': [0.335, 62, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.754, 3, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.164, 228, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.299, 190, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.231, 65, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.591, 247, 118], 'false,false,false,false': [1.501, 15, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.19, 5, 118], 'false,false,true,false': [0.022, 262, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.47, 14, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.016, 244, 126]}]
{'': [nan, 0.22545270957539496], 'false': [4.173028765575192e-15, -1.6584244351247152e-16], 'false,true': [1.3185329117197736e-15, 1.1025663141105003e-15]}
{'': [nan, 0.16892294764294638], 'false': [nan, 0.16892294764295057], 'false,false': [nan, 0.16892294764294638], 'false,false,false': [nan, 0.16892294764295057]}
{'': [nan, 0.15346496914333685], 'false': [nan, 0.15346496914333696], 'false,false': [nan, 0.15346496914333696], 'false,false,false': [0.15355189589347265, 0.1521918952882256]}
{'': [0.14838127300075943, 0.14485793316440293], 'true': [0.024178676319924503, 7.526935760170553e-18], 'false': [nan, 0.14485793316440293], 'false,false': [nan, 0.14485793316440293], 'false,false,false': [nan, 0.14485793316440293]}
{'': [nan, 0.0984457259708437], 'false': [nan, 0.09844572597084565], 'false,false': [0.09305075683919786, 0.11240231974920133], 'false,false,true': [nan, 0.09305075683919786]}
{'': [nan, 0.09800474322363217], 'false': [nan, 0.09800474322363217], 'false,false': [0.023845741980222202, 0.00011759499800298494], 'false,false,false': [nan, 0.00011759499800298494]}
{'': [0.0644100146746318, 0.05293785918543617], 'true': [nan, 0.0644100146746318], 'false': [nan, 0.05293785918543617], 'false,false': [nan, 0.05293785918543617], 'false,false,false': [nan, 0.05293785918543617]}
{'': [nan, 0.060190283333053554], 'false': [nan, 0.060190283333053554], 'false,false': [nan, 0.060190283333053554], 'false,false,false': [0.057747499381446965, 0.09795273777779917]}
{'': [nan, 0.059880472644346525], 'false': [nan, 0.05988047264434649], 'false,false': [0.0575667572988869, 0.09826062546008725], 'false,false,false': [nan, 0.09826062546008725], 'false,false,true': [0.0389831547088257, 1.904369770569959e-06]}
{'': [nan, 0.04358553758688536], 'false': [nan, 0.043585537586885395], 'false,false': [nan, 0.04358553758688536]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 15.954
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8409075557891676;  // std dev = 0.991, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.1418510649004883;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, D) )
%   | | then return 0.6991305367359419;  // std dev = 0.152, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0.722940060545466;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.7279915355338274;  // std dev = 0.066, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return 0.5580602985626727;  // std dev = 0.915, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.7308748768018979;  // std dev = 0.056, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6663032450875984;  // std dev = 0.978, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.12544463852839163;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.12286137838472408;  // std dev = 2.145, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | | else return 0.08578487415644521;  // std dev = 2.070, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.5487829086053914;  // std dev = 0.119, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return 0.237508859332674;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5642235700757703;  // std dev = 0.075, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.18676011356517982;  // std dev = 1.087, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.5340180274284342;  // std dev = 0.992, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return -0.11231637819360661;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.5726155428570481;  // std dev = 0.070, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.11914115841436997;  // std dev = 2.077, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | | else return 0.1326778810220896;  // std dev = 1.952, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.4197476952831298;  // std dev = 1.005, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return 0.15708056840526044;  // std dev = 1.168, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.44839136285639447;  // std dev = 0.180, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.6706005509122543;  // std dev = 0.011, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.10881375981627564;  // std dev = 0.271, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.41704317357926607;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1015963294878362;  // std dev = 9.13e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.32740025621871216;  // std dev = 0.063, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.2809234716389659;  // std dev = 0.246, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.08212374192061553;  // std dev = 0.071, 155.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=3 */
%   | | else if ( follows(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.3049932029079503;  // std dev = 0.946, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.09467757413296463;  // std dev = 0.717, 66.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.4615756949892301;  // std dev = 0.264, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1398586363644683;  // std dev = 0.007, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07523723898351012;  // std dev = 1.058, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.05440444372211034;  // std dev = 1.315, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.24482066172322284;  // std dev = 1.281, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | | else return -0.10941263518684681;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(D, G) )
%   | | | then return -0.35011881591544153;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.3361443136562908;  // std dev = 0.127, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.28863822641379344;  // std dev = 0.298, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.17741281598111266;  // std dev = 0.647, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.44808585314056604;  // std dev = 0.205, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.09342321390470207;  // std dev = 0.311, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2169128641429249;  // std dev = 0.008, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.11964925147734921;  // std dev = 1.090, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0.05703473408981191;  // std dev = 0.857, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.22507427471434846;  // std dev = 0.127, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then return -0.045316738342117496;  // std dev = 0.111, 222.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.27798758555908804;  // std dev = 0.096, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11373949983188526;  // std dev = 0.005, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.03390190655062774;  // std dev = 0.845, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.08855869096175906;  // std dev = 0.959, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then return 0.16195588986533022;  // std dev = 0.153, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else return 0.18571655989948266;  // std dev = 0.043, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.19354626462056265;  // std dev = 0.104, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(F, H) )
%   | | | then return 0.2802955487608918;  // std dev = 0.267, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.06245555001129947;  // std dev = 0.921, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.07499485789178828;  // std dev = 0.007, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2251189922871289;  // std dev = 0.134, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.017097530918679927;  // std dev = 0.842, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.02742305645136772;  // std dev = 1.257, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(F, B) )
%   | | | then return 0.1312833228790536;  // std dev = 1.649, 75.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=72 */
%   | | | else return 0.20965612925670243;  // std dev = 0.333, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.3192563716417802;  // std dev = 0.203, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.35039265566224614;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07893699350461057;  // std dev = 0.344, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.15874836851959084;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.07062901477155051;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.14315177228544784;  // std dev = 0.083, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.044356013271163064;  // std dev = 0.299, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.15757389755718307;  // std dev = 0.076, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(F, G) )
%   | | then if ( tweets(A, H), tweets(F, H) )
%   | | | then return -0.27860170617852986;  // std dev = 0.936, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.18991774969443698;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1904868824337465;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(I, A) )
%   | | then return -0.05081336551231976;  // std dev = 0.084, 217.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.03057209331987355;  // std dev = 1.055, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return -0.007655984676923445;  // std dev = 0.910, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.067', 'seconds']
Refined model CLL: -0.09824


******************************************
Best model found
******************************************
Results 

CLL : -0.097616 

AUC ROC : 0.99551 

AUC PR : 0.42058 

Precision : 0.347722 

Recall : 0.929487 

F1 : 0.506108 

Total Learning Time : 15.954 

Total Inference Time : 12.245152711868286 

Total revision time: 33.947679948806766
Best scored revision CLL: -0.09824


Results 

CLL : -0.097616 

AUC ROC : 0.99551 

AUC PR : 0.42058 

Precision : 0.347722 

Recall : 0.929487 

F1 : 0.506108 

Total Learning Time : 39.11057658195496 

Total Inference Time : 12.245152711868286 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.144
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.7672398441904211;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15839323857838203;  // std dev = 3.908, 93.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=31 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1068994774949824;  // std dev = 3.531, 84.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=25 */
%   | | | else return 0.13716353884146282;  // std dev = 1.686, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6757718339107163;  // std dev = 0.048, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.15755173824736232;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10089212803631042;  // std dev = 1.684, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05247812857092859;  // std dev = 2.309, 52.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=16 */
%   | | else return 0.11571761942755086;  // std dev = 0.365, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4884089109670798;  // std dev = 1.036, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15438452041014325;  // std dev = 0.144, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.044042492146991886;  // std dev = 2.098, 59.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=20 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.017539262060579843;  // std dev = 1.508, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.014998361151706278;  // std dev = 2.105, 85.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=25 */
%   | | | else return 0.04726393538097068;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3650135658402347;  // std dev = 0.071, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.133643371563679;  // std dev = 0.013, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.052246638614428145;  // std dev = 1.302, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.013500712808310937;  // std dev = 2.312, 113.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=31 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.474', 'seconds']
Parameter learned model CLL:-0.153935 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.348, 2, 20], 'false,true,false': [0.0, 0, 11], 'false,false': [7.9e-09, 59, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.908, 62, 31]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.531, 59, 25], 'false,false,false,false': [1.686, 12, 6]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.048, 0, 25], 'true,false': [0.0, 54, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.684, 13, 6]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.309, 36, 16], 'false,false,false': [0.365, 23, 15]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.036, 1, 31], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.144, 61, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.098, 39, 20], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.508, 23, 11]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.105, 60, 25], 'false,false,false,false': [1.333, 12, 6]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.071, 0, 25], 'false,false,true,false': [0.013, 52, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.302, 11, 6]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.312, 82, 31]}]
{'': [nan, 0.22341682419659875], 'false': [0.05693296602387652, 6.39789539614497e-17], 'false,true': [0.08264462809917356, -1.6148698540002277e-16]}
{'': [nan, 0.16425937089441234], 'false': [nan, 0.1642593708944112], 'false,false': [nan, 0.16425937089441234], 'false,false,false': [nan, 0.1642593708944112]}
{'': [nan, 0.1502613979688095], 'false': [nan, 0.15026139796880986], 'false,false': [nan, 0.15026139796880986], 'false,false,false': [0.14844265019260589, 0.15799460596000026]}
{'': [0.15024196476730023, 0.14932842950877806], 'true': [9.218462198198551e-05, -2.05596856412066e-17], 'false': [nan, 0.14932842950877806], 'false,false': [nan, 0.14932842950877806], 'false,false,false': [nan, 0.14932842950877806]}
{'': [nan, 0.1165004065316572], 'false': [nan, 0.11650040653165716], 'false,false': [0.1025403160374717, 0.1332930201872331], 'false,false,true': [nan, 0.1025403160374717]}
{'': [nan, 0.10500489543531547], 'false': [nan, 0.10500489543531547], 'false,false': [0.03351050204986833, 0.00033952029904188896], 'false,false,false': [nan, 0.0003395202990418817]}
{'': [0.07459733112743316, 0.06690620441445916], 'true': [nan, 0.07459733112743316], 'false': [nan, 0.06690620441445916], 'false,false': [nan, 0.06690620441445916], 'false,false,false': [nan, 0.06690620441445916]}
{'': [nan, 0.06042936406083826], 'false': [nan, 0.06042936406083826], 'false,false': [nan, 0.06042936406083826], 'false,false,false': [0.05212811157867126, 0.09877058981188785]}
{'': [nan, 0.06284354786219701], 'false': [nan, 0.06284354786219701], 'false,false': [0.054588084212239985, 0.09976456796607372], 'false,false,false': [nan, 0.09976456796607372], 'false,false,true': [0.00019954177472579105, 3.0643832812777142e-06]}
{'': [nan, 0.04729257067293396], 'false': [nan, 0.04729257067293395], 'false,false': [nan, 0.04729257067293396]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 9.666
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.12544463852839155;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.29701438684128156;  // std dev = 1.035, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(F, D), follows(F, A) )
%   | | then if ( follows(D, F) )
%   | | | then return -0.12616292757111094;  // std dev = 0.325, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.05460432554136632;  // std dev = 0.578, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11231637819360636;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.33314421452406207;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.11074332017535667;  // std dev = 0.668, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.14462520129472212;  // std dev = 1.051, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4175135841583098;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, F), follows(G, A) )
%   | | | then return 0.44859649392980455;  // std dev = 0.108, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4782230988152309;  // std dev = 0.044, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return -0.10287245272319448;  // std dev = 0.005, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.1189081541510137;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(J, A) )
%   | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10374252365080541;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( tweets(A, L) )
%   | | then return 0.09188205995151066;  // std dev = 0.660, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.2200575214119327;  // std dev = 0.805, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | then return 0.347653393250174;  // std dev = 0.102, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(G, D), follows(E, G) )
%   | | | then return -0.0924510038499753;  // std dev = 0.016, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.09669421046756926;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return -0.09258401049984176;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.020609575307540626;  // std dev = 0.534, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.020802679105152787;  // std dev = 0.985, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.08966506426248219;  // std dev = 1.167, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.2551722425694894;  // std dev = 2.36e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.2915250304113759;  // std dev = 0.119, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F), follows(A, F) )
%   | | | then return 0.30508814217423463;  // std dev = 0.058, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3590453266062591;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5607307935899083;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, A) )
%   | | then return -0.08596931277317624;  // std dev = 0.004, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.09325637617100861;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(I, A) )
%   | | then return -0.09308028073301147;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.22762808861500722;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20975771563253562;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.09878858427370418;  // std dev = 0.867, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2521178875243098;  // std dev = 0.222, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.07947727128222369;  // std dev = 0.031, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.1223642422967571;  // std dev = 0.111, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(H, A) )
%   | | then return -0.017392672320431228;  // std dev = 0.335, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.09497060221248821;  // std dev = 0.593, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.00618955589326924;  // std dev = 0.697, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(A, E), follows(C, E) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.17709649774527736;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2414610781480623;  // std dev = 0.091, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.16982218510864402;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.07344993574700778;  // std dev = 0.004, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.0844364487172755;  // std dev = 0.046, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.007589067702280128;  // std dev = 0.413, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.10761095232501353;  // std dev = 0.463, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.022930721004096932;  // std dev = 0.881, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.15233513086425374;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.17109445658993083;  // std dev = 0.109, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2537629660853363;  // std dev = 0.053, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then return -0.06868780757874;  // std dev = 0.003, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.07759129597727991;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.1098467064100565;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, I) )
%   | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | then return 0.22435131401249347;  // std dev = 0.187, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09389197435501179;  // std dev = 0.037, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.20112106990971365;  // std dev = 0.491, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(C, A) )
%   | then return 0.1342084114561566;  // std dev = 0.000327, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.17552442856876713;  // std dev = 0.070, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, E), tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.1251716083789001;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), follows(E, H) )
%   | | | then return -0.06482217431519693;  // std dev = 0.018, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.06803693539618512;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, I), follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.06657954965531938;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.03210817819511539;  // std dev = 0.256, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.03795435435635145;  // std dev = 0.445, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.01120653851850175;  // std dev = 0.838, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '56.165', 'seconds']
Refined model CLL: -0.103541


******************************************
Best model found
******************************************
Results 

CLL : -0.096735 

AUC ROC : 0.9944 

AUC PR : 0.457883 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 9.666 

Total Inference Time : 12.775196075439453 

Total revision time: 25.189285335540774
Best scored revision CLL: -0.103541


Results 

CLL : -0.096735 

AUC ROC : 0.9944 

AUC PR : 0.457883 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 25.208035526275637 

Total Inference Time : 12.775196075439453 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.397
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.1418510649004879;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13755917585200275;  // std dev = 5.533, 198.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=62 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1476362851625567;  // std dev = 4.755, 144.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=50 */
%   | | | else return 0.16129648207335054;  // std dev = 2.300, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6389008734560953;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return -0.1602114533412422;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15438913725273012;  // std dev = 2.217, 31.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06333128494152573;  // std dev = 3.154, 111.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=35 */
%   | | else return 0.0915266581113818;  // std dev = 0.357, 74.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=27 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49362809970350247;  // std dev = 0.967, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16046939259247842;  // std dev = 0.238, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06344075937899694;  // std dev = 2.817, 119.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=45 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03642162785999731;  // std dev = 1.728, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.016797016527462107;  // std dev = 2.930, 157.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=50 */
%   | | | else return 0.05191330245744748;  // std dev = 1.777, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.33022174848978975;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return -0.13782274527739732;  // std dev = 0.000612, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04978801230585047;  // std dev = 1.746, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015798186345718085;  // std dev = 2.895, 184.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=62 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.763', 'seconds']
Parameter learned model CLL:-0.162713 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.23e-07, 0, 45], 'false,true,false': [0.0, 0, 17], 'false,false': [0.0, 134, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.533, 136, 62]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.755, 94, 50], 'false,false,false,false': [2.3, 21, 12]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.99, 1, 50], 'true,false': [0.0, 92, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.217, 19, 12]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.154, 76, 35], 'false,false,false': [0.357, 47, 27]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.967, 1, 62], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.238, 124, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.817, 74, 45], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.728, 33, 17]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.93, 107, 50], 'false,false,false,false': [1.777, 21, 12]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.99, 1, 50], 'false,false,true,false': [0.000612, 107, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.746, 20, 12]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.895, 122, 62]}]
{'': [nan, 0.21626405664306567], 'false': [-6.87622002348484e-16, -5.633967587650048e-17], 'false,true': [1.105288700071267e-15, -2.0898315757650005e-16]}
{'': [nan, 0.1546121481406258], 'false': [nan, 0.15461214814062532], 'false,false': [nan, 0.1546121481406258], 'false,false,false': [nan, 0.15461214814062532]}
{'': [nan, 0.15762335787982718], 'false': [nan, 0.15762335787982704], 'false,false': [nan, 0.15762335787982704], 'false,false,false': [0.1569822146778386, 0.16026926270383443]}
{'': [0.1533774676165148, 0.15855297404043187], 'false': [nan, 0.15855297404043187], 'false,false': [nan, 0.15855297404043187], 'false,false,false': [nan, 0.15855297404043187], 'true': [0.019223375624759988, -4.827056628805028e-18]}
{'': [nan, 0.1048783616318037], 'false': [nan, 0.10487836163180364], 'false,false': [0.08960719959764951, 0.1273081172421228], 'false,false,true': [nan, 0.08960719959764951]}
{'': [nan, 0.10088795593738666], 'false': [nan, 0.10088795593738666], 'false,false': [0.014855971959191024, 0.0004579555646261944], 'false,false,false': [nan, 0.0004579555646261622]}
{'': [0.06669292130733741, 0.05975387504523295], 'true': [nan, 0.06669292130733741], 'false': [nan, 0.05975387504523295], 'false,false': [nan, 0.05975387504523295], 'false,false,false': [nan, 0.05975387504523295]}
{'': [nan, 0.06197847956006291], 'false': [nan, 0.06197847956006291], 'false,false': [nan, 0.06197847956006291], 'false,false,false': [0.05466976134792109, 0.095731285906205]}
{'': [nan, 0.061219686453045825], 'false': [nan, 0.06121968645304587], 'false,false': [0.05409063124547218, 0.09530951495715785], 'false,false,false': [nan, 0.09530951495715785], 'false,false,true': [0.019220304953730106, 3.4995434670571884e-09]}
{'': [nan, 0.04555216576390612], 'false': [nan, 0.04555216576390601], 'false,false': [nan, 0.04555216576390612]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 9.625
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.14185106490048774;  // std dev = 4.21e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.6425503352878774;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.7194734122109544;  // std dev = 2.11e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, F) )
%   | | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12724791700816615;  // std dev = 0.017, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08007596840820644;  // std dev = 2.205, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return 0.2224627941289863;  // std dev = 1.715, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.5670951580273783;  // std dev = 0.112, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.35263120989499663;  // std dev = 0.702, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.6670233147653393;  // std dev = 0.059, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.11853782438705696;  // std dev = 0.011, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.41250929388914176;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6431958311117545;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12328442740336198;  // std dev = 0.018, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(H, A) )
%   | | then return -0.1121367144395545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.03125497406982453;  // std dev = 0.343, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.3917167694284975;  // std dev = 1.023, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.0795823982231771;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.44153930204209046;  // std dev = 0.086, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5420898410824371;  // std dev = 0.045, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.10870908627394371;  // std dev = 0.011, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A) )
%   | | | then return 0.44456851225689714;  // std dev = 0.052, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5190389002812514;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10562211451412384;  // std dev = 0.013, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.0040922533693592;  // std dev = 0.340, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then return 0.3412618762620813;  // std dev = 0.016, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(F, A), follows(F, C) )
%   | | then return 0.32378436127763044;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.09171034100822759;  // std dev = 0.804, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.3373945824457844;  // std dev = 0.101, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.0952044124346966;  // std dev = 0.032, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3901883224675048;  // std dev = 0.145, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.11139777087413046;  // std dev = 0.020, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.26211234040837866;  // std dev = 0.447, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.17329470169151726;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then return 0.2670866320267243;  // std dev = 0.015, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.0477356235024432;  // std dev = 0.917, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2670440780006805;  // std dev = 0.079, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.24655611622329224;  // std dev = 0.048, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.31802719662907414;  // std dev = 0.039, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.4491873213125162;  // std dev = 0.324, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, G) )
%   | then return -0.08780076543326948;  // std dev = 0.008, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else if ( follows(H, A) )
%   | | then return -0.08369194041066731;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.1749509175279463;  // std dev = 0.009, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D) )
%   | | then return 0.21487150979449748;  // std dev = 0.006, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(C, E), follows(E, A) )
%   | | | then return 0.20960545481755277;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2506344808595379;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2529951713812994;  // std dev = 0.129, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2108768942972195;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07731848429348051;  // std dev = 3.36e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.11527344423921321;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0337322922512158;  // std dev = 0.863, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
%   | | | else return 0.05394733410431988;  // std dev = 1.045, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.18501523965156177;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.07013113510362419;  // std dev = 0.939, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.02630374065891754;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.20254834017401072;  // std dev = 0.022, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(F, A) )
%   | then return -0.07636731468467288;  // std dev = 0.134, 94.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.22942774490215018;  // std dev = 0.139, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.0946859878620326;  // std dev = 0.056, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.0011351625352348464;  // std dev = 0.754, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | | else return -0.029189394497079624;  // std dev = 0.843, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, E) )
%   | | | then return 0.17106687662579165;  // std dev = 0.141, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.1840137345171745;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.21380104158076557;  // std dev = 0.031, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.07399967689143568;  // std dev = 0.010, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.030670739126615935;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.048882408437446186;  // std dev = 0.264, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return -0.08419682278616274;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.011570776608227288;  // std dev = 0.461, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.03282626410486231;  // std dev = 0.801, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(C, D), follows(A, C) )
%   | | then return 0.13989998764448303;  // std dev = 0.008, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.15400842834753262;  // std dev = 0.053, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15193803323996868;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.16642306920559263;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.18344167696388033;  // std dev = 0.090, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.06387247372661291;  // std dev = 0.003, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.14681810776607196;  // std dev = 0.058, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.035097975119844825;  // std dev = 0.486, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   | | | else return 0.011748553217364852;  // std dev = 1.117, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.607', 'seconds']
Refined model CLL: -0.09454


******************************************
Best model found
******************************************
Results 

CLL : -0.093005 

AUC ROC : 0.994603 

AUC PR : 0.427215 

Precision : 0.346154 

Recall : 1.0 

F1 : 0.514286 

Total Learning Time : 9.625 

Total Inference Time : 7.504076957702637 

Total revision time: 21.07174102973938
Best scored revision CLL: -0.09454


Results 

CLL : -0.093005 

AUC ROC : 0.994603 

AUC PR : 0.427215 

Precision : 0.346154 

Recall : 1.0 

F1 : 0.514286 

Total Learning Time : 21.09049122047424 

Total Inference Time : 7.504076957702637 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.792
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8018109069304987;  // std dev = 1.943, 71.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=67 */
%   | | else return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.1418510649004883;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1471140299477214;  // std dev = 6.795, 290.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=93 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1474684215876323;  // std dev = 5.937, 219.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=76 */
%   | | | else return 0.17153728191409215;  // std dev = 2.756, 45.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6397942428414135;  // std dev = 1.392, 78.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=76 */
%   | else return -0.16147844607290898;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11459989599541127;  // std dev = 2.796, 49.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06339963347641062;  // std dev = 4.030, 172.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=54 */
%   | | else return 0.08448042972660233;  // std dev = 0.343, 115.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=39 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49507847807418653;  // std dev = 1.493, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15772295397104374;  // std dev = 0.246, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03746536739953663;  // std dev = 3.666, 207.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=67 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05450266282291008;  // std dev = 2.114, 69.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=26 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.031265299061301516;  // std dev = 3.551, 228.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=76 */
%   | | | else return 0.056931181330532134;  // std dev = 2.185, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.33104561819954664;  // std dev = 1.390, 78.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=76 */
%   | | | else return -0.13866432157886574;  // std dev = 0.023, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06720470648232114;  // std dev = 2.112, 44.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.002525922310880867;  // std dev = 3.792, 299.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=93 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.494', 'seconds']
Parameter learned model CLL:-0.161187 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.943, 4, 67], 'false,true,false': [1.46e-07, 0, 26], 'false,false': [0.0, 182, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.795, 197, 93]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.937, 143, 76], 'false,false,false,false': [2.756, 28, 17]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.392, 2, 76], 'true,false': [0.0, 152, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.796, 32, 17]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.03, 118, 54], 'false,false,false': [0.343, 76, 39]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.493, 2, 93], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.246, 196, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.666, 140, 67], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.114, 43, 26]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.551, 152, 76], 'false,false,false,false': [2.185, 31, 17]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.39, 2, 76], 'false,false,true,false': [0.023, 151, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.112, 27, 17]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.792, 206, 93]}]
{'': [nan, 0.22222222222222354], 'false': [0.03953661388032838, -2.049642507000289e-16], 'false,true': [0.05316405475104046, 8.198570028001156e-16]}
{'': [nan, 0.15920354526221986], 'false': [nan, 0.15920354526221944], 'false,false': [nan, 0.15920354526221986], 'false,false,false': [nan, 0.15920354526221944]}
{'': [nan, 0.16236201266655423], 'false': [nan, 0.16236201266655437], 'false,false': [nan, 0.16236201266655437], 'false,false,false': [0.16093998062873358, 0.16880200457563843]}
{'': [0.1523159781342851, 0.15953988124998253], 'false': [nan, 0.15953988124998253], 'false,false': [nan, 0.15953988124998253], 'false,false,false': [nan, 0.15953988124998253], 'true': [0.024833536235882445, -8.472754661613037e-17]}
{'': [nan, 0.10381178672009596], 'false': [nan, 0.10381178672009587], 'false,false': [0.0944011642220455, 0.11762047442124639], 'false,false,true': [nan, 0.0944011642220455]}
{'': [nan, 0.10157274470297531], 'false': [nan, 0.10157274470297531], 'false,false': [0.02347007660851437, 0.00030759050604854254], 'false,false,false': [nan, 0.0003075905060485153]}
{'': [0.06491855515557392, 0.064744581046193], 'true': [nan, 0.06491855515557392], 'false': [nan, 0.064744581046193], 'false,false': [nan, 0.064744581046193], 'false,false,false': [nan, 0.064744581046193]}
{'': [nan, 0.06306818180631536], 'false': [nan, 0.06306818180631536], 'false,false': [nan, 0.06306818180631536], 'false,false,false': [0.0553003632106745, 0.09942114566863118]}
{'': [nan, 0.06527213572496865], 'false': [nan, 0.06527213572496848], 'false,false': [0.05798970751102393, 0.10140811557039826], 'false,false,false': [nan, 0.10140811557039826], 'false,false,true': [0.024765959979257735, 3.4365663357665117e-06]}
{'': [nan, 0.04809460565823344], 'false': [nan, 0.04809460565823341], 'false,false': [nan, 0.04809460565823344]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 9.261
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.14185106490048838;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.7473839334745774;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5362197249691283;  // std dev = 0.913, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12544463852839108;  // std dev = 7.74e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.05823319858885795;  // std dev = 2.364, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
%   | | | else return 0.11596051882570774;  // std dev = 2.258, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462838;  // std dev = 2.53e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return -0.11231637819360629;  // std dev = 4.08e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return -0.04905667007556156;  // std dev = 0.663, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.5610012316180051;  // std dev = 0.036, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11231637819360633;  // std dev = 2.36e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.42028685983977754;  // std dev = 0.918, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.16786371566475664;  // std dev = 2.129, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | | | else return 0.06982491104572244;  // std dev = 2.285, 40.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.4226192050703565;  // std dev = 0.179, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.35021328192153767;  // std dev = 0.974, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.64208600130251;  // std dev = 0.064, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.11596121025980498;  // std dev = 0.261, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4175135841583102;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10213462562919967;  // std dev = 0.008, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.027838719108061693;  // std dev = 0.634, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.15661497255218565;  // std dev = 1.128, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.06281902663709789;  // std dev = 1.265, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3233472164719148;  // std dev = 0.050, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return -0.09585110951646893;  // std dev = 0.299, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return -0.031571855380187655;  // std dev = 0.554, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.3432616003698604;  // std dev = 0.109, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09149024323781893;  // std dev = 2.79e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.512343934159704;  // std dev = 0.322, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.14399007706140904;  // std dev = 0.065, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.07949177828396219;  // std dev = 1.485, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.020801668732028322;  // std dev = 1.262, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.26249593308917046;  // std dev = 0.264, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.08782093293456761;  // std dev = 0.856, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.39205654841895937;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.544737616359195;  // std dev = 0.232, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.10078294281292001;  // std dev = 0.342, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.21565213737378888;  // std dev = 0.224, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else return -0.05732308722488233;  // std dev = 1.106, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.18963462051462937;  // std dev = 0.937, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.33002454346565985;  // std dev = 0.189, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.09270119953578744;  // std dev = 0.263, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.012143657189924228;  // std dev = 1.558, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return -0.07893021652426599;  // std dev = 0.016, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.019266268278494616;  // std dev = 0.596, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.09855778208615129;  // std dev = 1.170, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18180721936871932;  // std dev = 0.090, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.25205696044232556;  // std dev = 0.159, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2727483525338916;  // std dev = 0.051, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.05444116061907868;  // std dev = 0.927, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return -0.07268866513724133;  // std dev = 0.054, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.03080109918189025;  // std dev = 1.289, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | | else return 0.025580748576311013;  // std dev = 1.372, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.15235840501140777;  // std dev = 0.038, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.03170760631695966;  // std dev = 1.073, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return 0.27755151192431515;  // std dev = 0.042, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.07987110110724766;  // std dev = 0.262, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.1779503238968264;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.06809123011727851;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -5.518276060461364E-4;  // std dev = 0.415, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0208753360320021;  // std dev = 0.724, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.16983006647323926;  // std dev = 0.811, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.13676394470677614;  // std dev = 0.064, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.20431441979564705;  // std dev = 0.138, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17807961059448527;  // std dev = 0.038, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.18696297075809462;  // std dev = 0.112, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.06254414886993753;  // std dev = 0.044, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.005920519764859373;  // std dev = 1.065, 44.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
%   | | | else return 0.11397312192946592;  // std dev = 1.026, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.072', 'seconds']
Refined model CLL: -0.104004


******************************************
Best model found
******************************************
Results 

CLL : -0.096511 

AUC ROC : 0.993572 

AUC PR : 0.412625 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 9.261 

Total Inference Time : 9.218197345733643 

Total revision time: 23.65411284255981
Best scored revision CLL: -0.104004


Results 

CLL : -0.096511 

AUC ROC : 0.993572 

AUC PR : 0.412625 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 23.672863033294675 

Total Inference Time : 9.218197345733643 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.174
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8370963035205642;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | | else return 0.8268989350995116;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return -0.14185106490048827;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1450143061550602;  // std dev = 7.816, 389.000 (wgt'ed) examples reached here.  /* #neg=265 #pos=124 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.15031105115347126;  // std dev = 6.829, 290.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=102 */
%   | | | else return 0.1864719743233412;  // std dev = 3.058, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6237413869238299;  // std dev = 1.963, 106.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=102 */
%   | else return -0.16157906315986656;  // std dev = 1.49e-07, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11536555702771997;  // std dev = 3.116, 64.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0716156527179869;  // std dev = 4.767, 236.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=78 */
%   | | else return 0.09859829642751386;  // std dev = 0.353, 128.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=46 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5037148857918827;  // std dev = 1.120, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15833935604548616;  // std dev = 0.285, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03780590634189261;  // std dev = 4.164, 277.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=93 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03256489518497201;  // std dev = 2.628, 87.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=31 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.02432257342042672;  // std dev = 4.248, 307.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=102 */
%   | | | else return 0.01889678105464953;  // std dev = 2.540, 72.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3359638457582167;  // std dev = 1.400, 104.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=102 */
%   | | | else return -0.13855866469247874;  // std dev = 0.016, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.005469392898339821;  // std dev = 2.597, 74.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=22 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0235302103367306;  // std dev = 4.241, 344.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=124 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.643', 'seconds']
Parameter learned model CLL:-0.161316 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.399, 2, 93], 'false,true,false': [0.984, 1, 31], 'false,false': [0.0, 247, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.816, 265, 124]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.829, 188, 102], 'false,false,false,false': [3.058, 34, 22]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.963, 4, 102], 'true,false': [1.49e-07, 195, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.116, 42, 22]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.767, 158, 78], 'false,false,false': [0.353, 82, 46]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.12, 1, 124], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.285, 253, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.164, 184, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.628, 56, 31]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.248, 205, 102], 'false,false,false,false': [2.54, 50, 22]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.4, 2, 102], 'false,false,true,false': [0.016, 203, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.597, 52, 22]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.241, 220, 124]}]
{'': [nan, 0.22162486774000092], 'false': [0.0230640461280963, -1.4023869784738819e-16], 'false,true': [0.02060941828254939, 0.030273437500001332]}
{'': [nan, 0.15703126203325582], 'false': [nan, 0.15703126203326068], 'false,false': [nan, 0.15703126203325582], 'false,false,false': [nan, 0.15703126203326068]}
{'': [nan, 0.16199686740272096], 'false': [nan, 0.16199686740272107], 'false,false': [nan, 0.16199686740272107], 'false,false,false': [0.1608218734854694, 0.16698568165011812]}
{'': [0.15350394627225852, 0.15171508978914752], 'true': [0.03635175044115774, 1.138690281666827e-16], 'false': [nan, 0.15171508978914752], 'false,false': [nan, 0.15171508978914752], 'false,false,false': [nan, 0.15171508978914752]}
{'': [nan, 0.10653376941208863], 'false': [nan, 0.10653376941208921], 'false,false': [0.09630330296339268, 0.12492415104080838], 'false,false,true': [nan, 0.09630330296339268]}
{'': [nan, 0.10054956091895369], 'false': [nan, 0.10054956091895369], 'false,false': [0.010042649837479161, 0.0003207068342150852], 'false,false,false': [nan, 0.0003207068342151519]}
{'': [0.06258257134076414, 0.07937694343054053], 'false': [nan, 0.07937694343054053], 'false,false': [nan, 0.07937694343054053], 'false,false,false': [nan, 0.07937694343054053], 'true': [nan, 0.06258257134076414]}
{'': [nan, 0.06463692557875349], 'false': [nan, 0.06463692557875349], 'false,false': [nan, 0.06463692557875349], 'false,false,false': [0.05876824506221682, 0.08963648067842579]}
{'': [nan, 0.06353681263697301], 'false': [nan, 0.06353681263697308], 'false,false': [0.05682166274209856, 0.09117028886879805], 'false,false,false': [nan, 0.09117028886879805], 'false,false,true': [0.018838739250073067, 1.2601361196226063e-06]}
{'': [nan, 0.05227786163492163], 'false': [nan, 0.052277861634921735], 'false,false': [nan, 0.05227786163492163]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 17.831
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, D) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.8581489350995117;  // std dev = 2.53e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.14185106490048846;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7211763033716208;  // std dev = 0.087, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.7387463734164044;  // std dev = 0.055, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.6528067455442876;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.12544463852839152;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.059742879441876506;  // std dev = 2.986, 73.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=16 */
%   | | | else return 0.0776446194465454;  // std dev = 2.454, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.5232358548080454;  // std dev = 0.171, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return 0.5549458945223807;  // std dev = 4.21e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.5596587830053934;  // std dev = 0.110, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, F), tweets(A, H) )
%   | | | then return 0.49945286774087483;  // std dev = 0.961, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.5965490562555356;  // std dev = 0.111, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11231637819360646;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.6186860291505507;  // std dev = 0.086, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05975147881541679;  // std dev = 2.756, 61.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=14 */
%   | | | else return 0.03204454569177746;  // std dev = 2.709, 66.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.423804477393519;  // std dev = 0.112, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.298213381500051;  // std dev = 1.266, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.4355082371980847;  // std dev = 0.060, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.696599844599612;  // std dev = 0.013, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.11133278537280067;  // std dev = 0.231, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4160562914850585;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(I, A) )
%   | | then return -0.0732006402808746;  // std dev = 0.119, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17077896939910062;  // std dev = 1.140, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.16015935094323133;  // std dev = 1.497, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.29803044628234326;  // std dev = 0.156, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.06906421775820049;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3190642177582005;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3227458648736071;  // std dev = 0.105, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(G, A) )
%   | then return -0.048892066020066745;  // std dev = 0.141, 189.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=19 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.5008787371088109;  // std dev = 0.287, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.13951790615375348;  // std dev = 0.552, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.19725048127149467;  // std dev = 1.145, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.09562512632956982;  // std dev = 1.705, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.2604894629386786;  // std dev = 0.072, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return -0.30721299125841023;  // std dev = 0.826, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( recursion_accounttype(D, B), follows(F, D) )
%   | | | then return 0.26157722171831627;  // std dev = 0.082, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.3705392229623124;  // std dev = 0.193, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B), recursion_accounttype(H, B) )
%   | | | then return 0.2660662444323739;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.40667806990090005;  // std dev = 0.053, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.4992106141757288;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6279235064919324;  // std dev = 0.045, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.10015673654050393;  // std dev = 0.355, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2141582098601734;  // std dev = 0.101, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return -0.0857180881244719;  // std dev = 0.489, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | | else return -0.036770034353524314;  // std dev = 0.499, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.24528058045189094;  // std dev = 0.881, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.0803299530980521;  // std dev = 0.006, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.01603900818419112;  // std dev = 0.980, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | | else return 0.005115594043591414;  // std dev = 1.248, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03727294207302097;  // std dev = 0.963, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.0046775517348273165;  // std dev = 1.464, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.18230428535574333;  // std dev = 0.084, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0.2664613220348908;  // std dev = 0.071, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(F, A), follows(F, E) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.0715719480741682;  // std dev = 0.245, 75.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=1 */
%   | | | else return -0.11579674247427486;  // std dev = 0.479, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.22767982631468006;  // std dev = 0.016, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.0744456433646889;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.17399936831201374;  // std dev = 0.005, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return -0.05483412871643878;  // std dev = 0.467, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | | | else return -0.0010838534932081714;  // std dev = 2.288, 113.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.1510702461118427;  // std dev = 1.040, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.032796191579484685;  // std dev = 1.252, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0.25761678954751727;  // std dev = 0.075, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.07903617975903793;  // std dev = 0.227, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.15103275975577743;  // std dev = 0.000133, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07414513745027904;  // std dev = 0.008, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.05453010950064119;  // std dev = 0.453, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.052266768960536725;  // std dev = 0.857, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.1348088666954825;  // std dev = 1.064, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.13966763782798625;  // std dev = 0.076, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | else return 0.05574750574823016;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(G, E) )
%   | | | then return -0.03150572008338398;  // std dev = 0.701, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.19868780857404073;  // std dev = 0.170, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.12373905206199154;  // std dev = 0.864, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.1770234907091497;  // std dev = 0.196, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.06571797374945194;  // std dev = 0.049, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.024657810363616254;  // std dev = 1.423, 64.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=14 */
%   | | | else return -5.790937576062129E-4;  // std dev = 1.515, 49.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=13 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.899', 'seconds']
Refined model CLL: -0.100011


******************************************
Best model found
******************************************
Results 

CLL : -0.096424 

AUC ROC : 0.994784 

AUC PR : 0.476811 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 17.831 

Total Inference Time : 11.158812761306763 

Total revision time: 35.01112831115722
Best scored revision CLL: -0.100011


Results 

CLL : -0.096424 

AUC ROC : 0.994784 

AUC PR : 0.476811 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 35.029878501892085 

Total Inference Time : 11.158812761306763 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.494
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8245354897213594;  // std dev = 1.966, 119.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=115 */
%   | | else return 0.7899671169176937;  // std dev = 1.672, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | else return -0.14185106490048785;  // std dev = 5.27e-09, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15599731647112727;  // std dev = 8.734, 472.000 (wgt'ed) examples reached here.  /* #neg=316 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1400372091187592;  // std dev = 7.752, 376.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=128 */
%   | | | else return 0.13652102800863086;  // std dev = 3.631, 84.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6501154846790463;  // std dev = 1.401, 130.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=128 */
%   | else return -0.16167515814575545;  // std dev = 1.55e-07, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09650415423201714;  // std dev = 3.638, 90.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06012091204619734;  // std dev = 5.321, 311.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=97 */
%   | | else return 0.09293201886650178;  // std dev = 0.349, 174.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4912053728373513;  // std dev = 2.060, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15740678824024934;  // std dev = 0.274, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03638219646001637;  // std dev = 4.760, 347.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.031084849594505224;  // std dev = 2.984, 127.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.029483225121977374;  // std dev = 4.696, 383.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=128 */
%   | | | else return 0.04606970427086908;  // std dev = 2.955, 83.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3199425440933662;  // std dev = 2.192, 133.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=128 */
%   | | | else return -0.13804422269726183;  // std dev = 0.023, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04711349473757287;  // std dev = 2.875, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.014472843699425654;  // std dev = 4.860, 467.000 (wgt'ed) examples reached here.  /* #neg=311 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.708', 'seconds']
Parameter learned model CLL:-0.159781 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.966, 4, 115], 'false,true,false': [1.672, 3, 41], 'false,false': [5.27e-09, 298, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.734, 316, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.752, 248, 128], 'false,false,false,false': [3.631, 56, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.401, 2, 128], 'true,false': [1.55e-07, 267, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.638, 62, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.321, 214, 97], 'false,false,false': [0.349, 115, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.06, 4, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.274, 297, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.76, 232, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.984, 86, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.696, 255, 128], 'false,false,false,false': [2.955, 55, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.192, 5, 128], 'false,false,true,false': [0.023, 255, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.875, 53, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.86, 311, 156]}]
{'': [nan, 0.223883757369863], 'false': [0.04110053069367158, 2.682418046074204e-17], 'false,true': [0.03248358166796465, 0.06353305785124083]}
{'': [nan, 0.16161813415644014], 'false': [nan, 0.16161813415644444], 'false,false': [nan, 0.16161813415644014], 'false,false,false': [nan, 0.16161813415644444]}
{'': [nan, 0.15928836660808696], 'false': [nan, 0.15928836660808984], 'false,false': [nan, 0.15928836660808984], 'false,false,false': [0.15981537375642774, 0.15691927638822237]}
{'': [0.15007573179229575, 0.14705711345821326], 'true': [0.015098924892090082, 8.981579525057446e-17], 'false': [nan, 0.14705711345821326], 'false,false': [nan, 0.14705711345821326], 'false,false,false': [nan, 0.14705711345821326]}
{'': [nan, 0.102402640625942], 'false': [nan, 0.1024026406259422], 'false,false': [0.09104754411145081, 0.12200790834091098], 'false,false,true': [nan, 0.09104754411145081]}
{'': [nan, 0.10517284221702103], 'false': [nan, 0.10517284221702103], 'false,false': [0.02652437912418244, 0.0002521490010903007], 'false,false,false': [nan, 0.00025214900109038745]}
{'': [0.0652953420821942, 0.0701131704630273], 'false': [nan, 0.0701131704630273], 'false,false': [nan, 0.0701131704630273], 'false,false,false': [nan, 0.0701131704630273], 'true': [nan, 0.0652953420821942]}
{'': [nan, 0.0661030916866178], 'false': [nan, 0.0661030916866178], 'false,false': [nan, 0.0661030916866178], 'false,false,false': [0.05758019632086418, 0.10520552217096217]}
{'': [nan, 0.06708084354045113], 'false': [nan, 0.06708084354045132], 'false,false': [0.05964282591102698, 0.1020534903119183], 'false,false,false': [nan, 0.1020534903119183], 'false,false,true': [0.03613919991212251, 2.0957194289260157e-06]}
{'': [nan, 0.0505830914114333], 'false': [nan, 0.05058309141143341], 'false,false': [nan, 0.0505830914114333]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 18.472
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.8581489350995115;  // std dev = 3.58e-07, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | else if ( follows(F, A), tweets(F, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.8236661764788221;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.14185106490048777;  // std dev = 1.33e-07, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.721748576654785;  // std dev = 0.030, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2194734122109545;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.7278731563331485;  // std dev = 0.075, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12544463852839177;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.09039482374453188;  // std dev = 2.834, 58.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=15 */
%   | | | else return 0.1806850900003573;  // std dev = 3.374, 69.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5576046197455599;  // std dev = 0.037, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.28729374657857587;  // std dev = 0.754, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.11231637819360618;  // std dev = 8.30e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.5256688550918202;  // std dev = 0.923, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.11231637819360621;  // std dev = 7.15e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.4503897189581848;  // std dev = 0.874, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.01865016381519639;  // std dev = 0.847, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09275888475480433;  // std dev = 3.532, 89.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=25 */
%   | | | else return 0.16600735012778872;  // std dev = 2.539, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, E) )
%   | | | then return 0.3732346333102747;  // std dev = 1.884, 78.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=74 */
%   | | | else return 0.5422405446953467;  // std dev = 0.185, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.4266612509924685;  // std dev = 0.085, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6362583943725504;  // std dev = 0.974, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else return -0.11358327087600201;  // std dev = 0.348, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.42481953882011064;  // std dev = 2.11e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, I), follows(J, A) )
%   | | then return -0.08268734618841725;  // std dev = 0.104, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.10240973086111345;  // std dev = 1.328, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.06755294568206759;  // std dev = 1.874, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.3008646339726735;  // std dev = 0.167, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else return 0.3294360625441019;  // std dev = 2.11e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.3278139271576651;  // std dev = 0.055, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.35526020795925567;  // std dev = 0.055, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.09237390468402333;  // std dev = 0.037, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.39304052974183984;  // std dev = 0.175, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.09968088900593265;  // std dev = 0.623, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.040427117947308;  // std dev = 2.809, 92.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=25 */
%   | | | else return 0.05874895563736132;  // std dev = 2.520, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.26619854615433447;  // std dev = 0.131, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(F, D), follows(A, F) )
%   | | | then return 0.1313143016696239;  // std dev = 1.522, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | | else return 0.2727397229294224;  // std dev = 0.211, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3123399998920263;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.5362591395617218;  // std dev = 0.162, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.4930084967814079;  // std dev = 0.936, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   else return -0.10889721851905418;  // std dev = 0.617, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( tweets(C, D), follows(C, E) )
%   | | then return 0.22034790985444638;  // std dev = 0.204, 88.000 (wgt'ed) examples reached here.  /* #pos=88 */
%   | | else return -0.12314660422210655;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.07656670758716615;  // std dev = 0.011, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.22886919220070756;  // std dev = 0.072, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.26383748080302843;  // std dev = 0.131, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.371318186436714;  // std dev = 0.219, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.11744770755200656;  // std dev = 0.232, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08047008433491538;  // std dev = 1.141, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.05288227074087726;  // std dev = 1.600, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(E, C), follows(E, A) )
%   | | then if ( follows(C, E) )
%   | | | then return 0.18041922527177148;  // std dev = 0.023, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07054114168547082;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.1827209682209841;  // std dev = 0.052, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.18877943801540384;  // std dev = 0.077, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.20339254700860662;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.03234349586637627;  // std dev = 0.754, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then return -0.051284207091702096;  // std dev = 0.072, 226.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=17 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.027998820593414225;  // std dev = 1.854, 87.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=19 */
%   | | | else return 0.020045745234274003;  // std dev = 1.955, 64.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.14383792881790242;  // std dev = 0.998, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.01929059839302836;  // std dev = 1.517, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else return 0.2532882707821332;  // std dev = 0.067, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return -0.08167092067517563;  // std dev = 0.025, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.15904061876143522;  // std dev = 0.050, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.0961876010222346;  // std dev = 0.546, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.009425304085888127;  // std dev = 0.494, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05077934743988115;  // std dev = 1.029, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.010051129289184868;  // std dev = 1.464, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.12234317717520724;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, C) )
%   | | | then return 0.15277291002332144;  // std dev = 0.028, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.03723813234516857;  // std dev = 0.948, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return -0.1700143530296376;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then return -0.05487453012023457;  // std dev = 0.129, 239.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2734935842474877;  // std dev = 0.452, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.12378485319379608;  // std dev = 0.260, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.010679632417128155;  // std dev = 1.155, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | | | else return 0.025663996680691768;  // std dev = 1.434, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '29.075', 'seconds']
Refined model CLL: -0.103273


******************************************
Best model found
******************************************
Results 

CLL : -0.097913 

AUC ROC : 0.994516 

AUC PR : 0.473129 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 18.472 

Total Inference Time : 37.445109128952026 

Total revision time: 63.09825603103638
Best scored revision CLL: -0.103273


Results 

CLL : -0.097913 

AUC ROC : 0.994516 

AUC PR : 0.473129 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 63.11700622177124 

Total Inference Time : 37.445109128952026 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.01
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.14185106490048768;  // std dev = 7.45e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15790494686651405;  // std dev = 3.454, 74.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.15108886620763995;  // std dev = 3.279, 67.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=24 */
%   | | | else return -0.0054254652403583625;  // std dev = 0.758, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6131370527732195;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | else return -0.1634393222373725;  // std dev = 2.11e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.023019447090081385;  // std dev = 0.743, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.052480538615445084;  // std dev = 2.338, 58.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=18 */
%   | | else return 0.024228356968770307;  // std dev = 0.316, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5009315809447712;  // std dev = 0.181, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14793857816468753;  // std dev = 0.012, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03330537314059874;  // std dev = 1.931, 56.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=19 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.023376383245593345;  // std dev = 1.033, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.022949721213719132;  // std dev = 2.100, 73.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=24 */
%   | | | else return 0.09387411350238539;  // std dev = 0.561, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.28209526692664116;  // std dev = 1.356, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return -0.1367824747858624;  // std dev = 0.011, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03394598308381878;  // std dev = 0.616, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.001559498864232521;  // std dev = 1.930, 82.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=25 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.679', 'seconds']
Parameter learned model CLL:-0.145137 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 19], 'false,true,false': [0.0, 0, 6], 'false,false': [7.45e-09, 51, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.454, 49, 25]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.279, 43, 24], 'false,false,false,false': [0.758, 5, 1]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.98, 1, 24], 'true,false': [2.11e-08, 56, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.743, 4, 1]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.338, 40, 18], 'false,false,false': [0.316, 19, 7]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.181, 0, 25], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.012, 55, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.931, 37, 19], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.033, 14, 6]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.1, 49, 24], 'false,false,false,false': [0.561, 2, 1]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.356, 2, 24], 'false,false,true,false': [0.011, 39, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.616, 5, 1]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.93, 57, 25]}]
{'': [nan, 0.22074099722991802], 'false': [7.105427357601002e-16, 5.659960517696876e-17], 'false,true': [-2.8047739569477637e-16, -1.4802973661668753e-16]}
{'': [nan, 0.1612158938432358], 'false': [nan, 0.16121589384323592], 'false,false': [nan, 0.1612158938432358], 'false,false,false': [nan, 0.16121589384323592]}
{'': [nan, 0.15696871805548493], 'false': [nan, 0.1569687180554849], 'false,false': [nan, 0.1569687180554849], 'false,false,false': [0.16043662383638968, 0.09576046457204225]}
{'': [0.1405363835870185, 0.11044885675143475], 'true': [0.03839999999999989, 7.93016446160826e-18], 'false': [nan, 0.11044885675143475], 'false,false': [nan, 0.11044885675143475], 'false,false,false': [nan, 0.11044885675143475]}
{'': [nan, 0.09614570461578771], 'false': [nan, 0.09614570461578771], 'false,false': [0.09421165039613388, 0.09990900499139022], 'false,false,true': [nan, 0.09421165039613388]}
{'': [nan, 0.09086641670027693], 'false': [nan, 0.09086641670027693], 'false,false': [0.0013074075566660425, 2.4061629954557677e-06], 'false,false,false': [nan, 2.4061629954961394e-06]}
{'': [0.066551163122234, 0.05336960576648535], 'true': [nan, 0.066551163122234], 'false': [nan, 0.05336960576648535], 'false,false': [nan, 0.05336960576648535], 'false,false,false': [nan, 0.05336960576648535]}
{'': [nan, 0.06238130622203928], 'false': [nan, 0.06238130622203928], 'false,false': [nan, 0.06238130622203928], 'false,false,false': [0.06043780982369579, 0.10484134576018657]}
{'': [nan, 0.07011648285691478], 'false': [nan, 0.07011648285691484], 'false,false': [0.07039520981585516, 0.0632628745147346], 'false,false,true': [0.07070847702838752, 2.9400066333331927e-06], 'false,false,false': [nan, 0.0632628745147346]}
{'': [nan, 0.045425666626115066], 'false': [nan, 0.045425666626115066], 'false,false': [nan, 0.045425666626115066]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 6.5
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12544463852839147;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return 0.015375036594832905;  // std dev = 0.771, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2970143868412815;  // std dev = 0.845, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.1561947117180572;  // std dev = 1.195, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.6528747144976031;  // std dev = 0.121, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.11231637819360636;  // std dev = 1.05e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return -0.1271411437851588;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.042605487894876067;  // std dev = 0.708, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.11074332017535667;  // std dev = 0.668, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.27164590597668764;  // std dev = 0.831, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.4386880655941411;  // std dev = 0.129, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.16751358415830997;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.6122485861684911;  // std dev = 0.090, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(A, H) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.10461909614059607;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.17643899624503398;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.11353400517701229;  // std dev = 0.557, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, D) )
%   | | then return 0.31611648168838496;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.3092189505669722;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.41091549263071797;  // std dev = 0.144, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.37127857605127573;  // std dev = 0.036, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.48222179994717207;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.09321748743558556;  // std dev = 0.024, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return -0.151324546078379;  // std dev = 0.019, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.12563872004334262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( tweets(A, F) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.25062505864096485;  // std dev = 0.016, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.28952617519856977;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.08757401167176396;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.37961894396974005;  // std dev = 0.067, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), follows(A, H) )
%   | then if ( follows(G, H), follows(A, G) )
%   | | then return -0.08513683707953308;  // std dev = 3.97e-05, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return -0.08792673632896698;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J) )
%   | | | then return -0.12675116315719942;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.13542870554418718;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11247338567853847;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then return 0.20809531250827584;  // std dev = 0.000514, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.20293018307055763;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.28562422284282524;  // std dev = 0.069, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.23379809426826026;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.0789284485516111;  // std dev = 0.009, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.10172572105637746;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.01817754434470676;  // std dev = 0.464, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.013974911583465649;  // std dev = 0.327, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.021997410797501914;  // std dev = 0.345, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.1758762856983541;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17208025524581805;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2167654865664077;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.12466091328827329;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.18750874066980805;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07316312587943918;  // std dev = 0.000119, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then return -0.024200952296698202;  // std dev = 0.340, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04355957361252073;  // std dev = 0.440, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0048307626199254146;  // std dev = 0.540, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.15095222816928033;  // std dev = 0.010, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1832286829956717;  // std dev = 0.080, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.26474890817315455;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return -0.06839212466201651;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.07041576336894538;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.12261868973617496;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0.036385184485925724;  // std dev = 0.311, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, D) )
%   | | then return 0.13345197289193217;  // std dev = 0.000469, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.13063911627783323;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.18605286552856187;  // std dev = 0.110, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.15799168462971716;  // std dev = 0.071, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.06407032898845855;  // std dev = 0.001, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.08753931236292951;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return -0.03956225246904958;  // std dev = 0.303, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.0016783696762973643;  // std dev = 0.272, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.05837520320043804;  // std dev = 0.336, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.435', 'seconds']
Refined model CLL: -0.095162


******************************************
Best model found
******************************************
Results 

CLL : -0.109154 

AUC ROC : 0.994322 

AUC PR : 0.390744 

Precision : 0.336427 

Recall : 0.929487 

F1 : 0.494037 

Total Learning Time : 6.5 

Total Inference Time : 3.157374382019043 

Total revision time: 12.141735563278198
Best scored revision CLL: -0.095162


Results 

CLL : -0.109154 

AUC ROC : 0.994322 

AUC PR : 0.390744 

Precision : 0.336427 

Recall : 0.929487 

F1 : 0.494037 

Total Learning Time : 12.160485754013061 

Total Inference Time : 3.157374382019043 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.287
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15406084837153858;  // std dev = 4.948, 152.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=50 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.16171222791059442;  // std dev = 4.637, 132.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=48 */
%   | | | else return 0.13543201739069133;  // std dev = 0.966, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6602810519195409;  // std dev = 0.031, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else return -0.1643683460829416;  // std dev = 9.42e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.004056146728854554;  // std dev = 1.043, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06472844410003804;  // std dev = 3.118, 108.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=35 */
%   | | else return 0.06030990825150474;  // std dev = 0.313, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47195235966322935;  // std dev = 1.026, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15180584079013448;  // std dev = 0.037, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.00479506242600531;  // std dev = 2.719, 132.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=37 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09684640633141396;  // std dev = 1.368, 29.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.023668236158348385;  // std dev = 2.911, 147.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=48 */
%   | | | else return -0.013091815268445006;  // std dev = 0.866, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.31800426900382545;  // std dev = 1.382, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | | | else return -0.13858381160363692;  // std dev = 0.044, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12606420259690998;  // std dev = 0.751, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0017500358723143237;  // std dev = 2.698, 160.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=50 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.586', 'seconds']
Parameter learned model CLL:-0.150402 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.987, 1, 37], 'false,true,false': [0.964, 1, 13], 'false,false': [8.33e-09, 83, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.948, 102, 50]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.637, 84, 48], 'false,false,false,false': [0.966, 4, 2]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.031, 0, 48], 'true,false': [9.42e-08, 105, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.043, 8, 2]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.118, 73, 35], 'false,false,false': [0.313, 34, 15]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.026, 1, 50], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.037, 98, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.719, 95, 37], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.368, 16, 13]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.911, 99, 48], 'false,false,false,false': [0.866, 8, 2]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.382, 2, 48], 'false,false,true,false': [0.044, 94, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.751, 3, 2]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.698, 110, 50]}]
{'': [nan, 0.23319615912208547], 'false': [0.03698224852071041, 7.490661370964911e-17], 'false,true': [0.025623268698062793, 0.06632653061224467]}
{'': [nan, 0.16108502438284625], 'false': [nan, 0.1610850243828461], 'false,false': [nan, 0.16108502438284625], 'false,false,false': [nan, 0.1610850243828461]}
{'': [nan, 0.16256589198062255], 'false': [nan, 0.16256589198062218], 'false,false': [nan, 0.16256589198062218], 'false,false,false': [0.16286013232754104, 0.15543198312104672]}
{'': [0.14642156953210775, 0.10869765045185957], 'true': [2.0085493297757513e-05, 8.458842092382145e-17], 'false': [nan, 0.10869765045185957], 'false,false': [nan, 0.10869765045185957], 'false,false,false': [nan, 0.10869765045185957]}
{'': [nan, 0.09253941516177193], 'false': [nan, 0.09253941516177218], 'false,false': [0.09001648625250269, 0.09808672628101082], 'false,false,true': [nan, 0.09001648625250269]}
{'': [nan, 0.09466517345483111], 'false': [nan, 0.09466517345483111], 'false,false': [0.02064342433673933, 1.3615926379740194e-05], 'false,false,false': [nan, 1.3615926379767382e-05]}
{'': [0.05602068088650064, 0.06454972893398123], 'false': [nan, 0.06454972893398123], 'false,false': [nan, 0.06454972893398123], 'false,false,false': [nan, 0.06454972893398123], 'true': [nan, 0.05602068088650064]}
{'': [nan, 0.058817251432796314], 'false': [nan, 0.058817251432796314], 'false,false': [nan, 0.058817251432796314], 'false,false,false': [0.05763580360313477, 0.07491930329957261]}
{'': [nan, 0.06265760981489216], 'false': [nan, 0.06265760981489193], 'false,false': [0.06053513009977148, 0.11290342372504422], 'false,false,false': [nan, 0.11290342372504422], 'false,false,true': [0.03821559650141925, 2.0876830707293194e-05]}
{'': [nan, 0.045485739250155345], 'false': [nan, 0.045485739250155345], 'false,false': [nan, 0.045485739250155345]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 9.34
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then return 0.7238477229425158;  // std dev = 0.112, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1254446385283915;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.1345301463144843;  // std dev = 1.406, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.29701438684128156;  // std dev = 1.336, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5660382492704696;  // std dev = 0.171, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.5611787482802626;  // std dev = 0.038, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.11231637819360622;  // std dev = 6.50e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.5960526174841312;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.030504455143434986;  // std dev = 1.542, 33.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   | | | else return 0.21435213356087016;  // std dev = 1.337, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.4256824114922076;  // std dev = 0.177, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.251301762304453;  // std dev = 1.117, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6512349121640755;  // std dev = 0.209, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.43932270057950285;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.11632537947219704;  // std dev = 0.270, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return 0.030124872816933816;  // std dev = 0.242, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3405629523766559;  // std dev = 0.197, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.09415868040132785;  // std dev = 0.051, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.33628665754607306;  // std dev = 0.151, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09281174447234054;  // std dev = 0.014, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5099710426855651;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.13782040601008394;  // std dev = 0.088, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1633046244630884;  // std dev = 0.878, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.025916832520336046;  // std dev = 0.840, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(D, F), recursion_accounttype(D, B) )
%   | | | then return 0.2033654242538212;  // std dev = 0.985, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.003025132664790801;  // std dev = 0.613, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.27203144008885766;  // std dev = 0.159, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( tweets(A, G) )
%   | | then return 0.33489349174305677;  // std dev = 0.271, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.4255862611173485;  // std dev = 0.144, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09644969377572474;  // std dev = 0.256, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( tweets(A, E), tweets(C, E) )
%   | | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | | then return 0.2092338019635231;  // std dev = 0.014, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.05590843180415523;  // std dev = 1.231, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.22873281072401566;  // std dev = 0.060, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.03011171222147918;  // std dev = 0.704, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A) )
%   | then return -0.053358340426560576;  // std dev = 0.116, 105.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=11 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.4023236388018769;  // std dev = 0.071, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11262512067551171;  // std dev = 0.054, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.11034007178875341;  // std dev = 0.465, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.12036800899306399;  // std dev = 0.558, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20912197437437216;  // std dev = 0.197, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.2215872418608786;  // std dev = 0.142, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07736004969851118;  // std dev = 0.629, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.2159911242094672;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.07407083609116516;  // std dev = 0.028, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.10286153906102458;  // std dev = 0.592, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return -0.019358546734344974;  // std dev = 0.879, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, G) )
%   | | | then return 0.1430191879190776;  // std dev = 0.715, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.2035115671325532;  // std dev = 0.138, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.33398962491799233;  // std dev = 0.075, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07992918222737612;  // std dev = 0.291, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return -0.07761695653725582;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.08426867233696775;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.13863712368667375;  // std dev = 0.058, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.14431790327332897;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.20767719888895755;  // std dev = 1.017, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.18995670023789077;  // std dev = 0.096, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.21684452610721888;  // std dev = 0.100, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.06466633799179008;  // std dev = 0.031, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return -0.03019154150621733;  // std dev = 0.489, 39.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.07042408205886404;  // std dev = 0.457, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return -0.01548874168553737;  // std dev = 0.975, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.735', 'seconds']
Refined model CLL: -0.098231


******************************************
Best model found
******************************************
Results 

CLL : -0.108743 

AUC ROC : 0.995373 

AUC PR : 0.398357 

Precision : 0.337662 

Recall : 1.0 

F1 : 0.504854 

Total Learning Time : 9.34 

Total Inference Time : 4.40995454788208 

Total revision time: 17.043890382766723
Best scored revision CLL: -0.098231


Results 

CLL : -0.108743 

AUC ROC : 0.995373 

AUC PR : 0.398357 

Precision : 0.337662 

Recall : 1.0 

F1 : 0.504854 

Total Learning Time : 17.062640573501586 

Total Inference Time : 4.40995454788208 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.599
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8248156017661792;  // std dev = 1.390, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | | else return 0.7528857772047755;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | else return -0.14185106490048785;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15756636226248535;  // std dev = 6.060, 226.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=75 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12066405719660367;  // std dev = 5.909, 229.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=72 */
%   | | | else return 0.035690565564043694;  // std dev = 1.286, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6577012826919192;  // std dev = 0.983, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | else return -0.15927656689665312;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.00688967430667812;  // std dev = 1.344, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09808331545247626;  // std dev = 3.860, 149.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=55 */
%   | | else return 0.03290337825857961;  // std dev = 0.316, 76.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4140645383438248;  // std dev = 2.591, 82.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=75 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14930172928998695;  // std dev = 0.045, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04516214036752951;  // std dev = 3.380, 166.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=58 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.060786646094523174;  // std dev = 1.892, 47.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.02332676124910517;  // std dev = 3.775, 223.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=72 */
%   | | | else return 0.0018253147008963078;  // std dev = 1.101, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3608448512273718;  // std dev = 1.005, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return -0.1399671189018857;  // std dev = 0.026, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02341545680335871;  // std dev = 1.079, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.010377915673025257;  // std dev = 3.352, 222.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=75 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.683', 'seconds']
Parameter learned model CLL:-0.152661 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.39, 2, 58], 'false,true,false': [1.338, 2, 17], 'false,false': [0.0, 129, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.06, 151, 75]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.909, 157, 72], 'false,false,false,false': [1.286, 11, 3]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.983, 1, 72], 'true,false': [0.0, 155, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.344, 11, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.86, 94, 55], 'false,false,false': [0.316, 56, 20]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.591, 7, 75], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.045, 154, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.38, 108, 58], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.892, 30, 17]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.775, 151, 72], 'false,false,false,false': [1.101, 12, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.005, 1, 72], 'false,false,true,false': [0.026, 118, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.079, 10, 3]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.352, 147, 75]}]
{'': [nan, 0.23056120562130175], 'false': [0.04806921967633292, -3.0982968129074136e-17], 'false,true': [0.03222222222222181, 0.09418282548476423]}
{'': [nan, 0.16248864924786327], 'false': [nan, 0.16248864924786313], 'false,false': [nan, 0.16248864924786327], 'false,false,false': [nan, 0.16248864924786313]}
{'': [nan, 0.15090482005271572], 'false': [nan, 0.15090482005271585], 'false,false': [nan, 0.15090482005271585], 'false,false,false': [0.15249463949949763, 0.11809541751965223]}
{'': [0.14951632980550364, 0.129023077736777], 'true': [0.013231697944664165, -2.549931592042295e-16], 'false': [nan, 0.129023077736777], 'false,false': [nan, 0.129023077736777], 'false,false,false': [nan, 0.129023077736777]}
{'': [nan, 0.10081994890509172], 'false': [nan, 0.10081994890509229], 'false,false': [0.10000602013217767, 0.09960227676055573], 'false,false,true': [nan, 0.10000602013217767]}
{'': [nan, 0.10042091624628426], 'false': [nan, 0.10042091624628426], 'false,false': [0.08188624633094634, 1.3385423121805227e-05], 'false,false,false': [nan, 1.3385423121845598e-05]}
{'': [0.068826785077599, 0.07613979122867373], 'false': [nan, 0.07613979122867373], 'false,false': [nan, 0.07613979122867373], 'false,false,false': [nan, 0.07613979122867373], 'true': [nan, 0.068826785077599]}
{'': [nan, 0.06500154214953993], 'false': [nan, 0.06500154214953993], 'false,false': [nan, 0.06500154214953993], 'false,false,false': [0.06391112742427077, 0.08077919951863635]}
{'': [nan, 0.06615914520363954], 'false': [nan, 0.06615914520363944], 'false,false': [0.06451604471378208, 0.08956461529835281], 'false,false,false': [nan, 0.08956461529835281], 'false,false,true': [0.013840826281142773, 5.643646319130604e-06]}
{'': [nan, 0.05060957680218367], 'false': [nan, 0.05060957680218365], 'false,false': [nan, 0.05060957680218367]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 7.605
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048813;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7203299882645304;  // std dev = 0.038, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.7194734122109542;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), follows(G, A) )
%   | | | then return -0.12544463852839108;  // std dev = 7.74e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | | else return -0.007511380373853579;  // std dev = 2.226, 56.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=8 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.17956395392271307;  // std dev = 1.703, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return 0.2586402556692959;  // std dev = 1.823, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.4884882418317939;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.5551549084984607;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.561891031641376;  // std dev = 0.109, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.055207790560416664;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5621109462544364;  // std dev = 0.045, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.11231637819360622;  // std dev = 6.99e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | | else return 0.03644564655183294;  // std dev = 2.152, 42.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.11066552675029077;  // std dev = 1.799, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | | else return 0.12279357529117982;  // std dev = 1.896, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.40601005281692865;  // std dev = 1.015, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return -0.12504214425209856;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.4279772260267196;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6845070281734136;  // std dev = 0.133, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.11930567327304933;  // std dev = 0.287, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4156661978014804;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, C) )
%   | then return 0.30441106756067704;  // std dev = 0.151, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else return 0.3826767324402251;  // std dev = 0.219, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, F), follows(G, F) )
%   | | | then return 0.4873680898253298;  // std dev = 0.334, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.10667070903093145;  // std dev = 0.546, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.09851533831170842;  // std dev = 0.133, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.44523202365359604;  // std dev = 0.200, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.14931379300058392;  // std dev = 0.018, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.19586422903549816;  // std dev = 0.840, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.14335699497948967;  // std dev = 1.008, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.27029959847129437;  // std dev = 0.214, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.05106196484477534;  // std dev = 0.925, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.28444524370948376;  // std dev = 0.104, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.25524220661378305;  // std dev = 0.045, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.4314437011391688;  // std dev = 0.215, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.09903487246196442;  // std dev = 0.301, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.22146477741765888;  // std dev = 0.197, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(A, C), tweets(C, E) )
%   | | then return -0.12269644232979886;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2035000027373429;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.22872278664638038;  // std dev = 0.274, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return -0.08322936336154341;  // std dev = 0.109, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2575889910220107;  // std dev = 0.116, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11906767050687798;  // std dev = 0.015, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.166641066869977;  // std dev = 0.595, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.015029518172581875;  // std dev = 0.971, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1901710221123799;  // std dev = 0.216, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.06746157172406156;  // std dev = 0.244, 82.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=1 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.28513625444927015;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0900518465733078;  // std dev = 1.29e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2173101257504798;  // std dev = 0.070, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10048447056392121;  // std dev = 0.030, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.17771057424798917;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.017789123509501726;  // std dev = 1.181, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.13647976416895552;  // std dev = 0.993, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return -0.1503893450362118;  // std dev = 1.205, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.20086386571123718;  // std dev = 0.111, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.3230540695129565;  // std dev = 0.236, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.07969029121763174;  // std dev = 0.275, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.14487385677686138;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.07045132618313323;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14887661970767488;  // std dev = 0.239, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.058957013034284404;  // std dev = 0.217, 89.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=1 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return -0.01616990145109108;  // std dev = 0.592, 27.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=6 */
%   | | | else return -0.04514381294624912;  // std dev = 0.338, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), tweets(H, G) )
%   | | | then return -0.050443944362206866;  // std dev = 0.995, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return -0.02056157511091809;  // std dev = 0.362, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.06699917451764749;  // std dev = 0.555, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return -0.0166917748012191;  // std dev = 0.779, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.331', 'seconds']
Refined model CLL: -0.103436


******************************************
Best model found
******************************************
Results 

CLL : -0.10819 

AUC ROC : 0.995359 

AUC PR : 0.438016 

Precision : 0.346698 

Recall : 0.942308 

F1 : 0.506897 

Total Learning Time : 7.605 

Total Inference Time : 6.555366516113281 

Total revision time: 18.33630037689209
Best scored revision CLL: -0.103436


Results 

CLL : -0.10819 

AUC ROC : 0.995359 

AUC PR : 0.438016 

Precision : 0.346698 

Recall : 0.942308 

F1 : 0.506897 

Total Learning Time : 18.355050567626954 

Total Inference Time : 6.555366516113281 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.75
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8211118980624753;  // std dev = 1.700, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   | | else return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.14185106490048846;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16195437062900236;  // std dev = 6.923, 296.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=100 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.15323607151125035;  // std dev = 6.517, 263.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=94 */
%   | | | else return 0.13498442918330064;  // std dev = 1.676, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6077279998651988;  // std dev = 2.175, 99.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=94 */
%   | else return -0.16428833612025803;  // std dev = 6.66e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11948457535982175;  // std dev = 1.667, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07891717532828559;  // std dev = 4.621, 207.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=72 */
%   | | else return 0.047450962842141634;  // std dev = 0.320, 94.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5018600908951256;  // std dev = 0.314, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15396795707927932;  // std dev = 0.126, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.023180415101659045;  // std dev = 3.901, 248.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=78 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.014579872211583978;  // std dev = 1.980, 76.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.047201451806665004;  // std dev = 3.883, 258.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=94 */
%   | | | else return 0.025333176682614263;  // std dev = 1.435, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3246890172026365;  // std dev = 1.705, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | | else return -0.14103493168713588;  // std dev = 0.031, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09427831385040938;  // std dev = 1.255, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.00698183814050266;  // std dev = 3.596, 309.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=100 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.713', 'seconds']
Parameter learned model CLL:-0.156137 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.7, 3, 78], 'false,true,false': [5.96e-08, 0, 22], 'false,false': [0.0, 216, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.923, 196, 100]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.517, 169, 94], 'false,false,false,false': [1.676, 12, 6]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.175, 5, 94], 'true,false': [6.66e-08, 175, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.667, 11, 6]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.621, 135, 72], 'false,false,false': [0.32, 66, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.314, 0, 100], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.126, 204, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.901, 170, 78], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.98, 54, 22]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.883, 164, 94], 'false,false,false,false': [1.435, 13, 6]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.705, 3, 94], 'false,false,true,false': [0.031, 200, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.255, 9, 6]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.596, 209, 100]}]
{'': [nan, 0.21521014927133347], 'false': [0.0282778772740145, -2.3438041630975528e-16], 'false,true': [0.03566529492455353, 1.6148698540002277e-16]}
{'': [nan, 0.16189564004028628], 'false': [nan, 0.16189564004028573], 'false,false': [nan, 0.16189564004028628], 'false,false,false': [nan, 0.16189564004028573]}
{'': [nan, 0.16116829799047455], 'false': [nan, 0.16116829799047475], 'false,false': [nan, 0.16116829799047475], 'false,false,false': [0.1614994964127004, 0.15601733740031806]}
{'': [0.15480188012125695, 0.1634483835694321], 'false': [nan, 0.1634483835694321], 'false,false': [nan, 0.1634483835694321], 'false,false,false': [nan, 0.1634483835694321], 'true': [0.047778742277383046, 2.5376526277146434e-17]}
{'': [nan, 0.1031154174490836], 'false': [nan, 0.10311541744908337], 'false,false': [0.1031599751191174, 0.10233638094307683], 'false,false,true': [nan, 0.1031599751191174]}
{'': [nan, 0.09531867412376832], 'false': [nan, 0.09531867412376832], 'false,false': [0.0009836897191931372, 7.761994898824574e-05], 'false,false,false': [nan, 7.761994898814995e-05]}
{'': [0.061375469382002924, 0.051589322877874204], 'true': [nan, 0.061375469382002924], 'false': [nan, 0.051589322877874204], 'false,false': [nan, 0.051589322877874204], 'false,false,false': [nan, 0.051589322877874204]}
{'': [nan, 0.06189197010283011], 'false': [nan, 0.06189197010283011], 'false,false': [nan, 0.06189197010283011], 'false,false,false': [0.05843638740149427, 0.10836972646839571]}
{'': [nan, 0.0600904984655269], 'false': [nan, 0.06009049846552688], 'false,false': [0.05748894422156521, 0.10501054662932639], 'false,false,false': [nan, 0.10501054662932639], 'false,false,true': [0.02995338563679097, 4.689235383323887e-06]}
{'': [nan, 0.04184519996527419], 'false': [nan, 0.04184519996527411], 'false,false': [nan, 0.04184519996527419]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 13.869
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(A, E) )
%   | | | then return 0.8331489350995117;  // std dev = 0.987, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.7672398441904213;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.1418510649004884;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7250593010641303;  // std dev = 0.044, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return -0.11447167683047757;  // std dev = 0.839, 77.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=1 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( tweets(A, G), follows(A, D) )
%   | | | then return 0.23884573487783134;  // std dev = 2.439, 33.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   | | | else return -0.002723375216540374;  // std dev = 1.591, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7291098928136794;  // std dev = 0.047, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.21252258176734692;  // std dev = 1.309, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.2970143868412815;  // std dev = 1.336, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, C), follows(C, A) )
%   | | then return 0.5625329205512263;  // std dev = 0.033, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.5118467941992016;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else return 0.6953132915243191;  // std dev = 0.052, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.09891424142309616;  // std dev = 0.104, 106.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.6678096629668392;  // std dev = 0.136, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.14526929180384682;  // std dev = 0.090, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.5539866646175405;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.11622109633022572;  // std dev = 0.028, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.07765776829339824;  // std dev = 2.493, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.38194544402258523;  // std dev = 1.932, 64.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=60 */
%   | | | else return 0.09648996650759538;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.2991911172250743;  // std dev = 0.804, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5740584756519685;  // std dev = 0.362, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.11545271293271117;  // std dev = 0.286, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4164910297126399;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10124048225975103;  // std dev = 6.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.33841478855447577;  // std dev = 0.183, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(A, D) )
%   | | | then return 0.19284976955155586;  // std dev = 1.132, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.41308682128069446;  // std dev = 0.288, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.0995676958553869;  // std dev = 0.133, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.395577194752785;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10860302086399388;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.09602457618229306;  // std dev = 1.061, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.0479487583202748;  // std dev = 1.214, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.20812990469518441;  // std dev = 1.364, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.26535093196308135;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.2748818778459735;  // std dev = 0.159, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(F, B), follows(H, A) )
%   | | | then return 0.4071756772326149;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3077221491300114;  // std dev = 0.253, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.49034110463203334;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09820659059911989;  // std dev = 0.286, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, C), follows(C, A) )
%   | | then return 0.22195129085458562;  // std dev = 0.016, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(D, C), follows(C, E) )
%   | | | then return -0.17030199028136786;  // std dev = 1.092, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.16798003946568282;  // std dev = 0.965, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0.30037510138410634;  // std dev = 0.093, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then return -0.05018819247055683;  // std dev = 0.118, 198.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2419030202996293;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09014217052237447;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.04386746333329175;  // std dev = 0.831, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.01140795978296204;  // std dev = 0.959, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(C, D) )
%   | | then return 0.19254470309164912;  // std dev = 0.125, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( tweets(A, E), tweets(C, E) )
%   | | | then return 0.05826027962216635;  // std dev = 0.924, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.19549869538103737;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.23103595282376255;  // std dev = 0.044, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A) )
%   | then return -0.04815857681480476;  // std dev = 0.116, 181.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=19 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2003966574524082;  // std dev = 0.000283, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08301708352585013;  // std dev = 5.27e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07835177752847995;  // std dev = 0.770, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.05422556286915547;  // std dev = 0.982, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.17883731257369098;  // std dev = 0.272, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.22959470524797024;  // std dev = 1.104, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.23196334543294037;  // std dev = 0.329, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.33415563971499973;  // std dev = 0.149, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.08401427140880277;  // std dev = 0.338, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.17539985291903415;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07037924307257669;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), follows(D, A) )
%   | | then return 0.14266820686088025;  // std dev = 0.101, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( follows(A, E), follows(E, C) )
%   | | | then return -0.16470072894528578;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1486753444461191;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.22320515206204466;  // std dev = 0.054, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.22244488276693206;  // std dev = 0.064, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.07393557183051237;  // std dev = 0.055, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.15264364552219023;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.0691342076489113;  // std dev = 0.013, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.014358244540278424;  // std dev = 1.141, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.049', 'seconds']
Refined model CLL: -0.099099


******************************************
Best model found
******************************************
Results 

CLL : -0.097543 

AUC ROC : 0.996274 

AUC PR : 0.553896 

Precision : 0.35049 

Recall : 0.916667 

F1 : 0.507092 

Total Learning Time : 13.869 

Total Inference Time : 8.403263092041016 

Total revision time: 27.162829202651977
Best scored revision CLL: -0.099099


Results 

CLL : -0.097543 

AUC ROC : 0.996274 

AUC PR : 0.553896 

Precision : 0.35049 

Recall : 0.916667 

F1 : 0.507092 

Total Learning Time : 27.18157939338684 

Total Inference Time : 8.403263092041016 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.183
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8185449747034717;  // std dev = 1.960, 101.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=97 */
%   | | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.14185106490048832;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.145862651373949;  // std dev = 7.901, 393.000 (wgt'ed) examples reached here.  /* #neg=267 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12731197140485315;  // std dev = 7.500, 366.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=118 */
%   | | | else return 0.1264202901355724;  // std dev = 1.959, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6350667316877816;  // std dev = 1.967, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else return -0.15860072325672123;  // std dev = 5.96e-08, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07012511850209363;  // std dev = 1.995, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07317088852494202;  // std dev = 5.194, 268.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=89 */
%   | | else return 0.07482344295158642;  // std dev = 0.320, 116.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4905573210438268;  // std dev = 1.471, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1507856581151542;  // std dev = 0.156, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04004686426467351;  // std dev = 4.350, 287.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.016042988877509556;  // std dev = 2.336, 96.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.020658404643249674;  // std dev = 4.704, 370.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=118 */
%   | | | else return 0.02214420219058332;  // std dev = 1.616, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.2967426272697313;  // std dev = 2.780, 127.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=118 */
%   | | | else return -0.13589283424889806;  // std dev = 0.018, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01318230873870907;  // std dev = 1.670, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.009410825081128865;  // std dev = 4.371, 390.000 (wgt'ed) examples reached here.  /* #neg=264 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.579', 'seconds']
Parameter learned model CLL:-0.151125 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.96, 4, 97], 'false,true,false': [1.79e-07, 0, 29], 'false,false': [0.0, 243, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.901, 267, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.5, 248, 118], 'false,false,false,false': [1.959, 17, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.967, 4, 118], 'true,false': [5.96e-08, 235, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.995, 21, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.194, 179, 89], 'false,false,false': [0.32, 79, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.471, 2, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.156, 273, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.35, 190, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.336, 67, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.704, 252, 118], 'false,false,false,false': [1.616, 21, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.78, 9, 118], 'false,false,true,false': [0.018, 248, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.67, 20, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.371, 264, 126]}]
{'': [nan, 0.2236916818204715], 'false': [0.02982248520710475, -1.5716737467944603e-16], 'false,true': [0.03803548671699008, 1.1025663141105003e-15]}
{'': [nan, 0.1588248283400562], 'false': [nan, 0.15882482834006073], 'false,false': [nan, 0.1588248283400562], 'false,false,false': [nan, 0.15882482834006073]}
{'': [nan, 0.15366039605059775], 'false': [nan, 0.15366039605059584], 'false,false': [nan, 0.15366039605059584], 'false,false,false': [0.15367175840718247, 0.15349330689202145]}
{'': [0.15254238298588482, 0.13718540960267966], 'true': [0.03172868110038298, 1.5117930548087238e-17], 'false': [nan, 0.13718540960267966], 'false,false': [nan, 0.13718540960267966], 'false,false,false': [nan, 0.13718540960267966]}
{'': [nan, 0.10123254078824094], 'false': [nan, 0.10123254078824258], 'false,false': [0.10064979240398113, 0.10257698453775684], 'false,false,true': [nan, 0.10064979240398113]}
{'': [nan, 0.09484110444702673], 'false': [nan, 0.09484110444702673], 'false,false': [0.016901935879230057, 8.95859713935719e-05], 'false,false,false': [nan, 8.958597139350683e-05]}
{'': [0.0659366338220519, 0.05682680231412729], 'true': [nan, 0.0659366338220519], 'false': [nan, 0.05682680231412729], 'false,false': [nan, 0.05682680231412729], 'false,false,false': [nan, 0.05682680231412729]}
{'': [nan, 0.06200698472107032], 'false': [nan, 0.06200698472107032], 'false,false': [nan, 0.06200698472107032], 'false,false,false': [0.05980684627128369, 0.09007566952399136]}
{'': [nan, 0.06510478665520378], 'false': [nan, 0.06510478665520393], 'false,false': [0.06252614307608, 0.09963411282893506], 'false,false,false': [nan, 0.09963411282893506], 'false,false,true': [0.060837872850029825, 1.2949313223572978e-06]}
{'': [nan, 0.04898554004254797], 'false': [nan, 0.04898554004254781], 'false,false': [nan, 0.04898554004254797]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 18.089
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.1418510649004882;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.53e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.5692514123364182;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.721666034449905;  // std dev = 0.026, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.12544463852839172;  // std dev = 0.000, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5352602923313996;  // std dev = 0.890, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.08578487415644531;  // std dev = 2.195, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return 0.161697207413092;  // std dev = 1.959, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.48e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.571146301759223;  // std dev = 0.107, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.2850801053584392;  // std dev = 1.160, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return -0.11231637819360668;  // std dev = 0.000, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.6180727316698464;  // std dev = 0.021, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.04856955388696533;  // std dev = 2.218, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | | else return 0.187714827012176;  // std dev = 1.818, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.4235824506729224;  // std dev = 0.198, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.46595017557918506;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6691516929861099;  // std dev = 0.098, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.1112136019812771;  // std dev = 0.323, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.41751358415831025;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1015963294878362;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then return 0.3195465267676999;  // std dev = 0.004, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else return 0.2527244840487067;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G), follows(F, E) )
%   | | | then return 0.3414469333314403;  // std dev = 0.149, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.03266158391169619;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.09194064924956039;  // std dev = 0.003, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3416718910984508;  // std dev = 1.397, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.12800546048256325;  // std dev = 1.83e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.036457201647930995;  // std dev = 0.920, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.0037985469915734786;  // std dev = 1.420, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.25752786733854577;  // std dev = 0.119, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.07993011619835709;  // std dev = 1.228, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.29300841469548045;  // std dev = 0.112, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.28514049039138434;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4493426653768876;  // std dev = 3.33e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.47173769145718064;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.45590033296296745;  // std dev = 0.131, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.09169300556321534;  // std dev = 0.297, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(C, A), tweets(C, E) )
%   | | then if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.2085569748379214;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.1146143220132297;  // std dev = 2.114, 45.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=40 */
%   | | else if ( tweets(D, G), tweets(A, G) )
%   | | | then return 0.19686472924973783;  // std dev = 0.909, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.3072259375939481;  // std dev = 0.162, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.08195276591503992;  // std dev = 0.212, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.21069836930336652;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(I, A) )
%   | | then return -0.07818699372546185;  // std dev = 0.001, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04384982341742982;  // std dev = 0.731, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.020742411723757348;  // std dev = 0.988, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( tweets(E, D), follows(E, A) )
%   | | | then return 0.1762153091177423;  // std dev = 3.94e-08, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return -0.06675759257536867;  // std dev = 0.858, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.18864422277732978;  // std dev = 0.030, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2171253489223731;  // std dev = 0.105, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.18997295413786097;  // std dev = 0.078, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.07199689374845566;  // std dev = 2.36e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.1785460717388293;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.07265680366173802;  // std dev = 0.002, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.0047706839355623675;  // std dev = 1.693, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.12189908218144947;  // std dev = 1.674, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | | | else return 0.16912245355473027;  // std dev = 0.945, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.29897343886944705;  // std dev = 0.155, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.226445940246588;  // std dev = 0.739, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return -0.07698625458075563;  // std dev = 0.331, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.15228106599753843;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.06813570222517039;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.1382983405788565;  // std dev = 0.062, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.019848640303854637;  // std dev = 0.911, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.15510609137087483;  // std dev = 0.060, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.03055545029687114;  // std dev = 0.920, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.1749340082160449;  // std dev = 0.055, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.09663722481271819;  // std dev = 0.867, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return -0.049530463883124064;  // std dev = 0.051, 233.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.024667793596882426;  // std dev = 0.912, 38.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=8 */
%   | | | else return 0.00737549992799213;  // std dev = 1.044, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.966', 'seconds']
Refined model CLL: -0.099354


******************************************
Best model found
******************************************
Results 

CLL : -0.100552 

AUC ROC : 0.994557 

AUC PR : 0.388622 

Precision : 0.334101 

Recall : 0.929487 

F1 : 0.491525 

Total Learning Time : 18.089 

Total Inference Time : 13.885518074035645 

Total revision time: 37.84688512992859
Best scored revision CLL: -0.099354


Results 

CLL : -0.100552 

AUC ROC : 0.994557 

AUC PR : 0.388622 

Precision : 0.334101 

Recall : 0.929487 

F1 : 0.491525 

Total Learning Time : 37.86563532066345 

Total Inference Time : 13.885518074035645 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.751
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360626;  // std dev = 6.04e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.37751358415831;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | else return -0.10159632948783627;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.41751358415830986;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.32750616782363134;  // std dev = 0.020, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.09269127618926096;  // std dev = 1.32e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2598067037745716;  // std dev = 0.018, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.46e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18182532660868597;  // std dev = 0.983, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109172;  // std dev = 2.58e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1529263772260037;  // std dev = 0.983, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.29e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1310484733368766;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420268;  // std dev = 2.11e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1452256587653795;  // std dev = 0.002, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.464', 'seconds']
Parameter learned model CLL:-0.08367 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.06e-07, 0, 31], 'false,true': [5.37e-08, 50, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 67, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [6.04e-09, 62, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.98, 1, 24], 'true,false': [2.98e-08, 49, 0], 'false,true,true': [1.05e-08, 0, 7], 'false,true,false': [0.0, 13, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.02, 0, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 36, 0], 'false,false,false': [1.32e-09, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.018, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.46e-09, 62, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.983, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.58e-08, 61, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.983, 1, 31], 'true,false': [0.0, 0, 0], 'false,true': [1.29e-08, 46, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.11e-08, 61, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.002, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 77, 0]}]
{'': [1.375244004696968e-15, 5.773159728050814e-17], 'false': [5.773159728050814e-17, nan]}
{'': [-4.584146682323227e-16, -3.314098580970616e-17], 'false': [-3.314098580970616e-17, nan]}
{'': [-5.730183352904034e-17, 3.581364595565021e-17], 'false': [nan, 3.581364595565021e-17]}
{'': [0.06432327044533824, 0.06130558580639885], 'true': [0.03839999999999998, 1.8126090197961738e-17], 'false': [0.06130558580639885, nan], 'false,true': [9.516197353929913e-17, -8.540177112501205e-18]}
{'': [1.3464148039498888e-05, -6.797283824235652e-18], 'true': [1.3464148039498888e-05, nan], 'false': [nan, -6.797283824235652e-18], 'false,false': [-9.25185853854297e-18, 2.135044278125301e-18], 'false,false,true': [nan, -9.25185853854297e-18]}
{'': [1.0234427127052012e-05, 5.3720468933475315e-18], 'false': [nan, 5.3720468933475315e-18], 'false,false': [nan, 5.3720468933475315e-18]}
{'': [0.03018992474887633, 1.0920226471722851e-17], 'false': [nan, 1.0920226471722851e-17], 'false,false': [nan, 1.0920226471722851e-17], 'false,false,false': [1.0920226471722851e-17, nan]}
{'': [0.03019793923033892, 0.0], 'true': [0.03019793923033892, nan], 'false': [3.620292471603771e-18, 9.912705577010326e-19], 'false,false': [nan, 9.912705577010326e-19]}
{'': [0.03020463085039631, 1.2509555207044018e-17], 'false': [nan, 1.2509555207044018e-17], 'false,false': [7.280150981148568e-18, 6.938893903907229e-19], 'false,false,true': [nan, 7.280150981148568e-18]}
{'': [4.243038786770043e-06, -8.651088503572648e-18], 'false': [nan, -8.651088503572648e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 10.011
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7265689707302541;  // std dev = 0.121, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.12544463852839155;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5655550117217781;  // std dev = 0.155, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(E, A) )
%   | | then return 0.35361361689047016;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5536136168904702;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.11231637819360628;  // std dev = 4.59e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4257053619319329;  // std dev = 0.161, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.10159632948783633;  // std dev = 1.49e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.44436187501845803;  // std dev = 0.064, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.04246003276359482;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.33050562993974464;  // std dev = 0.084, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.018146027842465846;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.33865264766442055;  // std dev = 0.127, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926105;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.194984152264933;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.30249319779020195;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.24776776323863525;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.3038343865572988;  // std dev = 0.064, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.284683707676618;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.24638512015632455;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.08518475138839683;  // std dev = 2.95e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return -0.08518475138839687;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.08518475138839685;  // std dev = 2.63e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.15519949221491852;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.21582079149160344;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.02854562310656914;  // std dev = 0.855, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.2438731194561543;  // std dev = 0.055, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.23040429416553077;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.20353093784967868;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, H) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return -0.07877675473109175;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.23710416239135568;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.21723165007568393;  // std dev = 0.069, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.17220606164126007;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1922750420547611;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A) )
%   | | then return -0.06200005175856499;  // std dev = 0.894, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.18060502496041506;  // std dev = 0.044, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.07324622576333704;  // std dev = 1.61e-09, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(D, A) )
%   | | | then return 0.1969090348463235;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.16570616899401627;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.21480142188231405;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.1490237506124763;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16417463591974824;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.148320570413493;  // std dev = 0.000929, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.06842697784420275;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return -0.06842697784420272;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(D, A) )
%   | | | then return 0.16761363791882244;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1441167273782629;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18082048771613735;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.13109605601006313;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14287634806190874;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.13054431369539865;  // std dev = 0.000835, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202625;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.356', 'seconds']
Refined model CLL: -0.082868


******************************************
Best model found
******************************************
Results 

CLL : -0.091898 

AUC ROC : 0.994225 

AUC PR : 0.434303 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 10.011 

Total Inference Time : 1.7854602336883545 

Total revision time: 17.74545732688904
Best scored revision CLL: -0.082868


Results 

CLL : -0.091898 

AUC ROC : 0.994225 

AUC PR : 0.434303 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 17.77686396789551 

Total Inference Time : 1.7854602336883545 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.677
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995126;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 6.32e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6944871741022827;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839127;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5533333522213909;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360618;  // std dev = 8.43e-09, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.39603455732286247;  // std dev = 1.389, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | else return -0.1015963294878363;  // std dev = 2.58e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4317488430371479;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.321445695183902;  // std dev = 0.991, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926089;  // std dev = 6.32e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25371729219027533;  // std dev = 0.991, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.82e-09, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20675565426456935;  // std dev = 0.991, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109154;  // std dev = 7.15e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.12824452745594256;  // std dev = 1.940, 66.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 5.27e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17002102251468817;  // std dev = 0.002, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 5.48e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10122794461254907;  // std dev = 0.210, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.019', 'seconds']
Parameter learned model CLL:-0.085962 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.392, 2, 62], 'false,true': [6.32e-08, 116, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.392, 2, 62], 'false,true': [0.0, 126, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false': [8.43e-09, 116, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.389, 2, 54], 'true,false': [2.58e-08, 103, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.991, 1, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.32e-08, 109, 0], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.991, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 119, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.991, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.15e-08, 124, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.94, 4, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 96, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.27e-09, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.002, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.48e-08, 114, 0], 'false,false,false': [0.0, 22, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.21, 3, 62], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 133, 0]}]
{'': [0.030273437499999334, 3.4455197315953135e-17], 'false': [3.4455197315953135e-17, nan]}
{'': [0.030273437499998224, -1.76225876924628e-18], 'false': [-1.76225876924628e-18, nan]}
{'': [0.01562106324011148, 7.082457226057034e-17], 'false': [nan, 7.082457226057034e-17]}
{'': [0.06862901729777371, 0.06321268290126776], 'true': [0.0344387755102039, 6.467318590049456e-18], 'false': [0.06321268290126776, nan], 'false,true': [0.0, -6.938893903907228e-18]}
{'': [0.015596025209490178, 4.683753385137379e-17], 'true': [0.015596025209490178, nan], 'false': [nan, 4.683753385137379e-17], 'false,false': [3.66679164096382e-17, -7.304098846218135e-18], 'false,false,true': [nan, 3.66679164096382e-17]}
{'': [0.015598303697186712, 3.358657889622322e-17], 'false': [nan, 3.358657889622322e-17], 'false,false': [nan, 3.358657889622322e-17]}
{'': [0.01560050396416674, 4.118569284899774e-17], 'false': [nan, 4.118569284899774e-17], 'false,false': [nan, 4.118569284899774e-17], 'false,false,false': [4.118569284899774e-17, nan]}
{'': [0.05701118093418759, -4.9124912594033475e-18], 'true': [0.05701118093418759, nan], 'false': [-8.0953762212251e-18, 1.6326809185664067e-18], 'false,false': [nan, 1.6326809185664067e-18]}
{'': [2.804709124045842e-06, 2.8571916074912114e-17], 'false': [nan, 2.8571916074912114e-17], 'false,false': [2.6294755846385285e-17, -3.784851220313033e-18], 'false,false,true': [nan, 2.6294755846385285e-17]}
{'': [0.043975298849200345, -1.419082061550952e-17], 'false': [nan, -1.419082061550952e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 14.315
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else return -0.14185106490048763;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109547;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.38614007887762103;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.7194734122109542;  // std dev = 4.21e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.1254446385283913;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5619046513460881;  // std dev = 0.154, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.3886997700796176;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.5553664367462843;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.1123163781936062;  // std dev = 9.06e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.422187714700425;  // std dev = 0.088, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.29845158861913873;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.41652033113409703;  // std dev = 0.003, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4163216805292546;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.330243378160433;  // std dev = 0.212, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3195482406533856;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.12011757067147859;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926103;  // std dev = 3.16e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2512497363524233;  // std dev = 5.16e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.29922668576226624;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.040430495414192164;  // std dev = 0.397, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2852120044013474;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.25355285785529075;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.27453597183555445;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.08518475138839682;  // std dev = 5.35e-09, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else return -0.08518475138839691;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.08518475138839686;  // std dev = 3.23e-09, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.20698302738283514;  // std dev = 3.65e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.18722233430433796;  // std dev = 1.073, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(D, A), tweets(A, G) )
%   | | | then return 0.2820905520932854;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.22472722352351573;  // std dev = 0.080, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then return 0.05072001632617459;  // std dev = 0.888, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.2411946594669335;  // std dev = 0.000976, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.07877675473109175;  // std dev = 2.95e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.0787767547310918;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.12307752681039956;  // std dev = 0.977, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.1233415417572784;  // std dev = 0.731, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), follows(H, D) )
%   | | | then return 0.18580389266448613;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2045424739420718;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.18310105476636063;  // std dev = 0.060, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.20798039608551258;  // std dev = 0.076, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.1771580340674008;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1914308957033574;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07324622576333693;  // std dev = 4.47e-09, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), follows(A, D) )
%   | | | then return 0.15964409493787327;  // std dev = 0.053, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.18241512315178052;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.16426373336526576;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.19447688879229877;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.011634636038781362;  // std dev = 0.842, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.16552138297729055;  // std dev = 0.042, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15503714641267619;  // std dev = 0.027, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, H) )
%   | then return -0.06842697784420265;  // std dev = 4.66e-09, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return -0.06842697784420276;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, D) )
%   | | | then return 0.14481147759083768;  // std dev = 0.068, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.1323063921991121;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.16538932000296236;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14830977235722947;  // std dev = 0.074, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.13714817612460684;  // std dev = 1.182, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.1485375804230133;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.13589206471138576;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1489665624666433;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.487', 'seconds']
Refined model CLL: -0.085336


******************************************
Best model found
******************************************
Results 

CLL : -0.09245 

AUC ROC : 0.992648 

AUC PR : 0.346785 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 14.315 

Total Inference Time : 3.9576432704925537 

Total revision time: 28.533301012039182
Best scored revision CLL: -0.085336


Results 

CLL : -0.09245 

AUC ROC : 0.992648 

AUC PR : 0.346785 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 28.56470765304565 

Total Inference Time : 3.9576432704925537 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.434
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.38e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6984207806320066;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839138;  // std dev = 2.98e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5395061833743757;  // std dev = 0.144, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360651;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4135300283555647;  // std dev = 0.993, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | else return -0.10159632948783642;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4265170413425772;  // std dev = 7.45e-09, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2879174062967661;  // std dev = 1.959, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926065;  // std dev = 8.02e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21796612026777198;  // std dev = 2.177, 98.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.51e-09, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19707691450928647;  // std dev = 1.704, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109148;  // std dev = 8.30e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17439097530484596;  // std dev = 1.400, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333689;  // std dev = 6.14e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15884441578146;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 6.75e-08, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | | else return -0.06842697784420265;  // std dev = 2.95e-09, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13764344006110435;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.087', 'seconds']
Parameter learned model CLL:-0.086943 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.38e-07, 0, 93], 'false,true': [0.0, 174, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.399, 2, 93], 'false,true': [2.98e-08, 160, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.144, 2, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 181, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.993, 1, 76], 'true,false': [0.0, 139, 0], 'false,true,true': [7.45e-09, 0, 17], 'false,true,false': [0.0, 29, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.959, 4, 93], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.02e-08, 162, 0], 'false,false,false': [0.0, 31, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.177, 5, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 176, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.704, 3, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [8.3e-08, 173, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.4, 2, 93], 'true,false': [0.0, 0, 0], 'false,true': [6.14e-08, 132, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 24, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.75e-08, 154, 0], 'false,false,false': [2.95e-09, 32, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 185, 0]}]
{'': [6.11219557643097e-16, -1.8376105235175005e-16], 'false': [-1.8376105235175005e-16, nan]}
{'': [0.020609418282548867, 5.551115123125783e-18], 'false': [5.551115123125783e-18, nan]}
{'': [0.02060941828254767, -2.4535315461329425e-18], 'false': [nan, -2.4535315461329425e-18]}
{'': [0.06544262541409508, 0.064980879063224], 'true': [0.012818350480687727, -4.952073922788468e-17], 'false': [0.064980879063224, nan], 'false,true': [5.224578939412501e-17, -1.1485065771984378e-17]}
{'': [0.03955307094666516, 4.02671563335549e-17], 'true': [0.03955307094666516, nan], 'false': [nan, 4.02671563335549e-17], 'false,false': [3.974872557299943e-17, -3.581364595565021e-18], 'false,false,true': [nan, 3.974872557299943e-17]}
{'': [0.04837314380788488, 3.154042683594195e-17], 'false': [nan, 3.154042683594195e-17], 'false,false': [nan, 3.154042683594195e-17]}
{'': [0.03024892939085405, 3.978833961084376e-17], 'false': [nan, 3.978833961084376e-17], 'false,false': [nan, 3.978833961084376e-17], 'false,false,false': [3.978833961084376e-17, nan]}
{'': [0.02063669056152464, 4.839433697084016e-17], 'true': [0.02063669056152464, nan], 'false': [2.8596653664587365e-17, -3.469446951953614e-18], 'false,false': [nan, -3.469446951953614e-18]}
{'': [0.010518602055853482, 2.5666446268215983e-17], 'false': [nan, 2.5666446268215983e-17], 'false,false': [2.955788572053988e-17, 8.673617379884035e-18], 'false,false,true': [nan, 2.955788572053988e-17]}
{'': [0.010519227861750855, -4.200843876960052e-18], 'false': [nan, -4.200843876960052e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 21.384
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.8581489350995118;  // std dev = 1.88e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.1418510649004881;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.724565371164396;  // std dev = 0.005, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.558087295570079;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.7258335751283973;  // std dev = 0.106, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.1254446385283915;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.5769969941243913;  // std dev = 0.145, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.44341731448448685;  // std dev = 0.944, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.5543564490549299;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.5538535333732265;  // std dev = 0.002, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.11231637819360653;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.42986572844409304;  // std dev = 0.137, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3146476123877335;  // std dev = 0.933, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.4192942043129828;  // std dev = 0.036, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4163352235235698;  // std dev = 4.71e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | then return 0.33552515808367317;  // std dev = 0.163, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.23578069634819776;  // std dev = 0.901, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.32183607619609034;  // std dev = 0.040, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.31991308272159014;  // std dev = 1.49e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.06991308272159014;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.31991308272159014;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926068;  // std dev = 7.74e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | else return -0.09269127618926089;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(D, F) )
%   | | | then return 0.24996735602580697;  // std dev = 3.65e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.275264571682237;  // std dev = 0.079, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.11037509333556912;  // std dev = 0.907, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.16289909936741448;  // std dev = 0.932, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.2587426215307865;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2694089453557165;  // std dev = 0.096, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2554578918924719;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2544420400457074;  // std dev = 0.000828, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839678;  // std dev = 5.67e-09, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.17517535904803094;  // std dev = 0.985, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.026805697166531826;  // std dev = 0.868, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, G), follows(E, G) )
%   | | | then return 0.24514542907534503;  // std dev = 0.057, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2132726660814;  // std dev = 0.044, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.21741781141323768;  // std dev = 0.031, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2731405792386857;  // std dev = 0.031, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.21001287231979204;  // std dev = 0.027, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.22325582773660343;  // std dev = 0.048, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109147;  // std dev = 5.89e-09, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.15487404763439053;  // std dev = 0.948, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return -0.03995171916289918;  // std dev = 1.135, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.20312890287369365;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.17529151176338686;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.21746082141486012;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.23121987295977628;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.18479295119073505;  // std dev = 0.063, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.17557568784715563;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.07324622576333667;  // std dev = 8.43e-09, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.15639661437381497;  // std dev = 0.006, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.15066071020961147;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.19458893501523705;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.16728978233947442;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A), recursion_accounttype(H, B) )
%   | | | then return 0.025818198051277958;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.1602976815605709;  // std dev = 0.093, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.18269304718854007;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.049074155322777854;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420262;  // std dev = 5.67e-09, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.1368524382737563;  // std dev = 0.006, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.13237893704350356;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.16589621749136096;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14527357843036506;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( recursion_accounttype(H, B), follows(H, J) )
%   | | | then return 0.17636104306058484;  // std dev = 0.045, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.052731688027508446;  // std dev = 1.245, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.1357600593782453;  // std dev = 0.027, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.15717436015850042;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202626;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.432', 'seconds']
Refined model CLL: -0.085236


******************************************
Best model found
******************************************
Results 

CLL : -0.09169 

AUC ROC : 0.994863 

AUC PR : 0.428259 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 21.384 

Total Inference Time : 5.686281442642212 

Total revision time: 40.55726877975464
Best scored revision CLL: -0.085236


Results 

CLL : -0.09169 

AUC ROC : 0.994863 

AUC PR : 0.428259 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 40.588675420761106 

Total Inference Time : 5.686281442642212 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.225
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8422759192264946;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6990438496174493;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283918;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5406897885138835;  // std dev = 0.152, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936068;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.38366487901564095;  // std dev = 2.184, 108.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=103 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.38450662985739065;  // std dev = 0.208, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.10159632948783623;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3314328678509085;  // std dev = 0.996, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892605;  // std dev = 6.50e-08, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | | else return -0.09269127618926092;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23823076794960402;  // std dev = 1.969, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20934984575716364;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 6.99e-08, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15954811385236592;  // std dev = 1.969, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333666;  // std dev = 1.28e-07, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13612024542627482;  // std dev = 0.174, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.66e-08, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | | else return -0.06842697784420262;  // std dev = 2.79e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11800015468447056;  // std dev = 0.174, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 2.28e-09, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.046', 'seconds']
Parameter learned model CLL:-0.086552 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 124], 'false,true': [0.0, 243, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.711, 3, 124], 'false,true': [0.0, 234, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.152, 3, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 240, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.184, 5, 103], 'true,false': [0.0, 193, 0], 'false,true,true': [0.208, 1, 21], 'false,true,false': [0.0, 43, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.996, 1, 124], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.5e-08, 216, 0], 'false,false,false': [0.0, 29, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.969, 4, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 261, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.403, 2, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.99e-08, 229, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.969, 4, 124], 'true,false': [0.0, 0, 0], 'false,true': [1.28e-07, 226, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.174, 4, 124], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.66e-08, 203, 0], 'false,false,false': [2.79e-09, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 4, 124], 'false,true': [0.0, 0, 0], 'false,false': [2.28e-09, 251, 0]}]
{'': [0.015621063240114865, -1.5716737467944603e-16], 'false': [-1.5716737467944603e-16, nan]}
{'': [0.023064046128095515, -5.5036696947229984e-17], 'false': [-5.5036696947229984e-17, nan]}
{'': [0.023064046128093558, -8.511709855459534e-17], 'false': [nan, -8.511709855459534e-17]}
{'': [0.07001729216457642, 0.06759326696499314], 'true': [0.04415294924554082, -9.779166538149047e-17], 'false': [0.06759326696499314, nan], 'false,true': [0.043388429752066054, -2.1946269091427512e-17]}
{'': [0.00793849324054277, 4.350261647510817e-17], 'true': [0.00793849324054277, nan], 'false': [nan, 4.350261647510817e-17], 'false,false': [1.9531701359146273e-17, -9.570888143320316e-18], 'false,false,true': [nan, 1.9531701359146273e-17]}
{'': [0.03027675852677967, 3.402982450958334e-17], 'false': [nan, 3.402982450958334e-17], 'false,false': [nan, 3.402982450958334e-17]}
{'': [0.015622583434463941, 2.1331796106334886e-17], 'false': [nan, 2.1331796106334886e-17], 'false,false': [nan, 2.1331796106334886e-17], 'false,false,false': [2.1331796106334886e-17, nan]}
{'': [0.03027407437215545, 4.029991050240782e-17], 'true': [0.03027407437215545, nan], 'false': [7.270487063916955e-17, -1.0092936587501423e-17], 'false,false': [nan, -1.0092936587501423e-17]}
{'': [0.030274012127233466, -1.7146301538612456e-17], 'false': [nan, -1.7146301538612456e-17], 'false,false': [2.187631575616072e-17, 7.93016446160826e-18], 'false,false,true': [nan, 2.187631575616072e-17]}
{'': [0.030272343336431883, 3.5385594410363554e-18], 'false': [nan, 3.5385594410363554e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 28.633
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.8025933795439559;  // std dev = 1.374, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.858148935099512;  // std dev = 2.38e-07, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.14185106490048843;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.7267828934794828;  // std dev = 0.037, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.6799164110757135;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7194734122109543;  // std dev = 5.96e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.7439976143448207;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.052806745544287804;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6425503352878774;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839188;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5670636458521555;  // std dev = 0.118, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.4800566463024687;  // std dev = 0.956, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.2252815621487323;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5655447369083707;  // std dev = 0.153, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else return -0.11231637819360685;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.4310933887856619;  // std dev = 0.065, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.03866096790225689;  // std dev = 1.351, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return 0.4281475972369643;  // std dev = 0.177, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4143597340323484;  // std dev = 0.012, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.10159632948783624;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.28721385435364516;  // std dev = 1.383, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | | else return 0.4700416979541343;  // std dev = 0.077, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3303396046700185;  // std dev = 0.172, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(G, A) )
%   | | then return 0.3182732834324349;  // std dev = 0.010, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.014149871927479482;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15251679473918708;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926053;  // std dev = 5.96e-08, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else return -0.0926912761892608;  // std dev = 1.67e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.2688559897084671;  // std dev = 0.126, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.16753790471952995;  // std dev = 0.952, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.06668764851125863;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.25274633285003106;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.27900945144888545;  // std dev = 0.011, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.34421238723380415;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.25345710847034236;  // std dev = 0.019, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.2785694788258912;  // std dev = 0.148, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.08518475138839678;  // std dev = 5.59e-09, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.22026020284227732;  // std dev = 0.075, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.2064791994567258;  // std dev = 0.010, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, H), follows(H, D) )
%   | | | then return 0.2362804680803757;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2600689158628518;  // std dev = 0.080, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, I) )
%   | | | then return 0.22504063201011643;  // std dev = 0.018, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.205067421249637;  // std dev = 1.015, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.20854830827078266;  // std dev = 0.017, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.22638780288805502;  // std dev = 0.131, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.07877675473109143;  // std dev = 3.95e-09, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.15689421832612305;  // std dev = 0.955, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.19154845434361184;  // std dev = 0.101, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.09022318464492603;  // std dev = 0.291, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.18553380977788847;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3180093090076297;  // std dev = 0.072, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.17589838490628004;  // std dev = 0.043, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.18454078955807968;  // std dev = 0.070, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333664;  // std dev = 8.54e-09, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else return -0.07324622576333702;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.13205928382146875;  // std dev = 0.989, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.02831421456777685;  // std dev = 0.885, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, F), follows(G, D) )
%   | | | then return 0.1512978339039767;  // std dev = 0.027, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.1754030284587222;  // std dev = 0.062, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, H) )
%   | | | then return 0.16219861976289657;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.23623418231478402;  // std dev = 0.105, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1558742322345104;  // std dev = 0.096, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.16919908924834695;  // std dev = 0.044, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420267;  // std dev = 1.61e-09, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.14269923270565774;  // std dev = 0.060, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.15320232898208028;  // std dev = 0.050, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.15275429576769534;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.17265722749263068;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, I) )
%   | | | then return -0.17251586221507698;  // std dev = 0.738, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07902564538492639;  // std dev = 0.981, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.15377151828177998;  // std dev = 0.091, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13717106322285752;  // std dev = 0.060, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.0641918400820261;  // std dev = 5.10e-09, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.169', 'seconds']
Refined model CLL: -0.085357


******************************************
Best model found
******************************************
Results 

CLL : -0.091974 

AUC ROC : 0.99334 

AUC PR : 0.40428 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 28.633 

Total Inference Time : 8.549621105194092 

Total revision time: 55.21007748413086
Best scored revision CLL: -0.085357


Results 

CLL : -0.091974 

AUC ROC : 0.99334 

AUC PR : 0.40428 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 55.24148412513733 

Total Inference Time : 8.549621105194092 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.154
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8270930344783917;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048774;  // std dev = 1.46e-07, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6827537530635682;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.125444638528392;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.553165716935842;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360682;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42687137461314745;  // std dev = 0.996, 129.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=128 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.36795664593097605;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | else return -0.10159632948783624;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3238293198249261;  // std dev = 1.401, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892605;  // std dev = 1.21e-07, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23123328828300985;  // std dev = 2.409, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19445688197428634;  // std dev = 2.197, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 2.11e-08, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1744062964615762;  // std dev = 1.719, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333682;  // std dev = 1.14e-07, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13061543413782345;  // std dev = 0.188, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420276;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | | else return -0.06842697784420262;  // std dev = 2.28e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11307795832649721;  // std dev = 0.189, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202596;  // std dev = 6.72e-09, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.444', 'seconds']
Parameter learned model CLL:-0.087059 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.201, 5, 156], 'false,true': [1.46e-07, 314, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.588, 7, 156], 'false,true': [0.0, 298, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 304, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.996, 1, 128], 'true,false': [0.0, 247, 0], 'false,true,true': [0.249, 2, 28], 'false,true,false': [0.0, 45, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.401, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.21e-07, 247, 0], 'false,false,false': [0.0, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.409, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 317, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.197, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.11e-08, 320, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.719, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.14e-07, 260, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 57, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.188, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 256, 0], 'false,false,false': [2.28e-09, 61, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.189, 6, 156], 'false,true': [0.0, 0, 0], 'false,false': [6.72e-09, 300, 0]}]
{'': [0.030091431657735174, 6.788624863950002e-17], 'false': [6.788624863950002e-17, nan]}
{'': [0.04110053069366356, -8.345300587786412e-17], 'false': [-8.345300587786412e-17, nan]}
{'': [0.01851192595229348, -6.573688961596321e-17], 'false': [nan, -6.573688961596321e-17]}
{'': [0.06558202118146064, 0.0778040881028074], 'false': [0.0778040881028074, nan], 'false,true': [0.06222222222222236, -1.4802973661668754e-17], 'true': [0.007691845441979727, -7.011934892369409e-17]}
{'': [0.012418226440403253, 1.0158903493302086e-16], 'true': [0.012418226440403253, nan], 'false': [nan, 1.0158903493302086e-16], 'false,false': [5.933175678158732e-17, -3.010774304068221e-17], 'false,false,true': [nan, 5.933175678158732e-17]}
{'': [0.03583412760131154, 3.7824633015620474e-17], 'false': [nan, 3.7824633015620474e-17], 'false,false': [nan, 3.7824633015620474e-17]}
{'': [0.029969879198779716, 1.3877787807814458e-18], 'false': [nan, 1.3877787807814458e-18], 'false,false': [nan, 1.3877787807814458e-18], 'false,false,false': [1.3877787807814458e-18, nan]}
{'': [0.01858620857790134, 2.4515965843457714e-17], 'true': [0.01858620857790134, nan], 'false': [5.0387044963757104e-17, -1.0712678307786598e-17], 'false,false': [nan, -1.0712678307786598e-17]}
{'': [0.035485790527727205, -7.004561669559347e-17], 'false': [nan, -7.004561669559347e-17], 'false,false': [-1.3877787807814457e-17, 5.4601132358614255e-18], 'false,false,true': [nan, -1.3877787807814457e-17]}
{'': [0.035680782560803086, 4.51490696680897e-17], 'false': [nan, 4.51490696680897e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 42.093
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.14185106490048782;  // std dev = 1.03e-07, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7216278126119567;  // std dev = 0.049, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G) )
%   | | | then return 0.6723167141864698;  // std dev = 1.387, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.725526277426297;  // std dev = 0.044, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else return -0.12544463852839202;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.5131677109105179;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.5589854383441784;  // std dev = 0.050, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.23364525184179477;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.5826208906836376;  // std dev = 0.146, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5645037879440131;  // std dev = 0.114, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.1123163781936069;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.41683054008484566;  // std dev = 0.934, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | | else return 0.44043862281835144;  // std dev = 0.188, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.3568296971046353;  // std dev = 0.892, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.4133635169071676;  // std dev = 0.006, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.42232503852644826;  // std dev = 0.050, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10159632948783623;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.33094290008632316;  // std dev = 0.205, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.22526750503466733;  // std dev = 0.324, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.32442470478051694;  // std dev = 0.068, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.251329425788916;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926044;  // std dev = 1.28e-07, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.21609596654100166;  // std dev = 1.341, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.2735768584226877;  // std dev = 0.123, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.20293553007743292;  // std dev = 0.978, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.04851428005307731;  // std dev = 0.838, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.29804215720800614;  // std dev = 0.136, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.26611738458084905;  // std dev = 0.014, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.25510355509604693;  // std dev = 0.015, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.2746555399032597;  // std dev = 0.066, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.08518475138839678;  // std dev = 6.11e-09, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.21766405627426427;  // std dev = 0.032, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.23405543132858989;  // std dev = 0.169, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.07016740510644237;  // std dev = 0.922, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.22747342693514494;  // std dev = 0.119, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then return 0.09238514552757662;  // std dev = 0.327, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else if ( follows(A, J), follows(J, A) )
%   | | | then return 0.15032444753970045;  // std dev = 0.968, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.21509954294558173;  // std dev = 0.061, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.07877675473109141;  // std dev = 3.65e-08, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.16015700140783637;  // std dev = 0.986, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.11777195092798659;  // std dev = 1.378, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.1931755336716197;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.19112010788691217;  // std dev = 0.000229, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.19500230009494038;  // std dev = 0.028, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.24437704745341718;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.1967103557478311;  // std dev = 0.111, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.18043459467077982;  // std dev = 0.065, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.07324622576333702;  // std dev = 5.10e-09, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.16245818948140514;  // std dev = 0.009, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.15918968619317156;  // std dev = 0.028, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.1696835797909939;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1612904062387016;  // std dev = 0.029, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return 0.04289408003287241;  // std dev = 0.915, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.1737188196851283;  // std dev = 0.112, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.1713968896416833;  // std dev = 0.052, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.1560718944650324;  // std dev = 0.057, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.06842697784420312;  // std dev = 0.000, 330.000 (wgt'ed) examples reached here.  /* #neg=330 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.10901076970993644;  // std dev = 0.985, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.14552080667043302;  // std dev = 0.152, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( tweets(A, G), recursion_accounttype(D, B) )
%   | | | then return -0.13957619744626296;  // std dev = 0.772, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09779286264518633;  // std dev = 1.327, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.14588124036250133;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.15364949693248575;  // std dev = 0.026, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.12690690545742786;  // std dev = 0.000119, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1423140154721921;  // std dev = 0.022, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202594;  // std dev = 6.72e-09, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.552', 'seconds']
Refined model CLL: -0.086209


******************************************
Best model found
******************************************
Results 

CLL : -0.091711 

AUC ROC : 0.993844 

AUC PR : 0.387119 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 42.093 

Total Inference Time : 14.328817129135132 

Total revision time: 78.93843748283386
Best scored revision CLL: -0.086209


Results 

CLL : -0.091711 

AUC ROC : 0.993844 

AUC PR : 0.387119 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 78.96984412384033 

Total Inference Time : 14.328817129135132 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.368
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7840748610254378;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7341781063237716;  // std dev = 1.12e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839152;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5699744801269779;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360633;  // std dev = 3.48e-09, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4284378725469951;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42843787254699495;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3281277244262216;  // std dev = 4.21e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926101;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18615215799013138;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.63e-09, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.09536736306653887;  // std dev = 1.762, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109179;  // std dev = 5.27e-09, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.20976996426272343;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17710548148146418;  // std dev = 3.73e-09, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15275067312527565;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.395', 'seconds']
Parameter learned model CLL:-0.092527 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.361, 2, 25], 'false,true': [4.59e-08, 44, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.12e-07, 0, 25], 'false,true': [0.0, 42, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false': [3.48e-09, 47, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 24], 'true,false': [0.0, 43, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [4.21e-08, 0, 25], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 43, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.361, 2, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.762, 4, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.27e-09, 36, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.0, 0, 25], 'true,false': [0.0, 0, 0], 'false,true': [1.05e-08, 51, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 1, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [3.73e-09, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 39, 0], 'false,false,false': [0.0, 1, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 52, 0]}]
{'': [0.06858710562414343, 4.794144879063176e-17], 'false': [4.794144879063176e-17, nan]}
{'': [4.973799150320702e-16, -2.6433881538694202e-17], 'false': [-2.6433881538694202e-17, nan]}
{'': [-2.1316282072803005e-16, 1.1810883240693155e-17], 'false': [nan, 1.1810883240693155e-17]}
{'': [0.0645859245928169, 0.0526755478737563], 'true': [-1.4802973661668753e-16, -1.290957005378089e-18], 'false': [0.0526755478737563, nan], 'false,true': [0.0, -1.1564823173178713e-18]}
{'': [7.105427357601002e-17, -1.7270135938613546e-17], 'true': [7.105427357601002e-17, nan], 'false': [nan, -1.7270135938613546e-17], 'false,false': [-1.6782441069915156e-17, 0.0], 'false,false,true': [nan, -1.6782441069915156e-17]}
{'': [0.06858710562414261, 6.0557619525008536e-18], 'false': [nan, 6.0557619525008536e-18], 'false,false': [nan, 6.0557619525008536e-18]}
{'': [0.1070662111179676, 7.709882115452476e-19], 'false': [nan, 7.709882115452476e-19], 'false,false': [nan, 7.709882115452476e-19], 'false,false,false': [7.709882115452476e-19, nan]}
{'': [-6.217248937900877e-17, 1.0675221390626506e-18], 'false': [2.1769078914218755e-18, 0.0], 'false,false': [nan, 0.0], 'true': [-6.217248937900877e-17, nan]}
{'': [8.881784197001253e-18, 6.938893903907229e-19], 'false': [nan, 6.938893903907229e-19], 'false,false': [0.0, 0.0], 'false,false,true': [nan, 0.0]}
{'': [-2.6645352591003756e-17, -2.6688053476566264e-18], 'false': [nan, -2.6688053476566264e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 7.586
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.5944734122109545;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7194734122109543;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.12544463852839152;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5639386607336501;  // std dev = 0.069, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360638;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4243670099207972;  // std dev = 0.068, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.4154303394515457;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(A, E), recursion_accounttype(F, B) )
%   | | | then return 0.33811774617145507;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1752355365739005;  // std dev = 0.987, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.3228958501827835;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.31736061527781195;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926103;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.27351432028300443;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.25190878545616113;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.36279945839133204;  // std dev = 0.758, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then if ( tweets(G, F), follows(A, G) )
%   | | | then return 0.2772845558270146;  // std dev = 0.091, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.28740277150218607;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2528841779927027;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.0851847513883968;  // std dev = 2.95e-09, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.08518475138839683;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.08518475138839685;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.21823748956499298;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.23405801542588253;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.20487792231331575;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.23804703115968523;  // std dev = 0.103, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2255979970574034;  // std dev = 0.078, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, H) )
%   | then if ( follows(H, A) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(H, I) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, D), follows(F, A) )
%   | | | then return 0.18999432389056517;  // std dev = 0.066, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.17326797329708643;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), recursion_accounttype(D, B) )
%   | | | then return 0.17216394473624852;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.23376256767298478;  // std dev = 0.076, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1748876376700752;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.07324622576333704;  // std dev = 9.13e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.16382822266778574;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.14828835461385526;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return -0.020643824720508252;  // std dev = 0.825, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.16325159763827182;  // std dev = 0.077, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.06842697784420276;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.0684269778442027;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.13577121737665687;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15204090937507786;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.154914407113564;  // std dev = 0.072, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return -0.06891441951287895;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.14720008718700817;  // std dev = 0.067, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, H) )
%   | then if ( follows(H, A) )
%   | | then return -0.06419184008202623;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( follows(H, I) )
%   | | | then return -0.06419184008202618;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.06419184008202618;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.327', 'seconds']
Refined model CLL: -0.089198


******************************************
Best model found
******************************************
Results 

CLL : -0.084615 

AUC ROC : 0.995693 

AUC PR : 0.418956 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 7.586 

Total Inference Time : 1.7571613788604736 

Total revision time: 14.07630658531189
Best scored revision CLL: -0.089198


Results 

CLL : -0.084615 

AUC ROC : 0.995693 

AUC PR : 0.418956 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 14.10771322631836 

Total Inference Time : 1.7571613788604736 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.157
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379739;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.688708700815712;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5723887494089502;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936062;  // std dev = 7.90e-09, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.39026137090804175;  // std dev = 1.386, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | else return -0.10159632948783623;  // std dev = 5.05e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4302613709080415;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.28132318419760827;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926103;  // std dev = 3.16e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2215042550725402;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839682;  // std dev = 5.59e-09, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.216267706745314;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109158;  // std dev = 6.14e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14254335853312858;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15776720983391265;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 3.57e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13590517534190108;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.925', 'seconds']
Parameter learned model CLL:-0.093339 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.387, 2, 50], 'false,true': [8.69e-08, 96, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.387, 2, 50], 'false,true': [0.0, 99, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 50], 'false,true': [0.0, 0, 0], 'false,false': [7.9e-09, 96, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.386, 2, 48], 'true,false': [5.05e-08, 91, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 2, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.682, 3, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.16e-08, 93, 0], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.682, 3, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 106, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.14e-08, 105, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.682, 3, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 80, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.57e-08, 77, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 103, 0]}]
{'': [0.03698224852071041, 7.864079757761526e-17], 'false': [7.864079757761526e-17, nan]}
{'': [0.03698224852071075, -1.1214373986112692e-17], 'false': [-1.1214373986112692e-17, nan]}
{'': [-6.394884621840901e-16, 6.245004513516506e-17], 'false': [nan, 6.245004513516506e-17]}
{'': [0.06898416520025068, 0.07071815336759785], 'false': [0.07071815336759785, nan], 'false,true': [0.0, 0.0], 'true': [0.03839999999999987, 2.8060581941075384e-17]}
{'': [0.053364660473267794, 1.61907524424502e-17], 'true': [0.053364660473267794, nan], 'false': [nan, 1.61907524424502e-17], 'false,false': [1.0744093786695063e-17, 1.1564823173178713e-18], 'false,false,true': [nan, 1.0744093786695063e-17]}
{'': [0.05336806654986631, 3.2468786569226275e-17], 'false': [nan, 3.2468786569226275e-17], 'false,false': [nan, 3.2468786569226275e-17]}
{'': [0.019214316885786394, 3.595007889262412e-17], 'false': [nan, 3.595007889262412e-17], 'false,false': [nan, 3.595007889262412e-17], 'false,false,false': [3.595007889262412e-17, nan]}
{'': [0.05337428158828429, -7.10026352957949e-18], 'true': [0.05337428158828429, nan], 'false': [-5.551115123125783e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [0.019215759587016774, 1.7818394222379055e-17], 'false': [nan, 1.7818394222379055e-17], 'false,false': [1.658125296518091e-17, 0.0], 'false,false,true': [nan, 1.658125296518091e-17]}
{'': [0.019216412832984076, -1.6168296475123638e-17], 'false': [nan, -1.6168296475123638e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 13.413
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.6152684708069921;  // std dev = 1.346, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.7260160993019376;  // std dev = 0.083, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.1254446385283914;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5787791207240122;  // std dev = 0.163, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then return 0.45154939339615247;  // std dev = 0.318, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.5610404566895201;  // std dev = 0.076, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1123163781936062;  // std dev = 8.30e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.43304127449858776;  // std dev = 0.153, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.24754013285649953;  // std dev = 0.842, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.41454555781301006;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10607649719801371;  // std dev = 0.482, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.18693974778157832;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then return 0.3382491577824204;  // std dev = 0.241, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( tweets(A, F) )
%   | | then return 0.1840890875314249;  // std dev = 0.860, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.3187003186284688;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, G) )
%   | then return -0.09231518278978272;  // std dev = 5.87e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.2570722711996872;  // std dev = 0.047, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.36426176246433384;  // std dev = 0.065, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return -0.04431518693433408;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2628323924182713;  // std dev = 0.087, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(A, G) )
%   | | then return 0.1453642784565501;  // std dev = 0.846, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.053799192834727075;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, H) )
%   | then return -0.08486547181532458;  // std dev = 4.94e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return -0.0851847513883969;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( tweets(D, F), follows(A, D) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.22077202655203348;  // std dev = 0.129, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.2003417072630908;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.08873377267159226;  // std dev = 0.772, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then return 0.30448752404918156;  // std dev = 0.063, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2437460071398394;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, I) )
%   | then return -0.07850252599154046;  // std dev = 4.47e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.17629780383815216;  // std dev = 0.032, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.20682843980158455;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.07466457297646045;  // std dev = 0.876, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.18804862500400643;  // std dev = 0.065, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.2548979904516144;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.24267600046545526;  // std dev = 0.055, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.20165273823994911;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, J) )
%   | then return -0.07300828099460689;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.15859011866112274;  // std dev = 0.064, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1728519743006303;  // std dev = 0.081, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.14561624783218222;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15853280189523603;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.20958773944501893;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20104218444825364;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1711286553268868;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, J) )
%   | then return -0.06821865990782243;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.14244018426046598;  // std dev = 0.066, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.12699078456405516;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.16609668508744121;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13983385416689656;  // std dev = 0.051, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.17698690022400873;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1707756930705987;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.14820139915731023;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, I) )
%   | then return -0.0640080092002367;  // std dev = 5.10e-09, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.223', 'seconds']
Refined model CLL: -0.092826


******************************************
Best model found
******************************************
Results 

CLL : -0.086334 

AUC ROC : 0.995266 

AUC PR : 0.42881 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 13.413 

Total Inference Time : 3.1431725025177 

Total revision time: 23.89315969467163
Best scored revision CLL: -0.092826


Results 

CLL : -0.086334 

AUC ROC : 0.995266 

AUC PR : 0.42881 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 23.9245663356781 

Total Inference Time : 3.1431725025177 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.939
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7956489350995126;  // std dev = 2.165, 80.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048793;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7187552946429698;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839138;  // std dev = 3.65e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5577596695763771;  // std dev = 0.114, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360617;  // std dev = 8.64e-09, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.40497867795435666;  // std dev = 1.395, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43237593822832954;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2625243902631929;  // std dev = 2.356, 81.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926072;  // std dev = 7.30e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25470779678084143;  // std dev = 1.395, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.43e-09, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.158163713848411;  // std dev = 2.356, 81.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.0787767547310915;  // std dev = 8.62e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1667666279062219;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.0732462257633372;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1063648416916023;  // std dev = 0.258, 81.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.50e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16422548885492613;  // std dev = 0.000838, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.804', 'seconds']
Parameter learned model CLL:-0.092738 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.165, 5, 75], 'false,true': [0.0, 136, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.993, 1, 75], 'false,true': [3.65e-08, 160, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.114, 1, 75], 'false,true': [0.0, 0, 0], 'false,false': [8.64e-09, 132, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.395, 2, 71], 'true,false': [0.0, 144, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.356, 6, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.3e-08, 141, 0], 'false,false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.395, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.43e-09, 151, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.356, 6, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [8.62e-08, 161, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.698, 3, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 128, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.258, 6, 75], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.5e-08, 141, 0], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.000838, 0, 75], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 155, 0]}]
{'': [0.05859374999999893, -6.204187490552346e-17], 'false': [-6.204187490552346e-17, nan]}
{'': [0.012984764542938154, 8.326672684688674e-18], 'false': [8.326672684688674e-18, nan]}
{'': [0.012984764542935722, 7.569702440626067e-17], 'false': [nan, 7.569702440626067e-17]}
{'': [0.06625072752940579, 0.06336141837554328], 'true': [0.026646650403452755, -5.2427198385076835e-17], 'false': [0.06336141837554328, nan], 'false,true': [0.0, -5.204170427930421e-18]}
{'': [0.06854427301112243, 3.944213376957793e-17], 'true': [0.06854427301112243, nan], 'false': [nan, 3.944213376957793e-17], 'false,false': [3.7794826370218094e-17, 0.0], 'false,false,true': [nan, 3.7794826370218094e-17]}
{'': [0.025286020062152467, 2.9409881447024017e-17], 'false': [nan, 2.9409881447024017e-17], 'false,false': [nan, 2.9409881447024017e-17]}
{'': [0.06855270916370923, 4.620182773284813e-17], 'false': [nan, 4.620182773284813e-17], 'false,false': [nan, 4.620182773284813e-17], 'false,false,false': [4.620182773284813e-17, nan]}
{'': [0.03696570565684426, -1.3676660448280915e-17], 'true': [0.03696570565684426, nan], 'false': [-1.5612511283791264e-17, 6.938893903907229e-19], 'false,false': [nan, 6.938893903907229e-19]}
{'': [0.06666472266651033, 3.0346096006420944e-17], 'false': [nan, 3.0346096006420944e-17], 'false,false': [2.992090420975599e-17, 0.0], 'false,false,true': [nan, 2.992090420975599e-17]}
{'': [7.022812660532433e-07, -9.311547948469056e-18], 'false': [nan, -9.311547948469056e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 35.25
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(D, F) )
%   | | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.8581489350995118;  // std dev = 1.69e-07, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.14185106490048788;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D), follows(F, E) )
%   | | | then return 0.5661277949468135;  // std dev = 1.758, 25.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | | | else return 0.7348917811753146;  // std dev = 0.060, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.7194734122109544;  // std dev = 4.21e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.7260858361794491;  // std dev = 0.121, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.12544463852839116;  // std dev = 7.30e-08, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.5506511095272963;  // std dev = 0.978, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.40994283264538395;  // std dev = 0.927, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5644029532432172;  // std dev = 0.132, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( tweets(A, G) )
%   | | then return 0.5547539012295717;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.36270340976449367;  // std dev = 0.804, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.11231637819360625;  // std dev = 9.31e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.4163603789112457;  // std dev = 0.980, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.3504736895896995;  // std dev = 0.940, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.43503069257983296;  // std dev = 0.210, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.1015963294878364;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4176625578628097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.34725827537960724;  // std dev = 0.114, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.1404987618109525;  // std dev = 0.792, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.3283230950108922;  // std dev = 0.112, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.32377538073942697;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.05828545030635905;  // std dev = 1.027, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.39882620375600303;  // std dev = 0.099, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926076;  // std dev = 8.02e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | else return -0.09269127618926097;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( tweets(D, E), follows(F, A) )
%   | | | then return 0.28115842622336146;  // std dev = 0.037, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.2717963718367284;  // std dev = 0.056, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.25963417988854526;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2521248540745477;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(A, J), follows(H, J) )
%   | | | then return 0.1268004188848198;  // std dev = 0.914, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.2648672992465354;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.2604438343840498;  // std dev = 0.101, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3187552973576823;  // std dev = 0.092, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.0851847513883968;  // std dev = 6.04e-09, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.2256479570632322;  // std dev = 0.055, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.2088649818172832;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, G), tweets(D, H) )
%   | | | then return -0.10279049830649249;  // std dev = 0.803, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.21984588827998944;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2542095438962032;  // std dev = 0.097, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.056523821217424934;  // std dev = 1.304, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.1408916828631029;  // std dev = 0.922, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( tweets(A, K) )
%   | then return -0.07877675473109157;  // std dev = 6.04e-09, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F), follows(E, G) )
%   | | | then return 0.19147468595064665;  // std dev = 0.082, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.1730279740798467;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.23655854899943843;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.20867523378100764;  // std dev = 0.065, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.004369248599161523;  // std dev = 0.891, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.20812046613389246;  // std dev = 0.077, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1814955672888522;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, L) )
%   | then return -0.07324622576333728;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.1436948412222512;  // std dev = 0.969, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return -0.006425198912433672;  // std dev = 0.827, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.12478820978271732;  // std dev = 1.136, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H) )
%   | | | then return 0.15912541404363156;  // std dev = 0.042, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.18580701541073838;  // std dev = 0.059, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.15234841404346455;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.06842697784420264;  // std dev = 5.27e-09, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | else return -0.06842697784420278;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return -0.06842697784420274;  // std dev = 9.31e-10, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.14605589108035466;  // std dev = 0.060, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.13515560617738118;  // std dev = 0.036, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(G, A), tweets(D, H) )
%   | | | then return 0.18021672928539276;  // std dev = 0.121, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.1352481493635018;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then return 0.1619848560006007;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.06630176278731907;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.0865378585300643;  // std dev = 0.841, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.147', 'seconds']
Refined model CLL: -0.091875


******************************************
Best model found
******************************************
Results 

CLL : -0.085579 

AUC ROC : 0.995349 

AUC PR : 0.426135 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 35.25 

Total Inference Time : 5.568715810775757 

Total revision time: 51.197315324783325
Best scored revision CLL: -0.091875


Results 

CLL : -0.085579 

AUC ROC : 0.995349 

AUC PR : 0.426135 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 51.228721965789795 

Total Inference Time : 5.568715810775757 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.526
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8290227215072782;  // std dev = 1.707, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7057064041246712;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839155;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5274700067315513;  // std dev = 0.192, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936066;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4137705582219267;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return -0.10435573711111797;  // std dev = 0.462, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3098231898008751;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.1015963294878362;  // std dev = 1.86e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30028894059334815;  // std dev = 1.965, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09245947178142591;  // std dev = 5.58e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else return -0.09269127618926089;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2554776437008123;  // std dev = 1.403, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08500312175637469;  // std dev = 5.24e-05, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17968276338168607;  // std dev = 2.177, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07862055688165254;  // std dev = 0.000682, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18821547931486796;  // std dev = 0.903, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07309771996064467;  // std dev = 3.94e-08, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07326916121000161;  // std dev = 4.56e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11256379277732588;  // std dev = 0.231, 106.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06829697222512959;  // std dev = 4.34e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.06844705327891644;  // std dev = 1.61e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.0883710405513201;  // std dev = 0.248, 107.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06408636285048784;  // std dev = 3.37e-05, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.390', 'seconds']
Parameter learned model CLL:-0.092385 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.707, 3, 100], 'false,true': [0.0, 191, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.4, 2, 100], 'false,true': [0.0, 184, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 4, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 199, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.399, 2, 93], 'true,false': [0.462, 168, 0], 'false,true,true': [0.331, 1, 7], 'false,true,false': [1.86e-09, 16, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.965, 4, 100], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.58e-08, 208, 0], 'false,false,false': [1.86e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.403, 2, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.24e-05, 195, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.177, 5, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.000682, 198, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.903, 1, 100], 'true,false': [0.0, 0, 0], 'false,true': [3.94e-08, 194, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.56e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.231, 6, 100], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.34e-08, 164, 0], 'false,false,false': [1.61e-09, 9, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.248, 7, 100], 'false,true': [0.0, 0, 0], 'false,false': [3.37e-05, 215, 0]}]
{'': [0.0282778772740145, -2.2320714212359167e-16], 'false': [-2.2320714212359167e-16, nan]}
{'': [0.019223375624760546, -1.9308226515220113e-17], 'false': [-1.9308226515220113e-17, nan]}
{'': [0.036982248520710644, -4.2400477322367786e-17], 'false': [nan, -4.2400477322367786e-17]}
{'': [0.07019979935053551, 0.07407300463372311], 'false': [0.07407300463372311, nan], 'false,true': [0.10937499999999993, 3.469446951953614e-18], 'true': [0.020609418282549204, 0.001271593182047723]}
{'': [0.03713947478365362, 2.563369276355636e-09], 'true': [0.03713947478365362, nan], 'false': [nan, 2.563369276355636e-09], 'false,false': [1.4945309946877107e-17, 2.523234146875356e-18], 'false,false,true': [nan, 1.4945309946877107e-17]}
{'': [0.019308827570835265, 2.7491102807303126e-09], 'false': [nan, 2.7491102807303126e-09], 'false,false': [nan, 2.7491102807303126e-09]}
{'': [0.045155664185062616, 2.3516024784019473e-09], 'false': [nan, 2.3516024784019473e-09], 'false,false': [nan, 2.3516024784019473e-09], 'false,false,false': [2.3516024784019473e-09, nan]}
{'': [0.008078582410589997, 1.4925103180452308e-09], 'true': [0.008078582410589997, nan], 'false': [8.011918734408345e-18, 1.8924256101565167e-18], 'false,false': [nan, 1.8924256101565167e-18]}
{'': [0.05326032253573309, 1.1108256466237015e-09], 'false': [nan, 1.1108256466237015e-09], 'false,false': [1.1508409401602232e-17, 1.5419764230904951e-18], 'false,false,true': [nan, 1.1508409401602232e-17]}
{'': [0.06127204553078363, 1.1381741239413747e-09], 'false': [nan, 1.1381741239413747e-09]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 34.026
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.1418510649004882;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.648044840782383;  // std dev = 1.363, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | | else return 0.7237242561907012;  // std dev = 0.123, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.6083623010998431;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109542;  // std dev = 2.98e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.43375912649666876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.5944734122109543;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.12544463852839158;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.566408289442405;  // std dev = 0.054, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.3280690481797051;  // std dev = 1.171, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.5708933451213312;  // std dev = 0.201, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.37977885459917105;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.304316510945029;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.585981522415447;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.11231637819360675;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.36576424991202383;  // std dev = 1.594, 42.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=39 */
%   | | | else return 0.4263679500936604;  // std dev = 0.102, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.4392164980713439;  // std dev = 0.192, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return -0.1040574759221952;  // std dev = 0.457, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4884295432979622;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10159632948783623;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.3414857215280589;  // std dev = 0.095, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.24732623462403258;  // std dev = 0.950, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.12828430723866394;  // std dev = 0.875, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.3015116803957098;  // std dev = 0.962, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0.36031769467758806;  // std dev = 0.057, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, G) )
%   | then return -0.0924845021342403;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return -0.09269127618926087;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.27296321929995315;  // std dev = 0.041, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.2627480211218153;  // std dev = 0.054, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.2924158353687469;  // std dev = 0.016, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.259436861984203;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(H, A), follows(I, A) )
%   | | | then return 0.03950897026780179;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2710815295253147;  // std dev = 0.159, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2919930529832382;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.08495720940483072;  // std dev = 0.790, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.08501862200761887;  // std dev = 3.95e-05, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.21958745637055685;  // std dev = 0.062, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.12785234063279377;  // std dev = 0.869, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(F, A), follows(D, F) )
%   | | | then return 0.2513393666350298;  // std dev = 0.185, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.22189386834104632;  // std dev = 0.093, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.10871474474438814;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, G) )
%   | then return -0.07862534213516516;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return -0.07878881174636308;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.18502342305577696;  // std dev = 0.051, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.17638581030137193;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, F), follows(G, A) )
%   | | | then return -0.03415481615765953;  // std dev = 1.142, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.20575693480815657;  // std dev = 0.099, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.20764394733417968;  // std dev = 0.164, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1851580588892513;  // std dev = 0.070, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.2148106580266247;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, J) )
%   | then return -0.07311485998149385;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return -0.07325668507057535;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.02673292339439666;  // std dev = 2.014, 35.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=30 */
%   | | | else return 0.1682519365885216;  // std dev = 0.038, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.15486131998266414;  // std dev = 0.037, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.19430003881691132;  // std dev = 0.083, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(H, A), follows(G, A) )
%   | | | then return 0.19901481810539576;  // std dev = 0.115, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.152477325249663;  // std dev = 0.060, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.16907076425254006;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1799473153518131;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06832247925008714;  // std dev = 3.45e-05, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.14946896555644165;  // std dev = 0.063, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.0919913225115238;  // std dev = 0.948, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.19223383470876257;  // std dev = 0.064, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15150067318548327;  // std dev = 0.132, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.1270016626753875;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1475635614498828;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.14247855957117317;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.047744210656894846;  // std dev = 0.893, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06409482401016665;  // std dev = 2.39e-05, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.998', 'seconds']
Refined model CLL: -0.090554


******************************************
Best model found
******************************************
Results 

CLL : -0.085424 

AUC ROC : 0.995863 

AUC PR : 0.44561 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 34.026 

Total Inference Time : 6.339466571807861 

Total revision time: 54.52065844726563
Best scored revision CLL: -0.090554


Results 

CLL : -0.085424 

AUC ROC : 0.995863 

AUC PR : 0.44561 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 54.5520650882721 

Total Inference Time : 6.339466571807861 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.239
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7914822684328435;  // std dev = 2.898, 135.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6872754212900393;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5563711688580159;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360689;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4008367073535985;  // std dev = 2.190, 123.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=118 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.33037600274655393;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3239027005272496;  // std dev = 1.714, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926051;  // std dev = 6.14e-08, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | | else return -0.09269127618926087;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23242690249750297;  // std dev = 2.390, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.67e-09, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2336628230328072;  // std dev = 0.035, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 6.14e-08, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1636519543964342;  // std dev = 1.971, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333675;  // std dev = 1.21e-07, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13937210837488448;  // std dev = 0.172, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420274;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1280352126052958;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820261;  // std dev = 5.02e-09, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.256', 'seconds']
Parameter learned model CLL:-0.092723 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.898, 9, 126], 'false,true': [0.0, 247, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.393, 6, 126], 'false,true': [0.0, 247, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 259, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.19, 5, 118], 'true,false': [0.0, 200, 0], 'false,true,true': [0.314, 1, 8], 'false,true,false': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.714, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 207, 0], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.39, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.67e-09, 223, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.035, 0, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.14e-08, 251, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.971, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.21e-07, 244, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.172, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 252, 0], 'false,false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [5.02e-09, 274, 0]}]
{'': [0.062222222222226474, -1.4023869784738819e-16], 'false': [-1.4023869784738819e-16, nan]}
{'': [0.04338842975206369, -6.292762082895624e-17], 'false': [-6.292762082895624e-17, nan]}
{'': [0.022714981070848184, -9.7733918770091e-17], 'false': [nan, -9.7733918770091e-17]}
{'': [0.07437383588105667, 0.07854821763156616], 'false': [0.07854821763156616, nan], 'false,true': [0.09876543209876544, -1.734723475976807e-18], 'true': [0.03899795095512096, -9.325873406851315e-17]}
{'': [0.022776572970501095, 2.947494755642009e-17], 'true': [0.022776572970501095, nan], 'false': [nan, 2.947494755642009e-17], 'false,false': [1.8235547264374553e-17, 1.460819769243627e-18], 'false,false,true': [nan, 1.8235547264374553e-17]}
{'': [0.043273194914030706, 3.1862902948883416e-17], 'false': [nan, 3.1862902948883416e-17], 'false,false': [nan, 3.1862902948883416e-17]}
{'': [9.776294539151587e-06, 1.503887762440451e-17], 'false': [nan, 1.503887762440451e-17], 'false,false': [nan, 1.503887762440451e-17], 'false,false,false': [1.503887762440451e-17, nan]}
{'': [0.029872366540141557, 5.3987315707262513e-17], 'true': [0.029872366540141557, nan], 'false': [6.006124559447569e-17, 6.30808536718839e-19], 'false,false': [nan, 6.30808536718839e-19]}
{'': [0.029716231654528736, -2.5042624615605033e-17], 'false': [nan, -2.5042624615605033e-17], 'false,false': [-9.69242323085454e-18, -2.9738116731030977e-18], 'false,false,true': [nan, -9.69242323085454e-18]}
{'': [0.02274661060534155, 2.5932216633580298e-17], 'false': [nan, 2.5932216633580298e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 33.332
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.8325079094584868;  // std dev = 1.396, 78.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=76 */
%   | | | else return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.8581489350995121;  // std dev = 5.96e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.14185106490048796;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(D, A), follows(D, E) )
%   | | | then return 0.7060270612749109;  // std dev = 0.990, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.6230755589465186;  // std dev = 1.339, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return 0.5369693324133593;  // std dev = 0.890, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.7270609511849181;  // std dev = 0.062, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.12544463852839194;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.542151944591255;  // std dev = 0.989, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.5677217151949696;  // std dev = 0.059, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.579446377424777;  // std dev = 0.104, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G) )
%   | | | then return 0.4945205422731555;  // std dev = 0.972, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.25958192266268704;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5534920327306664;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.11231637819360668;  // std dev = 0.000, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.43117191401443;  // std dev = 0.081, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.3115059565808098;  // std dev = 1.613, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | | else return 0.43560382966284356;  // std dev = 0.151, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.10374936002193105;  // std dev = 0.481, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4369511094416487;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1015963294878362;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.3075766310155809;  // std dev = 1.365, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | | else return -0.12154299268346336;  // std dev = 0.999, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return -0.332467191466256;  // std dev = 0.823, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.4030853877712317;  // std dev = 0.060, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H) )
%   | | then return 0.3283094212763052;  // std dev = 0.091, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0.22281157526939577;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, I) )
%   | then return -0.09251036589383196;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else return -0.09269127618926087;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), tweets(E, D) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2251558363694149;  // std dev = 1.560, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | | else return 0.2749803980840342;  // std dev = 0.145, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(G, A), tweets(E, D) )
%   | | | then return -0.07812820630932615;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2532817858343283;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.27498976067556263;  // std dev = 0.027, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.32872891016610506;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.286323428614565;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.25455723547647896;  // std dev = 0.036, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.08503950849537951;  // std dev = 3.48e-05, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.2268667208420926;  // std dev = 0.083, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.12621476173856896;  // std dev = 0.990, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.14928892641653313;  // std dev = 1.377, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | | else return 0.21627573134571929;  // std dev = 0.103, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.12042970762693322;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, H) )
%   | then return -0.07864427843650776;  // std dev = 5.77e-08, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return -0.07878729579471438;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.13369274596289246;  // std dev = 1.621, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | | else return 0.04757282751540083;  // std dev = 1.543, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.20217718002836724;  // std dev = 0.055, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.1908381611347388;  // std dev = 0.026, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2704514181975611;  // std dev = 0.135, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.17559236669680894;  // std dev = 0.051, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.21080814924672486;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, J) )
%   | then return -0.07313129089528983;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return -0.0732553700129762;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.16843817557187646;  // std dev = 0.045, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.07811078859979974;  // std dev = 0.954, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2098647383815555;  // std dev = 0.098, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.17164029287017227;  // std dev = 0.084, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.16778399092024088;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.15031206003094869;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.1121728156441241;  // std dev = 1.214, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.1518284481700038;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06833567393230157;  // std dev = 3.04e-05, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.14584434993877446;  // std dev = 0.039, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return -0.01340757625048585;  // std dev = 0.897, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.06194689299120988;  // std dev = 1.301, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return -0.07584248351166153;  // std dev = 1.510, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return -0.08141491259190481;  // std dev = 0.859, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.16297680337401807;  // std dev = 0.038, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.1956782756090761;  // std dev = 0.079, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.13868319377926833;  // std dev = 0.089, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06411164989038515;  // std dev = 2.92e-05, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.347', 'seconds']
Refined model CLL: -0.090667


******************************************
Best model found
******************************************
Results 

CLL : -0.085384 

AUC ROC : 0.995674 

AUC PR : 0.422627 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 33.332 

Total Inference Time : 7.664728879928589 

Total revision time: 56.89895715332031
Best scored revision CLL: -0.090667


Results 

CLL : -0.085384 

AUC ROC : 0.995674 

AUC PR : 0.422627 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 56.93036379432678 

Total Inference Time : 7.664728879928589 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.099
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.14185106490048766;  // std dev = 8.12e-09, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13081571468347405;  // std dev = 3.943, 101.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=31 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.14044608670740552;  // std dev = 3.587, 83.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=28 */
%   | | | else return 0.037953343747021986;  // std dev = 1.279, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6616350926012334;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.15834563053511866;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03255767711954351;  // std dev = 1.273, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08830996101467717;  // std dev = 2.470, 65.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=23 */
%   | | else return 0.07473611618493525;  // std dev = 0.332, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49817496790301863;  // std dev = 0.296, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15045080902365054;  // std dev = 0.031, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06366818537005355;  // std dev = 2.086, 62.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=25 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.025494783087545637;  // std dev = 1.087, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.025101731867912577;  // std dev = 2.253, 77.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=28 */
%   | | | else return 0.009568352225475286;  // std dev = 1.026, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.30726268084990477;  // std dev = 0.973, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return -0.13939866794602787;  // std dev = 0.022, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.033082715487266635;  // std dev = 1.130, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.005511754271642338;  // std dev = 2.032, 99.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=31 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.507', 'seconds']
Parameter learned model CLL:-0.151065 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.33e-07, 0, 25], 'false,true,false': [0.0, 0, 6], 'false,false': [8.12e-09, 67, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.943, 70, 31]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.587, 55, 28], 'false,false,false,false': [1.279, 11, 3]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.0, 0, 28], 'true,false': [0.0, 36, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.273, 11, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.47, 42, 23], 'false,false,false': [0.332, 18, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.296, 0, 31], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.031, 67, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.086, 37, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.087, 14, 6]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.253, 49, 28], 'false,false,false,false': [1.026, 10, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.973, 1, 28], 'false,false,true,false': [0.022, 54, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.13, 12, 3]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.032, 68, 31]}]
{'': [nan, 0.21626405664306675], 'false': [1.375244004696968e-15, 6.628197161941232e-17], 'false,true': [7.105427357601002e-16, -1.4802973661668753e-16]}
{'': [nan, 0.15392055917760616], 'false': [nan, 0.153920559177605], 'false,false': [nan, 0.15392055917760616], 'false,false,false': [nan, 0.153920559177605]}
{'': [nan, 0.1508302928242707], 'false': [nan, 0.1508302928242707], 'false,false': [nan, 0.1508302928242707], 'false,false,false': [0.15505684730815902, 0.11678425157863441]}
{'': [0.16546565756975967, 0.11580574260752], 'true': [-6.344131569286609e-16, -2.1587669923266933e-17], 'false': [nan, 0.11580574260752], 'false,false': [nan, 0.11580574260752], 'false,false,false': [nan, 0.11580574260752]}
{'': [nan, 0.09856629814177192], 'false': [nan, 0.0985662981417725], 'false,false': [0.0938273272062147, 0.11028211886390656], 'false,false,true': [nan, 0.0938273272062147]}
{'': [nan, 0.09188990598049097], 'false': [nan, 0.09188990598049097], 'false,false': [0.0028267409351050146, 1.4793695449663539e-05], 'false,false,false': [nan, 1.4793695449646967e-05]}
{'': [0.07015133707211936, 0.059073928402907726], 'true': [nan, 0.07015133707211936], 'false': [nan, 0.059073928402907726], 'false,false': [nan, 0.059073928402907726], 'false,false,false': [nan, 0.059073928402907726]}
{'': [nan, 0.06812313513960618], 'false': [nan, 0.06812313513960618], 'false,false': [nan, 0.06812313513960618], 'false,false,false': [0.06591559136427395, 0.08099215325418153]}
{'': [nan, 0.061423578541037194], 'false': [nan, 0.06142357854103743], 'false,false': [0.05677429068591867, 0.08505371104563908], 'false,false,false': [nan, 0.08505371104563908], 'false,false,true': [0.032676435476058224, 8.689823421824548e-06]}
{'': [nan, 0.041725447449145504], 'false': [nan, 0.04172544744914554], 'false,false': [nan, 0.041725447449145504]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 4.502
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.727760815859533;  // std dev = 0.082, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.5528067455442878;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.1254446385283915;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1254446385283914;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.1561947117180572;  // std dev = 0.976, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.004742059851341998;  // std dev = 0.782, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5726701204433423;  // std dev = 0.134, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.5960526174841312;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11231637819360636;  // std dev = 1.05e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.5992102595953576;  // std dev = 0.152, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12405002137355216;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.13578366455349794;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.25963856298048954;  // std dev = 0.766, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.438336105777872;  // std dev = 0.218, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10676493924504034;  // std dev = 0.074, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else if ( follows(E, A) )
%   | then return -0.023020861636148353;  // std dev = 0.192, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return 0.21853298046905822;  // std dev = 0.729, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3336789483888936;  // std dev = 0.160, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.1606958524780918;  // std dev = 0.932, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.09306382192516376;  // std dev = 0.015, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.3570650409023926;  // std dev = 0.155, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1031908295091491;  // std dev = 0.043, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.06953744329692169;  // std dev = 0.804, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.27088185950329197;  // std dev = 0.186, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.4637315395478163;  // std dev = 0.168, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.0910031997485905;  // std dev = 0.162, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2129974051935539;  // std dev = 0.099, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return -0.2611122306166121;  // std dev = 0.975, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.08838835980108445;  // std dev = 1.259, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return -0.07989530419067724;  // std dev = 0.051, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( follows(G, A) )
%   | | then return -0.08419252938988551;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.00688117701846878;  // std dev = 0.391, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.017005521411152302;  // std dev = 0.578, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.17596468241397425;  // std dev = 0.078, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.12847258497970956;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.0622542671652224;  // std dev = 0.850, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.07452691893169666;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.0207191286119174;  // std dev = 0.490, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.006557548566255173;  // std dev = 0.608, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | | | else return 0.1137345053327378;  // std dev = 0.588, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.16792926596259125;  // std dev = 0.167, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.05596622398156402;  // std dev = 1.070, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.22176359839432896;  // std dev = 0.068, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.20918757005147937;  // std dev = 0.112, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07303186936930055;  // std dev = 0.066, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else if ( tweets(A, H) )
%   | then return -0.034964267127983985;  // std dev = 0.119, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else return -0.09810152530839446;  // std dev = 0.204, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.12501698239550937;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.17463631878207495;  // std dev = 0.156, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2248968193608354;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06704267686645507;  // std dev = 0.042, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else if ( follows(A, G) )
%   | then return -0.0887722187496535;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.03507386271667131;  // std dev = 0.260, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.07120759904752547;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.10695717131406107;  // std dev = 0.583, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.950', 'seconds']
Refined model CLL: -0.095601


******************************************
Best model found
******************************************
Results 

CLL : -0.092314 

AUC ROC : 0.993647 

AUC PR : 0.395991 

Precision : 0.336111 

Recall : 0.960317 

F1 : 0.497942 

Total Learning Time : 4.502 

Total Inference Time : 2.793146848678589 

Total revision time: 10.14188544845581
Best scored revision CLL: -0.095601


Results 

CLL : -0.092314 

AUC ROC : 0.993647 

AUC PR : 0.395991 

Precision : 0.336111 

Recall : 0.960317 

F1 : 0.497942 

Total Learning Time : 10.168719221115111 

Total Inference Time : 2.793146848678589 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.561
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8364098046647294;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.14185106490048802;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18848551544580347;  // std dev = 5.307, 167.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=62 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1431935176823391;  // std dev = 4.984, 156.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=55 */
%   | | | else return 0.07608087596657777;  // std dev = 1.879, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6165342714251278;  // std dev = 1.387, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | else return -0.16656473059645743;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02861911974749325;  // std dev = 1.918, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06918437879321974;  // std dev = 3.417, 118.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=40 */
%   | | else return 0.076023052837234;  // std dev = 0.335, 67.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48624277304957825;  // std dev = 1.089, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15691203125679992;  // std dev = 0.074, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05647783141653491;  // std dev = 2.865, 119.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=45 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.015909173147712206;  // std dev = 1.894, 54.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.02095233013108825;  // std dev = 3.132, 163.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=55 */
%   | | | else return -0.02552083900629009;  // std dev = 1.591, 36.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.31598647862022594;  // std dev = 1.390, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return -0.14277631096256524;  // std dev = 0.015, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.009431334707907621;  // std dev = 1.553, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0032725120177838716;  // std dev = 3.144, 203.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=62 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.646', 'seconds']
Parameter learned model CLL:-0.154724 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.989, 1, 45], 'false,true,false': [0.0, 0, 17], 'false,false': [0.0, 144, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.307, 105, 62]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.984, 101, 55], 'false,false,false,false': [1.879, 19, 7]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.387, 2, 55], 'true,false': [0.0, 103, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.918, 24, 7]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.417, 78, 40], 'false,false,false': [0.335, 45, 22]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.089, 1, 62], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.074, 113, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.865, 74, 45], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.894, 37, 17]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.132, 108, 55], 'false,false,false,false': [1.591, 29, 7]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.39, 2, 55], 'false,false,true,false': [0.015, 93, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.553, 22, 7]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.144, 141, 62]}]
{'': [nan, 0.2098065299073494], 'false': [0.015621063240110127, -9.251858538542972e-17], 'false,true': [0.021266540642723226, -2.0898315757650005e-16]}
{'': [nan, 0.1686210471022628], 'false': [nan, 0.16862104710226253], 'false,false': [nan, 0.1686210471022628], 'false,false,false': [nan, 0.16862104710226253]}
{'': [nan, 0.1564415554055298], 'false': [nan, 0.1564415554055299], 'false,false': [nan, 0.1564415554055299], 'false,false,false': [0.15923276713180246, 0.1358336221809791]}
{'': [0.15266947213230458, 0.11871094591117844], 'true': [0.0337700314520313, -1.7246182906798547e-17], 'false': [nan, 0.11871094591117844], 'false,false': [nan, 0.11871094591117844], 'false,false,false': [nan, 0.11871094591117844]}
{'': [nan, 0.10374360002394946], 'false': [nan, 0.10374360002394943], 'false,false': [0.09892654757850032, 0.11219753397507529], 'false,false,true': [nan, 0.09892654757850032]}
{'': [nan, 0.10183720312007108], 'false': [nan, 0.10183720312007108], 'false,false': [0.018830523376041363, 4.8045070552883595e-05], 'false,false,false': [nan, 4.8045070552899316e-05]}
{'': [0.06895616149298732, 0.06640907592543684], 'true': [nan, 0.06895616149298732], 'false': [nan, 0.06640907592543684], 'false,false': [nan, 0.06640907592543684], 'false,false,false': [nan, 0.06640907592543684]}
{'': [nan, 0.06235172008419442], 'false': [nan, 0.06235172008419442], 'false,false': [nan, 0.06235172008419442], 'false,false,false': [0.060197946976925154, 0.07033448017657706]}
{'': [nan, 0.06588885860712244], 'false': [nan, 0.06588885860712268], 'false,false': [0.062471793212833984, 0.0831532294475977], 'false,false,false': [nan, 0.0831532294475977], 'false,false,true': [0.033908511338736284, 2.267912889228609e-06]}
{'': [nan, 0.048685779953135715], 'false': [nan, 0.048685779953135756], 'false,false': [nan, 0.048685779953135715]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 11.788
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.7261267288996684;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.40564203636996843;  // std dev = 0.828, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7355438994808245;  // std dev = 0.074, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.09630953333048307;  // std dev = 0.154, 58.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G), tweets(F, G) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3861400788776211;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.1254446385283914;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.0550362399774558;  // std dev = 2.711, 60.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.5713878559990271;  // std dev = 0.149, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.43539304498845616;  // std dev = 0.361, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.4274564465338198;  // std dev = 0.907, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.11525416432562904;  // std dev = 3.49e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), follows(A, I) )
%   | | | then return 0.10057738070261048;  // std dev = 1.179, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.02675107595846726;  // std dev = 2.201, 51.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=10 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.05214248068449409;  // std dev = 0.576, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.16233610542847182;  // std dev = 1.791, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4306476310600314;  // std dev = 0.154, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.321813533796419;  // std dev = 0.907, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4653718826115087;  // std dev = 0.113, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.670244833291827;  // std dev = 0.219, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.11448060743680635;  // std dev = 0.156, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5487512683241509;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A) )
%   | | then return -0.11572305055489053;  // std dev = 0.004, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03277829730019604;  // std dev = 0.749, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1786598940587028;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(C, D) )
%   | | then return 0.3240387836732842;  // std dev = 0.080, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, E), follows(E, C) )
%   | | | then return 0.11742767902605669;  // std dev = 0.890, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.31959023435987743;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.4165509373730473;  // std dev = 0.060, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.08642435223585376;  // std dev = 0.065, 47.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=1 */
%   | | else return -0.011653017050078715;  // std dev = 0.228, 42.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.36260834040898887;  // std dev = 0.090, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.07574867325222087;  // std dev = 1.735, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | | else return -0.031002210734000363;  // std dev = 1.296, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(D, F), tweets(E, G) )
%   | | | then return 0.2785325423087945;  // std dev = 0.239, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.05604121492725156;  // std dev = 0.881, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.08416390491017604;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.32139174132654347;  // std dev = 0.159, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.44819735770646246;  // std dev = 0.135, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.4191056777478153;  // std dev = 0.971, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.6609913241053381;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.10892346266065714;  // std dev = 0.305, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then return 0.2149854065199035;  // std dev = 0.089, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.29457037368436595;  // std dev = 0.054, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.234608099227575;  // std dev = 0.074, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.22059306786439392;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.27802851615673796;  // std dev = 0.119, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09329590512274441;  // std dev = 0.583, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return -0.024499453329134706;  // std dev = 0.900, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.0045255981645735575;  // std dev = 1.485, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
%   | | | else return 0.02942809826372784;  // std dev = 0.963, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.19345629034762057;  // std dev = 0.035, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return -0.11330879981684532;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( tweets(A, G), follows(H, E) )
%   | | then return -0.025325135559844333;  // std dev = 0.129, 79.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=12 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.08009951727517937;  // std dev = 0.026, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.2324813423322693;  // std dev = 0.636, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.3884093811150965;  // std dev = 0.219, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12494027972749722;  // std dev = 0.043, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, L) )
%   | | | then return -0.010614050492455729;  // std dev = 0.605, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.020510559774455612;  // std dev = 0.922, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.16872427062556686;  // std dev = 0.184, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.009325813402009714;  // std dev = 1.144, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.20936910881146095;  // std dev = 0.143, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.33729484475718363;  // std dev = 0.162, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.08589156548191935;  // std dev = 0.184, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.20689064384592581;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A) )
%   | | then return -0.07776665715293003;  // std dev = 0.021, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04257943971847532;  // std dev = 0.580, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.016569217218379166;  // std dev = 0.791, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then return 0.13533222495474;  // std dev = 0.059, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then return 0.1904821176182002;  // std dev = 0.094, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15697835179492572;  // std dev = 0.033, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(G, H) )
%   | | then return 0.14280748580107117;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.19646900395219086;  // std dev = 0.096, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.28233758027989164;  // std dev = 0.118, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.07028786646348462;  // std dev = 0.054, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return -0.003672203231494758;  // std dev = 0.697, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return -0.017346164319488558;  // std dev = 1.224, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '31.036', 'seconds']
Refined model CLL: -0.103733


******************************************
Best model found
******************************************
Results 

CLL : -0.100618 

AUC ROC : 0.993517 

AUC PR : 0.410563 

Precision : 0.346154 

Recall : 1.0 

F1 : 0.514286 

Total Learning Time : 11.788 

Total Inference Time : 12.599023580551147 

Total revision time: 28.279590391159058
Best scored revision CLL: -0.103733


Results 

CLL : -0.100618 

AUC ROC : 0.993517 

AUC PR : 0.410563 

Precision : 0.346154 

Recall : 1.0 

F1 : 0.514286 

Total Learning Time : 28.30642416381836 

Total Inference Time : 12.599023580551147 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.831
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8429974199479975;  // std dev = 0.992, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | else return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16672473727038403;  // std dev = 6.637, 267.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=93 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.15365050400076438;  // std dev = 6.015, 224.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=81 */
%   | | | else return 0.043686085142652424;  // std dev = 2.543, 52.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6408316386316729;  // std dev = 0.996, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | else return -0.16500143662916056;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02374010306711036;  // std dev = 2.546, 57.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05391562359861607;  // std dev = 4.107, 192.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=59 */
%   | | else return 0.06894862922806685;  // std dev = 0.337, 108.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=34 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47383541100274224;  // std dev = 1.827, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15269677576731605;  // std dev = 0.060, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.017851657753188418;  // std dev = 3.706, 211.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=65 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06213214576399592;  // std dev = 2.291, 76.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.01848217936731079;  // std dev = 3.889, 248.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=81 */
%   | | | else return -8.194112421134676E-6;  // std dev = 2.192, 49.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3212605917747921;  // std dev = 1.704, 84.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=81 */
%   | | | else return -0.13745582252048277;  // std dev = 0.033, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04760435779572795;  // std dev = 1.990, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0035687487126522623;  // std dev = 3.927, 296.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=93 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.664', 'seconds']
Parameter learned model CLL:-0.151518 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.992, 1, 65], 'false,true,false': [1.69e-07, 0, 28], 'false,false': [0.0, 169, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.637, 174, 93]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.015, 143, 81], 'false,false,false,false': [2.543, 40, 12]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.996, 1, 81], 'true,false': [0.0, 157, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.546, 45, 12]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.107, 133, 59], 'false,false,false': [0.337, 74, 34]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.827, 3, 93], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.06, 188, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.706, 146, 65], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.291, 48, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.889, 167, 81], 'false,false,false,false': [2.192, 37, 12]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.704, 3, 81], 'false,false,true,false': [0.033, 132, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.99, 30, 12]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.927, 203, 93]}]
{'': [nan, 0.22857060243750962], 'false': [0.010525124490720615, -1.708035422500241e-16], 'false,true': [0.01492194674012769, 1.0150610510858574e-15]}
{'': [nan, 0.16499012009913452], 'false': [nan, 0.16499012009913405], 'false,false': [nan, 0.16499012009913452], 'false,false,false': [nan, 0.16499012009913405]}
{'': [nan, 0.15636520806976073], 'false': [nan, 0.15636520806975995], 'false,false': [nan, 0.15636520806975995], 'false,false,false': [0.1615085977642056, 0.12439513000363688]}
{'': [0.15050969077274348, 0.11372299171714087], 'true': [0.012109092475082753, -1.5840124682550003e-16], 'false': [nan, 0.11372299171714087], 'false,false': [nan, 0.11372299171714087], 'false,false,false': [nan, 0.11372299171714087]}
{'': [nan, 0.09708092891074693], 'false': [nan, 0.09708092891074703], 'false,false': [0.08785882560360603, 0.11333114482926922], 'false,false,true': [nan, 0.08785882560360603]}
{'': [nan, 0.09960358363119473], 'false': [nan, 0.09960358363119473], 'false,false': [0.03477049659809021, 1.9390904194329082e-05], 'false,false,false': [nan, 1.9390904194310187e-05]}
{'': [0.06509032212170715, 0.0690463287476285], 'false': [nan, 0.0690463287476285], 'false,false': [nan, 0.0690463287476285], 'false,false,false': [nan, 0.0690463287476285], 'true': [nan, 0.06509032212170715]}
{'': [nan, 0.06715369490862924], 'false': [nan, 0.06715369490862924], 'false,false': [nan, 0.06715369490862924], 'false,false,false': [0.06099438664974376, 0.09804184953687642]}
{'': [nan, 0.0684815811048954], 'false': [nan, 0.06848158110489534], 'false,false': [0.0634557872450369, 0.09429126925631698], 'false,false,false': [nan, 0.09429126925631698], 'false,false,true': [0.03456860077652718, 8.251092263396783e-06]}
{'': [nan, 0.05210521859366625], 'false': [nan, 0.052105218593666416], 'false,false': [nan, 0.05210521859366625]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 15.837
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.14185106490048832;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.726740381951646;  // std dev = 0.057, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( recursion_accounttype(C, B), follows(C, A) )
%   | | | then return 0.3918771602518513;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6918854833036799;  // std dev = 0.987, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else return -0.12544463852839105;  // std dev = 8.16e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return -0.06911676847910163;  // std dev = 0.816, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return 0.01537503659483297;  // std dev = 0.771, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.01537503659483297;  // std dev = 0.771, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.29701438684128156;  // std dev = 1.336, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | then if ( follows(C, A), recursion_accounttype(E, B) )
%   | | | then return 0.5683703910631599;  // std dev = 0.036, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.3089153883641006;  // std dev = 0.848, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5609424729007805;  // std dev = 0.055, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.6101423675542835;  // std dev = 0.059, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.5645318784934832;  // std dev = 0.020, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.11231637819360621;  // std dev = 7.15e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.5614265633498292;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.05381486406212181;  // std dev = 1.316, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | | | else return 0.08621773685243816;  // std dev = 2.985, 86.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.3900613288239941;  // std dev = 1.327, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.07990130041387662;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.49321891795921874;  // std dev = 0.307, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.32413235800094137;  // std dev = 0.883, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.10729424571400999;  // std dev = 0.107, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else if ( tweets(A, I) )
%   | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | then return 0.5177141970127768;  // std dev = 0.354, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.11715221797353575;  // std dev = 0.038, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(K, A) )
%   | | then return 0.1615300893019451;  // std dev = 0.693, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.2311440102271177;  // std dev = 0.405, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.33348142662884933;  // std dev = 0.138, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, F) )
%   | | | then return -0.050361220785983415;  // std dev = 1.080, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.384428725666907;  // std dev = 0.469, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.09557761708162597;  // std dev = 0.097, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.35049091253621045;  // std dev = 0.082, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.04320223787957643;  // std dev = 1.961, 66.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=19 */
%   | | | else return 0.028547504156794308;  // std dev = 1.607, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), follows(D, F) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.2662880181510891;  // std dev = 0.194, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.14696667359828575;  // std dev = 0.653, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, G) )
%   | | | then return 0.1144674639333969;  // std dev = 0.881, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3940447410877624;  // std dev = 0.228, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.23321520385878192;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5739192462202323;  // std dev = 0.047, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.098767927467271;  // std dev = 0.299, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2277908827415853;  // std dev = 0.197, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.20690031748253235;  // std dev = 0.112, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.033541205688781335;  // std dev = 1.346, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else return -0.07989497411295214;  // std dev = 0.075, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.320959112017692;  // std dev = 0.036, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.10489906354109438;  // std dev = 2.11e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06593608692497681;  // std dev = 0.446, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.01452018595138605;  // std dev = 1.586, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18420757215050504;  // std dev = 0.105, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.1905365292047448;  // std dev = 0.135, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.28142898299247066;  // std dev = 0.294, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.06811987562101697;  // std dev = 0.338, 83.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=1 */
%   | | | else return -0.10934538698157903;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.09890161206460395;  // std dev = 1.561, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.10051054405966992;  // std dev = 0.050, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04440558612647087;  // std dev = 0.989, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | | else return 0.018780921778974495;  // std dev = 1.188, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.13207873538760398;  // std dev = 0.942, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.02380361721708895;  // std dev = 1.228, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.15507264036025778;  // std dev = 0.040, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.24990376223993496;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.07669879907248539;  // std dev = 0.192, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.2363416455822991;  // std dev = 0.227, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08520208235787023;  // std dev = 0.096, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(J, A) )
%   | | then return 0.06841513333518161;  // std dev = 0.411, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.14483879468003216;  // std dev = 0.312, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1399416918850829;  // std dev = 0.082, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return -0.06157071140123275;  // std dev = 0.200, 81.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=1 */
%   | | | else return -0.04434856999432905;  // std dev = 0.192, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.19138408625000616;  // std dev = 0.276, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.06389736561362855;  // std dev = 0.043, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.13350535482254522;  // std dev = 0.992, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.08510226971456754;  // std dev = 0.043, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.04616127337217955;  // std dev = 0.857, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   | | | else return 0.11455815324899124;  // std dev = 0.919, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.156', 'seconds']
Refined model CLL: -0.102728


******************************************
Best model found
******************************************
Results 

CLL : -0.094595 

AUC ROC : 0.994459 

AUC PR : 0.481905 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 15.837 

Total Inference Time : 13.976057052612305 

Total revision time: 34.86217381286621
Best scored revision CLL: -0.102728


Results 

CLL : -0.094595 

AUC ROC : 0.994459 

AUC PR : 0.481905 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 34.88900758552551 

Total Inference Time : 13.976057052612305 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.045
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8255402394473378;  // std dev = 1.704, 92.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=89 */
%   | | else return 0.8303711573217337;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15225800678495274;  // std dev = 7.788, 379.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=124 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.16087756627483182;  // std dev = 6.823, 286.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=104 */
%   | | | else return 0.11346986777515794;  // std dev = 3.141, 64.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=20 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6404235883255857;  // std dev = 1.400, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else return -0.16400640195506722;  // std dev = 1.15e-07, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09821423250235065;  // std dev = 3.087, 64.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08587141502121422;  // std dev = 4.648, 218.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=78 */
%   | | else return 0.059058872372500626;  // std dev = 0.340, 151.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=46 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4850062138814572;  // std dev = 1.852, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15790168524487114;  // std dev = 0.165, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0410398866398075;  // std dev = 4.187, 249.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=89 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06603532603471426;  // std dev = 2.583, 94.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=35 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.029447823257093476;  // std dev = 4.161, 301.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=104 */
%   | | | else return 0.027074496777526054;  // std dev = 2.554, 68.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3214719199079564;  // std dev = 1.707, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | | | else return -0.14250360185935954;  // std dev = 0.001, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.057257982368777674;  // std dev = 2.415, 59.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.002303972771537868;  // std dev = 4.425, 385.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=124 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.572', 'seconds']
Parameter learned model CLL:-0.160068 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.704, 3, 89], 'false,true,false': [0.986, 1, 35], 'false,false': [0.0, 249, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.788, 255, 124]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.823, 182, 104], 'false,false,false,false': [3.141, 44, 20]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.4, 2, 104], 'true,false': [1.15e-07, 200, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.087, 44, 20]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.648, 140, 78], 'false,false,false': [0.34, 105, 46]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.852, 3, 124], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.165, 241, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.187, 160, 89], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.583, 59, 35]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.161, 197, 104], 'false,false,false,false': [2.554, 48, 20]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.707, 3, 104], 'false,false,true,false': [0.001, 198, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.415, 39, 20]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.425, 261, 124]}]
{'': [nan, 0.22072905599842657], 'false': [0.030273437500004108, -1.319783193931913e-16], 'false,true': [0.031545368620038254, 0.027006172839507927]}
{'': [nan, 0.1600400956976461], 'false': [nan, 0.16004009569765096], 'false,false': [nan, 0.1600400956976461], 'false,false,false': [nan, 0.16004009569765096]}
{'': [nan, 0.16152677770474652], 'false': [nan, 0.1615267777047455], 'false,false': [nan, 0.1615267777047455], 'false,false,false': [0.16277638409634523, 0.1541060788427666]}
{'': [0.15291998060959391, 0.1488747653420574], 'true': [0.01850209606566286, 6.661338147750939e-17], 'false': [nan, 0.1488747653420574], 'false,false': [nan, 0.1488747653420574], 'false,false,false': [nan, 0.1488747653420574]}
{'': [nan, 0.10596003017085316], 'false': [nan, 0.10596003017085158], 'false,false': [0.09909841390438731, 0.11544148130778763], 'false,false,true': [nan, 0.09909841390438731]}
{'': [nan, 0.10281081954656864], 'false': [nan, 0.10281081954656864], 'false,false': [0.02700731149307897, 0.00011309376173170771], 'false,false,false': [nan, 0.00011309376173176668]}
{'': [0.07040232146418018, 0.07097868684236158], 'false': [nan, 0.07097868684236158], 'false,false': [nan, 0.07097868684236158], 'false,false,false': [nan, 0.07097868684236158], 'true': [nan, 0.07040232146418018]}
{'': [nan, 0.06460691270679869], 'false': [nan, 0.06460691270679869], 'false,false': [nan, 0.06460691270679869], 'false,false,false': [0.05752653785390193, 0.09594338906863513]}
{'': [nan, 0.06529280495165644], 'false': [nan, 0.0652928049516559], 'false,false': [0.058584512791737375, 0.09882479242754569], 'false,false,false': [nan, 0.09882479242754569], 'false,false,true': [0.027242040553467777, 8.23368073160579e-09]}
{'': [nan, 0.05085583498224685], 'false': [nan, 0.0508558349822464], 'false,false': [nan, 0.05085583498224685]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 16.017
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.7470378239884004;  // std dev = 1.886, 36.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=32 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.8581489350995121;  // std dev = 1.88e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.14185106490048846;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.711350339780219;  // std dev = 0.141, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.6136095749323351;  // std dev = 0.330, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.7249799725553687;  // std dev = 0.036, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7252598357203942;  // std dev = 0.048, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.1254446385283915;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13272476586418674;  // std dev = 3.303, 72.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=22 */
%   | | | else return 0.20162041337071043;  // std dev = 2.291, 31.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.5784394306170347;  // std dev = 0.113, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return 0.5126148877650859;  // std dev = 0.226, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.14179247639118486;  // std dev = 0.987, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.561188196136794;  // std dev = 0.060, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.11231637819360642;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.6016663838496797;  // std dev = 1.107, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.14147574381014816;  // std dev = 0.014, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.05729884292689958;  // std dev = 1.012, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.10980323149994878;  // std dev = 2.955, 61.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.42893275934454905;  // std dev = 0.844, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.24921216833234486;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5262452408915217;  // std dev = 0.099, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.1097157766287865;  // std dev = 0.236, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4191485174068218;  // std dev = 0.027, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10159632948783631;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.027476066083658407;  // std dev = 0.632, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.007416662632545812;  // std dev = 1.050, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.18609597809964962;  // std dev = 1.512, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.3333337502701162;  // std dev = 0.052, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(F, A), follows(F, C) )
%   | | | then return -0.3153554916975548;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.3386441920279737;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.35632070493814855;  // std dev = 0.227, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.31483075842977637;  // std dev = 0.046, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3219318159588836;  // std dev = 0.214, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.0922718080211512;  // std dev = 0.017, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04663004988906053;  // std dev = 2.374, 77.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=22 */
%   | | | else return 0.17442374380322107;  // std dev = 1.896, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.27579504343863165;  // std dev = 0.240, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.2510603711395714;  // std dev = 0.178, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.12285367876260944;  // std dev = 0.803, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2671181473692647;  // std dev = 0.120, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.4595259002356426;  // std dev = 0.281, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.3853815774824622;  // std dev = 1.349, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else return -0.10454276586139485;  // std dev = 0.567, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21894872460068077;  // std dev = 0.186, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.21556622998919914;  // std dev = 0.192, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2659519638581682;  // std dev = 0.069, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.07245874969303476;  // std dev = 0.431, 133.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=2 */
%   | | | else return -0.10446774133060764;  // std dev = 0.645, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.10825985524070945;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01856695842597257;  // std dev = 1.779, 69.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=17 */
%   | | | else return 0.029558431418982303;  // std dev = 2.040, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then if ( follows(A, E), follows(C, E) )
%   | | then if ( tweets(A, D) )
%   | | | then return 0.183495451737622;  // std dev = 0.138, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.09538495517773522;  // std dev = 0.945, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return -0.1282475799641329;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.18189766303811955;  // std dev = 0.081, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(F, A) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return -0.06515493519261033;  // std dev = 0.113, 141.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=9 */
%   | | else return -0.030508208786731772;  // std dev = 0.098, 69.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.08696509668697167;  // std dev = 0.324, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.024963240149925237;  // std dev = 1.569, 54.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
%   | | | else return 0.04606522506687705;  // std dev = 1.960, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), tweets(F, G) )
%   | | | then return 0.15206880383532873;  // std dev = 1.042, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | | else return -0.003782943868466615;  // std dev = 1.212, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.26767699962966834;  // std dev = 0.094, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.08498704815406333;  // std dev = 0.029, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.15652300395887228;  // std dev = 0.035, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.20698786018848953;  // std dev = 0.817, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.09211107897715745;  // std dev = 0.188, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.008100271170881076;  // std dev = 0.298, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.007881804819730373;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then return 0.1130102863766371;  // std dev = 0.169, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.1766558747719866;  // std dev = 0.969, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.3161436388870376;  // std dev = 0.302, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07505273704530922;  // std dev = 0.324, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.16886710407004754;  // std dev = 0.035, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.30001494649738375;  // std dev = 0.261, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.10277509457559789;  // std dev = 0.232, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.02981528000170361;  // std dev = 0.512, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.053426384029021834;  // std dev = 1.307, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.585', 'seconds']
Refined model CLL: -0.105333


******************************************
Best model found
******************************************
Results 

CLL : -0.098187 

AUC ROC : 0.994431 

AUC PR : 0.449204 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 16.017 

Total Inference Time : 17.029472827911377 

Total revision time: 39.279063188552854
Best scored revision CLL: -0.105333


Results 

CLL : -0.098187 

AUC ROC : 0.994431 

AUC PR : 0.449204 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 39.305896961212156 

Total Inference Time : 17.029472827911377 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.474
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8327252062859514;  // std dev = 1.710, 118.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=115 */
%   | | else return 0.8116373071925351;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | else return -0.14185106490048757;  // std dev = 1.18e-08, 345.000 (wgt'ed) examples reached here.  /* #neg=345 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15459606465621603;  // std dev = 8.722, 472.000 (wgt'ed) examples reached here.  /* #neg=316 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1271718616398238;  // std dev = 7.815, 393.000 (wgt'ed) examples reached here.  /* #neg=265 #pos=128 */
%   | | | else return 0.14616098262561708;  // std dev = 3.586, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6507344483489985;  // std dev = 1.402, 130.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=128 */
%   | else return -0.1597508368909549;  // std dev = 1.03e-07, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08681374565005577;  // std dev = 3.656, 92.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.056783037470677436;  // std dev = 5.384, 315.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=97 */
%   | | else return 0.07983237442454867;  // std dev = 0.346, 182.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49369561676294305;  // std dev = 1.998, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15323738178441;  // std dev = 0.263, 337.000 (wgt'ed) examples reached here.  /* #neg=337 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03669305653788476;  // std dev = 4.793, 346.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05233136854643079;  // std dev = 2.931, 112.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.033746324445148475;  // std dev = 4.626, 378.000 (wgt'ed) examples reached here.  /* #neg=250 #pos=128 */
%   | | | else return 0.048391863222722306;  // std dev = 2.872, 85.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3336647129739619;  // std dev = 1.711, 131.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=128 */
%   | | | else return -0.137477647554509;  // std dev = 0.031, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.032320136087583;  // std dev = 2.874, 88.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.013123841190733699;  // std dev = 4.949, 464.000 (wgt'ed) examples reached here.  /* #neg=308 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.747', 'seconds']
Parameter learned model CLL:-0.158848 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.71, 3, 115], 'false,true,false': [1.381, 2, 41], 'false,false': [1.18e-08, 345, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.722, 316, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.815, 265, 128], 'false,false,false,false': [3.586, 53, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.402, 2, 128], 'true,false': [1.03e-07, 233, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.656, 64, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.384, 218, 97], 'false,false,false': [0.346, 123, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.998, 4, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.263, 337, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.793, 231, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.931, 71, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.626, 250, 128], 'false,false,false,false': [2.872, 57, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.711, 3, 128], 'false,false,true,false': [0.031, 240, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.874, 60, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.949, 308, 156]}]
{'': [nan, 0.21325126154134857], 'false': [0.030091431657735174, 1.3644480070755548e-16], 'false,true': [0.024777362826777165, 0.044348296376420925]}
{'': [nan, 0.16118920160694764], 'false': [nan, 0.16118920160695213], 'false,false': [nan, 0.16118920160694764], 'false,false,false': [nan, 0.16118920160695213]}
{'': [nan, 0.1560165917791756], 'false': [nan, 0.15601659177917146], 'false,false': [nan, 0.15601659177917146], 'false,false,false': [0.15539782680780614, 0.1587197802844529]}
{'': [0.15641301141904182, 0.14526533817416604], 'true': [0.015115429511751936, 4.5743094576830484e-17], 'false': [nan, 0.14526533817416604], 'false,false': [nan, 0.14526533817416604], 'false,false,false': [nan, 0.14526533817416604]}
{'': [nan, 0.10240064727170665], 'false': [nan, 0.1024006472717067], 'false,false': [0.09203221889346001, 0.120009282431889], 'false,false,true': [nan, 0.09203221889346001]}
{'': [nan, 0.09953312238070687], 'false': [nan, 0.09953312238070687], 'false,false': [0.024956533104785496, 0.00020485434327659948], 'false,false,false': [nan, 0.0002048543432767339]}
{'': [0.0664089524451929, 0.07668151851072524], 'false': [nan, 0.07668151851072524], 'false,false': [nan, 0.07668151851072524], 'false,false,false': [nan, 0.07668151851072524], 'true': [nan, 0.0664089524451929]}
{'': [nan, 0.06407061337320738], 'false': [nan, 0.06407061337320738], 'false,false': [nan, 0.06407061337320738], 'false,false,false': [0.05661682356270709, 0.09704294085803382]}
{'': [nan, 0.06535431145008713], 'false': [nan, 0.0653543114500873], 'false,false': [0.05859283454448484, 0.09385053221324911], 'false,false,false': [nan, 0.09385053221324911], 'false,false,true': [0.02233555006418569, 3.9125779913273815e-06]}
{'': [nan, 0.052780156589959], 'false': [nan, 0.05278015658995941], 'false,false': [nan, 0.052780156589959]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 21.944
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8581489350995121;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | | | else return 0.8055173561521439;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.8581489350995121;  // std dev = 2.06e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.14185106490048785;  // std dev = 9.42e-08, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7214496957766808;  // std dev = 0.038, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7294524773167;  // std dev = 0.140, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.12544463852839172;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( tweets(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.6740188667564088;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.1254446385283912;  // std dev = 5.87e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.21252258176734698;  // std dev = 1.309, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13863800829002385;  // std dev = 3.369, 73.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=23 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B), follows(D, C) )
%   | | then return 0.5577337362813745;  // std dev = 0.041, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.410837191849425;  // std dev = 0.344, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else return -0.1123163781936065;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.5761113974304776;  // std dev = 0.278, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return -0.11716612850195955;  // std dev = 0.119, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5673461063416961;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11231637819360632;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.24686309494980205;  // std dev = 2.274, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | | | else return 0.14012489952239887;  // std dev = 2.049, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.4182090512912252;  // std dev = 0.104, 98.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=97 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.4314321981062382;  // std dev = 0.033, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.6386508452612163;  // std dev = 0.032, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.11118269193970215;  // std dev = 0.399, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4139917518990933;  // std dev = 0.020, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10120754187331762;  // std dev = 0.000718, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.007049747384910632;  // std dev = 0.664, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.013607117557001287;  // std dev = 1.190, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.10514797979927636;  // std dev = 1.806, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.3112212923140542;  // std dev = 0.098, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | else return 0.25656172331506893;  // std dev = 0.239, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.36337398149333283;  // std dev = 0.148, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.03688532228384319;  // std dev = 0.874, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.0920706182071288;  // std dev = 0.018, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.33459606740499004;  // std dev = 1.430, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return -0.11702954851770478;  // std dev = 0.290, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.19529567142123405;  // std dev = 1.011, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.08962505128709718;  // std dev = 1.909, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), tweets(D, F) )
%   | | | then return 0.24475032136042274;  // std dev = 0.998, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return -0.06758165950202154;  // std dev = 1.157, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.27732598548182874;  // std dev = 0.227, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return 0.2597206044402699;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.39725952042319085;  // std dev = 2.98e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.5551261994203327;  // std dev = 0.233, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.09910832661003352;  // std dev = 0.565, 328.000 (wgt'ed) examples reached here.  /* #neg=328 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2188605448337352;  // std dev = 0.187, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.22393268395213084;  // std dev = 0.060, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.043484124916090494;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.2447839554439779;  // std dev = 0.162, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.07740505941535451;  // std dev = 0.020, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.004668134248892675;  // std dev = 1.683, 100.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=29 */
%   | | | else return 0.0631714284466352;  // std dev = 1.568, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.17793903359429034;  // std dev = 3.65e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return -0.15539429973904292;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.17986525689518407;  // std dev = 0.052, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.18753660382465548;  // std dev = 0.076, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then return -0.04763773230144858;  // std dev = 0.098, 229.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=23 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.20522247779220748;  // std dev = 0.099, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.15674942207563566;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.018135726973114955;  // std dev = 1.205, 59.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=19 */
%   | | | else return -0.019585968978576864;  // std dev = 2.153, 77.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.16294746850313022;  // std dev = 0.192, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.05522807040651901;  // std dev = 1.243, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.14961152222584181;  // std dev = 0.928, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.2613732525626496;  // std dev = 0.293, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.08059888236447561;  // std dev = 0.357, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.16235390436821054;  // std dev = 0.051, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(I, A) )
%   | | then return -0.04805128949271101;  // std dev = 0.083, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.019234323537586515;  // std dev = 0.788, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.04732335992084098;  // std dev = 1.379, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.13944984607371413;  // std dev = 0.091, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return -0.16684501126772577;  // std dev = 0.728, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.14177128808622358;  // std dev = 0.046, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.17414419861383854;  // std dev = 0.135, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.14282109947037308;  // std dev = 0.865, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.06428809621010373;  // std dev = 0.025, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.008394586665560077;  // std dev = 0.773, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | | else return -0.010679138308370468;  // std dev = 2.058, 87.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=25 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.424', 'seconds']
Refined model CLL: -0.100891


******************************************
Best model found
******************************************
Results 

CLL : -0.096645 

AUC ROC : 0.993888 

AUC PR : 0.381747 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 21.944 

Total Inference Time : 13.566378355026245 

Total revision time: 42.727271335601806
Best scored revision CLL: -0.100891


Results 

CLL : -0.096645 

AUC ROC : 0.993888 

AUC PR : 0.381747 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 42.75410510826111 

Total Inference Time : 13.566378355026245 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.06
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19265343302551913;  // std dev = 3.375, 67.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.14086879136484393;  // std dev = 3.179, 63.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=22 */
%   | | | else return 0.07082719598264933;  // std dev = 1.296, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6557961425347214;  // std dev = 0.024, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.16682076138546553;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.46650783794974143;  // std dev = 0.720, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06289100103461119;  // std dev = 2.173, 48.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=16 */
%   | | else return 0.08802808693524229;  // std dev = 0.332, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48743023639239297;  // std dev = 0.110, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15903975810815074;  // std dev = 0.154, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.00724880436320927;  // std dev = 2.055, 61.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=19 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.004739536254959454;  // std dev = 1.158, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.03538187138371181;  // std dev = 1.881, 64.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
%   | | | else return 0.05546095496222701;  // std dev = 0.836, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3520432538518364;  // std dev = 0.034, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.13863709817668537;  // std dev = 0.004, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010189665759360946;  // std dev = 0.869, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.023897890428128933;  // std dev = 1.823, 65.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=25 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.635', 'seconds']
Parameter learned model CLL:-0.158829 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.975, 1, 19], 'false,true,false': [0.0, 0, 6], 'false,false': [6.97e-09, 45, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.375, 42, 25]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.179, 41, 22], 'false,false,false,false': [1.296, 7, 3]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.024, 0, 22], 'true,false': [5.58e-08, 45, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.72, 1, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.173, 32, 16], 'false,false,false': [0.332, 15, 9]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.11, 0, 25], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.154, 54, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.055, 42, 19], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.158, 11, 6]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.881, 42, 22], 'false,false,false,false': [0.836, 4, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.034, 0, 22], 'false,false,true,false': [0.004, 34, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.869, 5, 3]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.823, 40, 25]}]
{'': [nan, 0.22812933941678357], 'false': [0.03698224852071082, 4.9343245538895844e-17], 'false,true': [0.047499999999999785, -1.4802973661668753e-16]}
{'': [nan, 0.16999990239178742], 'false': [nan, 0.16999990239178733], 'false,false': [nan, 0.16999990239178742], 'false,false,false': [nan, 0.16999990239178733]}
{'': [nan, 0.1619908620072587], 'false': [nan, 0.1619908620072588], 'false,false': [nan, 0.1619908620072588], 'false,false,false': [0.1603728847944208, 0.16795032419783607]}
{'': [0.14924684446106284, 0.12971680166332325], 'true': [2.544089323523609e-05, 6.908054375445419e-17], 'false': [nan, 0.12971680166332325], 'false,false': [nan, 0.12971680166332325], 'false,false,false': [nan, 0.12971680166332325]}
{'': [nan, 0.10241323550391017], 'false': [nan, 0.1024132355039102], 'false,false': [0.09834489976160109, 0.11012865826347779], 'false,false,true': [nan, 0.09834489976160109]}
{'': [nan, 0.09085671112449414], 'false': [nan, 0.09085671112449414], 'false,false': [0.0004876838605571265, 0.0004399662183538735], 'false,false,false': [nan, 0.0004399662183539023]}
{'': [0.06923570857984075, 0.0788472942978335], 'false': [nan, 0.0788472942978335], 'false,false': [nan, 0.0788472942978335], 'false,false,false': [nan, 0.0788472942978335], 'true': [nan, 0.06923570857984075]}
{'': [nan, 0.0597077655890079], 'false': [nan, 0.0597077655890079], 'false,false': [nan, 0.0597077655890079], 'false,false,false': [0.055269401801485825, 0.0999236711642321]}
{'': [nan, 0.06228989600306337], 'false': [nan, 0.06228989600306338], 'false,false': [0.057449425273048124, 0.09448376819145675], 'false,false,false': [nan, 0.09448376819145675], 'false,false,true': [5.3890107237593426e-05, 5.953570222209039e-07]}
{'': [nan, 0.05111812752048719], 'false': [nan, 0.051118127520487264], 'false,false': [nan, 0.05111812752048719]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 8.534
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.12544463852839155;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( follows(F, A) )
%   | | then return -0.1254446385283914;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.38150619191521606;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.24908840232419396;  // std dev = 0.750, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11231637819360643;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.25189451308201466;  // std dev = 0.943, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.4175135841583098;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.24025632178698375;  // std dev = 1.246, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.5765069665665787;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(F, A) )
%   | | | then return -0.1015963294878363;  // std dev = 1.05e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return -0.13998660920167125;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.21274627051817485;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0.1579586273352368;  // std dev = 0.636, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.379670407154312;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.37512106214996593;  // std dev = 0.065, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.384876189383584;  // std dev = 0.060, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F), follows(H, A) )
%   | | | then return -0.09228114516288323;  // std dev = 0.006, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.10456588698177811;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then return 0.127049440126129;  // std dev = 0.613, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.005050655871155711;  // std dev = 0.497, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.2551722425694894;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3030073531462766;  // std dev = 1.044, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.2951140505077567;  // std dev = 0.057, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2996807669926254;  // std dev = 0.053, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then return 0.27914435487416533;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4123739624427179;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, H), follows(H, I) )
%   | then return -0.08970267040964891;  // std dev = 0.010, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( tweets(A, J) )
%   | | then return -0.17165457985499377;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.18002974550513967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(C, A), recursion_accounttype(C, B) )
%   | | then return 0.2097577156325356;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, E), follows(E, C) )
%   | | | then return 0.2688448523864268;  // std dev = 0.119, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.23197081540231337;  // std dev = 0.055, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, D), follows(D, C) )
%   | | | then return -0.07847916387900361;  // std dev = 5.27e-09, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.07727393191860037;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.10436333963017626;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.23185233332995756;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then return 0.019681676245083386;  // std dev = 0.527, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.005386560914102598;  // std dev = 0.396, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.1900617278475413;  // std dev = 0.024, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.3292494974886281;  // std dev = 0.999, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(A, G), tweets(E, G) )
%   | | | then return -0.05186280437638628;  // std dev = 0.348, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | | else return -0.073015201425899;  // std dev = 6.66e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.19636177350374254;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.07273930163992172;  // std dev = 0.001, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(I, A) )
%   | | then return -0.08238870359045627;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.011198299894439287;  // std dev = 0.514, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.05616103089455946;  // std dev = 0.439, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.16808535124110627;  // std dev = 0.141, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.262028995474305;  // std dev = 0.080, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.17627803348693474;  // std dev = 0.062, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.013772887844547277;  // std dev = 0.781, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.0681740725888027;  // std dev = 0.010, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return -0.09483304219736888;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.14437660208885664;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.039425043835970286;  // std dev = 0.325, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then return 0.13052386805147725;  // std dev = 0.000402, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.17616151430143842;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.1751668926066055;  // std dev = 0.106, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15536376750382935;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.064536628679934;  // std dev = 0.005, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.08805207893225164;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.07136147138914867;  // std dev = 0.522, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.033', 'seconds']
Refined model CLL: -0.09767


******************************************
Best model found
******************************************
Results 

CLL : -0.107356 

AUC ROC : 0.99567 

AUC PR : 0.446321 

Precision : 0.347727 

Recall : 0.980769 

F1 : 0.513423 

Total Learning Time : 8.534 

Total Inference Time : 3.2247674465179443 

Total revision time: 14.196573394775392
Best scored revision CLL: -0.09767


Results 

CLL : -0.107356 

AUC ROC : 0.99567 

AUC PR : 0.446321 

Precision : 0.347727 

Recall : 0.980769 

F1 : 0.513423 

Total Learning Time : 14.223407167434694 

Total Inference Time : 3.2247674465179443 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.208
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8337586911970727;  // std dev = 0.988, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18231869430496486;  // std dev = 4.825, 138.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=50 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13904599515032745;  // std dev = 4.611, 134.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=46 */
%   | | | else return 0.1170568447177243;  // std dev = 1.404, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6590842196608866;  // std dev = 0.042, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return -0.1651378039948224;  // std dev = 5.96e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05731936698158099;  // std dev = 1.409, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0815687137182752;  // std dev = 3.136, 100.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=36 */
%   | | else return 0.05177565797045759;  // std dev = 0.318, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47372217611552286;  // std dev = 1.052, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.153577094573567;  // std dev = 0.038, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02807129200351562;  // std dev = 2.847, 117.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=40 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03471997276587959;  // std dev = 1.341, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.02448684629624353;  // std dev = 2.825, 138.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=46 */
%   | | | else return 0.13960054376832795;  // std dev = 1.005, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.33286905825215957;  // std dev = 0.975, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return -0.14047769815664643;  // std dev = 0.013, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05995076330219788;  // std dev = 1.051, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.003672638671027675;  // std dev = 2.651, 152.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=50 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.640', 'seconds']
Parameter learned model CLL:-0.157064 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.988, 1, 40], 'false,true,false': [0.953, 1, 10], 'false,false': [8.93e-09, 101, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.825, 88, 50]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.611, 88, 46], 'false,false,false,false': [1.404, 8, 4]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.042, 0, 46], 'true,false': [5.96e-08, 91, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.409, 11, 4]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.136, 64, 36], 'false,false,false': [0.318, 35, 14]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.052, 1, 50], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.038, 104, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.847, 77, 40], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.341, 21, 10]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.825, 92, 46], 'false,false,false,false': [1.005, 5, 4]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.975, 1, 46], 'false,false,true,false': [0.013, 103, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.051, 7, 4]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.651, 102, 50]}]
{'': [nan, 0.22000085437225064], 'false': [0.03698224852071041, 7.91446116564468e-17], 'false,true': [0.023795359904820054, 0.0826446280991734]}
{'': [nan, 0.16872965525137623], 'false': [nan, 0.16872965525137612], 'false,false': [nan, 0.16872965525137623], 'false,false,false': [nan, 0.16872965525137612]}
{'': [nan, 0.15914845850936377], 'false': [nan, 0.15914845850936368], 'false,false': [nan, 0.15914845850936368], 'false,false,false': [0.1586588996484788, 0.16417141798063237]}
{'': [0.1515244263747652, 0.132432755891215], 'true': [3.754044360379878e-05, 3.9040809657148365e-17], 'false': [nan, 0.132432755891215], 'false,false': [nan, 0.132432755891215], 'false,false,false': [nan, 0.132432755891215]}
{'': [nan, 0.099429348900838], 'false': [nan, 0.09942934890083813], 'false,false': [0.09834280007958013, 0.10105107321255673], 'false,false,true': [nan, 0.09834280007958013]}
{'': [nan, 0.09402979224161774], 'false': [nan, 0.09402979224161774], 'false,false': [0.021720205084508688, 1.3668261436317907e-05], 'false,false,false': [nan, 1.3668261436309367e-05]}
{'': [0.06928396501978541, 0.05804779235174835], 'true': [nan, 0.06928396501978541], 'false': [nan, 0.05804779235174835], 'false,false': [nan, 0.05804779235174835], 'false,false,false': [nan, 0.05804779235174835]}
{'': [nan, 0.06189966881372138], 'false': [nan, 0.06189966881372138], 'false,false': [nan, 0.06189966881372138], 'false,false,false': [0.057812196871489197, 0.11213437096396277]}
{'': [nan, 0.05785152689727385], 'false': [nan, 0.0578515268972738], 'false,false': [0.05454611524006253, 0.1003950925726854], 'false,false,false': [nan, 0.1003950925726854], 'false,false,true': [0.020227407038935483, 1.5340711881518285e-06]}
{'': [nan, 0.046251502572996865], 'false': [nan, 0.046251502572996914], 'false,false': [nan, 0.046251502572996865]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 12.001
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then return 0.8581489350995118;  // std dev = 2.31e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then return 0.7194734122109544;  // std dev = 4.21e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.5631660001050113;  // std dev = 0.926, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(E, F) )
%   | | then return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.4850122940520397;  // std dev = 0.885, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07850474682064996;  // std dev = 1.422, 54.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=3 */
%   | | | else return 0.021497631165407902;  // std dev = 1.536, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.01982988218597315;  // std dev = 1.581, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   | | | else return 0.08578487415644509;  // std dev = 1.463, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5775055875206431;  // std dev = 0.194, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.7236545947989947;  // std dev = 0.026, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6737925473502169;  // std dev = 0.174, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.12170525880496146;  // std dev = 0.038, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.5630043328860215;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.49442304585698926;  // std dev = 0.719, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.0578788565802705;  // std dev = 0.794, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), tweets(F, G) )
%   | | | then return 0.4298327562519324;  // std dev = 0.162, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.18546408699266123;  // std dev = 0.778, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.4748839216325681;  // std dev = 0.787, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.6107200533839651;  // std dev = 0.116, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11133970223360137;  // std dev = 0.129, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.4156572569885669;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.11123036443765945;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.32556710977368647;  // std dev = 0.111, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0.44619868815435865;  // std dev = 0.076, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( follows(E, A), follows(F, A) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return -0.049728395858703166;  // std dev = 0.981, 44.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=4 */
%   | | | else return -0.09505652463594695;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.1985780814984238;  // std dev = 0.810, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return -0.031427518818959894;  // std dev = 0.946, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.3237466107851227;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.15292204033912624;  // std dev = 0.112, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.07215484474228256;  // std dev = 1.014, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.1871640255741;  // std dev = 0.971, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.24777250326060207;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), tweets(D, G) )
%   | | | then return 0.31329312925420094;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.262517600931214;  // std dev = 0.048, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.3127385431094421;  // std dev = 0.092, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.42635241166663823;  // std dev = 0.115, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4546596592553732;  // std dev = 0.119, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1026663053707262;  // std dev = 0.212, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(E, D) )
%   | | then if ( follows(C, A), follows(A, D) )
%   | | | then return 0.2131614499488587;  // std dev = 0.036, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.10236731455996795;  // std dev = 1.161, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(F, A), recursion_accounttype(C, B) )
%   | | | then return 0.23745626977628326;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3320867340435121;  // std dev = 0.156, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(C, G) )
%   | | then return -0.08912440923194057;  // std dev = 0.088, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else return -0.17079745320206532;  // std dev = 0.090, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return 0.11146053933547335;  // std dev = 0.331, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( recursion_accounttype(C, B) )
%   | | | then return 0.17892574382942028;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.023841441404035168;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.22909325474992628;  // std dev = 0.036, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.08274183581440128;  // std dev = 0.091, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( tweets(A, G), recursion_accounttype(F, B) )
%   | | then return -0.40919504663694495;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.08181456076259246;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.003452878525947438;  // std dev = 0.295, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, I) )
%   | | then return 0.24824801666298835;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.03139678152601395;  // std dev = 0.162, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.16285811027349034;  // std dev = 0.061, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.21723708519901577;  // std dev = 0.083, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.2644925797131014;  // std dev = 0.168, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return -0.07547412786023482;  // std dev = 0.077, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else return -0.1070441271387848;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.15668515727138177;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.08193554680954442;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.14137563944866544;  // std dev = 0.052, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.18265845358242633;  // std dev = 0.020, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, C) )
%   | | then return -0.07179897532703673;  // std dev = 0.080, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( follows(F, C) )
%   | | | then return -0.04302831438912925;  // std dev = 0.202, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.0032111351556431875;  // std dev = 0.188, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.13707647379802368;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.21734559291122904;  // std dev = 0.148, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10080517784015179;  // std dev = 0.177, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.07597953290912372;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '31.968', 'seconds']
Refined model CLL: -0.103283


******************************************
Best model found
******************************************
Results 

CLL : -0.097378 

AUC ROC : 0.994673 

AUC PR : 0.400684 

Precision : 0.34375 

Recall : 0.916667 

F1 : 0.5 

Total Learning Time : 12.001 

Total Inference Time : 11.369822025299072 

Total revision time: 26.717894205093383
Best scored revision CLL: -0.103283


Results 

CLL : -0.097378 

AUC ROC : 0.994673 

AUC PR : 0.400684 

Precision : 0.34375 

Recall : 0.916667 

F1 : 0.5 

Total Learning Time : 26.744727977752685 

Total Inference Time : 11.369822025299072 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.58
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8414822684328459;  // std dev = 0.992, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.14185106490048793;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16412094618912457;  // std dev = 5.961, 219.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=75 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12703326140802831;  // std dev = 5.765, 217.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=71 */
%   | | | else return 0.06971275659294245;  // std dev = 1.480, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6195116610726565;  // std dev = 1.697, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | else return -0.1610147895623723;  // std dev = 3.65e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10105854608824096;  // std dev = 1.376, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07108025691971875;  // std dev = 4.002, 168.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=55 */
%   | | else return 0.07448619451300523;  // std dev = 0.321, 62.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4494927812663127;  // std dev = 1.985, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15087316957196295;  // std dev = 0.078, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04338809844897617;  // std dev = 3.429, 169.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=59 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04239290330633019;  // std dev = 1.659, 47.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.0289747339453997;  // std dev = 3.590, 214.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=71 */
%   | | | else return -0.0032868869207530443;  // std dev = 1.183, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.32538989248150996;  // std dev = 1.700, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | | else return -0.13960505563047407;  // std dev = 0.002, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0462547083551739;  // std dev = 1.126, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.012014852069856367;  // std dev = 3.245, 225.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=75 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.835', 'seconds']
Parameter learned model CLL:-0.15553 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.992, 1, 59], 'false,true,false': [0.0, 0, 16], 'false,false': [0.0, 135, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.961, 144, 75]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.765, 146, 71], 'false,false,false,false': [1.48, 10, 4]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.697, 3, 71], 'true,false': [3.65e-08, 125, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.376, 9, 4]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.002, 113, 55], 'false,false,false': [0.321, 42, 20]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.985, 4, 75], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.078, 148, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.429, 110, 59], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.659, 31, 16]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.59, 143, 71], 'false,false,false,false': [1.183, 13, 4]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.7, 3, 71], 'false,false,true,false': [0.002, 153, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.126, 9, 4]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.245, 150, 75]}]
{'': [nan, 0.22910536600705286], 'false': [0.012984764542935068, -5.921189464667501e-17], 'false,true': [0.016388888888888432, -2.220446049250313e-16]}
{'': [nan, 0.16226739283863464], 'false': [nan, 0.16226739283863426], 'false,false': [nan, 0.16226739283863464], 'false,false,false': [nan, 0.16226739283863426]}
{'': [nan, 0.15353485226277638], 'false': [nan, 0.1535348522627761], 'false,false': [nan, 0.1535348522627761], 'false,false,false': [0.15314644255943247, 0.15646869210581768]}
{'': [0.15677877750308938, 0.14570969571268974], 'true': [0.03893094673341997, 1.0658141036401503e-17], 'false': [nan, 0.14570969571268974], 'false,false': [nan, 0.14570969571268974], 'false,false,false': [nan, 0.14570969571268974]}
{'': [nan, 0.09732676235897458], 'false': [nan, 0.09732676235897449], 'false,false': [0.09532043772678153, 0.10275478156711967], 'false,false,true': [nan, 0.09532043772678153]}
{'': [nan, 0.09917112479912125], 'false': [nan, 0.09917112479912125], 'false,false': [0.0498832936706867, 4.095076626146325e-05], 'false,false,false': [nan, 4.095076626160428e-05]}
{'': [0.06958551379110844, 0.058561565502131735], 'true': [nan, 0.06958551379110844], 'false': [nan, 0.058561565502131735], 'false,false': [nan, 0.058561565502131735], 'false,false,false': [nan, 0.058561565502131735]}
{'': [nan, 0.061912212556557635], 'false': [nan, 0.061912212556557635], 'false,false': [nan, 0.061912212556557635], 'false,false,false': [0.06021177903598344, 0.08235345420206666]}
{'': [nan, 0.06232305750971975], 'false': [nan, 0.0623230575097197], 'false,false': [0.06023886457241629, 0.09760509777774379], 'false,false,false': [nan, 0.09760509777774379], 'false,false,true': [0.03905236762975412, 1.510095520524815e-08]}
{'': [nan, 0.046797390517994246], 'false': [nan, 0.046797390517994066], 'false,false': [nan, 0.046797390517994246]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 10.513
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.7956489350995116;  // std dev = 1.369, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.14185106490048824;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.7070359052248139;  // std dev = 0.158, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else return 0.5991383286492764;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.6569734122109542;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.1254446385283912;  // std dev = 6.66e-08, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1817982890131889;  // std dev = 1.348, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.06953645010376533;  // std dev = 1.284, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5770853291652206;  // std dev = 0.086, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.3767075419653347;  // std dev = 0.851, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5668978373855873;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.504250419756912;  // std dev = 0.974, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.11231637819360618;  // std dev = 9.19e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.016933118916479056;  // std dev = 1.071, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | | | else return 0.20160842045559008;  // std dev = 1.691, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.4211524093013375;  // std dev = 0.948, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.247728019847979;  // std dev = 0.884, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.510967438529793;  // std dev = 0.137, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6470505544079374;  // std dev = 0.033, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10726542739599854;  // std dev = 0.207, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.46449232940789653;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.335558703651063;  // std dev = 0.054, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return 0.1988641299798536;  // std dev = 0.333, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F) )
%   | | then return 0.34873780232144563;  // std dev = 0.070, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.13712606338968236;  // std dev = 0.937, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.08284624934233721;  // std dev = 0.977, 98.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=3 */
%   | | | else return 0.01283029906474642;  // std dev = 1.199, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0879603671290953;  // std dev = 1.146, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return -0.01156912889567849;  // std dev = 1.115, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.19830743908522835;  // std dev = 1.361, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | | else return 0.07344271921309006;  // std dev = 0.884, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.274273582781997;  // std dev = 0.042, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B), tweets(A, I) )
%   | | | then return 0.28319792221135265;  // std dev = 0.038, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.37101145301688615;  // std dev = 0.190, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.478615224273887;  // std dev = 0.069, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09492228508667164;  // std dev = 0.231, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2247228283088159;  // std dev = 0.024, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.056693821343923326;  // std dev = 1.202, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return -0.0028044710337640777;  // std dev = 0.801, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.235283051589328;  // std dev = 0.066, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(F, A) )
%   | then return -0.02716730631552906;  // std dev = 0.128, 121.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=18 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.30043837018362696;  // std dev = 0.179, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11734293705068126;  // std dev = 0.084, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.018347902977816844;  // std dev = 0.380, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.024966060218498613;  // std dev = 0.758, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(C, A) )
%   | | then return 0.19903179305087126;  // std dev = 0.121, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.07475622203951733;  // std dev = 0.787, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.22864746449296947;  // std dev = 0.087, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.031040428690692373;  // std dev = 0.854, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A) )
%   | then return -0.029098683162137602;  // std dev = 0.131, 132.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=21 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.272796420032718;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10944060192696861;  // std dev = 0.112, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.01616095848439175;  // std dev = 0.378, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.12512180683748975;  // std dev = 0.637, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.08149532549215345;  // std dev = 1.578, 33.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=30 */
%   | | | else return 0.18988430938401288;  // std dev = 0.072, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.21447790492345215;  // std dev = 0.157, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2893775112807502;  // std dev = 0.229, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.08116427038592776;  // std dev = 0.187, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.20791649980194896;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.07479647826069448;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, A) )
%   | then return 0.16535087255397138;  // std dev = 0.168, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else return 0.13149185957799636;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.1685782218320602;  // std dev = 0.037, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.23421440095076876;  // std dev = 0.199, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.07680158827494718;  // std dev = 0.187, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return -0.1610580331151552;  // std dev = 1.168, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return -0.06978222441228456;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.293', 'seconds']
Refined model CLL: -0.101727


******************************************
Best model found
******************************************
Results 

CLL : -0.096675 

AUC ROC : 0.995418 

AUC PR : 0.428393 

Precision : 0.344111 

Recall : 0.955128 

F1 : 0.505942 

Total Learning Time : 10.513 

Total Inference Time : 9.404550790786743 

Total revision time: 24.064583366394043
Best scored revision CLL: -0.101727


Results 

CLL : -0.096675 

AUC ROC : 0.995418 

AUC PR : 0.428393 

Precision : 0.344111 

Recall : 0.955128 

F1 : 0.505942 

Total Learning Time : 24.091417139053345 

Total Inference Time : 9.404550790786743 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.844
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8087662190501296;  // std dev = 1.950, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   | | else return 0.8164822684328453;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return -0.14185106490048843;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14178509757884894;  // std dev = 7.104, 317.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=100 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1233495875059597;  // std dev = 6.796, 301.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=95 */
%   | | | else return 0.15897643413054216;  // std dev = 1.510, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6631252294762499;  // std dev = 0.994, 96.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=95 */
%   | else return -0.15753076405768215;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.034918573210220724;  // std dev = 1.617, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08680252719452726;  // std dev = 4.514, 208.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=72 */
%   | | else return 0.08783990969018984;  // std dev = 0.328, 82.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47142796743632537;  // std dev = 1.747, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1490913189646171;  // std dev = 0.062, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.036086781505116614;  // std dev = 3.897, 229.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=77 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.043500659919620745;  // std dev = 1.971, 67.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.029699835418005718;  // std dev = 4.113, 285.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=95 */
%   | | | else return -0.010039673540185916;  // std dev = 1.391, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.35199545692956513;  // std dev = 0.994, 96.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=95 */
%   | | | else return -0.13840280419477913;  // std dev = 0.006, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14673583464884873;  // std dev = 1.123, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0016010678063160142;  // std dev = 3.954, 307.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=100 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.686', 'seconds']
Parameter learned model CLL:-0.154018 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.95, 4, 77], 'false,true,false': [0.979, 1, 23], 'false,false': [0.0, 207, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.104, 217, 100]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.796, 206, 95], 'false,false,false,false': [1.51, 9, 5]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.994, 1, 95], 'true,false': [0.0, 169, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.617, 16, 5]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.514, 136, 72], 'false,false,false': [0.328, 54, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.747, 3, 100], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.062, 181, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.897, 152, 77], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.971, 44, 23]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.113, 190, 95], 'false,false,false,false': [1.391, 15, 5]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.994, 1, 95], 'false,false,true,false': [0.006, 175, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.123, 6, 5]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.954, 207, 100]}]
{'': [nan, 0.21778435239973873], 'false': [0.0453514739229045, -2.4028015218940584e-16], 'false,true': [0.04694406340496822, 0.039930555555556024]}
{'': [nan, 0.15922257447855667], 'false': [nan, 0.15922257447855645], 'false,false': [nan, 0.15922257447855667], 'false,false,false': [nan, 0.15922257447855645]}
{'': [nan, 0.15393566078237517], 'false': [nan, 0.15393566078237494], 'false,false': [nan, 0.15393566078237494], 'false,false,false': [0.1534629428911841, 0.16288623534036173]}
{'': [0.15932383331513325, 0.12448581678191382], 'true': [0.010300210566300075, -2.3124171873849414e-16], 'false': [nan, 0.12448581678191382], 'false,false': [nan, 0.12448581678191382], 'false,false,false': [nan, 0.12448581678191382]}
{'': [nan, 0.10064854226128098], 'false': [nan, 0.10064854226128114], 'false,false': [0.09797735578931674, 0.10742346290729712], 'false,false,true': [nan, 0.09797735578931674]}
{'': [nan, 0.09975776252807804], 'false': [nan, 0.09975776252807804], 'false,false': [0.0296251305279754, 2.118588275577424e-05], 'false,false,false': [nan, 2.1185882755833127e-05]}
{'': [0.06630578929193277, 0.05799885954956313], 'true': [nan, 0.06630578929193277], 'false': [nan, 0.05799885954956313], 'false,false': [nan, 0.05799885954956313], 'false,false,false': [nan, 0.05799885954956313]}
{'': [nan, 0.061910008887755955], 'false': [nan, 0.061910008887755955], 'false,false': [nan, 0.061910008887755955], 'false,false,false': [0.05936347084752989, 0.09672250336069206]}
{'': [nan, 0.06130636743781199], 'false': [nan, 0.061306367437812544], 'false,false': [0.058659430912630685, 0.1145874729128013], 'false,false,false': [nan, 0.1145874729128013], 'false,false,true': [0.010292071674863993, 1.9173705315265823e-07]}
{'': [nan, 0.05092206405454922], 'false': [nan, 0.05092206405454913], 'false,false': [nan, 0.05092206405454922]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 16.519
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.5248156017661789;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.14185106490048846;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then return 0.656973412210955;  // std dev = 0.242, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | else return 0.7194734122109543;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.3530575110038668;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.727242853131497;  // std dev = 0.082, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.1254446385283915;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08578487415644513;  // std dev = 1.035, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.15619471171805724;  // std dev = 1.543, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.5676096522398646;  // std dev = 0.046, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else return 0.4599789970020054;  // std dev = 0.296, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.68820281090427;  // std dev = 0.094, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.38169477169510696;  // std dev = 1.531, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else return -0.1123163781936064;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5919843560996573;  // std dev = 0.179, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1206239601922086;  // std dev = 0.052, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1304773726936267;  // std dev = 1.065, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.13322857287108245;  // std dev = 1.516, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.41121241121053587;  // std dev = 0.992, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.4700891537498881;  // std dev = 0.272, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.501274955795538;  // std dev = 0.097, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6575573486838331;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.1055055254377808;  // std dev = 0.153, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.4408775461152771;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, E) )
%   | then return 0.3119780362768354;  // std dev = 0.143, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else if ( follows(A, C) )
%   | | then if ( follows(C, F), follows(F, A) )
%   | | | then return 0.330103422564758;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1371964785975023;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.06460556937968784;  // std dev = 0.861, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A) )
%   | then return -0.04094007405821745;  // std dev = 0.145, 178.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=20 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.33836901817627585;  // std dev = 0.180, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09646155961635793;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.01673894333348616;  // std dev = 1.067, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.0682062918068811;  // std dev = 1.179, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(D, E), tweets(A, F) )
%   | | | then return 0.2389341182478705;  // std dev = 0.985, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.2819865711309199;  // std dev = 0.083, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.005703206869148381;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2734802353050627;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(I, A), follows(A, J) )
%   | | then return 0.3750506981690172;  // std dev = 0.171, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.07991125025314769;  // std dev = 0.847, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3139222079011923;  // std dev = 0.920, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return -0.09144638084412798;  // std dev = 0.167, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.06990043740333614;  // std dev = 1.840, 26.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=22 */
%   | | | else return 0.2211037478582422;  // std dev = 0.018, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.23230971457322133;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.2710713297993024;  // std dev = 0.072, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.22939089841564642;  // std dev = 0.057, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.27462418206429545;  // std dev = 2.11e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08187284756929303;  // std dev = 0.001, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.0035148336447582453;  // std dev = 0.656, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.04243253377309487;  // std dev = 1.145, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2080487100988196;  // std dev = 0.302, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.2014300652251831;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.07590187252438613;  // std dev = 2.98e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.2221879559428422;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.07590187252438618;  // std dev = 1.97e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.19248346231259872;  // std dev = 0.036, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.07605881482864854;  // std dev = 0.000623, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.028327597020575;  // std dev = 1.288, 42.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(E, A), follows(F, A) )
%   | | | then return 0.12902781449643663;  // std dev = 1.381, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | | | else return 0.19575515211522446;  // std dev = 0.215, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2853344896775464;  // std dev = 0.132, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.37935965138954797;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07749791085185037;  // std dev = 0.272, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return -0.010339206532922343;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.07099355827612527;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.1568775201840182;  // std dev = 0.160, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(C, A) )
%   | | | then return 0.12851172577214054;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11229209773421742;  // std dev = 0.877, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.179643509527074;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then return -0.03787725154434927;  // std dev = 0.098, 186.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=27 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.20481774378651268;  // std dev = 0.147, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.07953720488755628;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.0035096848432139317;  // std dev = 0.420, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.01606720001323778;  // std dev = 0.753, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.667', 'seconds']
Refined model CLL: -0.10113


******************************************
Best model found
******************************************
Results 

CLL : -0.09616 

AUC ROC : 0.994839 

AUC PR : 0.373648 

Precision : 0.334081 

Recall : 0.955128 

F1 : 0.495017 

Total Learning Time : 16.519 

Total Inference Time : 11.200907945632935 

Total revision time: 32.9688452129364
Best scored revision CLL: -0.10113


Results 

CLL : -0.09616 

AUC ROC : 0.994839 

AUC PR : 0.373648 

Precision : 0.334081 

Recall : 0.955128 

F1 : 0.495017 

Total Learning Time : 32.9956789855957 

Total Inference Time : 11.200907945632935 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.217
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8581489350995115;  // std dev = 3.58e-07, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | | else return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else return -0.14185106490048838;  // std dev = 0.000, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14595497052920825;  // std dev = 7.861, 389.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13601794535813846;  // std dev = 7.421, 349.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=118 */
%   | | | else return 0.22718076694084358;  // std dev = 1.753, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6126478399829937;  // std dev = 2.391, 124.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=118 */
%   | else return -0.1597783546669268;  // std dev = 1.07e-07, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08707760688799668;  // std dev = 1.891, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08915682174384336;  // std dev = 4.970, 252.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=89 */
%   | | else return 0.07262020564660987;  // std dev = 0.330, 113.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4618239941845;  // std dev = 2.185, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15293370352602012;  // std dev = 0.175, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.042411170752022984;  // std dev = 4.212, 283.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01995526299352282;  // std dev = 2.418, 97.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.03609154760463489;  // std dev = 4.547, 342.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=118 */
%   | | | else return 0.09657297857865692;  // std dev = 1.411, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3094776028161427;  // std dev = 2.449, 125.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=118 */
%   | | | else return -0.14018853595849826;  // std dev = 0.031, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.030636404130660967;  // std dev = 1.476, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.012226320397717582;  // std dev = 4.142, 378.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.601', 'seconds']
Parameter learned model CLL:-0.15762 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [3.58e-07, 0, 97], 'false,true,false': [0.983, 1, 29], 'false,false': [0.0, 236, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.861, 263, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.421, 231, 118], 'false,false,false,false': [1.753, 10, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [2.391, 6, 118], 'true,false': [1.07e-07, 238, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.891, 17, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.97, 163, 89], 'false,false,false': [0.33, 76, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.185, 5, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.175, 234, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.212, 186, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.418, 68, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.547, 224, 118], 'false,false,false,false': [1.411, 11, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.449, 7, 118], 'false,false,true,false': [0.031, 250, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.476, 15, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.142, 252, 126]}]
{'': [nan, 0.22662386449013325], 'false': [0.007812015624035403, -1.8064645824409328e-16], 'false,true': [1.3185329117197736e-15, 0.03222222222222335]}
{'': [nan, 0.15884762193294058], 'false': [nan, 0.15884762193294522], 'false,false': [nan, 0.15884762193294058], 'false,false,false': [nan, 0.15884762193294522]}
{'': [nan, 0.15880840165171892], 'false': [nan, 0.15880840165171986], 'false,false': [nan, 0.15880840165171986], 'false,false,false': [0.15778786111863644, 0.17069249591971858]}
{'': [0.15016254477238053, 0.14307290442719364], 'true': [0.0461102107041429, 4.8513947294544656e-17], 'false': [nan, 0.14307290442719364], 'false,false': [nan, 0.14307290442719364], 'false,false,false': [nan, 0.14307290442719364]}
{'': [nan, 0.10150890038067145], 'false': [nan, 0.1015089003806715], 'false,false': [0.09801475821273588, 0.10911234707695804], 'false,false,true': [nan, 0.09801475821273588]}
{'': [nan, 0.10012720626441478], 'false': [nan, 0.10012720626441478], 'false,false': [0.03646043043944644, 0.0001301544397051589], 'false,false,false': [nan, 0.00013015443970511333]}
{'': [0.06268153770785512, 0.06026062466306016], 'true': [nan, 0.06268153770785512], 'false': [nan, 0.06026062466306016], 'false,false': [nan, 0.06026062466306016], 'false,false,false': [nan, 0.06026062466306016]}
{'': [nan, 0.06298160785049017], 'false': [nan, 0.06298160785049017], 'false,false': [nan, 0.06298160785049017], 'false,false,false': [0.06046474771842063, 0.10481961323469052]}
{'': [nan, 0.06290471881568215], 'false': [nan, 0.06290471881568217], 'false,false': [0.06092429480298126, 0.09478124552834327], 'false,false,false': [nan, 0.09478124552834327], 'false,false,true': [0.04796546927325849, 3.82878101040518e-06]}
{'': [nan, 0.04538971146977117], 'false': [nan, 0.04538971146977129], 'false,false': [nan, 0.04538971146977117]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 24.34
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.8581489350995126;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.1418510649004881;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, C) )
%   | | then return 0.6659428857114498;  // std dev = 0.227, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | else return 0.7194734122109543;  // std dev = 5.96e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.40411299801781925;  // std dev = 0.839, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.7262132568885286;  // std dev = 0.050, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.5626084181474298;  // std dev = 0.884, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7269162178812537;  // std dev = 0.048, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12544463852839166;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07335960870439606;  // std dev = 2.090, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | | else return 0.09821013960849453;  // std dev = 2.174, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.5678368212551907;  // std dev = 0.152, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( follows(E, A), follows(E, C) )
%   | | then return 0.5614662033929856;  // std dev = 0.046, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.3771302356021064;  // std dev = 0.866, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.3035278016400713;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5159349970035665;  // std dev = 0.990, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return -0.1123163781936067;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.6437023668440589;  // std dev = 0.058, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11795027108142953;  // std dev = 2.000, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.078312305659874;  // std dev = 2.161, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.4284395978161429;  // std dev = 0.141, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | | else return 0.3622625266525679;  // std dev = 1.348, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.32467232808933466;  // std dev = 0.980, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.6809975594359978;  // std dev = 0.007, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.11134843137404417;  // std dev = 0.288, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4160308959712116;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783621;  // std dev = 5.27e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3292844411317446;  // std dev = 0.203, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return -0.0833161000992678;  // std dev = 0.977, 108.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=3 */
%   | | | else return -0.09224330062368018;  // std dev = 0.002, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.3469600083197692;  // std dev = 0.058, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09190828791701007;  // std dev = 0.707, 73.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.49210889189700197;  // std dev = 0.137, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.13448295376218827;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.021073991024627384;  // std dev = 1.144, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.08833554093174707;  // std dev = 1.243, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), follows(A, D) )
%   | | | then return 0.24179057384413233;  // std dev = 0.992, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.014126657015741478;  // std dev = 1.227, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.2874295492734448;  // std dev = 0.295, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.17196395808224627;  // std dev = 0.685, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.37515709596669405;  // std dev = 0.128, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5158089960598414;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.47197019173290444;  // std dev = 0.148, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.09390190959548769;  // std dev = 0.283, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.2195508881163379;  // std dev = 0.177, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else return 0.11048866984127398;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return -0.05602896712259957;  // std dev = 1.090, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.22886781438354795;  // std dev = 0.142, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.07782085293177249;  // std dev = 0.005, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.23769650898321465;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.025650912655619064;  // std dev = 1.231, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.04797579204316859;  // std dev = 1.253, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1879966247667383;  // std dev = 0.192, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A), tweets(A, G) )
%   | | | then return -0.08343410512740446;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2067305681368664;  // std dev = 0.283, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.07245188833992373;  // std dev = 0.004, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.20312819840017976;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02751511779723822;  // std dev = 1.235, 52.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=9 */
%   | | | else return 0.034874893332812164;  // std dev = 1.110, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(F, A), follows(E, A) )
%   | | | then return 0.1652550382193765;  // std dev = 0.273, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.10429928000312937;  // std dev = 2.023, 47.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=43 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.3350841517585687;  // std dev = 0.218, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3317637721562689;  // std dev = 0.176, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.0771084267499303;  // std dev = 0.335, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.1722185708664017;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.0709168884532293;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then return 0.13842170894524264;  // std dev = 0.091, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return -0.19962941620236538;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.15184136748795854;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H), tweets(F, H) )
%   | | | then return -0.20068685575302697;  // std dev = 0.942, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.14384131113159415;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1686830213319004;  // std dev = 0.095, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(I, A) )
%   | | then return -0.04798964633717793;  // std dev = 0.059, 228.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.03590054560543408;  // std dev = 1.355, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | | | else return -0.004861036409151286;  // std dev = 0.987, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '27.462', 'seconds']
Refined model CLL: -0.0982


******************************************
Best model found
******************************************
Results 

CLL : -0.098501 

AUC ROC : 0.994631 

AUC PR : 0.368988 

Precision : 0.34689 

Recall : 0.929487 

F1 : 0.505226 

Total Learning Time : 24.34 

Total Inference Time : 24.83875584602356 

Total revision time: 55.06516512107849
Best scored revision CLL: -0.0982


Results 

CLL : -0.098501 

AUC ROC : 0.994631 

AUC PR : 0.368988 

Precision : 0.34689 

Recall : 0.929487 

F1 : 0.505226 

Total Learning Time : 55.091998893737795 

Total Inference Time : 24.83875584602356 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.237
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19791905990271638;  // std dev = 3.696, 81.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=31 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13452007560529886;  // std dev = 3.620, 84.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
%   | | | else return -0.025480202636543613;  // std dev = 1.102, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6478066435570232;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.166670275453704;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04808495122437602;  // std dev = 1.101, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07168596037398775;  // std dev = 2.352, 57.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=20 */
%   | | else return 0.03714866454649347;  // std dev = 0.300, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4887667864304619;  // std dev = 0.289, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1517194993347939;  // std dev = 0.032, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.034941082780365;  // std dev = 1.963, 59.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=21 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05331686797366364;  // std dev = 1.318, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.017977278518262137;  // std dev = 2.157, 90.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=29 */
%   | | | else return 0.007332915826326519;  // std dev = 0.876, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.34372421600448294;  // std dev = 0.009, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.14100556657901198;  // std dev = 0.006, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.016451269173559935;  // std dev = 0.893, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.031370547467854094;  // std dev = 1.868, 82.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=31 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.600', 'seconds']
Parameter learned model CLL:-0.151364 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 10], 'false,false': [7.9e-09, 57, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.696, 50, 31]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.62, 55, 29], 'false,false,false,false': [1.102, 10, 2]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.0, 0, 29], 'true,false': [0.0, 53, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.101, 15, 2]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.352, 37, 20], 'false,false,false': [0.3, 30, 11]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.289, 0, 31], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.032, 74, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.963, 38, 21], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.318, 18, 10]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.157, 61, 29], 'false,false,false,false': [0.876, 8, 2]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.009, 0, 29], 'false,false,true,false': [0.006, 47, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.893, 10, 2]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.868, 51, 31]}]
{'': [nan, 0.2281766528925634], 'false': [1.375244004696968e-15, 6.232831015439475e-17], 'false,true': [0.0, -8.881784197001253e-17]}
{'': [nan, 0.1686517442952337], 'false': [nan, 0.16865174429523244], 'false,false': [nan, 0.1686517442952337], 'false,false,false': [nan, 0.16865174429523244]}
{'': [nan, 0.15195645311888864], 'false': [nan, 0.1519564531188885], 'false,false': [nan, 0.1519564531188885], 'false,false,false': [0.15600888253175083, 0.10118936932106892]}
{'': [0.1516364910040241, 0.0713414745636913], 'true': [-6.125368411725002e-17, -5.44637710193473e-17], 'false': [nan, 0.0713414745636913], 'false,false': [nan, 0.0713414745636913], 'false,false,false': [nan, 0.0713414745636913]}
{'': [nan, 0.09428909353445257], 'false': [nan, 0.09428909353445267], 'false,false': [0.09704122462224239, 0.08976917421608967], 'false,false,true': [nan, 0.09704122462224239]}
{'': [nan, 0.08616024365002473], 'false': [nan, 0.08616024365002473], 'false,false': [0.002691030446397302, 1.3712876352749186e-05], 'false,false,false': [nan, 1.3712876352743184e-05]}
{'': [0.06528206989530472, 0.06199728755399785], 'true': [nan, 0.06528206989530472], 'false': [nan, 0.06199728755399785], 'false,false': [nan, 0.06199728755399785], 'false,false,false': [nan, 0.06199728755399785]}
{'': [nan, 0.054232760970980266], 'false': [nan, 0.054232760970980266], 'false,false': [nan, 0.054232760970980266], 'false,false,false': [0.051715017340236834, 0.07679048143626593]}
{'': [nan, 0.05737071246267376], 'false': [nan, 0.05737071246267395], 'false,false': [0.055447236417566576, 0.06640116916425721], 'false,false,false': [nan, 0.06640116916425721], 'false,false,true': [2.8500862041918957e-06, 6.826941821928922e-07]}
{'': [nan, 0.04253319787400941], 'false': [nan, 0.04253319787400943], 'false,false': [nan, 0.04253319787400941]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 11.642
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.1254446385283915;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1254446385283914;  // std dev = 7.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.11596051882570745;  // std dev = 0.382, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.0553664367462845;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.5654630906692911;  // std dev = 0.055, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return -0.11231637819360642;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return -0.0199594959372693;  // std dev = 0.239, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.36459991819202997;  // std dev = 0.798, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.259427260649286;  // std dev = 0.961, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(G, A) )
%   | | | then return 0.4429355277665518;  // std dev = 0.163, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.41506018252494237;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.6005344074433101;  // std dev = 0.049, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.44833142191581565;  // std dev = 0.083, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, I) )
%   | | then return -0.10277814085605937;  // std dev = 0.003, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return -0.1242072708405712;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( tweets(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.11034173361268668;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.09750145695528156;  // std dev = 0.662, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return -0.09335322761454314;  // std dev = 0.232, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.3149572574294866;  // std dev = 0.000684, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.34983134782645986;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3939851806235935;  // std dev = 0.092, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.43835592552110897;  // std dev = 0.085, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.09457629351651262;  // std dev = 0.004, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3381882650003748;  // std dev = 0.062, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11382994338225588;  // std dev = 0.083, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2473576549020501;  // std dev = 0.573, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0723867590387728;  // std dev = 0.801, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.25915280295882087;  // std dev = 0.085, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.09898049916608039;  // std dev = 0.932, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.020909869881883553;  // std dev = 0.591, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.31100816507402335;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2792159879367639;  // std dev = 0.105, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.43107796662689307;  // std dev = 0.321, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then return -0.086285221472233;  // std dev = 0.003, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( follows(A, I) )
%   | | then return -0.11030539859113501;  // std dev = 0.018, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.1780184554781307;  // std dev = 0.020, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( recursion_accounttype(C, B), follows(A, C) )
%   | | | then return 0.2054012888338582;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.22948363007017022;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.27802075864049747;  // std dev = 0.097, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.0810865937566885;  // std dev = 0.003, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.20581667315369606;  // std dev = 0.046, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2350477999172468;  // std dev = 0.040, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H), follows(E, I) )
%   | | | then return -0.075401977979423;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.11241752862382685;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.17365302853190934;  // std dev = 0.643, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.18429479209661423;  // std dev = 0.034, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.23234606269904032;  // std dev = 0.054, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.08041181259513572;  // std dev = 0.334, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(A, F) )
%   | | then return -0.07414592062408817;  // std dev = 0.005, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.0787433348030571;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.22688761830198748;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( recursion_accounttype(I, B) )
%   | | then return 0.18023106937597536;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.08802353924135921;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.21431406617390727;  // std dev = 0.407, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.08885547050434875;  // std dev = 0.959, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.14672661545558707;  // std dev = 0.778, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.19756160817517746;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16564573515507572;  // std dev = 0.048, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, H) )
%   | | then return -0.06880849861942452;  // std dev = 0.003, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.06659950006995322;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.09522192558712192;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(J, A) )
%   | then return -0.12504200828113163;  // std dev = 0.166, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.00973330312653349;  // std dev = 0.702, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( tweets(A, E) )
%   | | then return 0.1483186460773896;  // std dev = 0.012, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.1315138160595174;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.18806898934430596;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return -0.06349835521794833;  // std dev = 0.000627, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.1823847748794402;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.0690109081029327;  // std dev = 0.028, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.14119846476878414;  // std dev = 0.031, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.07286889451734153;  // std dev = 0.041, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.025600253153006545;  // std dev = 0.277, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.470', 'seconds']
Refined model CLL: -0.093691


******************************************
Best model found
******************************************
Results 

CLL : -0.093987 

AUC ROC : 0.993745 

AUC PR : 0.427694 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 11.642 

Total Inference Time : 4.579642057418823 

Total revision time: 19.104469350814817
Best scored revision CLL: -0.093691


Results 

CLL : -0.093987 

AUC ROC : 0.993745 

AUC PR : 0.427694 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 24.26440959358215 

Total Inference Time : 4.579642057418823 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.566
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8146706742299468;  // std dev = 1.383, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | else return 0.8055173561521439;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return -0.1418510649004877;  // std dev = 4.93e-09, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19766664005724455;  // std dev = 5.316, 163.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=62 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.11449529213615231;  // std dev = 5.008, 164.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=52 */
%   | | | else return 0.13987065704028923;  // std dev = 2.143, 29.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.662723136108519;  // std dev = 0.006, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.1638729513762254;  // std dev = 1.07e-07, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16258957799084364;  // std dev = 2.021, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08909804998721976;  // std dev = 3.321, 104.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=39 */
%   | | else return 0.08377111668059642;  // std dev = 0.343, 67.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=23 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4735013697292079;  // std dev = 1.249, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1603594297616917;  // std dev = 0.201, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.021427209229574338;  // std dev = 2.927, 138.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=44 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04775687901567581;  // std dev = 1.889, 50.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=18 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.013925890626763865;  // std dev = 3.150, 161.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=52 */
%   | | | else return 0.02827541550523372;  // std dev = 1.714, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3376726363967649;  // std dev = 0.990, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return -0.13899162492307202;  // std dev = 0.011, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04548159669244878;  // std dev = 1.664, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.012469563629855993;  // std dev = 2.926, 189.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=62 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.586', 'seconds']
Parameter learned model CLL:-0.160737 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.383, 2, 44], 'false,true,false': [0.973, 1, 18], 'false,false': [4.93e-09, 117, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.316, 101, 62]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.008, 112, 52], 'false,false,false,false': [2.143, 19, 10]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.006, 0, 52], 'true,false': [1.07e-07, 97, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.021, 15, 10]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.321, 65, 39], 'false,false,false': [0.343, 44, 23]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.249, 2, 62], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.201, 138, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.927, 94, 44], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.889, 32, 18]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.15, 109, 52], 'false,false,false,false': [1.714, 21, 10]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.99, 1, 52], 'false,false,true,false': [0.011, 95, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.664, 18, 10]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.926, 127, 62]}]
{'': [nan, 0.22461055428088414], 'false': [0.044023668639052445, 2.6569439905559303e-17], 'false,true': [0.04158790170132436, 0.04986149584487499]}
{'': [nan, 0.1733514149110123], 'false': [nan, 0.17335141491101191], 'false,false': [nan, 0.1733514149110123], 'false,false,false': [nan, 0.17335141491101191]}
{'': [nan, 0.15382005262264645], 'false': [nan, 0.15382005262264634], 'false,false': [nan, 0.15382005262264634], 'false,false,false': [0.15292947887011232, 0.1583092447838509]}
{'': [0.15523512541426143, 0.1633198823070021], 'false': [nan, 0.1633198823070021], 'false,false': [nan, 0.1633198823070021], 'false,false,false': [nan, 0.1633198823070021], 'true': [7.836932589373629e-07, 1.19034221196924e-16]}
{'': [nan, 0.11056896187026666], 'false': [nan, 0.11056896187026591], 'false,false': [0.10605851258515882, 0.11755299823198267], 'false,false,true': [nan, 0.10605851258515882]}
{'': [nan, 0.09488791162632294], 'false': [nan, 0.09488791162632294], 'false,false': [0.024374506915148253, 0.00029330106996386347], 'false,false,false': [nan, 0.00029330106996396967]}
{'': [0.062076098958719746, 0.0714038874781407], 'false': [nan, 0.0714038874781407], 'false,false': [nan, 0.0714038874781407], 'false,false,false': [nan, 0.0714038874781407], 'true': [nan, 0.062076098958719746]}
{'': [nan, 0.06702422447071237], 'false': [nan, 0.06702422447071237], 'false,false': [nan, 0.06702422447071237], 'false,false,false': [0.061638668650946755, 0.09482170604987535]}
{'': [nan, 0.06525085033147733], 'false': [nan, 0.06525085033147765], 'false,false': [0.05884930767011694, 0.098927992303008], 'false,false,false': [nan, 0.098927992303008], 'false,false,true': [0.018488151339472864, 1.264393371513961e-06]}
{'': [nan, 0.045307603888067656], 'false': [nan, 0.04530760388806773], 'false,false': [nan, 0.045307603888067656]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 13.661
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.8581489350995121;  // std dev = 8.43e-08, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else return -0.1418510649004877;  // std dev = 5.58e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7243974001446545;  // std dev = 0.078, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.12544463852839113;  // std dev = 6.99e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1280307766934124;  // std dev = 1.732, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | | | else return 0.15619471171805724;  // std dev = 1.380, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5626920615046885;  // std dev = 0.157, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return -0.09971858923247637;  // std dev = 0.661, 53.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=1 */
%   | | | else return 0.06945794040238426;  // std dev = 0.630, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.5654630906692911;  // std dev = 0.055, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11231637819360649;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.559936779780444;  // std dev = 0.057, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1492616680459844;  // std dev = 1.617, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return 0.051806612220726224;  // std dev = 1.453, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.42558180476113733;  // std dev = 0.245, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.41464209387563;  // std dev = 0.000467, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6398007020689856;  // std dev = 0.114, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10933579402593595;  // std dev = 0.193, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else if ( tweets(A, G), follows(H, A) )
%   | then return -0.0058612471348408095;  // std dev = 0.529, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( tweets(A, I) )
%   | | then return 0.31280274678321734;  // std dev = 0.463, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.18774737579022013;  // std dev = 0.579, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.20379503379617603;  // std dev = 1.081, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3284492452369888;  // std dev = 0.207, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A), follows(D, E) )
%   | | | then return -0.0892576776985738;  // std dev = 0.713, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   | | | else return -0.05947049254070013;  // std dev = 0.695, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.339938379217514;  // std dev = 0.101, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09708384119306716;  // std dev = 0.035, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.39644910466287;  // std dev = 0.323, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.12149591103881713;  // std dev = 0.137, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.06966292668948228;  // std dev = 0.787, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.13853791700164292;  // std dev = 1.203, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.24995380982016413;  // std dev = 0.001, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.346430445862485;  // std dev = 0.279, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return -0.06303472673926151;  // std dev = 0.798, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.24792903563992144;  // std dev = 0.060, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return 0.06373443334851639;  // std dev = 0.829, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2913009828165602;  // std dev = 0.109, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.32738752170242924;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.45230300528875395;  // std dev = 0.323, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09651369985366388;  // std dev = 0.270, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.20599738885863422;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.12907431193555727;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.7940026111413657;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.2411472319641943;  // std dev = 0.054, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A) )
%   | then return -0.049691875436071106;  // std dev = 0.105, 87.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=8 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.25764354887394714;  // std dev = 0.224, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.09766082417469368;  // std dev = 0.126, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.005279451276857932;  // std dev = 0.923, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.03879102515264169;  // std dev = 0.946, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18713302383142094;  // std dev = 0.163, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.05337762554937669;  // std dev = 0.698, 44.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=2 */
%   | | | else return -0.1727799892846051;  // std dev = 0.313, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.22719266034358654;  // std dev = 0.098, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.07752797161736091;  // std dev = 0.040, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.20478794719240886;  // std dev = 0.162, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08499225436923692;  // std dev = 0.097, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03509675769442548;  // std dev = 0.629, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return -0.044804654592896634;  // std dev = 1.166, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.15435079881471175;  // std dev = 0.043, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.26810079552174865;  // std dev = 0.305, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.18399253031617685;  // std dev = 0.209, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.07521187082966484;  // std dev = 0.131, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else if ( follows(G, A), tweets(A, H) )
%   | then return -0.043768936495666176;  // std dev = 0.111, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( follows(I, A) )
%   | | then return 0.12380903932668293;  // std dev = 0.264, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17453039476449533;  // std dev = 0.347, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.06779416410145528;  // std dev = 0.917, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.14225518728493186;  // std dev = 0.171, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.31203901330893147;  // std dev = 0.159, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15334432282854052;  // std dev = 0.085, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.0688311538300226;  // std dev = 0.080, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.07849392883932266;  // std dev = 0.819, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.010233926936028565;  // std dev = 0.384, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.014392722587756738;  // std dev = 0.522, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.04771799346191154;  // std dev = 1.309, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.863', 'seconds']
Refined model CLL: -0.09608


******************************************
Best model found
******************************************
Results 

CLL : -0.09465 

AUC ROC : 0.994654 

AUC PR : 0.435087 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 13.661 

Total Inference Time : 11.21748948097229 

Total revision time: 28.86830973815918
Best scored revision CLL: -0.09608


Results 

CLL : -0.09465 

AUC ROC : 0.994654 

AUC PR : 0.435087 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 34.02824998092652 

Total Inference Time : 11.21748948097229 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.924
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return 0.8236661764788221;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else return -0.1418510649004884;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1499776261446315;  // std dev = 6.710, 286.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=93 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.14244337510062155;  // std dev = 5.850, 219.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=75 */
%   | | | else return 0.1451506744414337;  // std dev = 2.891, 51.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6205014768849924;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   | else return -0.16118599297985026;  // std dev = 1.67e-07, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11392959050914697;  // std dev = 2.855, 53.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05454432345735234;  // std dev = 4.064, 179.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=55 */
%   | | else return 0.09092267746925034;  // std dev = 0.349, 111.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=38 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48571135240113056;  // std dev = 1.741, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15623073760161837;  // std dev = 0.217, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03833041985848427;  // std dev = 3.498, 199.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=65 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06000552701640462;  // std dev = 2.479, 72.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.02996545917362162;  // std dev = 3.587, 224.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=75 */
%   | | | else return 0.04791771800192747;  // std dev = 2.261, 53.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3444388320715359;  // std dev = 0.992, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | | | else return -0.1385444796133436;  // std dev = 0.040, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06743337988566082;  // std dev = 2.169, 47.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.008742580034712627;  // std dev = 3.711, 290.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=93 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.603', 'seconds']
Parameter learned model CLL:-0.159367 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 65], 'false,true,false': [0.983, 1, 28], 'false,false': [0.0, 199, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.71, 193, 93]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.85, 144, 75], 'false,false,false,false': [2.891, 33, 18]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.698, 3, 75], 'true,false': [1.67e-07, 149, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.855, 35, 18]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.064, 124, 55], 'false,false,false': [0.349, 73, 38]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.741, 3, 93], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.217, 172, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.498, 134, 65], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.479, 44, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.587, 149, 75], 'false,false,false,false': [2.261, 35, 18]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.992, 1, 75], 'false,false,true,false': [0.04, 160, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.169, 29, 18]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.711, 197, 93]}]
{'': [nan, 0.2166594835117486], 'false': [0.010525124490720615, -2.410132395166169e-16], 'false,true': [-8.745141363201234e-16, 0.033293697978597984]}
{'': [nan, 0.15742781047419593], 'false': [nan, 0.15742781047419555], 'false,false': [nan, 0.15742781047419593], 'false,false,false': [nan, 0.15742781047419555]}
{'': [nan, 0.1576982994524293], 'false': [nan, 0.15769829945242828], 'false,false': [nan, 0.15769829945242828], 'false,false,false': [0.15626939069641596, 0.16382825674332893]}
{'': [0.15051317199928785, 0.1538067367362009], 'false': [nan, 0.1538067367362009], 'false,false': [nan, 0.1538067367362009], 'false,false,false': [nan, 0.1538067367362009], 'true': [0.03695588936137325, 1.8776926322519426e-16]}
{'': [nan, 0.10384754935337859], 'false': [nan, 0.10384754935337849], 'false,false': [0.09225816951696654, 0.12171988168900429], 'false,false,true': [nan, 0.09225816951696654]}
{'': [nan, 0.10622313206703803], 'false': [nan, 0.10622313206703803], 'false,false': [0.03157470390496916, 0.00027316916046427053], 'false,false,false': [nan, 0.00027316916046427053]}
{'': [0.06149185343489709, 0.08536207294737823], 'false': [nan, 0.08536207294737823], 'false,false': [nan, 0.08536207294737823], 'false,false,false': [nan, 0.08536207294737823], 'true': [nan, 0.06149185343489709]}
{'': [nan, 0.06494780711228101], 'false': [nan, 0.06494780711228101], 'false,false': [nan, 0.06494780711228101], 'false,false,false': [0.057441305370799375, 0.09641278015168069]}
{'': [nan, 0.06292639184137137], 'false': [nan, 0.0629263918413715], 'false,false': [0.0551080189333426, 0.10006287264259808], 'false,false,false': [nan, 0.10006287264259808], 'false,false,true': [0.012952993828691639, 9.881146936457919e-06]}
{'': [nan, 0.04747584906104171], 'false': [nan, 0.04747584906104162], 'false,false': [nan, 0.04747584906104171]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 11.95
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(C, D), tweets(E, D) )
%   | | | then return 0.608362301099843;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return 0.7194734122109543;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7194734122109542;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.7194734122109543;  // std dev = 4.21e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.12544463852839105;  // std dev = 8.02e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.7194734122109543;  // std dev = 2.11e-08, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.12544607753906836;  // std dev = 3.016, 60.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=18 */
%   | | | else return 0.19139963049886352;  // std dev = 2.004, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5425832615441999;  // std dev = 0.150, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else return 0.44425532563517317;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.5553664367462844;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.11231637819360617;  // std dev = 1.03e-07, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6683624590953625;  // std dev = 0.250, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.1427392796671117;  // std dev = 0.165, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.21968409844698708;  // std dev = 1.233, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.1474623478936032;  // std dev = 1.483, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.43127553633392174;  // std dev = 0.085, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.34694224209369323;  // std dev = 0.971, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.39031583729933683;  // std dev = 1.05e-08, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5369431843138726;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.10977403770478313;  // std dev = 0.017, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.44475702894584124;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14513595937208593;  // std dev = 1.251, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.09217651767300128;  // std dev = 1.578, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.33161385797220994;  // std dev = 0.012, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3091069256044537;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3790185672681505;  // std dev = 0.162, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( tweets(A, G), tweets(E, G) )
%   | | | then return -0.10175277258911107;  // std dev = 0.571, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | | else return -0.08662375038446433;  // std dev = 0.501, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09265319535318214;  // std dev = 0.000666, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.09647254758769411;  // std dev = 0.575, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08912883384783961;  // std dev = 1.322, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | | else return 0.3390493442821689;  // std dev = 1.108, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then return 0.2626708670660715;  // std dev = 0.013, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.10188234457021597;  // std dev = 1.064, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.31193011835775886;  // std dev = 0.164, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.24132890868823162;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.32755663827264164;  // std dev = 0.119, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.556502996976758;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, G) )
%   | then return -0.09242472882159922;  // std dev = 0.013, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | else if ( follows(H, A) )
%   | | then return -0.09039522044738776;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.2315097596549024;  // std dev = 0.009, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(E, D), follows(A, E) )
%   | | | then return 0.2214089703874506;  // std dev = 0.033, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.11423366419949792;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.20656346232849562;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.22101489969936966;  // std dev = 0.019, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(F, A) )
%   | then return -0.057509378039870766;  // std dev = 0.119, 139.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=13 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2942547453339319;  // std dev = 0.353, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.10888787098779297;  // std dev = 0.153, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.02863203003714916;  // std dev = 1.160, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | | else return -0.05209231278472809;  // std dev = 1.262, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.18939973692506715;  // std dev = 0.017, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return 0.1733578519212556;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.010089916058287815;  // std dev = 0.918, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07206633060693579;  // std dev = 0.070, 82.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=2 */
%   | | else return -0.026969698110276944;  // std dev = 0.144, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.16478721053621476;  // std dev = 0.999, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.08892503533673997;  // std dev = 0.023, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.021741014268158155;  // std dev = 0.888, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0.060386372823439005;  // std dev = 1.121, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.1765915363660396;  // std dev = 0.036, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.04656396720984692;  // std dev = 0.867, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.15405819910900598;  // std dev = 1.015, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return -0.07436016269133446;  // std dev = 0.012, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.17666140939219166;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07077565334743754;  // std dev = 0.013, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.022237813632496644;  // std dev = 0.433, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.35985438420643023;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.052053106637357814;  // std dev = 1.027, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.13946759855321575;  // std dev = 0.013, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.19823875537613317;  // std dev = 0.018, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1563794935100581;  // std dev = 0.073, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(E, G), follows(A, E) )
%   | | | then return -0.0744772812140924;  // std dev = 1.117, 126.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=2 */
%   | | | else return -0.05388430265177453;  // std dev = 0.995, 50.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=6 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2633703888644838;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10143207629472795;  // std dev = 0.272, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.03285799745320137;  // std dev = 0.416, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.1852868872735251;  // std dev = 0.790, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.707', 'seconds']
Refined model CLL: -0.0998


******************************************
Best model found
******************************************
Results 

CLL : -0.097391 

AUC ROC : 0.993728 

AUC PR : 0.413104 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 11.95 

Total Inference Time : 13.43767237663269 

Total revision time: 30.46174662017822
Best scored revision CLL: -0.0998


Results 

CLL : -0.097391 

AUC ROC : 0.993728 

AUC PR : 0.413104 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 35.62168686294555 

Total Inference Time : 13.43767237663269 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.151
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8155957436101499;  // std dev = 1.957, 94.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=90 */
%   | | else return 0.8581489350995115;  // std dev = 2.38e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return -0.14185106490048807;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19396968616424712;  // std dev = 7.505, 329.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=124 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.12267109667073697;  // std dev = 6.789, 301.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=98 */
%   | | | else return 0.23829508012240025;  // std dev = 3.108, 56.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=26 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6485740050775393;  // std dev = 0.993, 99.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=98 */
%   | else return -0.16448756149819485;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13113297198428236;  // std dev = 3.263, 67.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=26 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05834030060765945;  // std dev = 4.627, 238.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=74 */
%   | | else return 0.07620395323324909;  // std dev = 0.340, 148.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=50 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49027734608660833;  // std dev = 1.491, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16165813414479882;  // std dev = 0.358, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03671213188934606;  // std dev = 4.156, 266.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=90 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02902878709621841;  // std dev = 2.543, 105.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=34 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.01203297170194156;  // std dev = 4.259, 315.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=98 */
%   | | | else return 0.07287378252212369;  // std dev = 2.518, 63.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=26 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.29864870369456425;  // std dev = 2.381, 104.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=98 */
%   | | | else return -0.1367958651724151;  // std dev = 0.007, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03928005756158469;  // std dev = 2.556, 68.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=26 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.009397494310008648;  // std dev = 4.421, 370.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=124 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.654', 'seconds']
Parameter learned model CLL:-0.163267 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.957, 4, 90], 'false,true,false': [2.38e-07, 0, 34], 'false,false': [0.0, 267, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.505, 205, 124]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.789, 203, 98], 'false,false,false,false': [3.108, 30, 26]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.993, 1, 98], 'true,false': [0.0, 180, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.263, 41, 26]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.627, 164, 74], 'false,false,false': [0.34, 98, 50]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.491, 2, 124], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.358, 229, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.156, 176, 90], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.543, 71, 34]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.259, 217, 98], 'false,false,false,false': [2.518, 37, 26]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.381, 6, 98], 'false,false,true,false': [0.007, 213, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.556, 42, 26]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.421, 246, 124]}]
{'': [nan, 0.21537574106713922], 'false': [0.030273437500004108, -6.653021870412923e-17], 'false,true': [0.040742417383432046, 1.6718652606120004e-15]}
{'': [nan, 0.17119447661375237], 'false': [nan, 0.17119447661375656], 'false,false': [nan, 0.17119447661375237], 'false,false,false': [nan, 0.17119447661375656]}
{'': [nan, 0.15791730899419734], 'false': [nan, 0.157917308994198], 'false,false': [nan, 0.157917308994198], 'false,false,false': [0.1531125052089238, 0.17247130701422128]}
{'': [0.15487470969992448, 0.15889406777453388], 'false': [nan, 0.15889406777453388], 'false,false': [nan, 0.15889406777453388], 'false,false,false': [nan, 0.15889406777453388], 'true': [0.009968890299881544, -8.388351741612294e-17]}
{'': [nan, 0.09983904483821661], 'false': [nan, 0.09983904483821676], 'false,false': [0.08993877913878727, 0.11556298538640077], 'false,false,true': [nan, 0.08993877913878727]}
{'': [nan, 0.10393019553969457], 'false': [nan, 0.10393019553969457], 'false,false': [0.017636274267981665, 0.0005585706969331338], 'false,false,false': [nan, 0.0005585706969330369]}
{'': [0.06494870140294774, 0.06158729047817201], 'true': [nan, 0.06494870140294774], 'false': [nan, 0.06158729047817201], 'false,false': [nan, 0.06158729047817201], 'false,false,false': [nan, 0.06158729047817201]}
{'': [nan, 0.0652627517814752], 'false': [nan, 0.0652627517814752], 'false,false': [nan, 0.0652627517814752], 'false,false,false': [0.05757490270197295, 0.10061732696126974]}
{'': [nan, 0.06627546535352535], 'false': [nan, 0.06627546535352602], 'false,false': [0.0596810221034397, 0.09610871235751632], 'false,false,false': [nan, 0.09610871235751632], 'false,false,true': [0.054506968947871354, 2.3787894350609426e-07]}
{'': [nan, 0.05283580659104917], 'false': [nan, 0.05283580659104924], 'false,false': [nan, 0.05283580659104917]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 13.3
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then return 0.8581489350995123;  // std dev = 8.43e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( follows(F, A), follows(A, G) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( follows(A, H) )
%   | | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.14185106490048807;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.7214874412064595;  // std dev = 0.072, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( follows(A, C), tweets(A, E) )
%   | | then return 0.5766162693538115;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.7333981494295687;  // std dev = 0.070, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.11635949819786053;  // std dev = 0.840, 93.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=1 */
%   | | | else return 0.022372997326272664;  // std dev = 2.983, 86.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.07032905615511588;  // std dev = 3.228, 82.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=19 */
%   | | | else return 0.20807564465819267;  // std dev = 2.546, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5616013761563106;  // std dev = 0.108, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return 0.49732749376676294;  // std dev = 0.254, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.09898083636764964;  // std dev = 0.104, 107.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.6984544243596813;  // std dev = 0.219, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12791977986802458;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6407107240403227;  // std dev = 0.998, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return -0.1351684364277923;  // std dev = 0.042, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2627639581341268;  // std dev = 1.168, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.211155301004414;  // std dev = 1.639, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4229497040599733;  // std dev = 0.199, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else return 0.5246956564860579;  // std dev = 0.159, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else return -0.11213124958533507;  // std dev = 0.104, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return 0.42447064282149966;  // std dev = 0.094, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.11211704369185231;  // std dev = 0.860, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.29029537432325025;  // std dev = 0.648, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.10660028359052977;  // std dev = 0.026, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0601070910232311;  // std dev = 1.335, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.19744756625983703;  // std dev = 1.559, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(A, E), tweets(E, F) )
%   | | then return 0.273154624476209;  // std dev = 0.202, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | else return 0.38447073097915374;  // std dev = 0.070, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return -0.09134196903293493;  // std dev = 0.061, 144.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=2 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.40084724016341955;  // std dev = 0.051, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.10728086655303849;  // std dev = 3.33e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.3611526128495399;  // std dev = 0.258, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.0956728682302873;  // std dev = 0.018, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.11757277069181825;  // std dev = 1.386, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.14951204427176584;  // std dev = 1.630, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.24430109643724923;  // std dev = 0.995, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return -0.08158124767342916;  // std dev = 1.061, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return -0.23095832729269405;  // std dev = 1.279, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.26129701573502023;  // std dev = 0.170, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.34724451385415295;  // std dev = 0.274, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.529685703575184;  // std dev = 0.214, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.09903857136629732;  // std dev = 0.508, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.22034383582115508;  // std dev = 0.127, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else return -0.3164985643710411;  // std dev = 0.777, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.3140690445420104;  // std dev = 0.152, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.21444451096679207;  // std dev = 0.151, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.28653015021035616;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.081825273544928;  // std dev = 0.055, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.03369069215975257;  // std dev = 1.425, 51.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
%   | | | else return -0.013807632443491228;  // std dev = 1.717, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.1809442562188568;  // std dev = 0.022, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.030821887140141824;  // std dev = 0.719, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.18549716304938615;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.19368535503333095;  // std dev = 0.052, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(G, A) )
%   | then return -0.04451719100454892;  // std dev = 0.094, 183.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=19 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2239764080674036;  // std dev = 0.796, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return -0.09526046388707561;  // std dev = 0.096, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.027309032237261898;  // std dev = 1.017, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.0958095902931416;  // std dev = 1.291, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.12023559667561662;  // std dev = 1.528, 58.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=55 */
%   | | | else return -0.273857094221147;  // std dev = 1.021, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.19674671030589364;  // std dev = 0.160, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else return -0.07726347073699363;  // std dev = 0.135, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.15801363155985254;  // std dev = 0.115, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.38718314342966237;  // std dev = 0.175, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.0888786633722687;  // std dev = 0.258, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.023669949515931422;  // std dev = 0.279, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.09471761365350717;  // std dev = 1.525, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then if ( follows(A, D), follows(D, C) )
%   | | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | | then return 0.06503332524826295;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.1452832731006609;  // std dev = 0.061, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.14240404079846378;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12831502986885482;  // std dev = 0.705, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.15437912735973522;  // std dev = 0.067, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(F, A) )
%   | then return -0.0400642501200348;  // std dev = 0.084, 186.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=19 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return -0.0013239256938098241;  // std dev = 0.145, 73.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=24 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.043185954876339215;  // std dev = 0.850, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.033222061314013944;  // std dev = 1.345, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.317', 'seconds']
Refined model CLL: -0.099634


******************************************
Best model found
******************************************
Results 

CLL : -0.096501 

AUC ROC : 0.994751 

AUC PR : 0.430064 

Precision : 0.35 

Recall : 1.0 

F1 : 0.518519 

Total Learning Time : 13.3 

Total Inference Time : 16.917569398880005 

Total revision time: 36.26529195404053
Best scored revision CLL: -0.099634


Results 

CLL : -0.096501 

AUC ROC : 0.994751 

AUC PR : 0.430064 

Precision : 0.35 

Recall : 1.0 

F1 : 0.518519 

Total Learning Time : 41.42523219680786 

Total Inference Time : 16.917569398880005 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.294
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8245354897213594;  // std dev = 1.966, 119.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=115 */
%   | | else return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.14185106490048782;  // std dev = 6.18e-09, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16273926250622525;  // std dev = 8.645, 458.000 (wgt'ed) examples reached here.  /* #neg=302 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1350714987382396;  // std dev = 7.714, 382.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=128 */
%   | | | else return 0.13310365380624184;  // std dev = 3.628, 83.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.645972097140811;  // std dev = 1.407, 130.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=128 */
%   | else return -0.16191604725445077;  // std dev = 2.19e-07, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12760165254483974;  // std dev = 3.517, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.062020231500931444;  // std dev = 5.371, 303.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=97 */
%   | | else return 0.07911524079344863;  // std dev = 0.345, 177.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5115817619030559;  // std dev = 0.597, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15786733650951001;  // std dev = 0.293, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0418905618465925;  // std dev = 4.753, 324.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.023237174543663707;  // std dev = 2.977, 124.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.019054732911173503;  // std dev = 4.817, 389.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=128 */
%   | | | else return 0.02940877121799926;  // std dev = 2.863, 90.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.32161738969105175;  // std dev = 1.970, 132.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=128 */
%   | | | else return -0.13690204652653737;  // std dev = 0.001, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02959091685634757;  // std dev = 2.867, 86.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.012905570060865144;  // std dev = 4.893, 461.000 (wgt'ed) examples reached here.  /* #neg=305 #pos=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.745', 'seconds']
Parameter learned model CLL:-0.158523 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.966, 4, 115], 'false,true,false': [2.46e-07, 0, 41], 'false,false': [6.18e-09, 303, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.645, 302, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.714, 254, 128], 'false,false,false,false': [3.628, 55, 28]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.407, 2, 128], 'true,false': [2.19e-07, 257, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.517, 51, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.371, 206, 97], 'false,false,false': [0.345, 118, 59]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.597, 0, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.293, 301, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.753, 209, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.977, 83, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.817, 261, 128], 'false,false,false,false': [2.863, 62, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.97, 4, 128], 'false,false,true,false': [0.001, 235, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.867, 58, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.893, 305, 156]}]
{'': [nan, 0.22340916830325586], 'false': [0.024375000000006076, 3.8106664871622534e-17], 'false,true': [0.03248358166796465, 1.4730764034050857e-15]}
{'': [nan, 0.16316871401716065], 'false': [nan, 0.16316871401716462], 'false,false': [nan, 0.16316871401716065], 'false,false,false': [nan, 0.16316871401716462]}
{'': [nan, 0.15628992701230746], 'false': [nan, 0.156289927012304], 'false,false': [nan, 0.156289927012304], 'false,false,false': [0.15578706198823672, 0.15860113663731956]}
{'': [0.15071034756699392, 0.15659700787454037], 'false': [nan, 0.15659700787454037], 'false,false': [nan, 0.15659700787454037], 'false,false,false': [nan, 0.15659700787454037], 'true': [0.01521746240280263, 1.866211465517773e-16]}
{'': [nan, 0.10408664715991425], 'false': [nan, 0.1040866471599142], 'false,false': [0.09521653606105841, 0.11908659854914076], 'false,false,true': [nan, 0.09521653606105841]}
{'': [nan, 0.10172957031963697], 'false': [nan, 0.10172957031963697], 'false,false': [0.0022865776677009945, 0.0002850090262396848], 'false,false,false': [nan, 0.00028500902623961104]}
{'': [0.06972589643939481, 0.07145273387806009], 'false': [nan, 0.07145273387806009], 'false,false': [nan, 0.07145273387806009], 'false,false,false': [nan, 0.07145273387806009], 'true': [nan, 0.06972589643939481]}
{'': [nan, 0.06557725139722835], 'false': [nan, 0.06557725139722835], 'false,false': [nan, 0.06557725139722835], 'false,false,false': [0.05965227506452307, 0.09109925276962658]}
{'': [nan, 0.06593974446451449], 'false': [nan, 0.06593974446451444], 'false,false': [0.05899366818315488, 0.0955797091896521], 'false,false,false': [nan, 0.0955797091896521], 'false,false,true': [0.029397872505499488, 6.513172692432411e-09]}
{'': [nan, 0.05192924376680991], 'false': [nan, 0.051929243766810414], 'false,false': [nan, 0.05192924376680991]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 19.347
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.8354216623722391;  // std dev = 0.989, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6581489350995123;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.8295775065280833;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.14185106490048766;  // std dev = 1.91e-07, 332.000 (wgt'ed) examples reached here.  /* #neg=332 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, C) )
%   | | then return 0.6878342294853063;  // std dev = 0.185, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0.7214901143411453;  // std dev = 0.015, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.6569734122109543;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.23197503755348914;  // std dev = 1.020, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.7324712057713914;  // std dev = 0.066, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.12544463852839186;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.638342462974988;  // std dev = 0.312, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1311000989979636;  // std dev = 3.099, 63.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=19 */
%   | | | else return 0.17027667923037987;  // std dev = 3.122, 60.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5631344095671778;  // std dev = 0.058, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return -0.10590196646565235;  // std dev = 0.786, 123.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=1 */
%   | | | else return -0.057296966751162824;  // std dev = 0.797, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.5684727140708753;  // std dev = 0.084, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.11231637819360626;  // std dev = 4.71e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.6396581459580181;  // std dev = 1.049, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.14054738920478277;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.04810125849362832;  // std dev = 2.711, 56.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   | | | else return 0.1531682372594512;  // std dev = 1.990, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.39321103429765675;  // std dev = 0.181, 95.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=91 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.29266340880150854;  // std dev = 1.257, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6078079889913461;  // std dev = 0.325, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.113938893556888;  // std dev = 0.326, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then return 0.43088120704875416;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.09754787371542088;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(I, A) )
%   | | then return -0.07940625366100053;  // std dev = 0.124, 36.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06820607283397777;  // std dev = 1.140, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.15162883144423933;  // std dev = 1.686, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.3104083314558223;  // std dev = 0.145, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return 0.33152364582897037;  // std dev = 0.112, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.08417293557287023;  // std dev = 0.091, 131.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.3011731942629828;  // std dev = 0.970, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.09172959665277527;  // std dev = 0.004, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.45109354688460523;  // std dev = 0.360, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.12348826668378537;  // std dev = 0.108, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10548075947125814;  // std dev = 1.197, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | | else return 0.07575134344908475;  // std dev = 1.895, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.26678304687085364;  // std dev = 0.840, 89.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=88 */
%   | | | else return 0.3184756857572076;  // std dev = 0.973, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return -0.1144990671336912;  // std dev = 0.828, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then return 0.2788256937491518;  // std dev = 0.155, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.429030853346713;  // std dev = 0.109, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5637894141159734;  // std dev = 0.144, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09863281943488462;  // std dev = 0.462, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return 0.21555278620308746;  // std dev = 0.039, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(A, C), tweets(A, E) )
%   | | then return -0.03278570646260964;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.21709995616680972;  // std dev = 0.083, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then if ( tweets(A, H), follows(F, G) )
%   | | | then return 0.17814458917008902;  // std dev = 0.516, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.3613765160214324;  // std dev = 0.279, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.03378901119380018;  // std dev = 0.765, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(I, A) )
%   | | then return -0.05594259413026208;  // std dev = 0.089, 234.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=17 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return -0.01935517290908735;  // std dev = 1.542, 50.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=15 */
%   | | | else return 0.031226715397323274;  // std dev = 2.161, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(E, A), follows(E, C) )
%   | | | then return 0.12234898057564147;  // std dev = 1.374, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | | else return 0.17929723093918093;  // std dev = 0.005, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.21414284524346722;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1794850632060361;  // std dev = 0.076, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.23380895805896929;  // std dev = 0.167, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.07440454778932602;  // std dev = 0.022, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.09930136296041016;  // std dev = 0.318, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.0015096342931074076;  // std dev = 1.867, 108.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=29 */
%   | | | else return -0.030241961855637812;  // std dev = 1.704, 48.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.17429422669767017;  // std dev = 0.478, 89.000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | | else return -0.13918345301434218;  // std dev = 0.710, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2724802174962401;  // std dev = 0.060, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else return -0.07833990464824142;  // std dev = 0.283, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.15897660510649456;  // std dev = 0.063, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07147782914553087;  // std dev = 0.003, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.003957803048058826;  // std dev = 0.418, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.049393628784369197;  // std dev = 0.800, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.05860515917730605;  // std dev = 1.415, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, C) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(A, D), follows(A, E) )
%   | | | then return 0.1445264297303371;  // std dev = 0.010, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.03716444746521739;  // std dev = 0.940, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.13184051873962238;  // std dev = 0.008, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.1400826785567876;  // std dev = 0.082, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(F, A) )
%   | then return -0.03927339523737935;  // std dev = 0.082, 238.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=23 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.1017316454317983;  // std dev = 1.346, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.08629032778340497;  // std dev = 0.037, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03579328798105395;  // std dev = 1.094, 36.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=14 */
%   | | | else return 0.020973906950864454;  // std dev = 1.671, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.022', 'seconds']
Refined model CLL: -0.101063


******************************************
Best model found
******************************************
Results 

CLL : -0.097447 

AUC ROC : 0.993269 

AUC PR : 0.379973 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 19.347 

Total Inference Time : 12.10074758529663 

Total revision time: 38.60850926971436
Best scored revision CLL: -0.101063


Results 

CLL : -0.097447 

AUC ROC : 0.993269 

AUC PR : 0.379973 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 43.768449512481695 

Total Inference Time : 12.10074758529663 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.155
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8055173561521439;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16060063770996777;  // std dev = 3.483, 74.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.18025757555009958;  // std dev = 3.214, 62.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=24 */
%   | | | else return 0.06618218309660748;  // std dev = 0.729, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6543432824996545;  // std dev = 0.027, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.16784289589539364;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.6830231093584878;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06669551142562151;  // std dev = 2.226, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
%   | | else return 0.021948205759326652;  // std dev = 0.312, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4454121847364918;  // std dev = 0.982, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1662573044643816;  // std dev = 0.241, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03588259733765768;  // std dev = 1.878, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09069691440479187;  // std dev = 0.995, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.017732168458175844;  // std dev = 2.033, 77.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=24 */
%   | | | else return -0.11441504705361641;  // std dev = 0.572, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.31803959660634346;  // std dev = 0.976, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return -0.14038131653590735;  // std dev = 0.003, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.060255783686763084;  // std dev = 0.560, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0032322653695703992;  // std dev = 1.785, 78.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=25 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.631', 'seconds']
Parameter learned model CLL:-0.155804 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.973, 1, 18], 'false,true,false': [0.0, 0, 7], 'false,false': [7.9e-09, 56, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.483, 49, 25]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.214, 38, 24], 'false,false,false,false': [0.729, 3, 1]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.027, 0, 24], 'true,false': [0.0, 53, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 1]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.226, 33, 17], 'false,false,false': [0.312, 19, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.982, 1, 25], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.241, 41, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.878, 31, 18], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.995, 9, 7]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.033, 53, 24], 'false,false,false,false': [0.572, 4, 1]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.976, 1, 24], 'false,false,true,false': [0.003, 38, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.56, 3, 1]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.785, 53, 25]}]
{'': [nan, 0.2119274241522914], 'false': [0.03698224852071082, 5.947623346206196e-17], 'false,true': [0.04986149584487499, -2.5376526277146434e-16]}
{'': [nan, 0.16398080217875874], 'false': [nan, 0.16398080217875882], 'false,false': [nan, 0.16398080217875874], 'false,false,false': [nan, 0.16398080217875882]}
{'': [nan, 0.16532428712112407], 'false': [nan, 0.1653242871211241], 'false,false': [nan, 0.1653242871211241], 'false,false,false': [0.16663928084270505, 0.13271736776795318]}
{'': [0.14503523062435694, 0.0], 'true': [2.9469685731993895e-05, -6.28428127146315e-17], 'false': [nan, 0.0], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}
{'': [nan, 0.09886242006156791], 'false': [nan, 0.0988624200615679], 'false,false': [0.09907805409844757, 0.0971628890928729], 'false,false,true': [nan, 0.09907805409844757]}
{'': [nan, 0.10410137945693264], 'false': [nan, 0.10410137945693264], 'false,false': [0.03707891408708745, 0.0014149431372170228], 'false,false,false': [nan, 0.0014149431372170174]}
{'': [0.07197183019221876, 0.06184722761952789], 'true': [nan, 0.07197183019221876], 'false': [nan, 0.06184722761952789], 'false,false': [nan, 0.06184722761952789], 'false,false,false': [nan, 0.06184722761952789]}
{'': [nan, 0.05538167914446755], 'false': [nan, 0.05538167914446755], 'false,false': [nan, 0.05538167914446755], 'false,false,false': [0.05366954214665022, 0.0653505124998903]}
{'': [nan, 0.06678026724234269], 'false': [nan, 0.06678026724234269], 'false,false': [0.065427558039275, 0.07834328565417378], 'false,false,false': [nan, 0.07834328565417378], 'false,false,true': [0.03812002761685584, 2.8714931827059816e-07]}
{'': [nan, 0.04084183531867185], 'false': [nan, 0.04084183531867187], 'false,false': [nan, 0.04084183531867185]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 5.916
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.5248156017661788;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.7251239146986216;  // std dev = 0.059, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(A, E), tweets(A, G) )
%   | | | then return -0.08703927258569386;  // std dev = 0.825, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, E), tweets(E, H) )
%   | | | then return 0.04353897161947776;  // std dev = 1.309, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.7816289395752953;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.4378340619645058;  // std dev = 0.976, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5729782642234155;  // std dev = 0.114, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7171270623708126;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.116307935667584;  // std dev = 0.035, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return 0.23155324401316724;  // std dev = 0.958, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.03433562727340136;  // std dev = 0.656, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.30131085935262425;  // std dev = 0.882, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4264066757533972;  // std dev = 0.096, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.5613753251254715;  // std dev = 0.064, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.12787681038284804;  // std dev = 0.303, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return 0.04764326568494105;  // std dev = 0.516, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(C, D), follows(A, C) )
%   | | then return 0.3201326662204003;  // std dev = 0.054, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.36995392086306156;  // std dev = 0.138, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.037881827489916454;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.4140404982090711;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09731201389858189;  // std dev = 0.039, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.28915398471819165;  // std dev = 0.476, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0892791774180501;  // std dev = 0.472, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.08198616172527327;  // std dev = 0.994, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.24717184656587513;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.39863868314926704;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.33980766973565385;  // std dev = 0.049, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return 0.33606716448908147;  // std dev = 0.059, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.42754134401803706;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then return -0.08776624910543394;  // std dev = 0.035, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( tweets(A, I) )
%   | | then return -0.13026719031514486;  // std dev = 0.050, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.2476497387025213;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.1958291555893856;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(C, D), follows(A, C) )
%   | | then return 0.22287037887796451;  // std dev = 0.039, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.23045327462330592;  // std dev = 0.080, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.05574039026221592;  // std dev = 0.843, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( follows(F, A), follows(E, A) )
%   | | then if ( tweets(E, G), tweets(F, G) )
%   | | | then return -0.06131507868939521;  // std dev = 0.339, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | | else return -0.07884435150491544;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0.264293106652326;  // std dev = 0.049, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1147814337900106;  // std dev = 0.161, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( tweets(A, H) )
%   | | then return 0.053677390067037756;  // std dev = 0.363, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.2064544459300473;  // std dev = 0.431, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.1827344062030008;  // std dev = 0.033, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.2833694922301007;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.24712076477492542;  // std dev = 0.120, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.07722480787289263;  // std dev = 0.025, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.11386898760020439;  // std dev = 0.036, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(I, A), follows(H, A) )
%   | | | then return -0.07189929464305879;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0032011809406133213;  // std dev = 0.383, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.09311343635997862;  // std dev = 0.531, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.15717499908951346;  // std dev = 0.098, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.013077341379957391;  // std dev = 0.693, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.21747156605005938;  // std dev = 0.058, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2723983333622024;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A) )
%   | | then return -0.0713718514067287;  // std dev = 0.026, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.13407389210440054;  // std dev = 0.039, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.015445953333964611;  // std dev = 0.250, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then return 0.1268731274426005;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.17075816793242218;  // std dev = 0.085, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.14762459876260167;  // std dev = 0.739, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.1919111322430779;  // std dev = 0.061, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.0692968151218526;  // std dev = 0.043, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.1827433129791809;  // std dev = 0.040, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11371371995809683;  // std dev = 0.124, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.08421278391007503;  // std dev = 0.477, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.203', 'seconds']
Refined model CLL: -0.099137


******************************************
Best model found
******************************************
Results 

CLL : -0.113695 

AUC ROC : 0.995571 

AUC PR : 0.437807 

Precision : 0.334047 

Recall : 1.0 

F1 : 0.500803 

Total Learning Time : 5.916 

Total Inference Time : 4.015511989593506 

Total revision time: 12.478217025756837
Best scored revision CLL: -0.099137


Results 

CLL : -0.113695 

AUC ROC : 0.995571 

AUC PR : 0.437807 

Precision : 0.334047 

Recall : 1.0 

F1 : 0.500803 

Total Learning Time : 17.63815726852417 

Total Inference Time : 4.015511989593506 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.279
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8303711573217337;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14185106490048763;  // std dev = 8.12e-09, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13653638636323612;  // std dev = 4.991, 162.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=50 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.10813088037201352;  // std dev = 4.810, 157.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=47 */
%   | | | else return 0.21802912507718478;  // std dev = 1.097, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6509479556206967;  // std dev = 0.988, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else return -0.15483343524919316;  // std dev = 6.32e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07589218447009001;  // std dev = 1.187, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.070899085323583;  // std dev = 3.123, 98.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=32 */
%   | | else return 0.10892809507942121;  // std dev = 0.329, 48.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4445412944084205;  // std dev = 1.723, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14934555900132246;  // std dev = 0.134, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03646925093771639;  // std dev = 2.611, 111.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=35 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09940078688130659;  // std dev = 1.450, 33.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.03651667254690078;  // std dev = 2.895, 137.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=47 */
%   | | | else return 0.15358116604750827;  // std dev = 0.817, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.34406849523382466;  // std dev = 0.985, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return -0.13767256780257878;  // std dev = 0.050, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12256776735569379;  // std dev = 0.800, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.007214232969567691;  // std dev = 2.658, 149.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=50 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.546', 'seconds']
Parameter learned model CLL:-0.156491 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.986, 1, 35], 'false,true,false': [0.0, 0, 15], 'false,false': [8.12e-09, 107, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.991, 112, 50]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.81, 110, 47], 'false,false,false,false': [1.097, 4, 3]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.988, 1, 47], 'true,false': [6.32e-08, 93, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.187, 7, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.123, 66, 32], 'false,false,false': [0.329, 30, 18]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.723, 3, 50], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.134, 94, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.611, 76, 35], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.45, 18, 15]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.895, 90, 47], 'false,false,false,false': [0.817, 3, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.985, 1, 47], 'false,false,true,false': [0.05, 96, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.8, 3, 3]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.658, 99, 50]}]
{'': [nan, 0.21631148854350335], 'false': [0.019223375624760057, 6.640586315514955e-17], 'false,true': [0.027006172839507927, -2.3684757858670006e-16]}
{'': [nan, 0.15374230097293937], 'false': [nan, 0.15374230097293906], 'false,false': [nan, 0.15374230097293937], 'false,false,false': [nan, 0.15374230097293906]}
{'': [nan, 0.14893670153022986], 'false': [nan, 0.14893670153022992], 'false,false': [nan, 0.14893670153022992], 'false,false,false': [0.14738995632820642, 0.17206587093587805]}
{'': [0.15270754764979633, 0.1408120327291717], 'true': [0.02032750322045196, 4.297637514678025e-17], 'false': [nan, 0.1408120327291717], 'false,false': [nan, 0.1408120327291717], 'false,false,false': [nan, 0.1408120327291717]}
{'': [nan, 0.1026578661019398], 'false': [nan, 0.10265786610193979], 'false,false': [0.0995029004963904, 0.10812851347946893], 'false,false,true': [nan, 0.0995029004963904]}
{'': [nan, 0.10163565595295965], 'false': [nan, 0.10163565595295965], 'false,false': [0.05602075242091267, 0.0001901767850119177], 'false,false,false': [nan, 0.00019017678501188464]}
{'': [0.06140090052689271, 0.06368324478966893], 'false': [nan, 0.06368324478966893], 'false,false': [nan, 0.06368324478966893], 'false,false,false': [nan, 0.06368324478966893], 'true': [nan, 0.06140090052689271]}
{'': [nan, 0.06384071001380597], 'false': [nan, 0.06384071001380597], 'false,false': [nan, 0.06384071001380597], 'false,false,false': [0.06118389723549838, 0.11137550316641065]}
{'': [nan, 0.060636313838030274], 'false': [nan, 0.06063631383803026], 'false,false': [0.05832318056932278, 0.10661668498242566], 'false,false,false': [nan, 0.10661668498242566], 'false,false,true': [0.020202118952769688, 2.5560772451006797e-05]}
{'': [nan, 0.04742558882984669], 'false': [nan, 0.0474255888298467], 'false,false': [nan, 0.04742558882984669]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 9.061
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.14185106490048763;  // std dev = 8.30e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.6794734122109545;  // std dev = 0.196, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( follows(G, A), follows(F, A) )
%   | | then return -0.10828085774444701;  // std dev = 0.123, 52.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=1 */
%   | | else if ( follows(H, A), follows(H, F) )
%   | | | then return 0.029781927553417634;  // std dev = 1.608, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.11494029968068684;  // std dev = 1.928, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109543;  // std dev = 3.65e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1254446385283914;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.5713077628773408;  // std dev = 0.082, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, E), follows(C, E) )
%   | | then return 0.5578299979129013;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.22860259985726286;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7464906517302696;  // std dev = 0.077, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.11737670008395411;  // std dev = 0.070, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6395673735565401;  // std dev = 0.154, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12809057150656805;  // std dev = 0.041, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.139495976888764;  // std dev = 0.681, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.3049853811438254;  // std dev = 0.914, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4340823272741613;  // std dev = 0.134, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.553979405231618;  // std dev = 0.060, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.47062395824157005;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return -0.11289905940843906;  // std dev = 0.134, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4233759082935038;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.10113538133843068;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.3168330560137585;  // std dev = 0.869, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.38755871335337233;  // std dev = 0.193, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.07468889166370118;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.0977158386261089;  // std dev = 0.073, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.34852064539811894;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.414066531533995;  // std dev = 0.175, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11044502404279104;  // std dev = 0.067, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.222813512205635;  // std dev = 0.225, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.25967749678167673;  // std dev = 0.051, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.024062212480654654;  // std dev = 1.179, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( tweets(A, G), tweets(D, H) )
%   | | | then return 0.39803002029130097;  // std dev = 0.061, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3106052131538907;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.3572413243954029;  // std dev = 0.109, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.27245432865046715;  // std dev = 0.099, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.31517286149671575;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09592869771394527;  // std dev = 0.228, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.21296206642606272;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.25322306292105595;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.25952107298384;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.2564362963753117;  // std dev = 0.051, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.3017978367573773;  // std dev = 0.068, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08729675844016185;  // std dev = 0.413, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.011815909118158585;  // std dev = 0.440, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.035371784386336556;  // std dev = 0.769, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.18410290703341506;  // std dev = 0.015, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0.21287458830827957;  // std dev = 0.033, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( tweets(A, F), follows(A, E) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return -0.06094489754086985;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | | | else return -0.0021460434230413743;  // std dev = 0.632, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else if ( follows(A, H), follows(H, E) )
%   | | | then return -0.10964020860822957;  // std dev = 0.766, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return -0.05887516420018216;  // std dev = 0.260, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.20518302698391028;  // std dev = 0.072, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08925265184894685;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.027778558491143777;  // std dev = 0.206, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.15823085004495868;  // std dev = 0.067, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.11696184188064142;  // std dev = 1.092, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1826990976552446;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.23746731595446405;  // std dev = 0.181, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(G, A) )
%   | | then return -0.07040289773001336;  // std dev = 0.057, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.08321461004210498;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.14751102791619086;  // std dev = 0.037, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.17481996698147861;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.06750738429386094;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.1341375649969794;  // std dev = 0.019, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1080085058278081;  // std dev = 0.875, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(C, A) )
%   | | then return 0.1487506873061525;  // std dev = 0.046, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.21666888714292648;  // std dev = 0.067, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.15402426750524698;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.2064036644211127;  // std dev = 0.053, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.06748089572986858;  // std dev = 0.056, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.014412698664982538;  // std dev = 0.327, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return -0.037484161734245625;  // std dev = 0.834, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.529', 'seconds']
Refined model CLL: -0.095058


******************************************
Best model found
******************************************
Results 

CLL : -0.096768 

AUC ROC : 0.995512 

AUC PR : 0.488935 

Precision : 0.334101 

Recall : 0.929487 

F1 : 0.491525 

Total Learning Time : 9.061 

Total Inference Time : 5.559016466140747 

Total revision time: 17.954720106124878
Best scored revision CLL: -0.095058


Results 

CLL : -0.096768 

AUC ROC : 0.995512 

AUC PR : 0.488935 

Precision : 0.334101 

Recall : 0.929487 

F1 : 0.491525 

Total Learning Time : 23.11466034889221 

Total Inference Time : 5.559016466140747 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.678
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8230612158012668;  // std dev = 1.389, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1418510649004879;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17248600556046234;  // std dev = 5.944, 213.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=75 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.15414226539601975;  // std dev = 5.648, 196.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=71 */
%   | | | else return 0.1332278504945545;  // std dev = 1.366, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.601521333664368;  // std dev = 1.946, 75.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=71 */
%   | else return -0.16721515340009246;  // std dev = 0.184, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1369245487249752;  // std dev = 1.316, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06257825271499644;  // std dev = 3.879, 162.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=51 */
%   | | else return 0.1104608781924635;  // std dev = 0.331, 62.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=24 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.44587172214194876;  // std dev = 1.973, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15687031360939907;  // std dev = 0.151, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06637941100105677;  // std dev = 3.108, 144.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=55 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06214474870367431;  // std dev = 1.853, 48.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=20 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.02126754802851314;  // std dev = 3.618, 215.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=71 */
%   | | | else return 0.00756371244709957;  // std dev = 1.194, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3475778561421488;  // std dev = 0.990, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | | | else return -0.14461642099223582;  // std dev = 0.030, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.021009523264508605;  // std dev = 1.148, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0048824479361846;  // std dev = 3.284, 222.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=75 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.574', 'seconds']
Parameter learned model CLL:-0.158893 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.389, 2, 55], 'false,true,false': [0.0, 0, 20], 'false,false': [0.0, 133, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.944, 138, 75]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.648, 125, 71], 'false,false,false,false': [1.366, 8, 4]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.946, 4, 71], 'true,false': [0.184, 137, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.316, 7, 4]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.879, 111, 51], 'false,false,false': [0.331, 38, 24]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.973, 4, 75], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.151, 157, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.108, 89, 55], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.853, 28, 20]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.618, 144, 71], 'false,false,false,false': [1.194, 8, 4]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.99, 1, 71], 'false,false,true,false': [0.03, 152, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.148, 12, 4]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.284, 147, 75]}]
{'': [nan, 0.22959183673469388], 'false': [0.025299375948725576, -5.0085249231210067e-17], 'false,true': [0.03385657125269298, -8.881784197001253e-17]}
{'': [nan, 0.1658905627832429], 'false': [nan, 0.16589056278324266], 'false,false': [nan, 0.1658905627832429], 'false,false,false': [nan, 0.16589056278324266]}
{'': [nan, 0.16237706498141297], 'false': [nan, 0.16237706498141247], 'false,false': [nan, 0.16237706498141247], 'false,false,false': [0.16277203527391804, 0.15551370613748716]}
{'': [0.1531204428563418, 0.15741171523353414], 'false': [nan, 0.15741171523353414], 'false,false': [nan, 0.15741171523353414], 'false,false,false': [nan, 0.15741171523353414], 'true': [0.05047619050847862, 0.0002480046794142803]}
{'': [nan, 0.0978932212827688], 'false': [nan, 0.09789322128276826], 'false,false': [0.09288207659766286, 0.10932871086303975], 'false,false,true': [nan, 0.09288207659766286]}
{'': [nan, 0.09749997616824717], 'false': [nan, 0.09749997616824717], 'false,false': [0.04929208866289782, 0.00014499495697518647], 'false,false,false': [nan, 0.00014499495697523174]}
{'': [0.06707775557022697, 0.07153781789427034], 'false': [nan, 0.07153781789427034], 'false,false': [nan, 0.07153781789427034], 'false,false,false': [nan, 0.07153781789427034], 'true': [nan, 0.06707775557022697]}
{'': [nan, 0.06397353552332495], 'false': [nan, 0.06397353552332495], 'false,false': [nan, 0.06397353552332495], 'false,false,false': [0.06089948983236839, 0.1188723198714363]}
{'': [nan, 0.05897081402618607], 'false': [nan, 0.058970814026186015], 'false,false': [0.05722123827226167, 0.08234762822001943], 'false,false,false': [nan, 0.08234762822001943], 'false,false,true': [0.01362206006373443, 5.735653187712385e-06]}
{'': [nan, 0.04857605157659748], 'false': [nan, 0.048576051576597515], 'false,false': [nan, 0.04857605157659748]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 9.85
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, A) )
%   | | | then return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.63592671287729;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.14185106490048802;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7212483560478479;  // std dev = 0.059, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then return 0.7535523338793028;  // std dev = 0.038, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.24077273825367218;  // std dev = 1.001, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.6194734122109542;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.12544463852839105;  // std dev = 8.16e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.008904217736757479;  // std dev = 1.569, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   | | | else return 0.18584095911242046;  // std dev = 1.777, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.5562452658920706;  // std dev = 0.053, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( tweets(C, E), follows(A, C) )
%   | | then return 0.35492809881360626;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5729293822192897;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.5874554475005938;  // std dev = 0.095, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.11231637819360618;  // std dev = 9.31e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.639379903952975;  // std dev = 0.093, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.05260082367408812;  // std dev = 1.471, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.23600396263945575;  // std dev = 1.662, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3930748640259891;  // std dev = 0.991, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.44597961235911276;  // std dev = 0.120, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.48552484401256707;  // std dev = 0.104, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6579702725976502;  // std dev = 0.104, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.11209320646553904;  // std dev = 0.512, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.41686833883038743;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32896495183937224;  // std dev = 0.090, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.3489980552518115;  // std dev = 0.087, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.0356769271559374;  // std dev = 0.870, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.33067517610183106;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09187441198942368;  // std dev = 0.002, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.012043676549035535;  // std dev = 1.207, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | | else return 0.09629369316123057;  // std dev = 1.336, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E), follows(A, D) )
%   | | | then return 0.1819601685793954;  // std dev = 1.361, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return 0.26181671230730275;  // std dev = 0.053, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.2658560663520557;  // std dev = 0.095, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.33947608738947127;  // std dev = 0.132, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.5385457467471879;  // std dev = 0.048, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4555365364192215;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08815854580345577;  // std dev = 0.167, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2273788437337842;  // std dev = 0.025, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( follows(D, A), follows(A, E) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.04595452616109926;  // std dev = 0.915, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.07786333635105944;  // std dev = 1.67e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( follows(E, A), tweets(D, G) )
%   | | | then return -0.01589181165147612;  // std dev = 0.769, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
%   | | | else return -0.04326679807201683;  // std dev = 0.259, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.30538715507069764;  // std dev = 0.283, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10270195377618867;  // std dev = 0.110, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07579566438549208;  // std dev = 0.559, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.1915823337340614;  // std dev = 0.596, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.18908643344418105;  // std dev = 0.065, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.03871253029697312;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, E) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.07304996246390655;  // std dev = 1.353, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.071699789317365;  // std dev = 0.314, 103.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=1 */
%   | | else if ( follows(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.3043458010475316;  // std dev = 0.170, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.12358650451418789;  // std dev = 0.287, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return -0.20594048421148098;  // std dev = 0.601, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.16891985271793103;  // std dev = 0.144, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.24637518644073014;  // std dev = 0.130, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2520428113553132;  // std dev = 0.075, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return -0.0717584032129761;  // std dev = 0.110, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.10772120657624906;  // std dev = 0.044, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.17422592062425324;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return -0.03340683041442065;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.05897346133976841;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1427755615872897;  // std dev = 0.079, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, D), follows(A, E) )
%   | | | then return -0.0707231250445399;  // std dev = 0.732, 62.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=1 */
%   | | | else return -0.059118241169121746;  // std dev = 0.013, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, D), tweets(D, F) )
%   | | | then return 0.0055275012249526275;  // std dev = 0.679, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | | else return -0.06454048158484182;  // std dev = 0.008, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.1776350418002308;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.005538563378822847;  // std dev = 0.567, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return -0.02235194298466266;  // std dev = 0.720, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.743', 'seconds']
Refined model CLL: -0.099321


******************************************
Best model found
******************************************
Results 

CLL : -0.1009 

AUC ROC : 0.993991 

AUC PR : 0.330801 

Precision : 0.334101 

Recall : 0.929487 

F1 : 0.491525 

Total Learning Time : 9.85 

Total Inference Time : 8.562816143035889 

Total revision time: 22.773951890945433
Best scored revision CLL: -0.099321


Results 

CLL : -0.1009 

AUC ROC : 0.993991 

AUC PR : 0.330801 

Precision : 0.334101 

Recall : 0.929487 

F1 : 0.491525 

Total Learning Time : 27.933892133712767 

Total Inference Time : 8.562816143035889 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.686
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8081489350995124;  // std dev = 1.949, 80.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=76 */
%   | | else return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.14185106490048832;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15495166255409276;  // std dev = 6.993, 303.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=100 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.14478152396933258;  // std dev = 6.556, 270.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=93 */
%   | | | else return 0.136968406468306;  // std dev = 1.817, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6635460637508652;  // std dev = 0.047, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   | else return -0.1621770884865261;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1803543853665346;  // std dev = 1.683, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06973351002834255;  // std dev = 4.491, 207.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=69 */
%   | | else return 0.0622866093158499;  // std dev = 0.323, 96.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=31 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4760204417989038;  // std dev = 1.445, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15100246437111237;  // std dev = 0.114, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0439349866914842;  // std dev = 3.750, 216.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=76 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0650080456758399;  // std dev = 1.974, 58.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=24 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.01673066643287713;  // std dev = 4.141, 287.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=93 */
%   | | | else return -0.02521295382414974;  // std dev = 1.540, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3449294194318784;  // std dev = 1.007, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   | | | else return -0.13930041894616987;  // std dev = 0.010, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1570201230197801;  // std dev = 1.248, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0026475668306529068;  // std dev = 3.835, 297.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=100 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.608', 'seconds']
Parameter learned model CLL:-0.156214 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.949, 4, 76], 'false,true,false': [1.03e-07, 0, 24], 'false,false': [0.0, 183, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.993, 203, 100]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.556, 177, 93], 'false,false,false,false': [1.817, 14, 7]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [0.047, 0, 93], 'true,false': [0.0, 172, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.683, 10, 7]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.491, 138, 69], 'false,false,false': [0.323, 65, 31]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.445, 2, 100], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.114, 218, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.75, 140, 76], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.974, 34, 24]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.141, 194, 93], 'false,false,false,false': [1.54, 23, 7]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.007, 1, 93], 'false,false,true,false': [0.01, 177, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.248, 7, 7]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.835, 197, 100]}]
{'': [nan, 0.2270271582755668], 'false': [0.036982248520711906, -2.0627094446587609e-16], 'false,true': [0.04749999999999934, 4.440892098500626e-16]}
{'': [nan, 0.16137802550989364], 'false': [nan, 0.1613780255098931], 'false,false': [nan, 0.16137802550989364], 'false,false,false': [nan, 0.1613780255098931]}
{'': [nan, 0.15906909543817538], 'false': [nan, 0.1590690954381753], 'false,false': [nan, 0.1590690954381753], 'false,false,false': [0.1592044135247523, 0.15727265195802995]}
{'': [0.1553145581177949, 0.16657654055949517], 'false': [nan, 0.16657654055949517], 'false,false': [nan, 0.16657654055949517], 'false,false,false': [nan, 0.16657654055949517], 'true': [2.4042705016500483e-05, -1.4458718460234598e-16]}
{'': [nan, 0.09965111490849222], 'false': [nan, 0.09965111490849234], 'false,false': [0.09741526805880615, 0.10443427367035218], 'false,false,true': [nan, 0.09741526805880615]}
{'': [nan, 0.0919417558741057], 'false': [nan, 0.0919417558741057], 'false,false': [0.02047951974492431, 5.919018069290304e-05], 'false,false,false': [nan, 5.919018069282155e-05]}
{'': [0.06508810843167562, 0.06721408047412582], 'false': [nan, 0.06721408047412582], 'false,false': [nan, 0.06721408047412582], 'false,false,false': [nan, 0.06721408047412582], 'true': [nan, 0.06508810843167562]}
{'': [nan, 0.0617237469323875], 'false': [nan, 0.0617237469323875], 'false,false': [nan, 0.0617237469323875], 'false,false,false': [0.05974909908513423, 0.07902176956248083]}
{'': [nan, 0.060308587971279075], 'false': [nan, 0.060308587971278714], 'false,false': [0.05686495251623548, 0.11130087178698903], 'false,false,false': [nan, 0.11130087178698903], 'false,false,true': [0.010792939733875186, 5.366761803020911e-07]}
{'': [nan, 0.04951528542105023], 'false': [nan, 0.04951528542105019], 'false,false': [nan, 0.04951528542105023]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 24.427
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.8337586911970727;  // std dev = 0.988, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.1418510649004884;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then if ( follows(C, D), follows(D, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.7026710653321654;  // std dev = 0.990, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.472583356503169;  // std dev = 1.220, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.728168731066791;  // std dev = 0.083, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.12544463852839133;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.7293241844216448;  // std dev = 0.055, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12544463852839136;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.765057022843468;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1254446385283913;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.258609020898584;  // std dev = 0.421, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5699178511712173;  // std dev = 0.147, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.5673516510830255;  // std dev = 0.038, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.24815172747002676;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.10012482779118416;  // std dev = 1.058, 97.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=2 */
%   | | | else return -0.0011374118771184305;  // std dev = 1.926, 60.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=10 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.09471461813567247;  // std dev = 1.502, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | | else return 0.18638102908833265;  // std dev = 1.696, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.42606016894466453;  // std dev = 0.074, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.34039172608902374;  // std dev = 0.929, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.44917464755420977;  // std dev = 0.118, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5711857009202709;  // std dev = 0.188, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.1136893471687605;  // std dev = 0.286, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4115912847606489;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.1027145247432478;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.32960149967452074;  // std dev = 0.140, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( follows(E, C), follows(A, E) )
%   | | then return -0.005895357540928921;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3447964180949338;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return -0.15074302355982122;  // std dev = 1.192, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.38540253811926417;  // std dev = 0.171, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.09557394489664675;  // std dev = 0.053, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.36543461926697346;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03341240868807005;  // std dev = 1.154, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | | else return 0.13248082681726298;  // std dev = 1.268, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.26131317790751807;  // std dev = 0.099, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.1735812158983212;  // std dev = 0.959, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(D, F), tweets(A, G) )
%   | | | then return 0.2519074476263388;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09712793481135511;  // std dev = 1.077, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.3061472579985218;  // std dev = 0.068, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.25000535007701985;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.35952666880336864;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.41097953914840496;  // std dev = 0.124, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.0976002765295011;  // std dev = 0.335, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.1484349369337993;  // std dev = 1.289, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | | else return 0.21166291857203168;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.21335712694861436;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.23374530171697125;  // std dev = 0.032, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07037159500348068;  // std dev = 0.067, 126.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=2 */
%   | | else return -0.016193843116254727;  // std dev = 0.163, 62.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.11294098529153525;  // std dev = 1.045, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.027941171511082812;  // std dev = 1.100, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | | else return 0.015316552699034144;  // std dev = 1.154, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.1910405295116777;  // std dev = 0.018, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return 0.045465127103857306;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return -0.06751035817086284;  // std dev = 0.937, 98.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=2 */
%   | | | else return -0.10651654236687239;  // std dev = 0.455, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, E), tweets(A, H) )
%   | | | then return 0.021202461810317937;  // std dev = 0.925, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | | | else return -0.049027300258318494;  // std dev = 0.553, 29.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.28449882365705575;  // std dev = 0.115, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.014910544303284604;  // std dev = 0.908, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | | else return 0.14797628955437034;  // std dev = 0.832, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.14325943780796638;  // std dev = 0.952, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | | else return 0.04694181576785279;  // std dev = 0.963, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.22529889526617186;  // std dev = 0.127, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2946215675074226;  // std dev = 0.313, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(H, A) )
%   | | then return -0.07270051810660752;  // std dev = 0.082, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.10389114561598248;  // std dev = 0.005, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.17382019334441634;  // std dev = 0.114, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.1641320260286696;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.06906179410823077;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.1077675482397113;  // std dev = 0.973, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.13461991700556525;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.13559993197416803;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.155468609358045;  // std dev = 0.022, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(F, A) )
%   | then return -0.03828070168927379;  // std dev = 0.091, 165.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=17 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.22393348196777937;  // std dev = 0.128, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09685218860915645;  // std dev = 0.032, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.020606475525586157;  // std dev = 0.519, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return -0.07577293292726035;  // std dev = 0.960, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '29.597', 'seconds']
Refined model CLL: -0.10086


******************************************
Best model found
******************************************
Results 

CLL : -0.102981 

AUC ROC : 0.995771 

AUC PR : 0.473328 

Precision : 0.34434 

Recall : 0.935897 

F1 : 0.503448 

Total Learning Time : 24.427 

Total Inference Time : 25.76059341430664 

Total revision time: 54.90489872741699
Best scored revision CLL: -0.10086


Results 

CLL : -0.102981 

AUC ROC : 0.995771 

AUC PR : 0.473328 

Precision : 0.34434 

Recall : 0.935897 

F1 : 0.503448 

Total Learning Time : 60.064838970184326 

Total Inference Time : 25.76059341430664 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.148
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.8281489350995114;  // std dev = 1.706, 100.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=97 */
%   | | else return 0.7936328060672536;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14918958103575886;  // std dev = 7.894, 389.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.1331347543435448;  // std dev = 7.470, 359.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=118 */
%   | | | else return 0.15443189107067742;  // std dev = 1.922, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.6428981302121571;  // std dev = 1.714, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | else return -0.15982553810463934;  // std dev = 2.19e-07, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
%   else if ( tweets(E, A), follows(E, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13686215867335697;  // std dev = 1.859, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05857644267653183;  // std dev = 5.235, 282.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=89 */
%   | | else return 0.10644968178488926;  // std dev = 0.341, 99.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4654760355898442;  // std dev = 2.183, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15293508856533827;  // std dev = 0.218, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.054656776559533195;  // std dev = 4.182, 269.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03646454021740714;  // std dev = 2.319, 84.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.012445210338120969;  // std dev = 4.922, 373.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=118 */
%   | | | else return 0.09430769034313445;  // std dev = 1.420, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3426299962017815;  // std dev = 1.710, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | | | else return -0.13739391201443937;  // std dev = 0.026, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | | else if ( tweets(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01892516290881555;  // std dev = 1.503, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01121862317792815;  // std dev = 4.150, 379.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.495', 'seconds']
Parameter learned model CLL:-0.155211 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'recursion_accounttype(D, B)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.706, 3, 97], 'false,true,false': [1.368, 2, 29], 'false,false': [0.0, 249, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.894, 263, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.47, 241, 118], 'false,false,false,false': [1.922, 14, 8]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, A), follows(E, F)', 'false,false': 'tweets(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, A)'}, {'true,true': [1.714, 3, 118], 'true,false': [2.19e-07, 260, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.859, 14, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)', 'false,false,true': 'tweets(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.235, 193, 89], 'false,false,false': [0.341, 62, 37]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.183, 5, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.218, 224, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.182, 172, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.319, 55, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.922, 255, 118], 'false,false,false,false': [1.42, 11, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false,false': 'tweets(G, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.71, 3, 118], 'false,false,true,false': [0.026, 258, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.503, 16, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'tweets(A, D), recursion_accounttype(D, B)', 'false,false': 'tweets(E, A), tweets(E, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.15, 253, 126]}]
{'': [nan, 0.2216343490304736], 'false': [0.03671114736903867, -1.319783193931913e-16], 'false,true': [0.029100000000001527, 0.06035379812695236]}
{'': [nan, 0.1602002468394854], 'false': [nan, 0.1602002468394901], 'false,false': [nan, 0.1602002468394854], 'false,false,false': [nan, 0.1602002468394901]}
{'': [nan, 0.15619709945919366], 'false': [nan, 0.1561970994591944], 'false,false': [nan, 0.1561970994591944], 'false,false,false': [0.1554494291739073, 0.1679703413618912]}
{'': [0.14736097116001476, 0.15704700426841917], 'false': [nan, 0.15704700426841917], 'false,false': [nan, 0.15704700426841917], 'false,false,false': [nan, 0.15704700426841917], 'true': [0.024280036968242533, 1.8446782563002602e-16]}
{'': [nan, 0.10257572318174679], 'false': [nan, 0.10257572318174703], 'false,false': [0.09717144456938044, 0.11627340120845504], 'false,false,true': [nan, 0.09717144456938044]}
{'': [nan, 0.10260465031515759], 'false': [nan, 0.10260465031515759], 'false,false': [0.0363795322928238, 0.00021160655490391558], 'false,false,false': [nan, 0.0002116065549039711]}
{'': [0.06502084100389868, 0.06403298345902315], 'true': [nan, 0.06502084100389868], 'false': [nan, 0.06403298345902315], 'false,false': [nan, 0.06403298345902315], 'false,false,false': [nan, 0.06403298345902315]}
{'': [nan, 0.06724395695867284], 'false': [nan, 0.06724395695867284], 'false,false': [nan, 0.06724395695867284], 'false,false,false': [0.06494117228078422, 0.10607460646513404]}
{'': [nan, 0.059955700857716725], 'false': [nan, 0.059955700857716385], 'false,false': [0.05779255079041043, 0.09410660479489186], 'false,false,false': [nan, 0.09410660479489186], 'false,false,true': [0.02415603646790885, 2.7037883566410603e-06]}
{'': [nan, 0.04544972648113308], 'false': [nan, 0.04544972648113342], 'false,false': [nan, 0.04544972648113308]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- follows(A, E).;true;true
8;true;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
Model training time 13.412
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(D, A), tweets(D, F) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.141851064900488;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.7219191032677945;  // std dev = 0.125, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.12544463852839163;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109544;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.12544463852839136;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.11394880918109021;  // std dev = 2.949, 60.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5577615434085168;  // std dev = 0.164, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5711923067625949;  // std dev = 0.070, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3170848374769169;  // std dev = 0.881, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.10248854725384417;  // std dev = 1.196, 170.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=3 */
%   | | | else return 0.012874149607623276;  // std dev = 2.085, 64.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=12 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.11824996044110543;  // std dev = 1.964, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.1503422509839283;  // std dev = 2.024, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.40682696907693483;  // std dev = 0.890, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | | else return 0.2979264120378654;  // std dev = 1.357, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.4169312191521741;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.6155965794325744;  // std dev = 0.310, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.11752003975732085;  // std dev = 0.308, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4169312191521741;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10249687879546558;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.3217432318258972;  // std dev = 0.004, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return 0.2739701377043763;  // std dev = 0.213, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return 0.33812647469389373;  // std dev = 0.154, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.38894321904635615;  // std dev = 0.137, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.0948911542474595;  // std dev = 0.062, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3957097016341811;  // std dev = 1.069, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.13857547323638994;  // std dev = 1.05e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.03299882303665641;  // std dev = 1.127, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.019387543819119512;  // std dev = 1.374, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2619159135299331;  // std dev = 0.153, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | | | else return -0.04003769995133455;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2844120888544098;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.3010188751765013;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3836534008724196;  // std dev = 0.750, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.47509597886458477;  // std dev = 0.121, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09654609383235555;  // std dev = 0.297, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.21353725659297365;  // std dev = 0.139, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else return 0.09600495476167235;  // std dev = 0.312, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07475685804747555;  // std dev = 0.072, 153.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.24552039904781883;  // std dev = 0.113, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.08600820924907848;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2587369563283208;  // std dev = 1.008, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.11924643599977676;  // std dev = 0.049, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07054259508052413;  // std dev = 0.560, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.018572061500384675;  // std dev = 1.276, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then return 0.17626607139939376;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.01664348580738469;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.17971311832741124;  // std dev = 0.017, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.1901553088851341;  // std dev = 0.116, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.17269302829392055;  // std dev = 0.204, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.07469112550858538;  // std dev = 0.050, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.23073766128640782;  // std dev = 0.115, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.012210569524550081;  // std dev = 0.976, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.058431553469423775;  // std dev = 1.193, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.13379108051041025;  // std dev = 1.676, 98.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=95 */
%   | | | else return -0.10499420076275334;  // std dev = 0.677, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.19297623674366743;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.32643112693824494;  // std dev = 0.154, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.08146984250898674;  // std dev = 0.343, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.16348227750665217;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.06829584772021965;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1356487847826795;  // std dev = 1.49e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.025380771776914297;  // std dev = 1.332, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else if ( tweets(C, D) )
%   | | | then return -0.3358748716266527;  // std dev = 1.035, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.14204282549247885;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.14095013920142271;  // std dev = 0.096, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.15179250496409782;  // std dev = 0.077, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.06847538263866002;  // std dev = 0.844, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return -0.04700768535542929;  // std dev = 0.063, 208.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=15 */
%   | | else return -0.020646190238106973;  // std dev = 0.157, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.289', 'seconds']
Refined model CLL: -0.099303


******************************************
Best model found
******************************************
Results 

CLL : -0.099894 

AUC ROC : 0.994752 

AUC PR : 0.424012 

Precision : 0.34375 

Recall : 0.916667 

F1 : 0.5 

Total Learning Time : 13.412 

Total Inference Time : 10.539191246032715 

Total revision time: 29.691615400314333
Best scored revision CLL: -0.099303


Results 

CLL : -0.099894 

AUC ROC : 0.994752 

AUC PR : 0.424012 

Precision : 0.34375 

Recall : 0.916667 

F1 : 0.5 

Total Learning Time : 34.85155564308167 

Total Inference Time : 10.539191246032715 

